
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000505c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080051fc  080051fc  000061fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080053f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000074  0800546c  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800546c  000074fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109f7  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235b  00000000  00000000  00017a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00019df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c68  00000000  00000000  0001ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015470  00000000  00000000  0001ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fa3  00000000  00000000  00030e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090766  00000000  00000000  00043e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000d45c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d8e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051e4 	.word	0x080051e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080051e4 	.word	0x080051e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b092      	sub	sp, #72	@ 0x48
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f8e3 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f885 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb79 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ce:	f000 fb4d 	bl	8000c6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005d2:	f000 f9c5 	bl	8000960 <MX_TIM2_Init>
  MX_I2C3_Init();
 80005d6:	f000 f913 	bl	8000800 <MX_I2C3_Init>
  MX_TIM1_Init();
 80005da:	f000 f93f 	bl	800085c <MX_TIM1_Init>
  MX_TIM3_Init();
 80005de:	f000 fa13 	bl	8000a08 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 fa8b 	bl	8000afc <MX_TIM4_Init>
  MX_TIM5_Init();
 80005e6:	f000 fadd 	bl	8000ba4 <MX_TIM5_Init>
  MX_I2C2_Init();
 80005ea:	f000 f8db 	bl	80007a4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 80005ee:	210c      	movs	r1, #12
 80005f0:	4830      	ldr	r0, [pc, #192]	@ (80006b4 <main+0xf8>)
 80005f2:	f002 fa6b 	bl	8002acc <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 80005f6:	213c      	movs	r1, #60	@ 0x3c
 80005f8:	482f      	ldr	r0, [pc, #188]	@ (80006b8 <main+0xfc>)
 80005fa:	f002 fc0b 	bl	8002e14 <HAL_TIM_Encoder_Start_IT>
  /*HAL_TIM_ENCODER_Start_IT(&htim2,TIM_CHANNEL_2);*/

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80005fe:	2100      	movs	r1, #0
 8000600:	482e      	ldr	r0, [pc, #184]	@ (80006bc <main+0x100>)
 8000602:	f002 fa63 	bl	8002acc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000606:	2104      	movs	r1, #4
 8000608:	482c      	ldr	r0, [pc, #176]	@ (80006bc <main+0x100>)
 800060a:	f002 fa5f 	bl	8002acc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 800060e:	2108      	movs	r1, #8
 8000610:	482a      	ldr	r0, [pc, #168]	@ (80006bc <main+0x100>)
 8000612:	f002 fa5b 	bl	8002acc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8000616:	210c      	movs	r1, #12
 8000618:	4828      	ldr	r0, [pc, #160]	@ (80006bc <main+0x100>)
 800061a:	f002 fa57 	bl	8002acc <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 800061e:	213c      	movs	r1, #60	@ 0x3c
 8000620:	4827      	ldr	r0, [pc, #156]	@ (80006c0 <main+0x104>)
 8000622:	f002 fbf7 	bl	8002e14 <HAL_TIM_Encoder_Start_IT>
  /*HAL_TIM_ENCODER_Start_IT(&htim4,TIM_CHANNEL_2);*/


  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
 8000626:	2108      	movs	r1, #8
 8000628:	4826      	ldr	r0, [pc, #152]	@ (80006c4 <main+0x108>)
 800062a:	f002 fa4f 	bl	8002acc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);
 800062e:	210c      	movs	r1, #12
 8000630:	4824      	ldr	r0, [pc, #144]	@ (80006c4 <main+0x108>)
 8000632:	f002 fa4b 	bl	8002acc <HAL_TIM_PWM_Start_IT>



  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	4923      	ldr	r1, [pc, #140]	@ (80006c8 <main+0x10c>)
 800063a:	4824      	ldr	r0, [pc, #144]	@ (80006cc <main+0x110>)
 800063c:	f003 f933 	bl	80038a6 <HAL_UART_Receive_IT>

  int16_t last_count1 = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  int16_t last_count2 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	/*char msg[] = "Hello from STM32\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg) - 1, HAL_MAX_DELAY);
	HAL_Delay(1000);
	*/

	int16_t current_count1 = __HAL_TIM_GET_COUNTER(&htim2); // Encoder 1 (e.g., motor 1)
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <main+0xfc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000652:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	int16_t current_count2 = __HAL_TIM_GET_COUNTER(&htim4); // Encoder 2 (e.g., motor 2)
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <main+0x104>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800065c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

	if (current_count1 != last_count1 || current_count2 != last_count2) {
 8000660:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8000664:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000668:	429a      	cmp	r2, r3
 800066a:	d105      	bne.n	8000678 <main+0xbc>
 800066c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8000670:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000674:	429a      	cmp	r2, r3
 8000676:	d0e9      	beq.n	800064c <main+0x90>
	     char msg[64];
	     sprintf(msg, "Enc1: %d\tEnc2: %d\r\n", current_count1, current_count2);
 8000678:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800067c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000680:	4638      	mov	r0, r7
 8000682:	4913      	ldr	r1, [pc, #76]	@ (80006d0 <main+0x114>)
 8000684:	f004 f90e 	bl	80048a4 <siprintf>
	     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000688:	463b      	mov	r3, r7
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fda8 	bl	80001e0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	4639      	mov	r1, r7
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	480c      	ldr	r0, [pc, #48]	@ (80006cc <main+0x110>)
 800069c:	f003 f878 	bl	8003790 <HAL_UART_Transmit>

	     last_count1 = current_count1;
 80006a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80006a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	     last_count2 = current_count2;
 80006a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80006ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  {
 80006b0:	e7cc      	b.n	800064c <main+0x90>
 80006b2:	bf00      	nop
 80006b4:	20000138 	.word	0x20000138
 80006b8:	20000180 	.word	0x20000180
 80006bc:	200001c8 	.word	0x200001c8
 80006c0:	20000210 	.word	0x20000210
 80006c4:	20000258 	.word	0x20000258
 80006c8:	20000328 	.word	0x20000328
 80006cc:	200002a0 	.word	0x200002a0
 80006d0:	080051fc 	.word	0x080051fc

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 f900 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a26      	ldr	r2, [pc, #152]	@ (800079c <SystemClock_Config+0xc8>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b24      	ldr	r3, [pc, #144]	@ (800079c <SystemClock_Config+0xc8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a20      	ldr	r2, [pc, #128]	@ (80007a0 <SystemClock_Config+0xcc>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000748:	2360      	movs	r3, #96	@ 0x60
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fd0f 	bl	800217c <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 fc8a 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2103      	movs	r1, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f001 ff71 	bl	800266c <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000790:	f000 fc74 	bl	800107c <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	@ 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_I2C2_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_I2C2_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_I2C2_Init+0x50>)
 80007e2:	f001 fb87 	bl	8001ef4 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 fc46 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000090 	.word	0x20000090
 80007f8:	40005800 	.word	0x40005800
 80007fc:	000186a0 	.word	0x000186a0

08000800 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_I2C3_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <MX_I2C3_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_I2C3_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_I2C3_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_I2C3_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_I2C3_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_I2C3_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <MX_I2C3_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_I2C3_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <MX_I2C3_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_I2C3_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_I2C3_Init+0x50>)
 800083e:	f001 fb59 	bl	8001ef4 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 fc18 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000e4 	.word	0x200000e4
 8000854:	40005c00 	.word	0x40005c00
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b092      	sub	sp, #72	@ 0x48
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 f82e 	bl	80048e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800088c:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <MX_TIM1_Init+0xfc>)
 800088e:	4a33      	ldr	r2, [pc, #204]	@ (800095c <MX_TIM1_Init+0x100>)
 8000890:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 28;
 8000892:	4b31      	ldr	r3, [pc, #196]	@ (8000958 <MX_TIM1_Init+0xfc>)
 8000894:	221c      	movs	r2, #28
 8000896:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <MX_TIM1_Init+0xfc>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800089e:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <MX_TIM1_Init+0xfc>)
 80008a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <MX_TIM1_Init+0xfc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_TIM1_Init+0xfc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <MX_TIM1_Init+0xfc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b8:	4827      	ldr	r0, [pc, #156]	@ (8000958 <MX_TIM1_Init+0xfc>)
 80008ba:	f002 f8b7 	bl	8002a2c <HAL_TIM_PWM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008c4:	f000 fbda 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008d4:	4619      	mov	r1, r3
 80008d6:	4820      	ldr	r0, [pc, #128]	@ (8000958 <MX_TIM1_Init+0xfc>)
 80008d8:	f002 fe4a 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008e2:	f000 fbcb 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	@ 0x60
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000902:	220c      	movs	r2, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4814      	ldr	r0, [pc, #80]	@ (8000958 <MX_TIM1_Init+0xfc>)
 8000908:	f002 fb32 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000912:	f000 fbb3 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	@ (8000958 <MX_TIM1_Init+0xfc>)
 800093a:	f002 fe87 	bl	800364c <HAL_TIMEx_ConfigBreakDeadTime>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000944:	f000 fb9a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_TIM1_Init+0xfc>)
 800094a:	f000 fd9b 	bl	8001484 <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3748      	adds	r7, #72	@ 0x48
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000138 	.word	0x20000138
 800095c:	40010000 	.word	0x40010000

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2224      	movs	r2, #36	@ 0x24
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 ffba 	bl	80048e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 80009d0:	f002 f97a 	bl	8002cc8 <HAL_TIM_Encoder_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009da:	f000 fb4f 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <MX_TIM2_Init+0xa4>)
 80009ec:	f002 fdc0 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009f6:	f000 fb41 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	@ 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000180 	.word	0x20000180

08000a08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a2a:	4b32      	ldr	r3, [pc, #200]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a2c:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <MX_TIM3_Init+0xf0>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a30:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a50:	4828      	ldr	r0, [pc, #160]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a52:	f001 ffeb 	bl	8002a2c <HAL_TIM_PWM_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 fb0e 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4821      	ldr	r0, [pc, #132]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a70:	f002 fd7e 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a7a:	f000 faff 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7e:	2360      	movs	r3, #96	@ 0x60
 8000a80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	4619      	mov	r1, r3
 8000a94:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000a96:	f002 fa6b 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000aa0:	f000 faec 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000aac:	f002 fa60 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ab6:	f000 fae1 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2208      	movs	r2, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000ac2:	f002 fa55 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000acc:	f000 fad6 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000ad8:	f002 fa4a 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000ae2:	f000 facb 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ae6:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <MX_TIM3_Init+0xec>)
 8000ae8:	f000 fccc 	bl	8001484 <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	@ 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200001c8 	.word	0x200001c8
 8000af8:	40000400 	.word	0x40000400

08000afc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2224      	movs	r2, #36	@ 0x24
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 feec 	bl	80048e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ba0 <MX_TIM4_Init+0xa4>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b56:	2301      	movs	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b6a:	f002 f8ad 	bl	8002cc8 <HAL_TIM_Encoder_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b74:	f000 fa82 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_TIM4_Init+0xa0>)
 8000b86:	f002 fcf3 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b90:	f000 fa74 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	@ 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000210 	.word	0x20000210
 8000ba0:	40000800 	.word	0x40000800

08000ba4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000bc8:	4a27      	ldr	r2, [pc, #156]	@ (8000c68 <MX_TIM5_Init+0xc4>)
 8000bca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bde:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000bec:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000bee:	f001 ff1d 	bl	8002a2c <HAL_TIM_PWM_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 fa40 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4816      	ldr	r0, [pc, #88]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000c0c:	f002 fcb0 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000c16:	f000 fa31 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1a:	2360      	movs	r3, #96	@ 0x60
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000c32:	f002 f99d 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000c3c:	f000 fa1e 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	220c      	movs	r2, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000c48:	f002 f992 	bl	8002f70 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000c52:	f000 fa13 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c56:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <MX_TIM5_Init+0xc0>)
 8000c58:	f000 fc14 	bl	8001484 <HAL_TIM_MspPostInit>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	@ 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000258 	.word	0x20000258
 8000c68:	40000c00 	.word	0x40000c00

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <MX_USART1_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f002 fd24 	bl	80036f0 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f9e5 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002a0 	.word	0x200002a0
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b38      	ldr	r3, [pc, #224]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a37      	ldr	r2, [pc, #220]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a30      	ldr	r2, [pc, #192]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <MX_GPIO_Init+0xfc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8000d4c:	481c      	ldr	r0, [pc, #112]	@ (8000dc0 <MX_GPIO_Init+0x100>)
 8000d4e:	f001 f8b7 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d58:	481a      	ldr	r0, [pc, #104]	@ (8000dc4 <MX_GPIO_Init+0x104>)
 8000d5a:	f001 f8b1 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4815      	ldr	r0, [pc, #84]	@ (8000dc8 <MX_GPIO_Init+0x108>)
 8000d74:	f000 ff20 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000d78:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <MX_GPIO_Init+0x100>)
 8000d92:	f000 ff11 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_GPIO_Init+0x104>)
 8000db0:	f000 ff02 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020800 	.word	0x40020800

08000dcc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a98      	ldr	r2, [pc, #608]	@ (800103c <HAL_UART_RxCpltCallback+0x270>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f040 8129 	bne.w	8001032 <HAL_UART_RxCpltCallback+0x266>
    {
        char c = rx_buf[0];
 8000de0:	4b97      	ldr	r3, [pc, #604]	@ (8001040 <HAL_UART_RxCpltCallback+0x274>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	76bb      	strb	r3, [r7, #26]
        static char cmd_buffer[64];
        static uint8_t cmd_index = 0;

        if (c == '\r' || c == '\n')  // End of command
 8000de6:	7ebb      	ldrb	r3, [r7, #26]
 8000de8:	2b0d      	cmp	r3, #13
 8000dea:	d003      	beq.n	8000df4 <HAL_UART_RxCpltCallback+0x28>
 8000dec:	7ebb      	ldrb	r3, [r7, #26]
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	f040 810c 	bne.w	800100c <HAL_UART_RxCpltCallback+0x240>
        {
            cmd_buffer[cmd_index] = '\0';
 8000df4:	4b93      	ldr	r3, [pc, #588]	@ (8001044 <HAL_UART_RxCpltCallback+0x278>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b93      	ldr	r3, [pc, #588]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	5499      	strb	r1, [r3, r2]

            if (cmd_index >= 4)
 8000e00:	4b90      	ldr	r3, [pc, #576]	@ (8001044 <HAL_UART_RxCpltCallback+0x278>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f240 80f6 	bls.w	8000ff6 <HAL_UART_RxCpltCallback+0x22a>
            {
                if (cmd_buffer[0] == 'M')
 8000e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000e10:	d175      	bne.n	8000efe <HAL_UART_RxCpltCallback+0x132>
                {
                    // Motor command
                    if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8000e12:	4b8d      	ldr	r3, [pc, #564]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	2b30      	cmp	r3, #48	@ 0x30
 8000e18:	d903      	bls.n	8000e22 <HAL_UART_RxCpltCallback+0x56>
 8000e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	2b32      	cmp	r3, #50	@ 0x32
 8000e20:	d907      	bls.n	8000e32 <HAL_UART_RxCpltCallback+0x66>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Motor Number\r\n", 23, 1000);
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	2217      	movs	r2, #23
 8000e28:	4988      	ldr	r1, [pc, #544]	@ (800104c <HAL_UART_RxCpltCallback+0x280>)
 8000e2a:	4889      	ldr	r0, [pc, #548]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8000e2c:	f002 fcb0 	bl	8003790 <HAL_UART_Transmit>
 8000e30:	e0e8      	b.n	8001004 <HAL_UART_RxCpltCallback+0x238>
                    } else {
                        uint8_t motor_num = cmd_buffer[1] - '0';
 8000e32:	4b85      	ldr	r3, [pc, #532]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000e34:	785b      	ldrb	r3, [r3, #1]
 8000e36:	3b30      	subs	r3, #48	@ 0x30
 8000e38:	757b      	strb	r3, [r7, #21]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8000e3a:	4b83      	ldr	r3, [pc, #524]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	743b      	strb	r3, [r7, #16]
 8000e40:	4b81      	ldr	r3, [pc, #516]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000e42:	78db      	ldrb	r3, [r3, #3]
 8000e44:	747b      	strb	r3, [r7, #17]
 8000e46:	2300      	movs	r3, #0
 8000e48:	74bb      	strb	r3, [r7, #18]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	2210      	movs	r2, #16
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 fd1c 	bl	8004890 <strtol>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	77fb      	strb	r3, [r7, #31]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 8000e5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e60:	2b64      	cmp	r3, #100	@ 0x64
 8000e62:	dd01      	ble.n	8000e68 <HAL_UART_RxCpltCallback+0x9c>
 8000e64:	2364      	movs	r3, #100	@ 0x64
 8000e66:	77fb      	strb	r3, [r7, #31]
                        if (duty < -100) duty = -100;
 8000e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e6c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000e70:	da01      	bge.n	8000e76 <HAL_UART_RxCpltCallback+0xaa>
 8000e72:	239c      	movs	r3, #156	@ 0x9c
 8000e74:	77fb      	strb	r3, [r7, #31]
                        int16_t pulse = (duty * 4799) / 100;
 8000e76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e7a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	4a74      	ldr	r2, [pc, #464]	@ (8001054 <HAL_UART_RxCpltCallback+0x288>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1152      	asrs	r2, r2, #5
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	83bb      	strh	r3, [r7, #28]
                        if (pulse < 0) pulse = -pulse;
 8000e90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da03      	bge.n	8000ea0 <HAL_UART_RxCpltCallback+0xd4>
 8000e98:	8bbb      	ldrh	r3, [r7, #28]
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	83bb      	strh	r3, [r7, #28]

                        if (motor_num == 1)
 8000ea0:	7d7b      	ldrb	r3, [r7, #21]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_UART_RxCpltCallback+0xf4>
                            set_duty(&motor_1, (duty >= 0) ? pulse : 0);
 8000ea6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db02      	blt.n	8000eb4 <HAL_UART_RxCpltCallback+0xe8>
 8000eae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000eb2:	e000      	b.n	8000eb6 <HAL_UART_RxCpltCallback+0xea>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4867      	ldr	r0, [pc, #412]	@ (8001058 <HAL_UART_RxCpltCallback+0x28c>)
 8000eba:	f000 f8e5 	bl	8001088 <set_duty>
 8000ebe:	e00b      	b.n	8000ed8 <HAL_UART_RxCpltCallback+0x10c>
                        else
                            set_duty(&motor_2, (duty >= 0) ? pulse : 0);
 8000ec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db02      	blt.n	8000ece <HAL_UART_RxCpltCallback+0x102>
 8000ec8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ecc:	e000      	b.n	8000ed0 <HAL_UART_RxCpltCallback+0x104>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4862      	ldr	r0, [pc, #392]	@ (800105c <HAL_UART_RxCpltCallback+0x290>)
 8000ed4:	f000 f8d8 	bl	8001088 <set_duty>

                        sprintf((char*)tx_buf, "Motor %d set to duty %d\r\n", motor_num, duty);
 8000ed8:	7d7a      	ldrb	r2, [r7, #21]
 8000eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ede:	4960      	ldr	r1, [pc, #384]	@ (8001060 <HAL_UART_RxCpltCallback+0x294>)
 8000ee0:	4860      	ldr	r0, [pc, #384]	@ (8001064 <HAL_UART_RxCpltCallback+0x298>)
 8000ee2:	f003 fcdf 	bl	80048a4 <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8000ee6:	485f      	ldr	r0, [pc, #380]	@ (8001064 <HAL_UART_RxCpltCallback+0x298>)
 8000ee8:	f7ff f97a 	bl	80001e0 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef4:	495b      	ldr	r1, [pc, #364]	@ (8001064 <HAL_UART_RxCpltCallback+0x298>)
 8000ef6:	4856      	ldr	r0, [pc, #344]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8000ef8:	f002 fc4a 	bl	8003790 <HAL_UART_Transmit>
 8000efc:	e082      	b.n	8001004 <HAL_UART_RxCpltCallback+0x238>
                    }
                }
                else if (cmd_buffer[0] == 'S')
 8000efe:	4b52      	ldr	r3, [pc, #328]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b53      	cmp	r3, #83	@ 0x53
 8000f04:	d16f      	bne.n	8000fe6 <HAL_UART_RxCpltCallback+0x21a>
                {
                    // Servo command
                    if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8000f06:	4b50      	ldr	r3, [pc, #320]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000f08:	785b      	ldrb	r3, [r3, #1]
 8000f0a:	2b30      	cmp	r3, #48	@ 0x30
 8000f0c:	d903      	bls.n	8000f16 <HAL_UART_RxCpltCallback+0x14a>
 8000f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	2b32      	cmp	r3, #50	@ 0x32
 8000f14:	d907      	bls.n	8000f26 <HAL_UART_RxCpltCallback+0x15a>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Servo Number\r\n", 23, 1000);
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	2217      	movs	r2, #23
 8000f1c:	4952      	ldr	r1, [pc, #328]	@ (8001068 <HAL_UART_RxCpltCallback+0x29c>)
 8000f1e:	484c      	ldr	r0, [pc, #304]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8000f20:	f002 fc36 	bl	8003790 <HAL_UART_Transmit>
 8000f24:	e06e      	b.n	8001004 <HAL_UART_RxCpltCallback+0x238>
                    } else {
                        uint8_t servo_num = cmd_buffer[1] - '0';
 8000f26:	4b48      	ldr	r3, [pc, #288]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	3b30      	subs	r3, #48	@ 0x30
 8000f2c:	767b      	strb	r3, [r7, #25]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8000f2e:	4b46      	ldr	r3, [pc, #280]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000f30:	789b      	ldrb	r3, [r3, #2]
 8000f32:	733b      	strb	r3, [r7, #12]
 8000f34:	4b44      	ldr	r3, [pc, #272]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	737b      	strb	r3, [r7, #13]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73bb      	strb	r3, [r7, #14]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2210      	movs	r2, #16
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fca2 	bl	8004890 <strtol>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	76fb      	strb	r3, [r7, #27]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 8000f50:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000f54:	2b64      	cmp	r3, #100	@ 0x64
 8000f56:	dd01      	ble.n	8000f5c <HAL_UART_RxCpltCallback+0x190>
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	76fb      	strb	r3, [r7, #27]
                        if (duty < -100) duty = 100;
 8000f5c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000f60:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000f64:	da01      	bge.n	8000f6a <HAL_UART_RxCpltCallback+0x19e>
 8000f66:	2364      	movs	r3, #100	@ 0x64
 8000f68:	76fb      	strb	r3, [r7, #27]
                        // int16_t pulse_us = (duty * 5) + 1500;
                        int16_t pulse = duty * (8275 - 1655) / 100 + 1655;
 8000f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000f6e:	f641 12dc 	movw	r2, #6620	@ 0x19dc
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a37      	ldr	r2, [pc, #220]	@ (8001054 <HAL_UART_RxCpltCallback+0x288>)
 8000f78:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7c:	1152      	asrs	r2, r2, #5
 8000f7e:	17db      	asrs	r3, r3, #31
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	f203 6377 	addw	r3, r3, #1655	@ 0x677
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	82fb      	strh	r3, [r7, #22]
                        if (pulse < 0) {
 8000f8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da06      	bge.n	8000fa2 <HAL_UART_RxCpltCallback+0x1d6>
                        	HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Duty\r\n", 23, 1000);
 8000f94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f98:	2217      	movs	r2, #23
 8000f9a:	4934      	ldr	r1, [pc, #208]	@ (800106c <HAL_UART_RxCpltCallback+0x2a0>)
 8000f9c:	482c      	ldr	r0, [pc, #176]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8000f9e:	f002 fbf7 	bl	8003790 <HAL_UART_Transmit>
                        }

                        if (servo_num == 1)
 8000fa2:	7e7b      	ldrb	r3, [r7, #25]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_UART_RxCpltCallback+0x1f4>
                            servo_duty(&servo_1, (duty >= 0) ? pulse : 0);
 8000fa8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db02      	blt.n	8000fb6 <HAL_UART_RxCpltCallback+0x1ea>
 8000fb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fb4:	e000      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x1ec>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482d      	ldr	r0, [pc, #180]	@ (8001070 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fbc:	f000 f892 	bl	80010e4 <servo_duty>
                        else
                            ; // placeholder for servo_2

                        sprintf((char*)tx_buf, "Servo %d set to duty %d\r\n", servo_num, duty);
 8000fc0:	7e7a      	ldrb	r2, [r7, #25]
 8000fc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fc6:	492b      	ldr	r1, [pc, #172]	@ (8001074 <HAL_UART_RxCpltCallback+0x2a8>)
 8000fc8:	4826      	ldr	r0, [pc, #152]	@ (8001064 <HAL_UART_RxCpltCallback+0x298>)
 8000fca:	f003 fc6b 	bl	80048a4 <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8000fce:	4825      	ldr	r0, [pc, #148]	@ (8001064 <HAL_UART_RxCpltCallback+0x298>)
 8000fd0:	f7ff f906 	bl	80001e0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	4921      	ldr	r1, [pc, #132]	@ (8001064 <HAL_UART_RxCpltCallback+0x298>)
 8000fde:	481c      	ldr	r0, [pc, #112]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8000fe0:	f002 fbd6 	bl	8003790 <HAL_UART_Transmit>
 8000fe4:	e00e      	b.n	8001004 <HAL_UART_RxCpltCallback+0x238>
                    }
                }
                else
                {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	2212      	movs	r2, #18
 8000fec:	4922      	ldr	r1, [pc, #136]	@ (8001078 <HAL_UART_RxCpltCallback+0x2ac>)
 8000fee:	4818      	ldr	r0, [pc, #96]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8000ff0:	f002 fbce 	bl	8003790 <HAL_UART_Transmit>
 8000ff4:	e006      	b.n	8001004 <HAL_UART_RxCpltCallback+0x238>
                }
            }
            else
            {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	2212      	movs	r2, #18
 8000ffc:	491e      	ldr	r1, [pc, #120]	@ (8001078 <HAL_UART_RxCpltCallback+0x2ac>)
 8000ffe:	4814      	ldr	r0, [pc, #80]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 8001000:	f002 fbc6 	bl	8003790 <HAL_UART_Transmit>
            }

            cmd_index = 0; // reset for next command
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_UART_RxCpltCallback+0x278>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e00d      	b.n	8001028 <HAL_UART_RxCpltCallback+0x25c>
        }
        else
        {
            if (cmd_index < sizeof(cmd_buffer) - 1)
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <HAL_UART_RxCpltCallback+0x278>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b3e      	cmp	r3, #62	@ 0x3e
 8001012:	d809      	bhi.n	8001028 <HAL_UART_RxCpltCallback+0x25c>
                cmd_buffer[cmd_index++] = c;
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_UART_RxCpltCallback+0x278>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	b2d1      	uxtb	r1, r2
 800101c:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <HAL_UART_RxCpltCallback+0x278>)
 800101e:	7011      	strb	r1, [r2, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <HAL_UART_RxCpltCallback+0x27c>)
 8001024:	7ebb      	ldrb	r3, [r7, #26]
 8001026:	5453      	strb	r3, [r2, r1]
        }

        // Continue receiving next character
        HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	4905      	ldr	r1, [pc, #20]	@ (8001040 <HAL_UART_RxCpltCallback+0x274>)
 800102c:	4808      	ldr	r0, [pc, #32]	@ (8001050 <HAL_UART_RxCpltCallback+0x284>)
 800102e:	f002 fc3a 	bl	80038a6 <HAL_UART_Receive_IT>
    }
}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40011000 	.word	0x40011000
 8001040:	20000328 	.word	0x20000328
 8001044:	20000368 	.word	0x20000368
 8001048:	2000036c 	.word	0x2000036c
 800104c:	08005210 	.word	0x08005210
 8001050:	200002a0 	.word	0x200002a0
 8001054:	51eb851f 	.word	0x51eb851f
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	08005228 	.word	0x08005228
 8001064:	200002e8 	.word	0x200002e8
 8001068:	08005244 	.word	0x08005244
 800106c:	0800525c 	.word	0x0800525c
 8001070:	20000010 	.word	0x20000010
 8001074:	0800526c 	.word	0x0800526c
 8001078:	08005288 	.word	0x08005288

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <set_duty>:
};




void set_duty(motor_t* motor, uint32_t pulse_1) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <set_duty+0x1e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010a4:	e018      	b.n	80010d8 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d105      	bne.n	80010ba <set_duty+0x32>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010b8:	e00e      	b.n	80010d8 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d105      	bne.n	80010ce <set_duty+0x46>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80010cc:	e004      	b.n	80010d8 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <servo_duty>:
servo_t servo_1 = {
	.PWM_CHANNEL = TIM_CHANNEL_4,
	.htim = &htim1
};

void servo_duty(servo_t* servo, uint32_t pulse_1) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <servo_duty+0x1e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001100:	e018      	b.n	8001134 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d105      	bne.n	8001116 <servo_duty+0x32>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001114:	e00e      	b.n	8001134 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d105      	bne.n	800112a <servo_duty+0x46>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001128:	e004      	b.n	8001134 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <HAL_MspInit+0x4c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_MspInit+0x4c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	@ 0x40
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	@ 0x30
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_I2C_MspInit+0x14c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d13e      	bne.n	8001230 <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a49      	ldr	r2, [pc, #292]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b47      	ldr	r3, [pc, #284]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e0:	2304      	movs	r3, #4
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	483e      	ldr	r0, [pc, #248]	@ (80012e4 <HAL_I2C_MspInit+0x154>)
 80011ec:	f000 fce4 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f6:	2312      	movs	r3, #18
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001202:	2309      	movs	r3, #9
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4835      	ldr	r0, [pc, #212]	@ (80012e4 <HAL_I2C_MspInit+0x154>)
 800120e:	f000 fcd3 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800122e:	e050      	b.n	80012d2 <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2c      	ldr	r2, [pc, #176]	@ (80012e8 <HAL_I2C_MspInit+0x158>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d14b      	bne.n	80012d2 <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a20      	ldr	r2, [pc, #128]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001284:	2304      	movs	r3, #4
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4817      	ldr	r0, [pc, #92]	@ (80012ec <HAL_I2C_MspInit+0x15c>)
 8001290:	f000 fc92 	bl	8001bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129a:	2312      	movs	r3, #18
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80012a6:	2309      	movs	r3, #9
 80012a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <HAL_I2C_MspInit+0x154>)
 80012b2:	f000 fc81 	bl	8001bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 80012c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_I2C_MspInit+0x150>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
}
 80012d2:	bf00      	nop
 80012d4:	3730      	adds	r7, #48	@ 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40005800 	.word	0x40005800
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40005c00 	.word	0x40005c00
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1f      	ldr	r2, [pc, #124]	@ (800137c <HAL_TIM_PWM_MspInit+0x8c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10e      	bne.n	8001320 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800131e:	e026      	b.n	800136e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	@ (8001384 <HAL_TIM_PWM_MspInit+0x94>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10e      	bne.n	8001348 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
}
 8001346:	e012      	b.n	800136e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <HAL_TIM_PWM_MspInit+0x98>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10d      	bne.n	800136e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <HAL_TIM_PWM_MspInit+0x90>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800
 8001384:	40000400 	.word	0x40000400
 8001388:	40000c00 	.word	0x40000c00

0800138c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	@ 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ac:	d12c      	bne.n	8001408 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b29      	ldr	r3, [pc, #164]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a28      	ldr	r2, [pc, #160]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80013e6:	2322      	movs	r3, #34	@ 0x22
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	481d      	ldr	r0, [pc, #116]	@ (8001478 <HAL_TIM_Encoder_MspInit+0xec>)
 8001402:	f000 fbd9 	bl	8001bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001406:	e030      	b.n	800146a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <HAL_TIM_Encoder_MspInit+0xf0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12b      	bne.n	800146a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	4a16      	ldr	r2, [pc, #88]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6413      	str	r3, [r2, #64]	@ 0x40
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144a:	23c0      	movs	r3, #192	@ 0xc0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800145a:	2302      	movs	r3, #2
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4806      	ldr	r0, [pc, #24]	@ (8001480 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001466:	f000 fba7 	bl	8001bb8 <HAL_GPIO_Init>
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	@ 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40000800 	.word	0x40000800
 8001480:	40020400 	.word	0x40020400

08001484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a36      	ldr	r2, [pc, #216]	@ (800157c <HAL_TIM_MspPostInit+0xf8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d11f      	bne.n	80014e6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b35      	ldr	r3, [pc, #212]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a34      	ldr	r2, [pc, #208]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4829      	ldr	r0, [pc, #164]	@ (8001584 <HAL_TIM_MspPostInit+0x100>)
 80014e0:	f000 fb6a 	bl	8001bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80014e4:	e046      	b.n	8001574 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a27      	ldr	r2, [pc, #156]	@ (8001588 <HAL_TIM_MspPostInit+0x104>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d11e      	bne.n	800152e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800150c:	2333      	movs	r3, #51	@ 0x33
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151c:	2302      	movs	r3, #2
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4819      	ldr	r0, [pc, #100]	@ (800158c <HAL_TIM_MspPostInit+0x108>)
 8001528:	f000 fb46 	bl	8001bb8 <HAL_GPIO_Init>
}
 800152c:	e022      	b.n	8001574 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a17      	ldr	r2, [pc, #92]	@ (8001590 <HAL_TIM_MspPostInit+0x10c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d11d      	bne.n	8001574 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	@ 0x30
 8001548:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_TIM_MspPostInit+0xfc>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001554:	230c      	movs	r3, #12
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001564:	2302      	movs	r3, #2
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_TIM_MspPostInit+0x100>)
 8001570:	f000 fb22 	bl	8001bb8 <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010000 	.word	0x40010000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40000400 	.word	0x40000400
 800158c:	40020400 	.word	0x40020400
 8001590:	40000c00 	.word	0x40000c00

08001594 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_UART_MspInit+0x94>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d134      	bne.n	8001620 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_UART_MspInit+0x98>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a1b      	ldr	r2, [pc, #108]	@ (800162c <HAL_UART_MspInit+0x98>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_UART_MspInit+0x98>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x98>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a14      	ldr	r2, [pc, #80]	@ (800162c <HAL_UART_MspInit+0x98>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_UART_MspInit+0x98>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80015ee:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001600:	2307      	movs	r3, #7
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4809      	ldr	r0, [pc, #36]	@ (8001630 <HAL_UART_MspInit+0x9c>)
 800160c:	f000 fad4 	bl	8001bb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2025      	movs	r0, #37	@ 0x25
 8001616:	f000 fa06 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800161a:	2025      	movs	r0, #37	@ 0x25
 800161c:	f000 fa1f 	bl	8001a5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	@ 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40011000 	.word	0x40011000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f000 f8d1 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <USART1_IRQHandler+0x10>)
 800169a:	f002 f929 	bl	80038f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200002a0 	.word	0x200002a0

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f003 f90e 	bl	80048f8 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20020000 	.word	0x20020000
 8001708:	00000400 	.word	0x00000400
 800170c:	200003ac 	.word	0x200003ac
 8001710:	20000500 	.word	0x20000500

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001770 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173c:	f7ff ffea 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	@ (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001766:	f003 f8cd 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7fe ff27 	bl	80005bc <main>
  bx  lr    
 800176e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800177c:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8001780:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001784:	200004fc 	.word	0x200004fc

08001788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <HAL_Init+0x40>)
 8001796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_Init+0x40>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_Init+0x40>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f92b 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	200f      	movs	r0, #15
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fcbe 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f943 	bl	8001a7a <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f90b 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000018 	.word	0x20000018
 8001828:	20000020 	.word	0x20000020
 800182c:	2000001c 	.word	0x2000001c

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000020 	.word	0x20000020
 8001854:	200003b0 	.word	0x200003b0

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	200003b0 	.word	0x200003b0

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	@ (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff3e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff31 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff feda 	bl	8001858 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d008      	beq.n	8001ac4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e052      	b.n	8001b6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0216 	bic.w	r2, r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ae2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <HAL_DMA_Abort+0x62>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0208 	bic.w	r2, r2, #8
 8001b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b14:	e013      	b.n	8001b3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b16:	f7ff fe9f 	bl	8001858 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d90c      	bls.n	8001b3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e015      	b.n	8001b6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e4      	bne.n	8001b16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	223f      	movs	r2, #63	@ 0x3f
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d004      	beq.n	8001b90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2280      	movs	r2, #128	@ 0x80
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e00c      	b.n	8001baa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2205      	movs	r2, #5
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e159      	b.n	8001e88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8148 	bne.w	8001e82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d130      	bne.n	8001c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d017      	beq.n	8001ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d123      	bne.n	8001cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a2 	beq.w	8001e82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b57      	ldr	r3, [pc, #348]	@ (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a56      	ldr	r2, [pc, #344]	@ (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ea0 <HAL_GPIO_Init+0x2e8>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5a:	4a52      	ldr	r2, [pc, #328]	@ (8001ea4 <HAL_GPIO_Init+0x2ec>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	@ (8001ea8 <HAL_GPIO_Init+0x2f0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x202>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a48      	ldr	r2, [pc, #288]	@ (8001eac <HAL_GPIO_Init+0x2f4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x1fe>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a47      	ldr	r2, [pc, #284]	@ (8001eb0 <HAL_GPIO_Init+0x2f8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x1fa>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a46      	ldr	r2, [pc, #280]	@ (8001eb4 <HAL_GPIO_Init+0x2fc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x1f6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a45      	ldr	r2, [pc, #276]	@ (8001eb8 <HAL_GPIO_Init+0x300>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x1f2>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e008      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001dae:	2303      	movs	r3, #3
 8001db0:	e004      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_GPIO_Init+0x204>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	f002 0203 	and.w	r2, r2, #3
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dcc:	4935      	ldr	r1, [pc, #212]	@ (8001ea4 <HAL_GPIO_Init+0x2ec>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dda:	4b38      	ldr	r3, [pc, #224]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e04:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e28:	4a24      	ldr	r2, [pc, #144]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e52:	4a1a      	ldr	r2, [pc, #104]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e58:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3301      	adds	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	f67f aea2 	bls.w	8001bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3724      	adds	r7, #36	@ 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020c00 	.word	0x40020c00
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e12b      	b.n	800215e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff f938 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f58:	f000 fd40 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8001f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a81      	ldr	r2, [pc, #516]	@ (8002168 <HAL_I2C_Init+0x274>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d807      	bhi.n	8001f78 <HAL_I2C_Init+0x84>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a80      	ldr	r2, [pc, #512]	@ (800216c <HAL_I2C_Init+0x278>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bf94      	ite	ls
 8001f70:	2301      	movls	r3, #1
 8001f72:	2300      	movhi	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	e006      	b.n	8001f86 <HAL_I2C_Init+0x92>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a7d      	ldr	r2, [pc, #500]	@ (8002170 <HAL_I2C_Init+0x27c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0e7      	b.n	800215e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4a78      	ldr	r2, [pc, #480]	@ (8002174 <HAL_I2C_Init+0x280>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0c9b      	lsrs	r3, r3, #18
 8001f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002168 <HAL_I2C_Init+0x274>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_I2C_Init+0xd4>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	e009      	b.n	8001fdc <HAL_I2C_Init+0xe8>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	4a69      	ldr	r2, [pc, #420]	@ (8002178 <HAL_I2C_Init+0x284>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	3301      	adds	r3, #1
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	495c      	ldr	r1, [pc, #368]	@ (8002168 <HAL_I2C_Init+0x274>)
 8001ff8:	428b      	cmp	r3, r1
 8001ffa:	d819      	bhi.n	8002030 <HAL_I2C_Init+0x13c>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e59      	subs	r1, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fbb1 f3f3 	udiv	r3, r1, r3
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002010:	400b      	ands	r3, r1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_I2C_Init+0x138>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e59      	subs	r1, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fbb1 f3f3 	udiv	r3, r1, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202a:	e051      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 800202c:	2304      	movs	r3, #4
 800202e:	e04f      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <HAL_I2C_Init+0x168>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e58      	subs	r0, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e012      	b.n	8002082 <HAL_I2C_Init+0x18e>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	0099      	lsls	r1, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x196>
 8002086:	2301      	movs	r3, #1
 8002088:	e022      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10e      	bne.n	80020b0 <HAL_I2C_Init+0x1bc>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e58      	subs	r0, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	440b      	add	r3, r1
 80020a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ae:	e00f      	b.n	80020d0 <HAL_I2C_Init+0x1dc>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1e58      	subs	r0, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	0099      	lsls	r1, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6809      	ldr	r1, [r1, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6911      	ldr	r1, [r2, #16]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68d2      	ldr	r2, [r2, #12]
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	430b      	orrs	r3, r1
 8002112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	000186a0 	.word	0x000186a0
 800216c:	001e847f 	.word	0x001e847f
 8002170:	003d08ff 	.word	0x003d08ff
 8002174:	431bde83 	.word	0x431bde83
 8002178:	10624dd3 	.word	0x10624dd3

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e267      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800219a:	4b88      	ldr	r3, [pc, #544]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b85      	ldr	r3, [pc, #532]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b7e      	ldr	r3, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e242      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6f      	ldr	r2, [pc, #444]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6c      	ldr	r2, [pc, #432]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b69      	ldr	r3, [pc, #420]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a68      	ldr	r2, [pc, #416]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fb10 	bl	8001858 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fb0c 	bl	8001858 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e207      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b5b      	ldr	r3, [pc, #364]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fafc 	bl	8001858 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff faf8 	bl	8001858 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1f3      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b51      	ldr	r3, [pc, #324]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002292:	4b4a      	ldr	r3, [pc, #296]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b44      	ldr	r3, [pc, #272]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c7      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4937      	ldr	r1, [pc, #220]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_RCC_OscConfig+0x244>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff fab1 	bl	8001858 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff faad 	bl	8001858 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a8      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4925      	ldr	r1, [pc, #148]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_OscConfig+0x244>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fa90 	bl	8001858 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fa8c 	bl	8001858 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e187      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_RCC_OscConfig+0x248>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fa70 	bl	8001858 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fa6c 	bl	8001858 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e167      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCC_OscConfig+0x240>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_RCC_OscConfig+0x248>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fa59 	bl	8001858 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e00e      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fa55 	bl	8001858 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d907      	bls.n	80023c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e150      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ea      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8097 	beq.w	8002510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b81      	ldr	r3, [pc, #516]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b7d      	ldr	r3, [pc, #500]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	4a7c      	ldr	r2, [pc, #496]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	@ 0x40
 8002402:	4b7a      	ldr	r3, [pc, #488]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b77      	ldr	r3, [pc, #476]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b74      	ldr	r3, [pc, #464]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a73      	ldr	r2, [pc, #460]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff fa15 	bl	8001858 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff fa11 	bl	8001858 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e10c      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x2ea>
 8002458:	4b64      	ldr	r3, [pc, #400]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245c:	4a63      	ldr	r2, [pc, #396]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	@ 0x70
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x324>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x30c>
 800246e:	4b5f      	ldr	r3, [pc, #380]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	4a5e      	ldr	r2, [pc, #376]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	@ 0x70
 800247a:	4b5c      	ldr	r3, [pc, #368]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	4a5b      	ldr	r2, [pc, #364]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	@ 0x70
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x324>
 8002488:	4b58      	ldr	r3, [pc, #352]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	@ 0x70
 8002494:	4b55      	ldr	r3, [pc, #340]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	4a54      	ldr	r2, [pc, #336]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff f9d6 	bl	8001858 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7ff f9d2 	bl	8001858 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0cb      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4b49      	ldr	r3, [pc, #292]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ee      	beq.n	80024b0 <HAL_RCC_OscConfig+0x334>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7ff f9c0 	bl	8001858 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7ff f9bc 	bl	8001858 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0b5      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ee      	bne.n	80024dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	4a38      	ldr	r2, [pc, #224]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a1 	beq.w	800265c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251a:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d05c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d141      	bne.n	80025b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <HAL_RCC_OscConfig+0x478>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff f990 	bl	8001858 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f98c 	bl	8001858 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e087      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	491b      	ldr	r1, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x478>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff f965 	bl	8001858 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff f961 	bl	8001858 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e05c      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x416>
 80025b0:	e054      	b.n	800265c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff f94e 	bl	8001858 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff f94a 	bl	8001858 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e045      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e038      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4ec>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d028      	beq.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d121      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d11a      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800262e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002630:	4293      	cmp	r3, r2
 8002632:	d111      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	085b      	lsrs	r3, r3, #1
 8002640:	3b01      	subs	r3, #1
 8002642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0cc      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b68      	ldr	r3, [pc, #416]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d90c      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a58      	ldr	r2, [pc, #352]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a52      	ldr	r2, [pc, #328]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d044      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e067      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4934      	ldr	r1, [pc, #208]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7ff f87c 	bl	8001858 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7ff f878 	bl	8001858 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	@ (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe ffdc 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023800 	.word	0x40023800
 800282c:	0800529c 	.word	0x0800529c
 8002830:	20000018 	.word	0x20000018
 8002834:	2000001c 	.word	0x2000001c

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b090      	sub	sp, #64	@ 0x40
 800283e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002850:	4b59      	ldr	r3, [pc, #356]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d00d      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x40>
 800285c:	2b08      	cmp	r3, #8
 800285e:	f200 80a1 	bhi.w	80029a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x34>
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x3a>
 800286a:	e09b      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x184>)
 800286e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002870:	e09b      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002876:	e098      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002878:	4b4f      	ldr	r3, [pc, #316]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b4d      	ldr	r3, [pc, #308]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b4a      	ldr	r3, [pc, #296]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	2200      	movs	r2, #0
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	627a      	str	r2, [r7, #36]	@ 0x24
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028a0:	2100      	movs	r1, #0
 80028a2:	4b47      	ldr	r3, [pc, #284]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80028a4:	fb03 f201 	mul.w	r2, r3, r1
 80028a8:	2300      	movs	r3, #0
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b2:	fba0 1202 	umull	r1, r2, r0, r2
 80028b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b8:	460a      	mov	r2, r1
 80028ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028be:	4413      	add	r3, r2
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c4:	2200      	movs	r2, #0
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028d2:	f7fd fcdd 	bl	8000290 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4613      	mov	r3, r2
 80028dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028de:	e053      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b35      	ldr	r3, [pc, #212]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	617a      	str	r2, [r7, #20]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028f2:	f04f 0b00 	mov.w	fp, #0
 80028f6:	4652      	mov	r2, sl
 80028f8:	465b      	mov	r3, fp
 80028fa:	f04f 0000 	mov.w	r0, #0
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	0159      	lsls	r1, r3, #5
 8002904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002908:	0150      	lsls	r0, r2, #5
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	ebb2 080a 	subs.w	r8, r2, sl
 8002912:	eb63 090b 	sbc.w	r9, r3, fp
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002922:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002926:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800292a:	ebb2 0408 	subs.w	r4, r2, r8
 800292e:	eb63 0509 	sbc.w	r5, r3, r9
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	00eb      	lsls	r3, r5, #3
 800293c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002940:	00e2      	lsls	r2, r4, #3
 8002942:	4614      	mov	r4, r2
 8002944:	461d      	mov	r5, r3
 8002946:	eb14 030a 	adds.w	r3, r4, sl
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	eb45 030b 	adc.w	r3, r5, fp
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295e:	4629      	mov	r1, r5
 8002960:	028b      	lsls	r3, r1, #10
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002968:	4621      	mov	r1, r4
 800296a:	028a      	lsls	r2, r1, #10
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002972:	2200      	movs	r2, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800297c:	f7fd fc88 	bl	8000290 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002988:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x184>)
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3740      	adds	r7, #64	@ 0x40
 80029b0:	46bd      	mov	sp, r7
 80029b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	017d7840 	.word	0x017d7840

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000018 	.word	0x20000018

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e0:	f7ff fff0 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0a9b      	lsrs	r3, r3, #10
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	080052ac 	.word	0x080052ac

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffdc 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0b5b      	lsrs	r3, r3, #13
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	080052ac 	.word	0x080052ac

08002a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e041      	b.n	8002ac2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fc4c 	bl	80012f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 fb42 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_TIM_PWM_Start_IT+0x28>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e022      	b.n	8002b3a <HAL_TIM_PWM_Start_IT+0x6e>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d109      	bne.n	8002b0e <HAL_TIM_PWM_Start_IT+0x42>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e015      	b.n	8002b3a <HAL_TIM_PWM_Start_IT+0x6e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d109      	bne.n	8002b28 <HAL_TIM_PWM_Start_IT+0x5c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e008      	b.n	8002b3a <HAL_TIM_PWM_Start_IT+0x6e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0b3      	b.n	8002caa <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Start_IT+0x86>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b50:	e013      	b.n	8002b7a <HAL_TIM_PWM_Start_IT+0xae>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Start_IT+0x96>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b60:	e00b      	b.n	8002b7a <HAL_TIM_PWM_Start_IT+0xae>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start_IT+0xa6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b70:	e003      	b.n	8002b7a <HAL_TIM_PWM_Start_IT+0xae>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b0c      	cmp	r3, #12
 8002b7e:	d841      	bhi.n	8002c04 <HAL_TIM_PWM_Start_IT+0x138>
 8002b80:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bbd 	.word	0x08002bbd
 8002b8c:	08002c05 	.word	0x08002c05
 8002b90:	08002c05 	.word	0x08002c05
 8002b94:	08002c05 	.word	0x08002c05
 8002b98:	08002bcf 	.word	0x08002bcf
 8002b9c:	08002c05 	.word	0x08002c05
 8002ba0:	08002c05 	.word	0x08002c05
 8002ba4:	08002c05 	.word	0x08002c05
 8002ba8:	08002be1 	.word	0x08002be1
 8002bac:	08002c05 	.word	0x08002c05
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002c05 	.word	0x08002c05
 8002bb8:	08002bf3 	.word	0x08002bf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0202 	orr.w	r2, r2, #2
 8002bca:	60da      	str	r2, [r3, #12]
      break;
 8002bcc:	e01d      	b.n	8002c0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0204 	orr.w	r2, r2, #4
 8002bdc:	60da      	str	r2, [r3, #12]
      break;
 8002bde:	e014      	b.n	8002c0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0208 	orr.w	r2, r2, #8
 8002bee:	60da      	str	r2, [r3, #12]
      break;
 8002bf0:	e00b      	b.n	8002c0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0210 	orr.w	r2, r2, #16
 8002c00:	60da      	str	r2, [r3, #12]
      break;
 8002c02:	e002      	b.n	8002c0a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d14b      	bne.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fc83 	bl	8003524 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d018      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4a:	d013      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00e      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a16      	ldr	r2, [pc, #88]	@ (8002cc0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d010      	beq.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	e007      	b.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40000c00 	.word	0x40000c00
 8002cc4:	40014000 	.word	0x40014000

08002cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e097      	b.n	8002e0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe fb4b 	bl	800138c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d0c:	f023 0307 	bic.w	r3, r3, #7
 8002d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 f9e9 	bl	80030f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002d68:	f023 030c 	bic.w	r3, r3, #12
 8002d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4313      	orrs	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	011a      	lsls	r2, r3, #4
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	031b      	lsls	r3, r3, #12
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d110      	bne.n	8002e66 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e4a:	7b7b      	ldrb	r3, [r7, #13]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d001      	beq.n	8002e54 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e089      	b.n	8002f68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e64:	e031      	b.n	8002eca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d110      	bne.n	8002e8e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e72:	7b3b      	ldrb	r3, [r7, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e075      	b.n	8002f68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e8c:	e01d      	b.n	8002eca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d108      	bne.n	8002ea6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e94:	7bbb      	ldrb	r3, [r7, #14]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ea0:	7b3b      	ldrb	r3, [r7, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e05e      	b.n	8002f68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d010      	beq.n	8002ef8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002ed6:	e01f      	b.n	8002f18 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fb1f 	bl	8003524 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0202 	orr.w	r2, r2, #2
 8002ef4:	60da      	str	r2, [r3, #12]
      break;
 8002ef6:	e02e      	b.n	8002f56 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2201      	movs	r2, #1
 8002efe:	2104      	movs	r1, #4
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fb0f 	bl	8003524 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0204 	orr.w	r2, r2, #4
 8002f14:	60da      	str	r2, [r3, #12]
      break;
 8002f16:	e01e      	b.n	8002f56 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 faff 	bl	8003524 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 faf8 	bl	8003524 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0202 	orr.w	r2, r2, #2
 8002f42:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0204 	orr.w	r2, r2, #4
 8002f52:	60da      	str	r2, [r3, #12]
      break;
 8002f54:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0ae      	b.n	80030ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	f200 809f 	bhi.w	80030dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fd9 	.word	0x08002fd9
 8002fa8:	080030dd 	.word	0x080030dd
 8002fac:	080030dd 	.word	0x080030dd
 8002fb0:	080030dd 	.word	0x080030dd
 8002fb4:	08003019 	.word	0x08003019
 8002fb8:	080030dd 	.word	0x080030dd
 8002fbc:	080030dd 	.word	0x080030dd
 8002fc0:	080030dd 	.word	0x080030dd
 8002fc4:	0800305b 	.word	0x0800305b
 8002fc8:	080030dd 	.word	0x080030dd
 8002fcc:	080030dd 	.word	0x080030dd
 8002fd0:	080030dd 	.word	0x080030dd
 8002fd4:	0800309b 	.word	0x0800309b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f914 	bl	800320c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0208 	orr.w	r2, r2, #8
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	619a      	str	r2, [r3, #24]
      break;
 8003016:	e064      	b.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f95a 	bl	80032d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6999      	ldr	r1, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	619a      	str	r2, [r3, #24]
      break;
 8003058:	e043      	b.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f9a5 	bl	80033b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0208 	orr.w	r2, r2, #8
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0204 	bic.w	r2, r2, #4
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	61da      	str	r2, [r3, #28]
      break;
 8003098:	e023      	b.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f9ef 	bl	8003484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69d9      	ldr	r1, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	021a      	lsls	r2, r3, #8
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	61da      	str	r2, [r3, #28]
      break;
 80030da:	e002      	b.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	75fb      	strb	r3, [r7, #23]
      break;
 80030e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3a      	ldr	r2, [pc, #232]	@ (80031f0 <TIM_Base_SetConfig+0xfc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00f      	beq.n	800312c <TIM_Base_SetConfig+0x38>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d00b      	beq.n	800312c <TIM_Base_SetConfig+0x38>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a37      	ldr	r2, [pc, #220]	@ (80031f4 <TIM_Base_SetConfig+0x100>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <TIM_Base_SetConfig+0x38>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a36      	ldr	r2, [pc, #216]	@ (80031f8 <TIM_Base_SetConfig+0x104>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_Base_SetConfig+0x38>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a35      	ldr	r2, [pc, #212]	@ (80031fc <TIM_Base_SetConfig+0x108>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2b      	ldr	r2, [pc, #172]	@ (80031f0 <TIM_Base_SetConfig+0xfc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01b      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314c:	d017      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a28      	ldr	r2, [pc, #160]	@ (80031f4 <TIM_Base_SetConfig+0x100>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a27      	ldr	r2, [pc, #156]	@ (80031f8 <TIM_Base_SetConfig+0x104>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00f      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a26      	ldr	r2, [pc, #152]	@ (80031fc <TIM_Base_SetConfig+0x108>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00b      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a25      	ldr	r2, [pc, #148]	@ (8003200 <TIM_Base_SetConfig+0x10c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a24      	ldr	r2, [pc, #144]	@ (8003204 <TIM_Base_SetConfig+0x110>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <TIM_Base_SetConfig+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a23      	ldr	r2, [pc, #140]	@ (8003208 <TIM_Base_SetConfig+0x114>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0e      	ldr	r2, [pc, #56]	@ (80031f0 <TIM_Base_SetConfig+0xfc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d103      	bne.n	80031c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]
  }
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800

0800320c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f023 0201 	bic.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 0302 	bic.w	r3, r3, #2
 8003254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <TIM_OC1_SetConfig+0xc8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10c      	bne.n	8003282 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0308 	bic.w	r3, r3, #8
 800326e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a13      	ldr	r2, [pc, #76]	@ (80032d4 <TIM_OC1_SetConfig+0xc8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d111      	bne.n	80032ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40010000 	.word	0x40010000

080032d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 0210 	bic.w	r2, r3, #16
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0320 	bic.w	r3, r3, #32
 8003322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a1e      	ldr	r2, [pc, #120]	@ (80033ac <TIM_OC2_SetConfig+0xd4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10d      	bne.n	8003354 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <TIM_OC2_SetConfig+0xd4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d113      	bne.n	8003384 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800336a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000

080033b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <TIM_OC3_SetConfig+0xd0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10d      	bne.n	800342a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <TIM_OC3_SetConfig+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d113      	bne.n	800345a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40010000 	.word	0x40010000

08003484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	031b      	lsls	r3, r3, #12
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <TIM_OC4_SetConfig+0x9c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d109      	bne.n	80034f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	019b      	lsls	r3, r3, #6
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	621a      	str	r2, [r3, #32]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000

08003524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2201      	movs	r2, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1a      	ldr	r2, [r3, #32]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e050      	b.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d018      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d013      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a18      	ldr	r2, [pc, #96]	@ (800363c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10c      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4313      	orrs	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40014000 	.word	0x40014000

0800364c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003664:	2302      	movs	r3, #2
 8003666:	e03d      	b.n	80036e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e042      	b.n	8003788 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd ff3c 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	@ 0x24
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fdbd 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d175      	bne.n	800389c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Transmit+0x2c>
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e06e      	b.n	800389e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2221      	movs	r2, #33	@ 0x21
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ce:	f7fe f843 	bl	8001858 <HAL_GetTick>
 80037d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e8:	d108      	bne.n	80037fc <HAL_UART_Transmit+0x6c>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e003      	b.n	8003804 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003804:	e02e      	b.n	8003864 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fb1f 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e03a      	b.n	800389e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	3302      	adds	r3, #2
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e007      	b.n	8003856 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3301      	adds	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1cb      	bne.n	8003806 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2140      	movs	r1, #64	@ 0x40
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 faeb 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d112      	bne.n	80038e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UART_Receive_IT+0x26>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e00b      	b.n	80038e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	461a      	mov	r2, r3
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb12 	bl	8003f06 <UART_Start_Receive_IT>
 80038e2:	4603      	mov	r3, r0
 80038e4:	e000      	b.n	80038e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b0ba      	sub	sp, #232	@ 0xe8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800392e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_UART_IRQHandler+0x66>
 8003942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fbf2 	bl	8004138 <UART_Receive_IT>
      return;
 8003954:	e25b      	b.n	8003e0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80de 	beq.w	8003b1c <HAL_UART_IRQHandler+0x22c>
 8003960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003970:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80d1 	beq.w	8003b1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_UART_IRQHandler+0xae>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0xd2>
 80039aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f043 0202 	orr.w	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0xf6>
 80039ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <HAL_UART_IRQHandler+0x126>
 80039f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f043 0208 	orr.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 81f2 	beq.w	8003e04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_UART_IRQHandler+0x14e>
 8003a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fb7d 	bl	8004138 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a48:	2b40      	cmp	r3, #64	@ 0x40
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_UART_IRQHandler+0x17a>
 8003a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04f      	beq.n	8003b0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa85 	bl	8003f7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d141      	bne.n	8003b02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1d9      	bne.n	8003a7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d013      	beq.n	8003afa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd0 <HAL_UART_IRQHandler+0x3e0>)
 8003ad8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe f847 	bl	8001b72 <HAL_DMA_Abort_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003af4:	4610      	mov	r0, r2
 8003af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e00e      	b.n	8003b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f994 	bl	8003e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	e00a      	b.n	8003b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f990 	bl	8003e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	e006      	b.n	8003b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f98c 	bl	8003e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b16:	e175      	b.n	8003e04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	bf00      	nop
    return;
 8003b1a:	e173      	b.n	8003e04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 814f 	bne.w	8003dc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8148 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8141 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b40      	cmp	r3, #64	@ 0x40
 8003b64:	f040 80b6 	bne.w	8003cd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8145 	beq.w	8003e08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b86:	429a      	cmp	r2, r3
 8003b88:	f080 813e 	bcs.w	8003e08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9e:	f000 8088 	beq.w	8003cb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1d9      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e1      	bne.n	8003bee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e3      	bne.n	8003c2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c82:	f023 0310 	bic.w	r3, r3, #16
 8003c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e3      	bne.n	8003c70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd fef0 	bl	8001a92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8b7 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cce:	e09b      	b.n	8003e08 <HAL_UART_IRQHandler+0x518>
 8003cd0:	08004041 	.word	0x08004041
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 808e 	beq.w	8003e0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8089 	beq.w	8003e0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e3      	bne.n	8003cfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	623b      	str	r3, [r7, #32]
   return(result);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d56:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e3      	bne.n	8003d32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0310 	bic.w	r3, r3, #16
 8003d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d9c:	61fa      	str	r2, [r7, #28]
 8003d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	617b      	str	r3, [r7, #20]
   return(result);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e3      	bne.n	8003d78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f83d 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dc2:	e023      	b.n	8003e0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_UART_IRQHandler+0x4f4>
 8003dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f943 	bl	8004068 <UART_Transmit_IT>
    return;
 8003de2:	e014      	b.n	8003e0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <HAL_UART_IRQHandler+0x51e>
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f983 	bl	8004108 <UART_EndTransmit_IT>
    return;
 8003e02:	e004      	b.n	8003e0e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e04:	bf00      	nop
 8003e06:	e002      	b.n	8003e0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e0c:	bf00      	nop
  }
}
 8003e0e:	37e8      	adds	r7, #232	@ 0xe8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	e03b      	b.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d037      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fd fcf3 	bl	8001858 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e03a      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d023      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d020      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d01d      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d116      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f857 	bl	8003f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00f      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d0b4      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	4613      	mov	r3, r2
 8003f12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2222      	movs	r2, #34	@ 0x22
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0220 	orr.w	r2, r2, #32
 8003f6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b095      	sub	sp, #84	@ 0x54
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e5      	bne.n	8003fb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d119      	bne.n	8004026 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	60bb      	str	r3, [r7, #8]
   return(result);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 0310 	bic.w	r3, r3, #16
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004012:	61ba      	str	r2, [r7, #24]
 8004014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6979      	ldr	r1, [r7, #20]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	613b      	str	r3, [r7, #16]
   return(result);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004034:	bf00      	nop
 8004036:	3754      	adds	r7, #84	@ 0x54
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff fee4 	bl	8003e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b21      	cmp	r3, #33	@ 0x21
 800407a:	d13e      	bne.n	80040fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004084:	d114      	bne.n	80040b0 <UART_Transmit_IT+0x48>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d110      	bne.n	80040b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]
 80040ae:	e008      	b.n	80040c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	1c59      	adds	r1, r3, #1
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6211      	str	r1, [r2, #32]
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4619      	mov	r1, r3
 80040d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800411e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fe73 	bl	8003e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08c      	sub	sp, #48	@ 0x30
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b22      	cmp	r3, #34	@ 0x22
 800414a:	f040 80ae 	bne.w	80042aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004156:	d117      	bne.n	8004188 <UART_Receive_IT+0x50>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d113      	bne.n	8004188 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004176:	b29a      	uxth	r2, r3
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	629a      	str	r2, [r3, #40]	@ 0x28
 8004186:	e026      	b.n	80041d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419a:	d007      	beq.n	80041ac <UART_Receive_IT+0x74>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <UART_Receive_IT+0x82>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e008      	b.n	80041cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d15d      	bne.n	80042a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0220 	bic.w	r2, r2, #32
 80041f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004208:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	d135      	bne.n	800429c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	613b      	str	r3, [r7, #16]
   return(result);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f023 0310 	bic.w	r3, r3, #16
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004256:	623a      	str	r2, [r7, #32]
 8004258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	69f9      	ldr	r1, [r7, #28]
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	61bb      	str	r3, [r7, #24]
   return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	d10a      	bne.n	800428e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fdd1 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
 800429a:	e002      	b.n	80042a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fc fd95 	bl	8000dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e002      	b.n	80042ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3730      	adds	r7, #48	@ 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b0c0      	sub	sp, #256	@ 0x100
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	ea40 0301 	orr.w	r3, r0, r1
 80042dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800430c:	f021 010c 	bic.w	r1, r1, #12
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	ea40 0301 	orr.w	r3, r0, r1
 800433a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b8f      	ldr	r3, [pc, #572]	@ (8004580 <UART_SetConfig+0x2cc>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d005      	beq.n	8004354 <UART_SetConfig+0xa0>
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8d      	ldr	r3, [pc, #564]	@ (8004584 <UART_SetConfig+0x2d0>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d104      	bne.n	800435e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe fb56 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8004358:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800435c:	e003      	b.n	8004366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7fe fb3d 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8004362:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004370:	f040 810c 	bne.w	800458c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800437e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	1891      	adds	r1, r2, r2
 800438c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800438e:	415b      	adcs	r3, r3
 8004390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004396:	4621      	mov	r1, r4
 8004398:	eb12 0801 	adds.w	r8, r2, r1
 800439c:	4629      	mov	r1, r5
 800439e:	eb43 0901 	adc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043c4:	462b      	mov	r3, r5
 80043c6:	eb49 0303 	adc.w	r3, r9, r3
 80043ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043e2:	460b      	mov	r3, r1
 80043e4:	18db      	adds	r3, r3, r3
 80043e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e8:	4613      	mov	r3, r2
 80043ea:	eb42 0303 	adc.w	r3, r2, r3
 80043ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043f8:	f7fb ff4a 	bl	8000290 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b61      	ldr	r3, [pc, #388]	@ (8004588 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004414:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004424:	415b      	adcs	r3, r3
 8004426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800442c:	4641      	mov	r1, r8
 800442e:	eb12 0a01 	adds.w	sl, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0b01 	adc.w	fp, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444c:	4692      	mov	sl, r2
 800444e:	469b      	mov	fp, r3
 8004450:	4643      	mov	r3, r8
 8004452:	eb1a 0303 	adds.w	r3, sl, r3
 8004456:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800445a:	464b      	mov	r3, r9
 800445c:	eb4b 0303 	adc.w	r3, fp, r3
 8004460:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004470:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004478:	460b      	mov	r3, r1
 800447a:	18db      	adds	r3, r3, r3
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
 800447e:	4613      	mov	r3, r2
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	647b      	str	r3, [r7, #68]	@ 0x44
 8004486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800448a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800448e:	f7fb feff 	bl	8000290 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4611      	mov	r1, r2
 8004498:	4b3b      	ldr	r3, [pc, #236]	@ (8004588 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2301 	umull	r2, r3, r3, r1
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2264      	movs	r2, #100	@ 0x64
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	1acb      	subs	r3, r1, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044ae:	4b36      	ldr	r3, [pc, #216]	@ (8004588 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 2302 	umull	r2, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044d8:	415b      	adcs	r3, r3
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800452c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004534:	460b      	mov	r3, r1
 8004536:	18db      	adds	r3, r3, r3
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453a:	4613      	mov	r3, r2
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800454a:	f7fb fea1 	bl	8000290 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <UART_SetConfig+0x2d4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	@ 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	3332      	adds	r3, #50	@ 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	@ (8004588 <UART_SetConfig+0x2d4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 0207 	and.w	r2, r3, #7
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800457c:	e106      	b.n	800478c <UART_SetConfig+0x4d8>
 800457e:	bf00      	nop
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004596:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800459a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800459e:	4642      	mov	r2, r8
 80045a0:	464b      	mov	r3, r9
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	6239      	str	r1, [r7, #32]
 80045a6:	415b      	adcs	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ae:	4641      	mov	r1, r8
 80045b0:	1854      	adds	r4, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0501 	adc.w	r5, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	00eb      	lsls	r3, r5, #3
 80045c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c6:	00e2      	lsls	r2, r4, #3
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	18e3      	adds	r3, r4, r3
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045d4:	464b      	mov	r3, r9
 80045d6:	eb45 0303 	adc.w	r3, r5, r3
 80045da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045fa:	4629      	mov	r1, r5
 80045fc:	008b      	lsls	r3, r1, #2
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004604:	4621      	mov	r1, r4
 8004606:	008a      	lsls	r2, r1, #2
 8004608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800460c:	f7fb fe40 	bl	8000290 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b60      	ldr	r3, [pc, #384]	@ (8004798 <UART_SetConfig+0x4e4>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011c      	lsls	r4, r3, #4
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004628:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800462c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	61b9      	str	r1, [r7, #24]
 8004638:	415b      	adcs	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6139      	str	r1, [r7, #16]
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004698:	4649      	mov	r1, r9
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a2:	4641      	mov	r1, r8
 80046a4:	008a      	lsls	r2, r1, #2
 80046a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046aa:	f7fb fdf1 	bl	8000290 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	4b38      	ldr	r3, [pc, #224]	@ (8004798 <UART_SetConfig+0x4e4>)
 80046b6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2264      	movs	r2, #100	@ 0x64
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	1acb      	subs	r3, r1, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	@ 0x32
 80046c8:	4a33      	ldr	r2, [pc, #204]	@ (8004798 <UART_SetConfig+0x4e4>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d4:	441c      	add	r4, r3
 80046d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046da:	2200      	movs	r2, #0
 80046dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80046de:	677a      	str	r2, [r7, #116]	@ 0x74
 80046e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	415b      	adcs	r3, r3
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004726:	464b      	mov	r3, r9
 8004728:	460a      	mov	r2, r1
 800472a:	eb42 0303 	adc.w	r3, r2, r3
 800472e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	663b      	str	r3, [r7, #96]	@ 0x60
 800473a:	667a      	str	r2, [r7, #100]	@ 0x64
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004748:	4649      	mov	r1, r9
 800474a:	008b      	lsls	r3, r1, #2
 800474c:	4641      	mov	r1, r8
 800474e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004752:	4641      	mov	r1, r8
 8004754:	008a      	lsls	r2, r1, #2
 8004756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800475a:	f7fb fd99 	bl	8000290 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <UART_SetConfig+0x4e4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	@ 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	@ 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	@ (8004798 <UART_SetConfig+0x4e4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <_strtol_l.isra.0>:
 800479c:	2b24      	cmp	r3, #36	@ 0x24
 800479e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a2:	4686      	mov	lr, r0
 80047a4:	4690      	mov	r8, r2
 80047a6:	d801      	bhi.n	80047ac <_strtol_l.isra.0+0x10>
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d106      	bne.n	80047ba <_strtol_l.isra.0+0x1e>
 80047ac:	f000 f8a4 	bl	80048f8 <__errno>
 80047b0:	2316      	movs	r3, #22
 80047b2:	6003      	str	r3, [r0, #0]
 80047b4:	2000      	movs	r0, #0
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	4834      	ldr	r0, [pc, #208]	@ (800488c <_strtol_l.isra.0+0xf0>)
 80047bc:	460d      	mov	r5, r1
 80047be:	462a      	mov	r2, r5
 80047c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047c4:	5d06      	ldrb	r6, [r0, r4]
 80047c6:	f016 0608 	ands.w	r6, r6, #8
 80047ca:	d1f8      	bne.n	80047be <_strtol_l.isra.0+0x22>
 80047cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80047ce:	d110      	bne.n	80047f2 <_strtol_l.isra.0+0x56>
 80047d0:	782c      	ldrb	r4, [r5, #0]
 80047d2:	2601      	movs	r6, #1
 80047d4:	1c95      	adds	r5, r2, #2
 80047d6:	f033 0210 	bics.w	r2, r3, #16
 80047da:	d115      	bne.n	8004808 <_strtol_l.isra.0+0x6c>
 80047dc:	2c30      	cmp	r4, #48	@ 0x30
 80047de:	d10d      	bne.n	80047fc <_strtol_l.isra.0+0x60>
 80047e0:	782a      	ldrb	r2, [r5, #0]
 80047e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80047e6:	2a58      	cmp	r2, #88	@ 0x58
 80047e8:	d108      	bne.n	80047fc <_strtol_l.isra.0+0x60>
 80047ea:	786c      	ldrb	r4, [r5, #1]
 80047ec:	3502      	adds	r5, #2
 80047ee:	2310      	movs	r3, #16
 80047f0:	e00a      	b.n	8004808 <_strtol_l.isra.0+0x6c>
 80047f2:	2c2b      	cmp	r4, #43	@ 0x2b
 80047f4:	bf04      	itt	eq
 80047f6:	782c      	ldrbeq	r4, [r5, #0]
 80047f8:	1c95      	addeq	r5, r2, #2
 80047fa:	e7ec      	b.n	80047d6 <_strtol_l.isra.0+0x3a>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f6      	bne.n	80047ee <_strtol_l.isra.0+0x52>
 8004800:	2c30      	cmp	r4, #48	@ 0x30
 8004802:	bf14      	ite	ne
 8004804:	230a      	movne	r3, #10
 8004806:	2308      	moveq	r3, #8
 8004808:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800480c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004810:	2200      	movs	r2, #0
 8004812:	fbbc f9f3 	udiv	r9, ip, r3
 8004816:	4610      	mov	r0, r2
 8004818:	fb03 ca19 	mls	sl, r3, r9, ip
 800481c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004820:	2f09      	cmp	r7, #9
 8004822:	d80f      	bhi.n	8004844 <_strtol_l.isra.0+0xa8>
 8004824:	463c      	mov	r4, r7
 8004826:	42a3      	cmp	r3, r4
 8004828:	dd1b      	ble.n	8004862 <_strtol_l.isra.0+0xc6>
 800482a:	1c57      	adds	r7, r2, #1
 800482c:	d007      	beq.n	800483e <_strtol_l.isra.0+0xa2>
 800482e:	4581      	cmp	r9, r0
 8004830:	d314      	bcc.n	800485c <_strtol_l.isra.0+0xc0>
 8004832:	d101      	bne.n	8004838 <_strtol_l.isra.0+0x9c>
 8004834:	45a2      	cmp	sl, r4
 8004836:	db11      	blt.n	800485c <_strtol_l.isra.0+0xc0>
 8004838:	fb00 4003 	mla	r0, r0, r3, r4
 800483c:	2201      	movs	r2, #1
 800483e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004842:	e7eb      	b.n	800481c <_strtol_l.isra.0+0x80>
 8004844:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004848:	2f19      	cmp	r7, #25
 800484a:	d801      	bhi.n	8004850 <_strtol_l.isra.0+0xb4>
 800484c:	3c37      	subs	r4, #55	@ 0x37
 800484e:	e7ea      	b.n	8004826 <_strtol_l.isra.0+0x8a>
 8004850:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004854:	2f19      	cmp	r7, #25
 8004856:	d804      	bhi.n	8004862 <_strtol_l.isra.0+0xc6>
 8004858:	3c57      	subs	r4, #87	@ 0x57
 800485a:	e7e4      	b.n	8004826 <_strtol_l.isra.0+0x8a>
 800485c:	f04f 32ff 	mov.w	r2, #4294967295
 8004860:	e7ed      	b.n	800483e <_strtol_l.isra.0+0xa2>
 8004862:	1c53      	adds	r3, r2, #1
 8004864:	d108      	bne.n	8004878 <_strtol_l.isra.0+0xdc>
 8004866:	2322      	movs	r3, #34	@ 0x22
 8004868:	f8ce 3000 	str.w	r3, [lr]
 800486c:	4660      	mov	r0, ip
 800486e:	f1b8 0f00 	cmp.w	r8, #0
 8004872:	d0a0      	beq.n	80047b6 <_strtol_l.isra.0+0x1a>
 8004874:	1e69      	subs	r1, r5, #1
 8004876:	e006      	b.n	8004886 <_strtol_l.isra.0+0xea>
 8004878:	b106      	cbz	r6, 800487c <_strtol_l.isra.0+0xe0>
 800487a:	4240      	negs	r0, r0
 800487c:	f1b8 0f00 	cmp.w	r8, #0
 8004880:	d099      	beq.n	80047b6 <_strtol_l.isra.0+0x1a>
 8004882:	2a00      	cmp	r2, #0
 8004884:	d1f6      	bne.n	8004874 <_strtol_l.isra.0+0xd8>
 8004886:	f8c8 1000 	str.w	r1, [r8]
 800488a:	e794      	b.n	80047b6 <_strtol_l.isra.0+0x1a>
 800488c:	080052b5 	.word	0x080052b5

08004890 <strtol>:
 8004890:	4613      	mov	r3, r2
 8004892:	460a      	mov	r2, r1
 8004894:	4601      	mov	r1, r0
 8004896:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <strtol+0x10>)
 8004898:	6800      	ldr	r0, [r0, #0]
 800489a:	f7ff bf7f 	b.w	800479c <_strtol_l.isra.0>
 800489e:	bf00      	nop
 80048a0:	20000024 	.word	0x20000024

080048a4 <siprintf>:
 80048a4:	b40e      	push	{r1, r2, r3}
 80048a6:	b510      	push	{r4, lr}
 80048a8:	b09d      	sub	sp, #116	@ 0x74
 80048aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80048ac:	9002      	str	r0, [sp, #8]
 80048ae:	9006      	str	r0, [sp, #24]
 80048b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048b4:	480a      	ldr	r0, [pc, #40]	@ (80048e0 <siprintf+0x3c>)
 80048b6:	9107      	str	r1, [sp, #28]
 80048b8:	9104      	str	r1, [sp, #16]
 80048ba:	490a      	ldr	r1, [pc, #40]	@ (80048e4 <siprintf+0x40>)
 80048bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c0:	9105      	str	r1, [sp, #20]
 80048c2:	2400      	movs	r4, #0
 80048c4:	a902      	add	r1, sp, #8
 80048c6:	6800      	ldr	r0, [r0, #0]
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048cc:	f000 f9a2 	bl	8004c14 <_svfiprintf_r>
 80048d0:	9b02      	ldr	r3, [sp, #8]
 80048d2:	701c      	strb	r4, [r3, #0]
 80048d4:	b01d      	add	sp, #116	@ 0x74
 80048d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048da:	b003      	add	sp, #12
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000024 	.word	0x20000024
 80048e4:	ffff0208 	.word	0xffff0208

080048e8 <memset>:
 80048e8:	4402      	add	r2, r0
 80048ea:	4603      	mov	r3, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	@ (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000024 	.word	0x20000024

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4d0d      	ldr	r5, [pc, #52]	@ (800493c <__libc_init_array+0x38>)
 8004908:	4c0d      	ldr	r4, [pc, #52]	@ (8004940 <__libc_init_array+0x3c>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	2600      	movs	r6, #0
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	4d0b      	ldr	r5, [pc, #44]	@ (8004944 <__libc_init_array+0x40>)
 8004916:	4c0c      	ldr	r4, [pc, #48]	@ (8004948 <__libc_init_array+0x44>)
 8004918:	f000 fc64 	bl	80051e4 <_init>
 800491c:	1b64      	subs	r4, r4, r5
 800491e:	10a4      	asrs	r4, r4, #2
 8004920:	2600      	movs	r6, #0
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	080053f0 	.word	0x080053f0
 8004940:	080053f0 	.word	0x080053f0
 8004944:	080053f0 	.word	0x080053f0
 8004948:	080053f4 	.word	0x080053f4

0800494c <__retarget_lock_acquire_recursive>:
 800494c:	4770      	bx	lr

0800494e <__retarget_lock_release_recursive>:
 800494e:	4770      	bx	lr

08004950 <memcpy>:
 8004950:	440a      	add	r2, r1
 8004952:	4291      	cmp	r1, r2
 8004954:	f100 33ff 	add.w	r3, r0, #4294967295
 8004958:	d100      	bne.n	800495c <memcpy+0xc>
 800495a:	4770      	bx	lr
 800495c:	b510      	push	{r4, lr}
 800495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004966:	4291      	cmp	r1, r2
 8004968:	d1f9      	bne.n	800495e <memcpy+0xe>
 800496a:	bd10      	pop	{r4, pc}

0800496c <_free_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4605      	mov	r5, r0
 8004970:	2900      	cmp	r1, #0
 8004972:	d041      	beq.n	80049f8 <_free_r+0x8c>
 8004974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004978:	1f0c      	subs	r4, r1, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfb8      	it	lt
 800497e:	18e4      	addlt	r4, r4, r3
 8004980:	f000 f8e0 	bl	8004b44 <__malloc_lock>
 8004984:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <_free_r+0x90>)
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	b933      	cbnz	r3, 8004998 <_free_r+0x2c>
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	6014      	str	r4, [r2, #0]
 800498e:	4628      	mov	r0, r5
 8004990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004994:	f000 b8dc 	b.w	8004b50 <__malloc_unlock>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d908      	bls.n	80049ae <_free_r+0x42>
 800499c:	6820      	ldr	r0, [r4, #0]
 800499e:	1821      	adds	r1, r4, r0
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf01      	itttt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	1809      	addeq	r1, r1, r0
 80049aa:	6021      	streq	r1, [r4, #0]
 80049ac:	e7ed      	b.n	800498a <_free_r+0x1e>
 80049ae:	461a      	mov	r2, r3
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b10b      	cbz	r3, 80049b8 <_free_r+0x4c>
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d9fa      	bls.n	80049ae <_free_r+0x42>
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	1850      	adds	r0, r2, r1
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d10b      	bne.n	80049d8 <_free_r+0x6c>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	4401      	add	r1, r0
 80049c4:	1850      	adds	r0, r2, r1
 80049c6:	4283      	cmp	r3, r0
 80049c8:	6011      	str	r1, [r2, #0]
 80049ca:	d1e0      	bne.n	800498e <_free_r+0x22>
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	6053      	str	r3, [r2, #4]
 80049d2:	4408      	add	r0, r1
 80049d4:	6010      	str	r0, [r2, #0]
 80049d6:	e7da      	b.n	800498e <_free_r+0x22>
 80049d8:	d902      	bls.n	80049e0 <_free_r+0x74>
 80049da:	230c      	movs	r3, #12
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	e7d6      	b.n	800498e <_free_r+0x22>
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	1821      	adds	r1, r4, r0
 80049e4:	428b      	cmp	r3, r1
 80049e6:	bf04      	itt	eq
 80049e8:	6819      	ldreq	r1, [r3, #0]
 80049ea:	685b      	ldreq	r3, [r3, #4]
 80049ec:	6063      	str	r3, [r4, #4]
 80049ee:	bf04      	itt	eq
 80049f0:	1809      	addeq	r1, r1, r0
 80049f2:	6021      	streq	r1, [r4, #0]
 80049f4:	6054      	str	r4, [r2, #4]
 80049f6:	e7ca      	b.n	800498e <_free_r+0x22>
 80049f8:	bd38      	pop	{r3, r4, r5, pc}
 80049fa:	bf00      	nop
 80049fc:	200004f8 	.word	0x200004f8

08004a00 <sbrk_aligned>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	4e0f      	ldr	r6, [pc, #60]	@ (8004a40 <sbrk_aligned+0x40>)
 8004a04:	460c      	mov	r4, r1
 8004a06:	6831      	ldr	r1, [r6, #0]
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b911      	cbnz	r1, 8004a12 <sbrk_aligned+0x12>
 8004a0c:	f000 fba4 	bl	8005158 <_sbrk_r>
 8004a10:	6030      	str	r0, [r6, #0]
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f000 fb9f 	bl	8005158 <_sbrk_r>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	d103      	bne.n	8004a26 <sbrk_aligned+0x26>
 8004a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004a22:	4620      	mov	r0, r4
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	1cc4      	adds	r4, r0, #3
 8004a28:	f024 0403 	bic.w	r4, r4, #3
 8004a2c:	42a0      	cmp	r0, r4
 8004a2e:	d0f8      	beq.n	8004a22 <sbrk_aligned+0x22>
 8004a30:	1a21      	subs	r1, r4, r0
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fb90 	bl	8005158 <_sbrk_r>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d1f2      	bne.n	8004a22 <sbrk_aligned+0x22>
 8004a3c:	e7ef      	b.n	8004a1e <sbrk_aligned+0x1e>
 8004a3e:	bf00      	nop
 8004a40:	200004f4 	.word	0x200004f4

08004a44 <_malloc_r>:
 8004a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a48:	1ccd      	adds	r5, r1, #3
 8004a4a:	f025 0503 	bic.w	r5, r5, #3
 8004a4e:	3508      	adds	r5, #8
 8004a50:	2d0c      	cmp	r5, #12
 8004a52:	bf38      	it	cc
 8004a54:	250c      	movcc	r5, #12
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	4606      	mov	r6, r0
 8004a5a:	db01      	blt.n	8004a60 <_malloc_r+0x1c>
 8004a5c:	42a9      	cmp	r1, r5
 8004a5e:	d904      	bls.n	8004a6a <_malloc_r+0x26>
 8004a60:	230c      	movs	r3, #12
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	2000      	movs	r0, #0
 8004a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b40 <_malloc_r+0xfc>
 8004a6e:	f000 f869 	bl	8004b44 <__malloc_lock>
 8004a72:	f8d8 3000 	ldr.w	r3, [r8]
 8004a76:	461c      	mov	r4, r3
 8004a78:	bb44      	cbnz	r4, 8004acc <_malloc_r+0x88>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7ff ffbf 	bl	8004a00 <sbrk_aligned>
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	4604      	mov	r4, r0
 8004a86:	d158      	bne.n	8004b3a <_malloc_r+0xf6>
 8004a88:	f8d8 4000 	ldr.w	r4, [r8]
 8004a8c:	4627      	mov	r7, r4
 8004a8e:	2f00      	cmp	r7, #0
 8004a90:	d143      	bne.n	8004b1a <_malloc_r+0xd6>
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	d04b      	beq.n	8004b2e <_malloc_r+0xea>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	eb04 0903 	add.w	r9, r4, r3
 8004aa0:	f000 fb5a 	bl	8005158 <_sbrk_r>
 8004aa4:	4581      	cmp	r9, r0
 8004aa6:	d142      	bne.n	8004b2e <_malloc_r+0xea>
 8004aa8:	6821      	ldr	r1, [r4, #0]
 8004aaa:	1a6d      	subs	r5, r5, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ffa6 	bl	8004a00 <sbrk_aligned>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d03a      	beq.n	8004b2e <_malloc_r+0xea>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	442b      	add	r3, r5
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	bb62      	cbnz	r2, 8004b20 <_malloc_r+0xdc>
 8004ac6:	f8c8 7000 	str.w	r7, [r8]
 8004aca:	e00f      	b.n	8004aec <_malloc_r+0xa8>
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	1b52      	subs	r2, r2, r5
 8004ad0:	d420      	bmi.n	8004b14 <_malloc_r+0xd0>
 8004ad2:	2a0b      	cmp	r2, #11
 8004ad4:	d917      	bls.n	8004b06 <_malloc_r+0xc2>
 8004ad6:	1961      	adds	r1, r4, r5
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	6025      	str	r5, [r4, #0]
 8004adc:	bf18      	it	ne
 8004ade:	6059      	strne	r1, [r3, #4]
 8004ae0:	6863      	ldr	r3, [r4, #4]
 8004ae2:	bf08      	it	eq
 8004ae4:	f8c8 1000 	streq.w	r1, [r8]
 8004ae8:	5162      	str	r2, [r4, r5]
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f82f 	bl	8004b50 <__malloc_unlock>
 8004af2:	f104 000b 	add.w	r0, r4, #11
 8004af6:	1d23      	adds	r3, r4, #4
 8004af8:	f020 0007 	bic.w	r0, r0, #7
 8004afc:	1ac2      	subs	r2, r0, r3
 8004afe:	bf1c      	itt	ne
 8004b00:	1a1b      	subne	r3, r3, r0
 8004b02:	50a3      	strne	r3, [r4, r2]
 8004b04:	e7af      	b.n	8004a66 <_malloc_r+0x22>
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	bf0c      	ite	eq
 8004b0c:	f8c8 2000 	streq.w	r2, [r8]
 8004b10:	605a      	strne	r2, [r3, #4]
 8004b12:	e7eb      	b.n	8004aec <_malloc_r+0xa8>
 8004b14:	4623      	mov	r3, r4
 8004b16:	6864      	ldr	r4, [r4, #4]
 8004b18:	e7ae      	b.n	8004a78 <_malloc_r+0x34>
 8004b1a:	463c      	mov	r4, r7
 8004b1c:	687f      	ldr	r7, [r7, #4]
 8004b1e:	e7b6      	b.n	8004a8e <_malloc_r+0x4a>
 8004b20:	461a      	mov	r2, r3
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d1fb      	bne.n	8004b20 <_malloc_r+0xdc>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6053      	str	r3, [r2, #4]
 8004b2c:	e7de      	b.n	8004aec <_malloc_r+0xa8>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	4630      	mov	r0, r6
 8004b34:	f000 f80c 	bl	8004b50 <__malloc_unlock>
 8004b38:	e794      	b.n	8004a64 <_malloc_r+0x20>
 8004b3a:	6005      	str	r5, [r0, #0]
 8004b3c:	e7d6      	b.n	8004aec <_malloc_r+0xa8>
 8004b3e:	bf00      	nop
 8004b40:	200004f8 	.word	0x200004f8

08004b44 <__malloc_lock>:
 8004b44:	4801      	ldr	r0, [pc, #4]	@ (8004b4c <__malloc_lock+0x8>)
 8004b46:	f7ff bf01 	b.w	800494c <__retarget_lock_acquire_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	200004f0 	.word	0x200004f0

08004b50 <__malloc_unlock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	@ (8004b58 <__malloc_unlock+0x8>)
 8004b52:	f7ff befc 	b.w	800494e <__retarget_lock_release_recursive>
 8004b56:	bf00      	nop
 8004b58:	200004f0 	.word	0x200004f0

08004b5c <__ssputs_r>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	688e      	ldr	r6, [r1, #8]
 8004b62:	461f      	mov	r7, r3
 8004b64:	42be      	cmp	r6, r7
 8004b66:	680b      	ldr	r3, [r1, #0]
 8004b68:	4682      	mov	sl, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4690      	mov	r8, r2
 8004b6e:	d82d      	bhi.n	8004bcc <__ssputs_r+0x70>
 8004b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b78:	d026      	beq.n	8004bc8 <__ssputs_r+0x6c>
 8004b7a:	6965      	ldr	r5, [r4, #20]
 8004b7c:	6909      	ldr	r1, [r1, #16]
 8004b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b82:	eba3 0901 	sub.w	r9, r3, r1
 8004b86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b8a:	1c7b      	adds	r3, r7, #1
 8004b8c:	444b      	add	r3, r9
 8004b8e:	106d      	asrs	r5, r5, #1
 8004b90:	429d      	cmp	r5, r3
 8004b92:	bf38      	it	cc
 8004b94:	461d      	movcc	r5, r3
 8004b96:	0553      	lsls	r3, r2, #21
 8004b98:	d527      	bpl.n	8004bea <__ssputs_r+0x8e>
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	f7ff ff52 	bl	8004a44 <_malloc_r>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	b360      	cbz	r0, 8004bfe <__ssputs_r+0xa2>
 8004ba4:	6921      	ldr	r1, [r4, #16]
 8004ba6:	464a      	mov	r2, r9
 8004ba8:	f7ff fed2 	bl	8004950 <memcpy>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	6126      	str	r6, [r4, #16]
 8004bba:	6165      	str	r5, [r4, #20]
 8004bbc:	444e      	add	r6, r9
 8004bbe:	eba5 0509 	sub.w	r5, r5, r9
 8004bc2:	6026      	str	r6, [r4, #0]
 8004bc4:	60a5      	str	r5, [r4, #8]
 8004bc6:	463e      	mov	r6, r7
 8004bc8:	42be      	cmp	r6, r7
 8004bca:	d900      	bls.n	8004bce <__ssputs_r+0x72>
 8004bcc:	463e      	mov	r6, r7
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	f000 faa6 	bl	8005124 <memmove>
 8004bd8:	68a3      	ldr	r3, [r4, #8]
 8004bda:	1b9b      	subs	r3, r3, r6
 8004bdc:	60a3      	str	r3, [r4, #8]
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	4433      	add	r3, r6
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	2000      	movs	r0, #0
 8004be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bea:	462a      	mov	r2, r5
 8004bec:	f000 fac4 	bl	8005178 <_realloc_r>
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d1e0      	bne.n	8004bb8 <__ssputs_r+0x5c>
 8004bf6:	6921      	ldr	r1, [r4, #16]
 8004bf8:	4650      	mov	r0, sl
 8004bfa:	f7ff feb7 	bl	800496c <_free_r>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	f8ca 3000 	str.w	r3, [sl]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	e7e9      	b.n	8004be6 <__ssputs_r+0x8a>
	...

08004c14 <_svfiprintf_r>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	4698      	mov	r8, r3
 8004c1a:	898b      	ldrh	r3, [r1, #12]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	b09d      	sub	sp, #116	@ 0x74
 8004c20:	4607      	mov	r7, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	d510      	bpl.n	8004c4a <_svfiprintf_r+0x36>
 8004c28:	690b      	ldr	r3, [r1, #16]
 8004c2a:	b973      	cbnz	r3, 8004c4a <_svfiprintf_r+0x36>
 8004c2c:	2140      	movs	r1, #64	@ 0x40
 8004c2e:	f7ff ff09 	bl	8004a44 <_malloc_r>
 8004c32:	6028      	str	r0, [r5, #0]
 8004c34:	6128      	str	r0, [r5, #16]
 8004c36:	b930      	cbnz	r0, 8004c46 <_svfiprintf_r+0x32>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	b01d      	add	sp, #116	@ 0x74
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	2340      	movs	r3, #64	@ 0x40
 8004c48:	616b      	str	r3, [r5, #20]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c4e:	2320      	movs	r3, #32
 8004c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c58:	2330      	movs	r3, #48	@ 0x30
 8004c5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004df8 <_svfiprintf_r+0x1e4>
 8004c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c62:	f04f 0901 	mov.w	r9, #1
 8004c66:	4623      	mov	r3, r4
 8004c68:	469a      	mov	sl, r3
 8004c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c6e:	b10a      	cbz	r2, 8004c74 <_svfiprintf_r+0x60>
 8004c70:	2a25      	cmp	r2, #37	@ 0x25
 8004c72:	d1f9      	bne.n	8004c68 <_svfiprintf_r+0x54>
 8004c74:	ebba 0b04 	subs.w	fp, sl, r4
 8004c78:	d00b      	beq.n	8004c92 <_svfiprintf_r+0x7e>
 8004c7a:	465b      	mov	r3, fp
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4638      	mov	r0, r7
 8004c82:	f7ff ff6b 	bl	8004b5c <__ssputs_r>
 8004c86:	3001      	adds	r0, #1
 8004c88:	f000 80a7 	beq.w	8004dda <_svfiprintf_r+0x1c6>
 8004c8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c8e:	445a      	add	r2, fp
 8004c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c92:	f89a 3000 	ldrb.w	r3, [sl]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 809f 	beq.w	8004dda <_svfiprintf_r+0x1c6>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca6:	f10a 0a01 	add.w	sl, sl, #1
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	9307      	str	r3, [sp, #28]
 8004cae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cb4:	4654      	mov	r4, sl
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbc:	484e      	ldr	r0, [pc, #312]	@ (8004df8 <_svfiprintf_r+0x1e4>)
 8004cbe:	f7fb fa97 	bl	80001f0 <memchr>
 8004cc2:	9a04      	ldr	r2, [sp, #16]
 8004cc4:	b9d8      	cbnz	r0, 8004cfe <_svfiprintf_r+0xea>
 8004cc6:	06d0      	lsls	r0, r2, #27
 8004cc8:	bf44      	itt	mi
 8004cca:	2320      	movmi	r3, #32
 8004ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd0:	0711      	lsls	r1, r2, #28
 8004cd2:	bf44      	itt	mi
 8004cd4:	232b      	movmi	r3, #43	@ 0x2b
 8004cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cda:	f89a 3000 	ldrb.w	r3, [sl]
 8004cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce0:	d015      	beq.n	8004d0e <_svfiprintf_r+0xfa>
 8004ce2:	9a07      	ldr	r2, [sp, #28]
 8004ce4:	4654      	mov	r4, sl
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f04f 0c0a 	mov.w	ip, #10
 8004cec:	4621      	mov	r1, r4
 8004cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf2:	3b30      	subs	r3, #48	@ 0x30
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	d94b      	bls.n	8004d90 <_svfiprintf_r+0x17c>
 8004cf8:	b1b0      	cbz	r0, 8004d28 <_svfiprintf_r+0x114>
 8004cfa:	9207      	str	r2, [sp, #28]
 8004cfc:	e014      	b.n	8004d28 <_svfiprintf_r+0x114>
 8004cfe:	eba0 0308 	sub.w	r3, r0, r8
 8004d02:	fa09 f303 	lsl.w	r3, r9, r3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	9304      	str	r3, [sp, #16]
 8004d0a:	46a2      	mov	sl, r4
 8004d0c:	e7d2      	b.n	8004cb4 <_svfiprintf_r+0xa0>
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	1d19      	adds	r1, r3, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	9103      	str	r1, [sp, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bfbb      	ittet	lt
 8004d1a:	425b      	neglt	r3, r3
 8004d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d20:	9307      	strge	r3, [sp, #28]
 8004d22:	9307      	strlt	r3, [sp, #28]
 8004d24:	bfb8      	it	lt
 8004d26:	9204      	strlt	r2, [sp, #16]
 8004d28:	7823      	ldrb	r3, [r4, #0]
 8004d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d2c:	d10a      	bne.n	8004d44 <_svfiprintf_r+0x130>
 8004d2e:	7863      	ldrb	r3, [r4, #1]
 8004d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d32:	d132      	bne.n	8004d9a <_svfiprintf_r+0x186>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	1d1a      	adds	r2, r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	9203      	str	r2, [sp, #12]
 8004d3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d40:	3402      	adds	r4, #2
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e08 <_svfiprintf_r+0x1f4>
 8004d48:	7821      	ldrb	r1, [r4, #0]
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	f7fb fa4f 	bl	80001f0 <memchr>
 8004d52:	b138      	cbz	r0, 8004d64 <_svfiprintf_r+0x150>
 8004d54:	9b04      	ldr	r3, [sp, #16]
 8004d56:	eba0 000a 	sub.w	r0, r0, sl
 8004d5a:	2240      	movs	r2, #64	@ 0x40
 8004d5c:	4082      	lsls	r2, r0
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	3401      	adds	r4, #1
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d68:	4824      	ldr	r0, [pc, #144]	@ (8004dfc <_svfiprintf_r+0x1e8>)
 8004d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d6e:	2206      	movs	r2, #6
 8004d70:	f7fb fa3e 	bl	80001f0 <memchr>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d036      	beq.n	8004de6 <_svfiprintf_r+0x1d2>
 8004d78:	4b21      	ldr	r3, [pc, #132]	@ (8004e00 <_svfiprintf_r+0x1ec>)
 8004d7a:	bb1b      	cbnz	r3, 8004dc4 <_svfiprintf_r+0x1b0>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	3307      	adds	r3, #7
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	3308      	adds	r3, #8
 8004d86:	9303      	str	r3, [sp, #12]
 8004d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8a:	4433      	add	r3, r6
 8004d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d8e:	e76a      	b.n	8004c66 <_svfiprintf_r+0x52>
 8004d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d94:	460c      	mov	r4, r1
 8004d96:	2001      	movs	r0, #1
 8004d98:	e7a8      	b.n	8004cec <_svfiprintf_r+0xd8>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	3401      	adds	r4, #1
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f04f 0c0a 	mov.w	ip, #10
 8004da6:	4620      	mov	r0, r4
 8004da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dac:	3a30      	subs	r2, #48	@ 0x30
 8004dae:	2a09      	cmp	r2, #9
 8004db0:	d903      	bls.n	8004dba <_svfiprintf_r+0x1a6>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0c6      	beq.n	8004d44 <_svfiprintf_r+0x130>
 8004db6:	9105      	str	r1, [sp, #20]
 8004db8:	e7c4      	b.n	8004d44 <_svfiprintf_r+0x130>
 8004dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e7f0      	b.n	8004da6 <_svfiprintf_r+0x192>
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4b0e      	ldr	r3, [pc, #56]	@ (8004e04 <_svfiprintf_r+0x1f0>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f3af 8000 	nop.w
 8004dd4:	1c42      	adds	r2, r0, #1
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	d1d6      	bne.n	8004d88 <_svfiprintf_r+0x174>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	065b      	lsls	r3, r3, #25
 8004dde:	f53f af2d 	bmi.w	8004c3c <_svfiprintf_r+0x28>
 8004de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de4:	e72c      	b.n	8004c40 <_svfiprintf_r+0x2c>
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <_svfiprintf_r+0x1f0>)
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	4638      	mov	r0, r7
 8004df2:	f000 f879 	bl	8004ee8 <_printf_i>
 8004df6:	e7ed      	b.n	8004dd4 <_svfiprintf_r+0x1c0>
 8004df8:	080053b5 	.word	0x080053b5
 8004dfc:	080053bf 	.word	0x080053bf
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004b5d 	.word	0x08004b5d
 8004e08:	080053bb 	.word	0x080053bb

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4698      	mov	r8, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfb8      	it	lt
 8004e20:	4613      	movlt	r3, r2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc26      	bgt.n	8004ea2 <_printf_common+0x96>
 8004e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	3b00      	subs	r3, #0
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d42b      	bmi.n	8004ebc <_printf_common+0xb0>
 8004e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e68:	4641      	mov	r1, r8
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	47c8      	blx	r9
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d01e      	beq.n	8004eb0 <_printf_common+0xa4>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf02      	ittt	eq
 8004e7e:	68e5      	ldreq	r5, [r4, #12]
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	1aed      	subeq	r5, r5, r3
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	bf0c      	ite	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	2500      	movne	r5, #0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfc4      	itt	gt
 8004e92:	1a9b      	subgt	r3, r3, r2
 8004e94:	18ed      	addgt	r5, r5, r3
 8004e96:	2600      	movs	r6, #0
 8004e98:	341a      	adds	r4, #26
 8004e9a:	42b5      	cmp	r5, r6
 8004e9c:	d11a      	bne.n	8004ed4 <_printf_common+0xc8>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e008      	b.n	8004eb4 <_printf_common+0xa8>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	47c8      	blx	r9
 8004eac:	3001      	adds	r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_printf_common+0xac>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7c6      	b.n	8004e4a <_printf_common+0x3e>
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	2030      	movs	r0, #48	@ 0x30
 8004ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ec6:	4422      	add	r2, r4
 8004ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	e7c7      	b.n	8004e64 <_printf_common+0x58>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	4641      	mov	r1, r8
 8004eda:	4638      	mov	r0, r7
 8004edc:	47c8      	blx	r9
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d0e6      	beq.n	8004eb0 <_printf_common+0xa4>
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7d9      	b.n	8004e9a <_printf_common+0x8e>
	...

08004ee8 <_printf_i>:
 8004ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	7e0f      	ldrb	r7, [r1, #24]
 8004eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ef0:	2f78      	cmp	r7, #120	@ 0x78
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004efe:	d807      	bhi.n	8004f10 <_printf_i+0x28>
 8004f00:	2f62      	cmp	r7, #98	@ 0x62
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x32>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	f000 80d1 	beq.w	80050ac <_printf_i+0x1c4>
 8004f0a:	2f58      	cmp	r7, #88	@ 0x58
 8004f0c:	f000 80b8 	beq.w	8005080 <_printf_i+0x198>
 8004f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f18:	e03a      	b.n	8004f90 <_printf_i+0xa8>
 8004f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f1e:	2b15      	cmp	r3, #21
 8004f20:	d8f6      	bhi.n	8004f10 <_printf_i+0x28>
 8004f22:	a101      	add	r1, pc, #4	@ (adr r1, 8004f28 <_printf_i+0x40>)
 8004f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08004f11 	.word	0x08004f11
 8004f34:	08004f11 	.word	0x08004f11
 8004f38:	08004f11 	.word	0x08004f11
 8004f3c:	08004f11 	.word	0x08004f11
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	08004f11 	.word	0x08004f11
 8004f48:	08004f11 	.word	0x08004f11
 8004f4c:	08004f11 	.word	0x08004f11
 8004f50:	08004f11 	.word	0x08004f11
 8004f54:	08005093 	.word	0x08005093
 8004f58:	08004fbf 	.word	0x08004fbf
 8004f5c:	0800504d 	.word	0x0800504d
 8004f60:	08004f11 	.word	0x08004f11
 8004f64:	08004f11 	.word	0x08004f11
 8004f68:	080050b5 	.word	0x080050b5
 8004f6c:	08004f11 	.word	0x08004f11
 8004f70:	08004fbf 	.word	0x08004fbf
 8004f74:	08004f11 	.word	0x08004f11
 8004f78:	08004f11 	.word	0x08004f11
 8004f7c:	08005055 	.word	0x08005055
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6032      	str	r2, [r6, #0]
 8004f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09c      	b.n	80050ce <_printf_i+0x1e6>
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	6031      	str	r1, [r6, #0]
 8004f9c:	0606      	lsls	r6, r0, #24
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0xbc>
 8004fa0:	681d      	ldr	r5, [r3, #0]
 8004fa2:	e003      	b.n	8004fac <_printf_i+0xc4>
 8004fa4:	0645      	lsls	r5, r0, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0xb8>
 8004fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	da03      	bge.n	8004fb8 <_printf_i+0xd0>
 8004fb0:	232d      	movs	r3, #45	@ 0x2d
 8004fb2:	426d      	negs	r5, r5
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb8:	4858      	ldr	r0, [pc, #352]	@ (800511c <_printf_i+0x234>)
 8004fba:	230a      	movs	r3, #10
 8004fbc:	e011      	b.n	8004fe2 <_printf_i+0xfa>
 8004fbe:	6821      	ldr	r1, [r4, #0]
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	0608      	lsls	r0, r1, #24
 8004fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0xe8>
 8004fca:	0649      	lsls	r1, r1, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2ad      	uxthmi	r5, r5
 8004fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fd2:	4852      	ldr	r0, [pc, #328]	@ (800511c <_printf_i+0x234>)
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	bf14      	ite	ne
 8004fd8:	230a      	movne	r3, #10
 8004fda:	2308      	moveq	r3, #8
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fe2:	6866      	ldr	r6, [r4, #4]
 8004fe4:	60a6      	str	r6, [r4, #8]
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	db05      	blt.n	8004ff6 <_printf_i+0x10e>
 8004fea:	6821      	ldr	r1, [r4, #0]
 8004fec:	432e      	orrs	r6, r5
 8004fee:	f021 0104 	bic.w	r1, r1, #4
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	d04b      	beq.n	800508e <_printf_i+0x1a6>
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffc:	fb03 5711 	mls	r7, r3, r1, r5
 8005000:	5dc7      	ldrb	r7, [r0, r7]
 8005002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005006:	462f      	mov	r7, r5
 8005008:	42bb      	cmp	r3, r7
 800500a:	460d      	mov	r5, r1
 800500c:	d9f4      	bls.n	8004ff8 <_printf_i+0x110>
 800500e:	2b08      	cmp	r3, #8
 8005010:	d10b      	bne.n	800502a <_printf_i+0x142>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	07df      	lsls	r7, r3, #31
 8005016:	d508      	bpl.n	800502a <_printf_i+0x142>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6861      	ldr	r1, [r4, #4]
 800501c:	4299      	cmp	r1, r3
 800501e:	bfde      	ittt	le
 8005020:	2330      	movle	r3, #48	@ 0x30
 8005022:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005026:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502a:	1b92      	subs	r2, r2, r6
 800502c:	6122      	str	r2, [r4, #16]
 800502e:	f8cd a000 	str.w	sl, [sp]
 8005032:	464b      	mov	r3, r9
 8005034:	aa03      	add	r2, sp, #12
 8005036:	4621      	mov	r1, r4
 8005038:	4640      	mov	r0, r8
 800503a:	f7ff fee7 	bl	8004e0c <_printf_common>
 800503e:	3001      	adds	r0, #1
 8005040:	d14a      	bne.n	80050d8 <_printf_i+0x1f0>
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	b004      	add	sp, #16
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	4832      	ldr	r0, [pc, #200]	@ (8005120 <_printf_i+0x238>)
 8005056:	2778      	movs	r7, #120	@ 0x78
 8005058:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	061f      	lsls	r7, r3, #24
 8005062:	f851 5b04 	ldr.w	r5, [r1], #4
 8005066:	d402      	bmi.n	800506e <_printf_i+0x186>
 8005068:	065f      	lsls	r7, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	6031      	str	r1, [r6, #0]
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	bf44      	itt	mi
 8005074:	f043 0320 	orrmi.w	r3, r3, #32
 8005078:	6023      	strmi	r3, [r4, #0]
 800507a:	b11d      	cbz	r5, 8005084 <_printf_i+0x19c>
 800507c:	2310      	movs	r3, #16
 800507e:	e7ad      	b.n	8004fdc <_printf_i+0xf4>
 8005080:	4826      	ldr	r0, [pc, #152]	@ (800511c <_printf_i+0x234>)
 8005082:	e7e9      	b.n	8005058 <_printf_i+0x170>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	e7f6      	b.n	800507c <_printf_i+0x194>
 800508e:	4616      	mov	r6, r2
 8005090:	e7bd      	b.n	800500e <_printf_i+0x126>
 8005092:	6833      	ldr	r3, [r6, #0]
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	6961      	ldr	r1, [r4, #20]
 8005098:	1d18      	adds	r0, r3, #4
 800509a:	6030      	str	r0, [r6, #0]
 800509c:	062e      	lsls	r6, r5, #24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0x1be>
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x1c4>
 80050a6:	0668      	lsls	r0, r5, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x1ba>
 80050aa:	8019      	strh	r1, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	4616      	mov	r6, r2
 80050b2:	e7bc      	b.n	800502e <_printf_i+0x146>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	6032      	str	r2, [r6, #0]
 80050ba:	681e      	ldr	r6, [r3, #0]
 80050bc:	6862      	ldr	r2, [r4, #4]
 80050be:	2100      	movs	r1, #0
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7fb f895 	bl	80001f0 <memchr>
 80050c6:	b108      	cbz	r0, 80050cc <_printf_i+0x1e4>
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d6:	e7aa      	b.n	800502e <_printf_i+0x146>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	4632      	mov	r2, r6
 80050dc:	4649      	mov	r1, r9
 80050de:	4640      	mov	r0, r8
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0ad      	beq.n	8005042 <_printf_i+0x15a>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d413      	bmi.n	8005114 <_printf_i+0x22c>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e7a6      	b.n	8005046 <_printf_i+0x15e>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4632      	mov	r2, r6
 80050fc:	4649      	mov	r1, r9
 80050fe:	4640      	mov	r0, r8
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d09d      	beq.n	8005042 <_printf_i+0x15a>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	9903      	ldr	r1, [sp, #12]
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	42ab      	cmp	r3, r5
 8005110:	dcf2      	bgt.n	80050f8 <_printf_i+0x210>
 8005112:	e7eb      	b.n	80050ec <_printf_i+0x204>
 8005114:	2500      	movs	r5, #0
 8005116:	f104 0619 	add.w	r6, r4, #25
 800511a:	e7f5      	b.n	8005108 <_printf_i+0x220>
 800511c:	080053c6 	.word	0x080053c6
 8005120:	080053d7 	.word	0x080053d7

08005124 <memmove>:
 8005124:	4288      	cmp	r0, r1
 8005126:	b510      	push	{r4, lr}
 8005128:	eb01 0402 	add.w	r4, r1, r2
 800512c:	d902      	bls.n	8005134 <memmove+0x10>
 800512e:	4284      	cmp	r4, r0
 8005130:	4623      	mov	r3, r4
 8005132:	d807      	bhi.n	8005144 <memmove+0x20>
 8005134:	1e43      	subs	r3, r0, #1
 8005136:	42a1      	cmp	r1, r4
 8005138:	d008      	beq.n	800514c <memmove+0x28>
 800513a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800513e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005142:	e7f8      	b.n	8005136 <memmove+0x12>
 8005144:	4402      	add	r2, r0
 8005146:	4601      	mov	r1, r0
 8005148:	428a      	cmp	r2, r1
 800514a:	d100      	bne.n	800514e <memmove+0x2a>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005156:	e7f7      	b.n	8005148 <memmove+0x24>

08005158 <_sbrk_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d06      	ldr	r5, [pc, #24]	@ (8005174 <_sbrk_r+0x1c>)
 800515c:	2300      	movs	r3, #0
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fc faa0 	bl	80016a8 <_sbrk>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_sbrk_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_sbrk_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	200004ec 	.word	0x200004ec

08005178 <_realloc_r>:
 8005178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517c:	4607      	mov	r7, r0
 800517e:	4614      	mov	r4, r2
 8005180:	460d      	mov	r5, r1
 8005182:	b921      	cbnz	r1, 800518e <_realloc_r+0x16>
 8005184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005188:	4611      	mov	r1, r2
 800518a:	f7ff bc5b 	b.w	8004a44 <_malloc_r>
 800518e:	b92a      	cbnz	r2, 800519c <_realloc_r+0x24>
 8005190:	f7ff fbec 	bl	800496c <_free_r>
 8005194:	4625      	mov	r5, r4
 8005196:	4628      	mov	r0, r5
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	f000 f81a 	bl	80051d4 <_malloc_usable_size_r>
 80051a0:	4284      	cmp	r4, r0
 80051a2:	4606      	mov	r6, r0
 80051a4:	d802      	bhi.n	80051ac <_realloc_r+0x34>
 80051a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051aa:	d8f4      	bhi.n	8005196 <_realloc_r+0x1e>
 80051ac:	4621      	mov	r1, r4
 80051ae:	4638      	mov	r0, r7
 80051b0:	f7ff fc48 	bl	8004a44 <_malloc_r>
 80051b4:	4680      	mov	r8, r0
 80051b6:	b908      	cbnz	r0, 80051bc <_realloc_r+0x44>
 80051b8:	4645      	mov	r5, r8
 80051ba:	e7ec      	b.n	8005196 <_realloc_r+0x1e>
 80051bc:	42b4      	cmp	r4, r6
 80051be:	4622      	mov	r2, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	bf28      	it	cs
 80051c4:	4632      	movcs	r2, r6
 80051c6:	f7ff fbc3 	bl	8004950 <memcpy>
 80051ca:	4629      	mov	r1, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff fbcd 	bl	800496c <_free_r>
 80051d2:	e7f1      	b.n	80051b8 <_realloc_r+0x40>

080051d4 <_malloc_usable_size_r>:
 80051d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d8:	1f18      	subs	r0, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bfbc      	itt	lt
 80051de:	580b      	ldrlt	r3, [r1, r0]
 80051e0:	18c0      	addlt	r0, r0, r3
 80051e2:	4770      	bx	lr

080051e4 <_init>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	bf00      	nop
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr

080051f0 <_fini>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr
