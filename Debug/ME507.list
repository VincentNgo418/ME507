
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080065b4  080065b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f8  080067f8  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006800  08006800  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006804  08006804  00007804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006808  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000060  08006868  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08006868  00008620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001090f  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c4  00000000  00000000  0001899f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccd  00000000  00000000  0001bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017355  00000000  00000000  0001ca55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001348a  00000000  00000000  00033daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091770  00000000  00000000  00047234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d89a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d78  00000000  00000000  000d89e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000dd760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800659c 	.word	0x0800659c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800659c 	.word	0x0800659c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 ff6f 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f881 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fb8f 	bl	8000cec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ce:	f000 fb63 	bl	8000c98 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005d2:	f000 f9db 	bl	800098c <MX_TIM2_Init>
  MX_I2C3_Init();
 80005d6:	f000 f90f 	bl	80007f8 <MX_I2C3_Init>
  MX_TIM1_Init();
 80005da:	f000 f93b 	bl	8000854 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005de:	f000 fa29 	bl	8000a34 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 faa1 	bl	8000b28 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005e6:	f000 faf3 	bl	8000bd0 <MX_TIM5_Init>
  MX_I2C2_Init();
 80005ea:	f000 f8d7 	bl	800079c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  motCmdPat = re_compile("M[0-1][A-F0-9_][A-F0-9_]");
 80005ee:	482b      	ldr	r0, [pc, #172]	@ (800069c <main+0xe0>)
 80005f0:	f000 fed2 	bl	8001398 <re_compile>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <main+0xe4>)
 80005f8:	6013      	str	r3, [r2, #0]


  len = sprintf(huartLog, "hello\r\n");
 80005fa:	492a      	ldr	r1, [pc, #168]	@ (80006a4 <main+0xe8>)
 80005fc:	482a      	ldr	r0, [pc, #168]	@ (80006a8 <main+0xec>)
 80005fe:	f004 fe81 	bl	8005304 <siprintf>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <main+0xf0>)
 8000608:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 800060a:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <main+0xf0>)
 800060c:	881a      	ldrh	r2, [r3, #0]
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	4925      	ldr	r1, [pc, #148]	@ (80006a8 <main+0xec>)
 8000614:	4826      	ldr	r0, [pc, #152]	@ (80006b0 <main+0xf4>)
 8000616:	f003 fe6f 	bl	80042f8 <HAL_UART_Transmit>

  motor_t motor1 = new_motor(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800061a:	f107 0010 	add.w	r0, r7, #16
 800061e:	2304      	movs	r3, #4
 8000620:	2200      	movs	r2, #0
 8000622:	4924      	ldr	r1, [pc, #144]	@ (80006b4 <main+0xf8>)
 8000624:	f000 fd00 	bl	8001028 <new_motor>
  motor_t motor2 = new_motor(&htim5, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000628:	4638      	mov	r0, r7
 800062a:	230c      	movs	r3, #12
 800062c:	2208      	movs	r2, #8
 800062e:	4922      	ldr	r1, [pc, #136]	@ (80006b8 <main+0xfc>)
 8000630:	f000 fcfa 	bl	8001028 <new_motor>


  if( HAL_UART_Receive_IT (&huart1,(uint8_t*) rxBuf, rxNum) != 0x00U) {
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <main+0x100>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4921      	ldr	r1, [pc, #132]	@ (80006c0 <main+0x104>)
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <main+0xf4>)
 800063e:	f003 fee6 	bl	800440e <HAL_UART_Receive_IT>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00f      	beq.n	8000668 <main+0xac>
	  len = sprintf(huartLog, "UART error\r\n");
 8000648:	491e      	ldr	r1, [pc, #120]	@ (80006c4 <main+0x108>)
 800064a:	4817      	ldr	r0, [pc, #92]	@ (80006a8 <main+0xec>)
 800064c:	f004 fe5a 	bl	8005304 <siprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <main+0xf0>)
 8000656:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <main+0xf0>)
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000660:	4911      	ldr	r1, [pc, #68]	@ (80006a8 <main+0xec>)
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <main+0xf4>)
 8000664:	f003 fe48 	bl	80042f8 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066c:	f001 ff8c 	bl	8002588 <HAL_Delay>

	  set_duty(&motor1, pulse[0]);
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <main+0x10c>)
 8000672:	edd3 7a00 	vldr	s15, [r3]
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	eeb0 0a67 	vmov.f32	s0, s15
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fcf8 	bl	8001074 <set_duty>
	  set_duty(&motor2, pulse[1]);
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <main+0x10c>)
 8000686:	edd3 7a01 	vldr	s15, [r3, #4]
 800068a:	463b      	mov	r3, r7
 800068c:	eeb0 0a67 	vmov.f32	s0, s15
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fcef 	bl	8001074 <set_duty>
	  HAL_Delay(1000);
 8000696:	bf00      	nop
 8000698:	e7e6      	b.n	8000668 <main+0xac>
 800069a:	bf00      	nop
 800069c:	080065b4 	.word	0x080065b4
 80006a0:	200003b0 	.word	0x200003b0
 80006a4:	080065d0 	.word	0x080065d0
 80006a8:	200002d4 	.word	0x200002d4
 80006ac:	20000340 	.word	0x20000340
 80006b0:	2000028c 	.word	0x2000028c
 80006b4:	200001b4 	.word	0x200001b4
 80006b8:	20000244 	.word	0x20000244
 80006bc:	20000002 	.word	0x20000002
 80006c0:	200003ac 	.word	0x200003ac
 80006c4:	080065d8 	.word	0x080065d8
 80006c8:	20000338 	.word	0x20000338

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fe62 	bl	80053a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <SystemClock_Config+0xc8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <SystemClock_Config+0xcc>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000740:	2360      	movs	r3, #96	@ 0x60
 8000742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fbc3 	bl	8002edc <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800075c:	f000 fc5e 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2103      	movs	r1, #3
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fe25 	bl	80033cc <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000788:	f000 fc48 	bl	800101c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <MX_I2C2_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_I2C2_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_I2C2_Init+0x50>)
 80007da:	f002 fa3b 	bl	8002c54 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 fc1a 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000007c 	.word	0x2000007c
 80007f0:	40005800 	.word	0x40005800
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C3_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	@ (800084c <MX_I2C3_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C3_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_I2C3_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C3_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2C3_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_I2C3_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2C3_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2C3_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_I2C3_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2C3_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_I2C3_Init+0x50>)
 8000836:	f002 fa0d 	bl	8002c54 <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 fbec 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000d0 	.word	0x200000d0
 800084c:	40005c00 	.word	0x40005c00
 8000850:	000186a0 	.word	0x000186a0

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b092      	sub	sp, #72	@ 0x48
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2220      	movs	r2, #32
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fd90 	bl	80053a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000884:	4b3f      	ldr	r3, [pc, #252]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000886:	4a40      	ldr	r2, [pc, #256]	@ (8000988 <MX_TIM1_Init+0x134>)
 8000888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800088a:	4b3e      	ldr	r3, [pc, #248]	@ (8000984 <MX_TIM1_Init+0x130>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b3c      	ldr	r3, [pc, #240]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000896:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <MX_TIM1_Init+0x130>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <MX_TIM1_Init+0x130>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b36      	ldr	r3, [pc, #216]	@ (8000984 <MX_TIM1_Init+0x130>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b0:	4834      	ldr	r0, [pc, #208]	@ (8000984 <MX_TIM1_Init+0x130>)
 80008b2:	f002 ff6b 	bl	800378c <HAL_TIM_PWM_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008bc:	f000 fbae 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008cc:	4619      	mov	r1, r3
 80008ce:	482d      	ldr	r0, [pc, #180]	@ (8000984 <MX_TIM1_Init+0x130>)
 80008d0:	f003 fc02 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008da:	f000 fb9f 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008de:	2360      	movs	r3, #96	@ 0x60
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4820      	ldr	r0, [pc, #128]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000904:	f003 f8e8 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800090e:	f000 fb85 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	2204      	movs	r2, #4
 8000918:	4619      	mov	r1, r3
 800091a:	481a      	ldr	r0, [pc, #104]	@ (8000984 <MX_TIM1_Init+0x130>)
 800091c:	f003 f8dc 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000926:	f000 fb79 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	220c      	movs	r2, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4814      	ldr	r0, [pc, #80]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000934:	f003 f8d0 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800093e:	f000 fb6d 	bl	800101c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000966:	f003 fc25 	bl	80041b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000970:	f000 fb54 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000974:	4803      	ldr	r0, [pc, #12]	@ (8000984 <MX_TIM1_Init+0x130>)
 8000976:	f001 fc11 	bl	800219c <HAL_TIM_MspPostInit>

}
 800097a:	bf00      	nop
 800097c:	3748      	adds	r7, #72	@ 0x48
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000124 	.word	0x20000124
 8000988:	40010000 	.word	0x40010000

0800098c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2224      	movs	r2, #36	@ 0x24
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f004 fd02 	bl	80053a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009be:	f04f 32ff 	mov.w	r2, #4294967295
 80009c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e8:	2301      	movs	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 80009fc:	f002 ffc6 	bl	800398c <HAL_TIM_Encoder_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a06:	f000 fb09 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <MX_TIM2_Init+0xa4>)
 8000a18:	f003 fb5e 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a22:	f000 fafb 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000016c 	.word	0x2000016c

08000a34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a56:	4b32      	ldr	r3, [pc, #200]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a58:	4a32      	ldr	r2, [pc, #200]	@ (8000b24 <MX_TIM3_Init+0xf0>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a68:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a7c:	4828      	ldr	r0, [pc, #160]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a7e:	f002 fe85 	bl	800378c <HAL_TIM_PWM_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 fac8 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4821      	ldr	r0, [pc, #132]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000a9c:	f003 fb1c 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000aa6:	f000 fab9 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aaa:	2360      	movs	r3, #96	@ 0x60
 8000aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4817      	ldr	r0, [pc, #92]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000ac2:	f003 f809 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000acc:	f000 faa6 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000ad8:	f002 fffe 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ae2:	f000 fa9b 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000aee:	f002 fff3 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000af8:	f000 fa90 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	220c      	movs	r2, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000b04:	f002 ffe8 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000b0e:	f000 fa85 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b12:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <MX_TIM3_Init+0xec>)
 8000b14:	f001 fb42 	bl	800219c <HAL_TIM_MspPostInit>

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200001b4 	.word	0x200001b4
 8000b24:	40000400 	.word	0x40000400

08000b28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	@ 0x30
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2224      	movs	r2, #36	@ 0x24
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fc34 	bl	80053a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b44:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b46:	4a21      	ldr	r2, [pc, #132]	@ (8000bcc <MX_TIM4_Init+0xa4>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b72:	2301      	movs	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b82:	2301      	movs	r3, #1
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000b96:	f002 fef9 	bl	800398c <HAL_TIM_Encoder_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f000 fa3c 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_TIM4_Init+0xa0>)
 8000bb2:	f003 fa91 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000bbc:	f000 fa2e 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3730      	adds	r7, #48	@ 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200001fc 	.word	0x200001fc
 8000bcc:	40000800 	.word	0x40000800

08000bd0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bf2:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000bf4:	4a27      	ldr	r2, [pc, #156]	@ (8000c94 <MX_TIM5_Init+0xc4>)
 8000bf6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000c18:	481d      	ldr	r0, [pc, #116]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c1a:	f002 fdb7 	bl	800378c <HAL_TIM_PWM_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000c24:	f000 f9fa 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4619      	mov	r1, r3
 8000c36:	4816      	ldr	r0, [pc, #88]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c38:	f003 fa4e 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000c42:	f000 f9eb 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c46:	2360      	movs	r3, #96	@ 0x60
 8000c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2208      	movs	r2, #8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c5e:	f002 ff3b 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000c68:	f000 f9d8 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	220c      	movs	r2, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c74:	f002 ff30 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000c7e:	f000 f9cd 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c82:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <MX_TIM5_Init+0xc0>)
 8000c84:	f001 fa8a 	bl	800219c <HAL_TIM_MspPostInit>

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000244 	.word	0x20000244
 8000c94:	40000c00 	.word	0x40000c00

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <MX_USART1_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f003 fac2 	bl	8004258 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f000 f99f 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000028c 	.word	0x2000028c
 8000ce8:	40011000 	.word	0x40011000

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a18      	ldr	r2, [pc, #96]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_GPIO_Init+0xd4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d78:	4812      	ldr	r0, [pc, #72]	@ (8000dc4 <MX_GPIO_Init+0xd8>)
 8000d7a:	f001 ff51 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <MX_GPIO_Init+0xdc>)
 8000d94:	f001 fdc0 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_GPIO_Init+0xd8>)
 8000db2:	f001 fdb1 	bl	8002918 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020800 	.word	0x40020800

08000dcc <Motor_Command_Parse>:

/* USER CODE BEGIN 4 */

void Motor_Command_Parse(char* cmdBuf) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	int32_t duty = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]

	//format string to that sscanf can read it
	char hex[4] = {'0','x','0','0'};
 8000dd8:	4b37      	ldr	r3, [pc, #220]	@ (8000eb8 <Motor_Command_Parse+0xec>)
 8000dda:	60bb      	str	r3, [r7, #8]
	hex[2] = cmdBuf[2];
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	72bb      	strb	r3, [r7, #10]
	hex[3] = cmdBuf[3];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	78db      	ldrb	r3, [r3, #3]
 8000de6:	72fb      	strb	r3, [r7, #11]

	//parse string, save value in duty
	sscanf(hex, "%i", (int*) &duty);
 8000de8:	f107 020c 	add.w	r2, r7, #12
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4932      	ldr	r1, [pc, #200]	@ (8000ebc <Motor_Command_Parse+0xf0>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 faa8 	bl	8005348 <siscanf>

	//MAP (0,255) to (-100, 100)
	//if duty < -100 (maps to 156) or duty > 100 (maps to 100) invalid range
	if(duty < 156 && duty > 100) {
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b9b      	cmp	r3, #155	@ 0x9b
 8000dfc:	dc13      	bgt.n	8000e26 <Motor_Command_Parse+0x5a>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b64      	cmp	r3, #100	@ 0x64
 8000e02:	dd10      	ble.n	8000e26 <Motor_Command_Parse+0x5a>
		len = sprintf(huartLog, "Duty value was not between -100 (9C) and 100 (64) \r\n");
 8000e04:	492e      	ldr	r1, [pc, #184]	@ (8000ec0 <Motor_Command_Parse+0xf4>)
 8000e06:	482f      	ldr	r0, [pc, #188]	@ (8000ec4 <Motor_Command_Parse+0xf8>)
 8000e08:	f004 fa7c 	bl	8005304 <siprintf>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <Motor_Command_Parse+0xfc>)
 8000e12:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 8000e14:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <Motor_Command_Parse+0xfc>)
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1c:	4929      	ldr	r1, [pc, #164]	@ (8000ec4 <Motor_Command_Parse+0xf8>)
 8000e1e:	482b      	ldr	r0, [pc, #172]	@ (8000ecc <Motor_Command_Parse+0x100>)
 8000e20:	f003 fa6a 	bl	80042f8 <HAL_UART_Transmit>
			len = sprintf(huartLog, "Motor 1 set to %i\r\n",(int) duty);
			HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
		}
	}

}
 8000e24:	e044      	b.n	8000eb0 <Motor_Command_Parse+0xe4>
		if (duty >= 156) {
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b9b      	cmp	r3, #155	@ 0x9b
 8000e2a:	dd03      	ble.n	8000e34 <Motor_Command_Parse+0x68>
			duty = duty - 256;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e32:	60fb      	str	r3, [r7, #12]
		if (cmdBuf[1] == '0') {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3301      	adds	r3, #1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b30      	cmp	r3, #48	@ 0x30
 8000e3c:	d119      	bne.n	8000e72 <Motor_Command_Parse+0xa6>
			pulse[0] = duty;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <Motor_Command_Parse+0x104>)
 8000e4a:	edc3 7a00 	vstr	s15, [r3]
			len = sprintf(huartLog, "Motor 0 set to %i\r\n",(int) duty);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4920      	ldr	r1, [pc, #128]	@ (8000ed4 <Motor_Command_Parse+0x108>)
 8000e54:	481b      	ldr	r0, [pc, #108]	@ (8000ec4 <Motor_Command_Parse+0xf8>)
 8000e56:	f004 fa55 	bl	8005304 <siprintf>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <Motor_Command_Parse+0xfc>)
 8000e60:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <Motor_Command_Parse+0xfc>)
 8000e64:	881a      	ldrh	r2, [r3, #0]
 8000e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6a:	4916      	ldr	r1, [pc, #88]	@ (8000ec4 <Motor_Command_Parse+0xf8>)
 8000e6c:	4817      	ldr	r0, [pc, #92]	@ (8000ecc <Motor_Command_Parse+0x100>)
 8000e6e:	f003 fa43 	bl	80042f8 <HAL_UART_Transmit>
		if (cmdBuf[1] == '1') {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3301      	adds	r3, #1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b31      	cmp	r3, #49	@ 0x31
 8000e7a:	d119      	bne.n	8000eb0 <Motor_Command_Parse+0xe4>
			pulse[1] = duty;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <Motor_Command_Parse+0x104>)
 8000e88:	edc3 7a01 	vstr	s15, [r3, #4]
			len = sprintf(huartLog, "Motor 1 set to %i\r\n",(int) duty);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4911      	ldr	r1, [pc, #68]	@ (8000ed8 <Motor_Command_Parse+0x10c>)
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <Motor_Command_Parse+0xf8>)
 8000e94:	f004 fa36 	bl	8005304 <siprintf>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <Motor_Command_Parse+0xfc>)
 8000e9e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <Motor_Command_Parse+0xfc>)
 8000ea2:	881a      	ldrh	r2, [r3, #0]
 8000ea4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea8:	4906      	ldr	r1, [pc, #24]	@ (8000ec4 <Motor_Command_Parse+0xf8>)
 8000eaa:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <Motor_Command_Parse+0x100>)
 8000eac:	f003 fa24 	bl	80042f8 <HAL_UART_Transmit>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	30307830 	.word	0x30307830
 8000ebc:	080065e8 	.word	0x080065e8
 8000ec0:	080065ec 	.word	0x080065ec
 8000ec4:	200002d4 	.word	0x200002d4
 8000ec8:	20000340 	.word	0x20000340
 8000ecc:	2000028c 	.word	0x2000028c
 8000ed0:	20000338 	.word	0x20000338
 8000ed4:	08006624 	.word	0x08006624
 8000ed8:	08006638 	.word	0x08006638

08000edc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	//receive data
    HAL_UART_Transmit(&huart1, (uint8_t*)rxBuf,strlen(rxBuf),1000);
 8000ee4:	4841      	ldr	r0, [pc, #260]	@ (8000fec <HAL_UART_RxCpltCallback+0x110>)
 8000ee6:	f7ff f97b 	bl	80001e0 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	493e      	ldr	r1, [pc, #248]	@ (8000fec <HAL_UART_RxCpltCallback+0x110>)
 8000ef4:	483e      	ldr	r0, [pc, #248]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x114>)
 8000ef6:	f003 f9ff 	bl	80042f8 <HAL_UART_Transmit>

    //compile command in cmdBuf
    cmdBuf[cmdIdx] = rxBuf[0];
 8000efa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x118>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b3a      	ldr	r3, [pc, #232]	@ (8000fec <HAL_UART_RxCpltCallback+0x110>)
 8000f02:	7819      	ldrb	r1, [r3, #0]
 8000f04:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f06:	5499      	strb	r1, [r3, r2]
    cmdIdx++;
 8000f08:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x118>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x118>)
 8000f12:	801a      	strh	r2, [r3, #0]

    //if received is newline, then parse the accumulated content
    if (rxBuf[0] == '\r') {
 8000f14:	4b35      	ldr	r3, [pc, #212]	@ (8000fec <HAL_UART_RxCpltCallback+0x110>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b0d      	cmp	r3, #13
 8000f1a:	d15c      	bne.n	8000fd6 <HAL_UART_RxCpltCallback+0xfa>

    	HAL_UART_Transmit(&huart1, (uint8_t*)newLine,2,1000);
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	2202      	movs	r2, #2
 8000f22:	4936      	ldr	r1, [pc, #216]	@ (8000ffc <HAL_UART_RxCpltCallback+0x120>)
 8000f24:	4832      	ldr	r0, [pc, #200]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x114>)
 8000f26:	f003 f9e7 	bl	80042f8 <HAL_UART_Transmit>
    	//use a flag to make sure the CMD is only parsed once
    	bool regexMatchFlag = false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]

    	//check that the data is in correct format
    	if (re_matchp(motCmdPat, cmdBuf, (int*)&matchLen) != -1) {
 8000f2e:	4b34      	ldr	r3, [pc, #208]	@ (8001000 <HAL_UART_RxCpltCallback+0x124>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a34      	ldr	r2, [pc, #208]	@ (8001004 <HAL_UART_RxCpltCallback+0x128>)
 8000f34:	4930      	ldr	r1, [pc, #192]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f9ec 	bl	8001314 <re_matchp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f42:	d01f      	beq.n	8000f84 <HAL_UART_RxCpltCallback+0xa8>

    		len = sprintf(huartLog, "yep\r\n");
 8000f44:	4930      	ldr	r1, [pc, #192]	@ (8001008 <HAL_UART_RxCpltCallback+0x12c>)
 8000f46:	4831      	ldr	r0, [pc, #196]	@ (800100c <HAL_UART_RxCpltCallback+0x130>)
 8000f48:	f004 f9dc 	bl	8005304 <siprintf>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <HAL_UART_RxCpltCallback+0x134>)
 8000f52:	801a      	strh	r2, [r3, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <HAL_UART_RxCpltCallback+0x134>)
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5c:	492b      	ldr	r1, [pc, #172]	@ (800100c <HAL_UART_RxCpltCallback+0x130>)
 8000f5e:	4824      	ldr	r0, [pc, #144]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x114>)
 8000f60:	f003 f9ca 	bl	80042f8 <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart1, (uint8_t*)cmdBuf,strlen(cmdBuf),1000);
 8000f64:	4824      	ldr	r0, [pc, #144]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f66:	f7ff f93b 	bl	80001e0 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	4921      	ldr	r1, [pc, #132]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f74:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x114>)
 8000f76:	f003 f9bf 	bl	80042f8 <HAL_UART_Transmit>
    		//call a function that will parse it and activate motors
    		Motor_Command_Parse(cmdBuf);
 8000f7a:	481f      	ldr	r0, [pc, #124]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f7c:	f7ff ff26 	bl	8000dcc <Motor_Command_Parse>
    		regexMatchFlag = true;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
    	}

    	//if cmd did not match anything, print error
    	if (!regexMatchFlag) {
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00f      	beq.n	8000fb0 <HAL_UART_RxCpltCallback+0xd4>
    		len = sprintf(huartLog, "Your command did not match any known commands\r\n");
 8000f90:	4920      	ldr	r1, [pc, #128]	@ (8001014 <HAL_UART_RxCpltCallback+0x138>)
 8000f92:	481e      	ldr	r0, [pc, #120]	@ (800100c <HAL_UART_RxCpltCallback+0x130>)
 8000f94:	f004 f9b6 	bl	8005304 <siprintf>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_UART_RxCpltCallback+0x134>)
 8000f9e:	801a      	strh	r2, [r3, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t*)huartLog,len,1000);
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_UART_RxCpltCallback+0x134>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa8:	4918      	ldr	r1, [pc, #96]	@ (800100c <HAL_UART_RxCpltCallback+0x130>)
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x114>)
 8000fac:	f003 f9a4 	bl	80042f8 <HAL_UART_Transmit>

    	}


    	//clear buffer
    	for( int i=0; i < strlen(cmdBuf); i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	e005      	b.n	8000fc2 <HAL_UART_RxCpltCallback+0xe6>
    		cmdBuf[0] = 0;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    	for( int i=0; i < strlen(cmdBuf); i++) {
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fc4:	f7ff f90c 	bl	80001e0 <strlen>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f2      	bhi.n	8000fb6 <HAL_UART_RxCpltCallback+0xda>
    	}
    	//reset idx var
    	cmdIdx = 0;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x118>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]
    }




    HAL_UART_Receive_IT (&huart1,(uint8_t*) rxBuf, rxNum);
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <HAL_UART_RxCpltCallback+0x13c>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4903      	ldr	r1, [pc, #12]	@ (8000fec <HAL_UART_RxCpltCallback+0x110>)
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x114>)
 8000fe0:	f003 fa15 	bl	800440e <HAL_UART_Receive_IT>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200003ac 	.word	0x200003ac
 8000ff0:	2000028c 	.word	0x2000028c
 8000ff4:	200003a8 	.word	0x200003a8
 8000ff8:	20000344 	.word	0x20000344
 8000ffc:	20000000 	.word	0x20000000
 8001000:	200003b0 	.word	0x200003b0
 8001004:	200003b4 	.word	0x200003b4
 8001008:	0800664c 	.word	0x0800664c
 800100c:	200002d4 	.word	0x200002d4
 8001010:	20000340 	.word	0x20000340
 8001014:	08006654 	.word	0x08006654
 8001018:	20000002 	.word	0x20000002

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <Error_Handler+0x8>

08001028 <new_motor>:
 */

#include "motor_driver.h"

//constructor
motor_t new_motor(TIM_HandleTypeDef* timer,uint32_t forward_channel, uint32_t backward_channel) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
    motor_t motor;
    motor.pulse = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	83bb      	strh	r3, [r7, #28]
    motor.max_pulse = 4799;
 800103a:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 800103e:	83fb      	strh	r3, [r7, #30]
    motor.timer = timer;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	613b      	str	r3, [r7, #16]
    motor.forward_channel = forward_channel;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	617b      	str	r3, [r7, #20]
    motor.backward_channel = backward_channel;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	61bb      	str	r3, [r7, #24]
    HAL_TIM_PWM_Start(timer, forward_channel);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f002 fbec 	bl	800382c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(timer, backward_channel);
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f002 fbe8 	bl	800382c <HAL_TIM_PWM_Start>
    return motor;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	461c      	mov	r4, r3
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
	...

08001074 <set_duty>:
    __HAL_TIM_SET_COMPARE(motor->timer, motor->forward_channel, 0);
	__HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, 0);
}

//set motor speed
void set_duty(motor_t* motor, float percentage) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	ed87 0a00 	vstr	s0, [r7]
    if(percentage < 0 && percentage >= -100) {
 8001080:	edd7 7a00 	vldr	s15, [r7]
 8001084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	f140 809b 	bpl.w	80011c6 <set_duty+0x152>
 8001090:	edd7 7a00 	vldr	s15, [r7]
 8001094:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800130c <set_duty+0x298>
 8001098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	f2c0 8091 	blt.w	80011c6 <set_duty+0x152>
    	percentage = -percentage;
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	eef1 7a67 	vneg.f32	s15, s15
 80010ac:	edc7 7a00 	vstr	s15, [r7]
        __HAL_TIM_SET_COMPARE(motor->timer, motor->forward_channel, 0);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <set_duty+0x50>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010c2:	e018      	b.n	80010f6 <set_duty+0x82>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d105      	bne.n	80010d8 <set_duty+0x64>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80010d6:	e00e      	b.n	80010f6 <set_duty+0x82>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d105      	bne.n	80010ec <set_duty+0x78>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010ea:	e004      	b.n	80010f6 <set_duty+0x82>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, percentage*motor->max_pulse/100);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <set_duty+0xb8>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	89db      	ldrh	r3, [r3, #14]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110a:	edd7 7a00 	vldr	s15, [r7]
 800110e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001112:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8001310 <set_duty+0x29c>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
 800112a:	e0e9      	b.n	8001300 <set_duty+0x28c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b04      	cmp	r3, #4
 8001132:	d116      	bne.n	8001162 <set_duty+0xee>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	89db      	ldrh	r3, [r3, #14]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	edd7 7a00 	vldr	s15, [r7]
 8001144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001148:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8001310 <set_duty+0x29c>
 800114c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115a:	ee17 3a90 	vmov	r3, s15
 800115e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001160:	e0ce      	b.n	8001300 <set_duty+0x28c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b08      	cmp	r3, #8
 8001168:	d116      	bne.n	8001198 <set_duty+0x124>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	89db      	ldrh	r3, [r3, #14]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001176:	edd7 7a00 	vldr	s15, [r7]
 800117a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8001310 <set_duty+0x29c>
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001196:	e0b3      	b.n	8001300 <set_duty+0x28c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	89db      	ldrh	r3, [r3, #14]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	edd7 7a00 	vldr	s15, [r7]
 80011a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ac:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001310 <set_duty+0x29c>
 80011b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011be:	ee17 3a90 	vmov	r3, s15
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	e09c      	b.n	8001300 <set_duty+0x28c>

    }
    else if(percentage >=0 && percentage <= 100) {
 80011c6:	edd7 7a00 	vldr	s15, [r7]
 80011ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	da00      	bge.n	80011d6 <set_duty+0x162>
        __HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, 0);
    }
    else{
        //do nothing for now
    }
}
 80011d4:	e094      	b.n	8001300 <set_duty+0x28c>
    else if(percentage >=0 && percentage <= 100) {
 80011d6:	edd7 7a00 	vldr	s15, [r7]
 80011da:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001310 <set_duty+0x29c>
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d900      	bls.n	80011ea <set_duty+0x176>
}
 80011e8:	e08a      	b.n	8001300 <set_duty+0x28c>
        __HAL_TIM_SET_COMPARE(motor->timer, motor->forward_channel, percentage*motor->max_pulse/100);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d116      	bne.n	8001220 <set_duty+0x1ac>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	89db      	ldrh	r3, [r3, #14]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	edd7 7a00 	vldr	s15, [r7]
 8001202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001206:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001310 <set_duty+0x29c>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	ee17 2a90 	vmov	r2, s15
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34
 800121e:	e04b      	b.n	80012b8 <set_duty+0x244>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d116      	bne.n	8001256 <set_duty+0x1e2>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	89db      	ldrh	r3, [r3, #14]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	edd7 7a00 	vldr	s15, [r7]
 8001238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001310 <set_duty+0x29c>
 8001240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124e:	ee17 3a90 	vmov	r3, s15
 8001252:	6393      	str	r3, [r2, #56]	@ 0x38
 8001254:	e030      	b.n	80012b8 <set_duty+0x244>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d116      	bne.n	800128c <set_duty+0x218>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	89db      	ldrh	r3, [r3, #14]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	edd7 7a00 	vldr	s15, [r7]
 800126e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001272:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001310 <set_duty+0x29c>
 8001276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800128a:	e015      	b.n	80012b8 <set_duty+0x244>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	89db      	ldrh	r3, [r3, #14]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	edd7 7a00 	vldr	s15, [r7]
 800129c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a0:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001310 <set_duty+0x29c>
 80012a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b2:	ee17 3a90 	vmov	r3, s15
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, 0);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <set_duty+0x258>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012ca:	e019      	b.n	8001300 <set_duty+0x28c>
        __HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, 0);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d105      	bne.n	80012e0 <set_duty+0x26c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80012de:	e00f      	b.n	8001300 <set_duty+0x28c>
        __HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, 0);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d105      	bne.n	80012f4 <set_duty+0x280>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80012f2:	e005      	b.n	8001300 <set_duty+0x28c>
        __HAL_TIM_SET_COMPARE(motor->timer, motor->backward_channel, 0);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012fe:	e7ff      	b.n	8001300 <set_duty+0x28c>
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	c2c80000 	.word	0xc2c80000
 8001310:	42c80000 	.word	0x42c80000

08001314 <re_matchp>:
{
  return re_matchp(re_compile(pattern), text, matchlength);
}

int re_matchp(re_t pattern, const char* text, int* matchlength)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  *matchlength = 0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
  if (pattern != 0)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02f      	beq.n	800138c <re_matchp+0x78>
  {
    if (pattern[0].type == BEGIN)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d10e      	bne.n	8001352 <re_matchp+0x3e>
    {
      return ((matchpattern(&pattern[1], text, matchlength)) ? 0 : -1);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3308      	adds	r3, #8
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fd19 	bl	8001d74 <matchpattern>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <re_matchp+0x38>
 8001348:	2300      	movs	r3, #0
 800134a:	e021      	b.n	8001390 <re_matchp+0x7c>
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	e01e      	b.n	8001390 <re_matchp+0x7c>
    }
    else
    {
      int idx = -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	617b      	str	r3, [r7, #20]

      do
      {
        idx += 1;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]

        if (matchpattern(pattern, text, matchlength))
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 fd06 	bl	8001d74 <matchpattern>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <re_matchp+0x6c>
        {
          if (text[0] == '\0')
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <re_matchp+0x68>
            return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <re_matchp+0x7c>

          return idx;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	e007      	b.n	8001390 <re_matchp+0x7c>
        }
      }
      while (*text++ != '\0');
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e5      	bne.n	8001358 <re_matchp+0x44>
    }
  }
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <re_compile>:

re_t re_compile(const char* pattern)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* The sizes of the two static arrays below substantiates the static RAM usage of this module.
     MAX_REGEXP_OBJECTS is the max number of symbols in the expression.
     MAX_CHAR_CLASS_LEN determines the size of buffer for chars in all char-classes in the expression. */
  static regex_t re_compiled[MAX_REGEXP_OBJECTS];
  static unsigned char ccl_buf[MAX_CHAR_CLASS_LEN];
  int ccl_bufidx = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]

  char c;     /* current char in pattern   */
  int i = 0;  /* index into pattern        */
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  int j = 0;  /* index into re_compiled    */
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  while (pattern[i] != '\0' && (j+1 < MAX_REGEXP_OBJECTS))
 80013ac:	e1d4      	b.n	8001758 <re_compile+0x3c0>
  {
    c = pattern[i];
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	74fb      	strb	r3, [r7, #19]

    switch (c)
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	3b24      	subs	r3, #36	@ 0x24
 80013bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80013be:	f200 81ac 	bhi.w	800171a <re_compile+0x382>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <re_compile+0x30>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080014c1 	.word	0x080014c1
 80013cc:	0800171b 	.word	0x0800171b
 80013d0:	0800171b 	.word	0x0800171b
 80013d4:	0800171b 	.word	0x0800171b
 80013d8:	0800171b 	.word	0x0800171b
 80013dc:	0800171b 	.word	0x0800171b
 80013e0:	080014d9 	.word	0x080014d9
 80013e4:	080014e5 	.word	0x080014e5
 80013e8:	0800171b 	.word	0x0800171b
 80013ec:	0800171b 	.word	0x0800171b
 80013f0:	080014cd 	.word	0x080014cd
 80013f4:	0800171b 	.word	0x0800171b
 80013f8:	0800171b 	.word	0x0800171b
 80013fc:	0800171b 	.word	0x0800171b
 8001400:	0800171b 	.word	0x0800171b
 8001404:	0800171b 	.word	0x0800171b
 8001408:	0800171b 	.word	0x0800171b
 800140c:	0800171b 	.word	0x0800171b
 8001410:	0800171b 	.word	0x0800171b
 8001414:	0800171b 	.word	0x0800171b
 8001418:	0800171b 	.word	0x0800171b
 800141c:	0800171b 	.word	0x0800171b
 8001420:	0800171b 	.word	0x0800171b
 8001424:	0800171b 	.word	0x0800171b
 8001428:	0800171b 	.word	0x0800171b
 800142c:	0800171b 	.word	0x0800171b
 8001430:	0800171b 	.word	0x0800171b
 8001434:	080014f1 	.word	0x080014f1
 8001438:	0800171b 	.word	0x0800171b
 800143c:	0800171b 	.word	0x0800171b
 8001440:	0800171b 	.word	0x0800171b
 8001444:	0800171b 	.word	0x0800171b
 8001448:	0800171b 	.word	0x0800171b
 800144c:	0800171b 	.word	0x0800171b
 8001450:	0800171b 	.word	0x0800171b
 8001454:	0800171b 	.word	0x0800171b
 8001458:	0800171b 	.word	0x0800171b
 800145c:	0800171b 	.word	0x0800171b
 8001460:	0800171b 	.word	0x0800171b
 8001464:	0800171b 	.word	0x0800171b
 8001468:	0800171b 	.word	0x0800171b
 800146c:	0800171b 	.word	0x0800171b
 8001470:	0800171b 	.word	0x0800171b
 8001474:	0800171b 	.word	0x0800171b
 8001478:	0800171b 	.word	0x0800171b
 800147c:	0800171b 	.word	0x0800171b
 8001480:	0800171b 	.word	0x0800171b
 8001484:	0800171b 	.word	0x0800171b
 8001488:	0800171b 	.word	0x0800171b
 800148c:	0800171b 	.word	0x0800171b
 8001490:	0800171b 	.word	0x0800171b
 8001494:	0800171b 	.word	0x0800171b
 8001498:	0800171b 	.word	0x0800171b
 800149c:	0800171b 	.word	0x0800171b
 80014a0:	0800171b 	.word	0x0800171b
 80014a4:	08001637 	.word	0x08001637
 80014a8:	080014fd 	.word	0x080014fd
 80014ac:	0800171b 	.word	0x0800171b
 80014b0:	080014b5 	.word	0x080014b5
    {
      /* Meta-characters: */
      case '^': {    re_compiled[j].type = BEGIN;           } break;
 80014b4:	4aa3      	ldr	r2, [pc, #652]	@ (8001744 <re_compile+0x3ac>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2102      	movs	r1, #2
 80014ba:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80014be:	e139      	b.n	8001734 <re_compile+0x39c>
      case '$': {    re_compiled[j].type = END;             } break;
 80014c0:	4aa0      	ldr	r2, [pc, #640]	@ (8001744 <re_compile+0x3ac>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2103      	movs	r1, #3
 80014c6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80014ca:	e133      	b.n	8001734 <re_compile+0x39c>
      case '.': {    re_compiled[j].type = DOT;             } break;
 80014cc:	4a9d      	ldr	r2, [pc, #628]	@ (8001744 <re_compile+0x3ac>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2101      	movs	r1, #1
 80014d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80014d6:	e12d      	b.n	8001734 <re_compile+0x39c>
      case '*': {    re_compiled[j].type = STAR;            } break;
 80014d8:	4a9a      	ldr	r2, [pc, #616]	@ (8001744 <re_compile+0x3ac>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2105      	movs	r1, #5
 80014de:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80014e2:	e127      	b.n	8001734 <re_compile+0x39c>
      case '+': {    re_compiled[j].type = PLUS;            } break;
 80014e4:	4a97      	ldr	r2, [pc, #604]	@ (8001744 <re_compile+0x3ac>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2106      	movs	r1, #6
 80014ea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80014ee:	e121      	b.n	8001734 <re_compile+0x39c>
      case '?': {    re_compiled[j].type = QUESTIONMARK;    } break;
 80014f0:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <re_compile+0x3ac>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2104      	movs	r1, #4
 80014f6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80014fa:	e11b      	b.n	8001734 <re_compile+0x39c>
/*    case '|': {    re_compiled[j].type = BRANCH;          } break; <-- not working properly */

      /* Escaped character-classes (\s \w ...): */
      case '\\':
      {
        if (pattern[i+1] != '\0')
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	3301      	adds	r3, #1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8113 	beq.w	8001732 <re_compile+0x39a>
        {
          /* Skip the escape-char '\\' */
          i += 1;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	3301      	adds	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
          /* ... and check the next */
          switch (pattern[i])
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b44      	cmp	r3, #68	@ 0x44
 800151c:	d05c      	beq.n	80015d8 <re_compile+0x240>
 800151e:	2b44      	cmp	r3, #68	@ 0x44
 8001520:	db78      	blt.n	8001614 <re_compile+0x27c>
 8001522:	2b77      	cmp	r3, #119	@ 0x77
 8001524:	dc76      	bgt.n	8001614 <re_compile+0x27c>
 8001526:	2b53      	cmp	r3, #83	@ 0x53
 8001528:	db74      	blt.n	8001614 <re_compile+0x27c>
 800152a:	3b53      	subs	r3, #83	@ 0x53
 800152c:	2b24      	cmp	r3, #36	@ 0x24
 800152e:	d871      	bhi.n	8001614 <re_compile+0x27c>
 8001530:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <re_compile+0x1a0>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001609 	.word	0x08001609
 800153c:	08001615 	.word	0x08001615
 8001540:	08001615 	.word	0x08001615
 8001544:	08001615 	.word	0x08001615
 8001548:	080015f1 	.word	0x080015f1
 800154c:	08001615 	.word	0x08001615
 8001550:	08001615 	.word	0x08001615
 8001554:	08001615 	.word	0x08001615
 8001558:	08001615 	.word	0x08001615
 800155c:	08001615 	.word	0x08001615
 8001560:	08001615 	.word	0x08001615
 8001564:	08001615 	.word	0x08001615
 8001568:	08001615 	.word	0x08001615
 800156c:	08001615 	.word	0x08001615
 8001570:	08001615 	.word	0x08001615
 8001574:	08001615 	.word	0x08001615
 8001578:	08001615 	.word	0x08001615
 800157c:	080015cd 	.word	0x080015cd
 8001580:	08001615 	.word	0x08001615
 8001584:	08001615 	.word	0x08001615
 8001588:	08001615 	.word	0x08001615
 800158c:	08001615 	.word	0x08001615
 8001590:	08001615 	.word	0x08001615
 8001594:	08001615 	.word	0x08001615
 8001598:	08001615 	.word	0x08001615
 800159c:	08001615 	.word	0x08001615
 80015a0:	08001615 	.word	0x08001615
 80015a4:	08001615 	.word	0x08001615
 80015a8:	08001615 	.word	0x08001615
 80015ac:	08001615 	.word	0x08001615
 80015b0:	08001615 	.word	0x08001615
 80015b4:	08001615 	.word	0x08001615
 80015b8:	080015fd 	.word	0x080015fd
 80015bc:	08001615 	.word	0x08001615
 80015c0:	08001615 	.word	0x08001615
 80015c4:	08001615 	.word	0x08001615
 80015c8:	080015e5 	.word	0x080015e5
          {
            /* Meta-character: */
            case 'd': {    re_compiled[j].type = DIGIT;            } break;
 80015cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001744 <re_compile+0x3ac>)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	210a      	movs	r1, #10
 80015d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80015d6:	e02d      	b.n	8001634 <re_compile+0x29c>
            case 'D': {    re_compiled[j].type = NOT_DIGIT;        } break;
 80015d8:	4a5a      	ldr	r2, [pc, #360]	@ (8001744 <re_compile+0x3ac>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	210b      	movs	r1, #11
 80015de:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80015e2:	e027      	b.n	8001634 <re_compile+0x29c>
            case 'w': {    re_compiled[j].type = ALPHA;            } break;
 80015e4:	4a57      	ldr	r2, [pc, #348]	@ (8001744 <re_compile+0x3ac>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	210c      	movs	r1, #12
 80015ea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80015ee:	e021      	b.n	8001634 <re_compile+0x29c>
            case 'W': {    re_compiled[j].type = NOT_ALPHA;        } break;
 80015f0:	4a54      	ldr	r2, [pc, #336]	@ (8001744 <re_compile+0x3ac>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	210d      	movs	r1, #13
 80015f6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 80015fa:	e01b      	b.n	8001634 <re_compile+0x29c>
            case 's': {    re_compiled[j].type = WHITESPACE;       } break;
 80015fc:	4a51      	ldr	r2, [pc, #324]	@ (8001744 <re_compile+0x3ac>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	210e      	movs	r1, #14
 8001602:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8001606:	e015      	b.n	8001634 <re_compile+0x29c>
            case 'S': {    re_compiled[j].type = NOT_WHITESPACE;   } break;
 8001608:	4a4e      	ldr	r2, [pc, #312]	@ (8001744 <re_compile+0x3ac>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	210f      	movs	r1, #15
 800160e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8001612:	e00f      	b.n	8001634 <re_compile+0x29c>

            /* Escaped character, e.g. '.' or '$' */
            default:
            {
              re_compiled[j].type = CHAR;
 8001614:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <re_compile+0x3ac>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2107      	movs	r1, #7
 800161a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
              re_compiled[j].u.ch = pattern[i];
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	7819      	ldrb	r1, [r3, #0]
 8001626:	4a47      	ldr	r2, [pc, #284]	@ (8001744 <re_compile+0x3ac>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	460a      	mov	r2, r1
 8001630:	711a      	strb	r2, [r3, #4]
            } break;
 8001632:	bf00      	nop
        {
          re_compiled[j].type = CHAR;
          re_compiled[j].ch = pattern[i];
        }
*/
      } break;
 8001634:	e07d      	b.n	8001732 <re_compile+0x39a>

      /* Character class: */
      case '[':
      {
        /* Remember where the char-buffer starts. */
        int buf_begin = ccl_bufidx;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	60fb      	str	r3, [r7, #12]

        /* Look-ahead to determine if negated */
        if (pattern[i+1] == '^')
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	3301      	adds	r3, #1
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b5e      	cmp	r3, #94	@ 0x5e
 8001646:	d110      	bne.n	800166a <re_compile+0x2d2>
        {
          re_compiled[j].type = INV_CHAR_CLASS;
 8001648:	4a3e      	ldr	r2, [pc, #248]	@ (8001744 <re_compile+0x3ac>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2109      	movs	r1, #9
 800164e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
          i += 1; /* Increment i to avoid including '^' in the char-buffer */
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	3301      	adds	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
          if (pattern[i+1] == 0) /* incomplete pattern, missing non-zero char after '^' */
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	3301      	adds	r3, #1
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d136      	bne.n	80016d4 <re_compile+0x33c>
          {
            return 0;
 8001666:	2300      	movs	r3, #0
 8001668:	e086      	b.n	8001778 <re_compile+0x3e0>
          }
        }
        else
        {
          re_compiled[j].type = CHAR_CLASS;
 800166a:	4a36      	ldr	r2, [pc, #216]	@ (8001744 <re_compile+0x3ac>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2108      	movs	r1, #8
 8001670:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        }

        /* Copy characters inside [..] to buffer */
        while (    (pattern[++i] != ']')
 8001674:	e02e      	b.n	80016d4 <re_compile+0x33c>
                && (pattern[i]   != '\0')) /* Missing ] */
        {
          if (pattern[i] == '\\')
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001680:	d11a      	bne.n	80016b8 <re_compile+0x320>
          {
            if (ccl_bufidx >= MAX_CHAR_CLASS_LEN - 1)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	2b26      	cmp	r3, #38	@ 0x26
 8001686:	dd01      	ble.n	800168c <re_compile+0x2f4>
            {
              //fputs("exceeded internal buffer!\n", stderr);
              return 0;
 8001688:	2300      	movs	r3, #0
 800168a:	e075      	b.n	8001778 <re_compile+0x3e0>
            }
            if (pattern[i+1] == 0) /* incomplete pattern, missing non-zero char after '\\' */
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	3301      	adds	r3, #1
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <re_compile+0x306>
            {
              return 0;
 800169a:	2300      	movs	r3, #0
 800169c:	e06c      	b.n	8001778 <re_compile+0x3e0>
            }
            ccl_buf[ccl_bufidx++] = pattern[i++];
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	61ba      	str	r2, [r7, #24]
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	441a      	add	r2, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	61f9      	str	r1, [r7, #28]
 80016b0:	7811      	ldrb	r1, [r2, #0]
 80016b2:	4a25      	ldr	r2, [pc, #148]	@ (8001748 <re_compile+0x3b0>)
 80016b4:	54d1      	strb	r1, [r2, r3]
 80016b6:	e004      	b.n	80016c2 <re_compile+0x32a>
          }
          else if (ccl_bufidx >= MAX_CHAR_CLASS_LEN)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2b27      	cmp	r3, #39	@ 0x27
 80016bc:	dd01      	ble.n	80016c2 <re_compile+0x32a>
          {
              //fputs("exceeded internal buffer!\n", stderr);
              return 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	e05a      	b.n	8001778 <re_compile+0x3e0>
          }
          ccl_buf[ccl_bufidx++] = pattern[i];
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	441a      	add	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	61f9      	str	r1, [r7, #28]
 80016ce:	7811      	ldrb	r1, [r2, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <re_compile+0x3b0>)
 80016d2:	54d1      	strb	r1, [r2, r3]
                && (pattern[i]   != '\0')) /* Missing ] */
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
        while (    (pattern[++i] != ']')
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
                && (pattern[i]   != '\0')) /* Missing ] */
 80016e2:	2b5d      	cmp	r3, #93	@ 0x5d
 80016e4:	d005      	beq.n	80016f2 <re_compile+0x35a>
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1c1      	bne.n	8001676 <re_compile+0x2de>
        }
        if (ccl_bufidx >= MAX_CHAR_CLASS_LEN)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2b27      	cmp	r3, #39	@ 0x27
 80016f6:	dd01      	ble.n	80016fc <re_compile+0x364>
        {
            /* Catches cases such as [00000000000000000000000000000000000000][ */
            //fputs("exceeded internal buffer!\n", stderr);
            return 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e03d      	b.n	8001778 <re_compile+0x3e0>
        }
        /* Null-terminate string end */
        ccl_buf[ccl_bufidx++] = 0;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	61fa      	str	r2, [r7, #28]
 8001702:	4a11      	ldr	r2, [pc, #68]	@ (8001748 <re_compile+0x3b0>)
 8001704:	2100      	movs	r1, #0
 8001706:	54d1      	strb	r1, [r2, r3]
        re_compiled[j].u.ccl = &ccl_buf[buf_begin];
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <re_compile+0x3b0>)
 800170c:	441a      	add	r2, r3
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <re_compile+0x3ac>)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	605a      	str	r2, [r3, #4]
      } break;
 8001718:	e00c      	b.n	8001734 <re_compile+0x39c>

      /* Other characters: */
      default:
      {
        re_compiled[j].type = CHAR;
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <re_compile+0x3ac>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2107      	movs	r1, #7
 8001720:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        re_compiled[j].u.ch = c;
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <re_compile+0x3ac>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	7cfa      	ldrb	r2, [r7, #19]
 800172e:	711a      	strb	r2, [r3, #4]
      } break;
 8001730:	e000      	b.n	8001734 <re_compile+0x39c>
      } break;
 8001732:	bf00      	nop
    }
    /* no buffer-out-of-bounds access on invalid patterns - see https://github.com/kokke/tiny-regex-c/commit/1a279e04014b70b0695fba559a7c05d55e6ee90b */
    if (pattern[i] == 0)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <re_compile+0x3b4>
    {
      return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e019      	b.n	8001778 <re_compile+0x3e0>
 8001744:	200003b8 	.word	0x200003b8
 8001748:	200004a8 	.word	0x200004a8
    }

    i += 1;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3301      	adds	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
    j += 1;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  while (pattern[i] != '\0' && (j+1 < MAX_REGEXP_OBJECTS))
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <re_compile+0x3d4>
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2b1c      	cmp	r3, #28
 8001768:	f77f ae21 	ble.w	80013ae <re_compile+0x16>
  }
  /* 'UNUSED' is a sentinel used to indicate end-of-pattern */
  re_compiled[j].type = UNUSED;
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <re_compile+0x3ec>)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2100      	movs	r1, #0
 8001772:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

  return (re_t) re_compiled;
 8001776:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <re_compile+0x3ec>)
}
 8001778:	4618      	mov	r0, r3
 800177a:	3724      	adds	r7, #36	@ 0x24
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	200003b8 	.word	0x200003b8

08001788 <matchdigit>:



/* Private functions: */
static int matchdigit(char c)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  return isdigit(c);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3301      	adds	r3, #1
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <matchdigit+0x24>)
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	080066a8 	.word	0x080066a8

080017b0 <matchalpha>:
static int matchalpha(char c)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  return isalpha(c);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <matchalpha+0x24>)
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	f003 0303 	and.w	r3, r3, #3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	080066a8 	.word	0x080066a8

080017d8 <matchwhitespace>:
static int matchwhitespace(char c)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  return isspace(c);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <matchwhitespace+0x24>)
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	080066a8 	.word	0x080066a8

08001800 <matchalphanum>:
static int matchalphanum(char c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  return ((c == '_') || matchalpha(c) || matchdigit(c));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b5f      	cmp	r3, #95	@ 0x5f
 800180e:	d00d      	beq.n	800182c <matchalphanum+0x2c>
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffcc 	bl	80017b0 <matchalpha>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <matchalphanum+0x2c>
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ffb1 	bl	8001788 <matchdigit>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <matchalphanum+0x30>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <matchalphanum+0x32>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <matchrange>:
static int matchrange(char c, const char* str)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	6039      	str	r1, [r7, #0]
 8001844:	71fb      	strb	r3, [r7, #7]
  return (    (c != '-')
           && (str[0] != '\0')
           && (str[0] != '-')
           && (str[1] == '-')
           && (str[2] != '\0')
           && (    (c >= str[0])
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b2d      	cmp	r3, #45	@ 0x2d
 800184a:	d01e      	beq.n	800188a <matchrange+0x50>
           && (str[0] != '\0')
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01a      	beq.n	800188a <matchrange+0x50>
           && (str[0] != '-')
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b2d      	cmp	r3, #45	@ 0x2d
 800185a:	d016      	beq.n	800188a <matchrange+0x50>
           && (str[1] == '-')
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b2d      	cmp	r3, #45	@ 0x2d
 8001864:	d111      	bne.n	800188a <matchrange+0x50>
           && (str[2] != '\0')
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3302      	adds	r3, #2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <matchrange+0x50>
           && (    (c >= str[0])
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	429a      	cmp	r2, r3
 8001878:	d307      	bcc.n	800188a <matchrange+0x50>
                && (c <= str[2])));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3302      	adds	r3, #2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	429a      	cmp	r2, r3
 8001884:	d801      	bhi.n	800188a <matchrange+0x50>
           && (    (c >= str[0])
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <matchrange+0x52>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <matchdot>:
static int matchdot(char c)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
#if defined(RE_DOT_MATCHES_NEWLINE) && (RE_DOT_MATCHES_NEWLINE == 1)
  (void)c;
  return 1;
 80018a2:	2301      	movs	r3, #1
#else
  return c != '\n' && c != '\r';
#endif
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <ismetachar>:
static int ismetachar(char c)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  return ((c == 's') || (c == 'S') || (c == 'w') || (c == 'W') || (c == 'd') || (c == 'D'));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b73      	cmp	r3, #115	@ 0x73
 80018be:	d00e      	beq.n	80018de <ismetachar+0x2e>
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b53      	cmp	r3, #83	@ 0x53
 80018c4:	d00b      	beq.n	80018de <ismetachar+0x2e>
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b77      	cmp	r3, #119	@ 0x77
 80018ca:	d008      	beq.n	80018de <ismetachar+0x2e>
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b57      	cmp	r3, #87	@ 0x57
 80018d0:	d005      	beq.n	80018de <ismetachar+0x2e>
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b64      	cmp	r3, #100	@ 0x64
 80018d6:	d002      	beq.n	80018de <ismetachar+0x2e>
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b44      	cmp	r3, #68	@ 0x44
 80018dc:	d101      	bne.n	80018e2 <ismetachar+0x32>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <ismetachar+0x34>
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <matchmetachar>:

static int matchmetachar(char c, const char* str)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  switch (str[0])
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b44      	cmp	r3, #68	@ 0x44
 8001902:	d05f      	beq.n	80019c4 <matchmetachar+0xd4>
 8001904:	2b44      	cmp	r3, #68	@ 0x44
 8001906:	f2c0 808a 	blt.w	8001a1e <matchmetachar+0x12e>
 800190a:	2b77      	cmp	r3, #119	@ 0x77
 800190c:	f300 8087 	bgt.w	8001a1e <matchmetachar+0x12e>
 8001910:	2b53      	cmp	r3, #83	@ 0x53
 8001912:	f2c0 8084 	blt.w	8001a1e <matchmetachar+0x12e>
 8001916:	3b53      	subs	r3, #83	@ 0x53
 8001918:	2b24      	cmp	r3, #36	@ 0x24
 800191a:	f200 8080 	bhi.w	8001a1e <matchmetachar+0x12e>
 800191e:	a201      	add	r2, pc, #4	@ (adr r2, 8001924 <matchmetachar+0x34>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001a09 	.word	0x08001a09
 8001928:	08001a1f 	.word	0x08001a1f
 800192c:	08001a1f 	.word	0x08001a1f
 8001930:	08001a1f 	.word	0x08001a1f
 8001934:	080019e7 	.word	0x080019e7
 8001938:	08001a1f 	.word	0x08001a1f
 800193c:	08001a1f 	.word	0x08001a1f
 8001940:	08001a1f 	.word	0x08001a1f
 8001944:	08001a1f 	.word	0x08001a1f
 8001948:	08001a1f 	.word	0x08001a1f
 800194c:	08001a1f 	.word	0x08001a1f
 8001950:	08001a1f 	.word	0x08001a1f
 8001954:	08001a1f 	.word	0x08001a1f
 8001958:	08001a1f 	.word	0x08001a1f
 800195c:	08001a1f 	.word	0x08001a1f
 8001960:	08001a1f 	.word	0x08001a1f
 8001964:	08001a1f 	.word	0x08001a1f
 8001968:	080019b9 	.word	0x080019b9
 800196c:	08001a1f 	.word	0x08001a1f
 8001970:	08001a1f 	.word	0x08001a1f
 8001974:	08001a1f 	.word	0x08001a1f
 8001978:	08001a1f 	.word	0x08001a1f
 800197c:	08001a1f 	.word	0x08001a1f
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	080019fd 	.word	0x080019fd
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019db 	.word	0x080019db
  {
    case 'd': return  matchdigit(c);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fee4 	bl	8001788 <matchdigit>
 80019c0:	4603      	mov	r3, r0
 80019c2:	e034      	b.n	8001a2e <matchmetachar+0x13e>
    case 'D': return !matchdigit(c);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fede 	bl	8001788 <matchdigit>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	e029      	b.n	8001a2e <matchmetachar+0x13e>
    case 'w': return  matchalphanum(c);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff0f 	bl	8001800 <matchalphanum>
 80019e2:	4603      	mov	r3, r0
 80019e4:	e023      	b.n	8001a2e <matchmetachar+0x13e>
    case 'W': return !matchalphanum(c);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff09 	bl	8001800 <matchalphanum>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e018      	b.n	8001a2e <matchmetachar+0x13e>
    case 's': return  matchwhitespace(c);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff feea 	bl	80017d8 <matchwhitespace>
 8001a04:	4603      	mov	r3, r0
 8001a06:	e012      	b.n	8001a2e <matchmetachar+0x13e>
    case 'S': return !matchwhitespace(c);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fee4 	bl	80017d8 <matchwhitespace>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	e007      	b.n	8001a2e <matchmetachar+0x13e>
    default:  return (c == str[0]);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop

08001a38 <matchcharclass>:

static int matchcharclass(char c, const char* str)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  do
  {
    if (matchrange(c, str))
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fef6 	bl	800183a <matchrange>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <matchcharclass+0x20>
    {
      return 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e03d      	b.n	8001ad4 <matchcharclass+0x9c>
    }
    else if (str[0] == '\\')
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a5e:	d11a      	bne.n	8001a96 <matchcharclass+0x5e>
    {
      /* Escape-char: increment str-ptr and match on next char */
      str += 1;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	603b      	str	r3, [r7, #0]
      if (matchmetachar(c, str))
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff40 	bl	80018f0 <matchmetachar>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <matchcharclass+0x42>
      {
        return 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e02c      	b.n	8001ad4 <matchcharclass+0x9c>
      }
      else if ((c == str[0]) && !ismetachar(c))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d120      	bne.n	8001ac6 <matchcharclass+0x8e>
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff12 	bl	80018b0 <ismetachar>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <matchcharclass+0x8e>
      {
        return 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e01e      	b.n	8001ad4 <matchcharclass+0x9c>
      }
    }
    else if (c == str[0])
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d112      	bne.n	8001ac6 <matchcharclass+0x8e>
    {
      if (c == '-')
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b2d      	cmp	r3, #45	@ 0x2d
 8001aa4:	d10d      	bne.n	8001ac2 <matchcharclass+0x8a>
      {
        return ((str[-1] == '\0') || (str[1] == '\0'));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <matchcharclass+0x82>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <matchcharclass+0x86>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00a      	b.n	8001ad4 <matchcharclass+0x9c>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e008      	b.n	8001ad4 <matchcharclass+0x9c>
      }
      else
      {
        return 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e006      	b.n	8001ad4 <matchcharclass+0x9c>
      }
    }
  }
  while (*str++ != '\0');
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	603a      	str	r2, [r7, #0]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1b8      	bne.n	8001a44 <matchcharclass+0xc>

  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <matchone>:

static int matchone(regex_t p, char c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
  switch (p.type)
 8001aee:	7a3b      	ldrb	r3, [r7, #8]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	2b0e      	cmp	r3, #14
 8001af4:	d86e      	bhi.n	8001bd4 <matchone+0xf8>
 8001af6:	a201      	add	r2, pc, #4	@ (adr r2, 8001afc <matchone+0x20>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b39 	.word	0x08001b39
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001bd5 	.word	0x08001bd5
 8001b18:	08001b45 	.word	0x08001b45
 8001b1c:	08001b55 	.word	0x08001b55
 8001b20:	08001b6f 	.word	0x08001b6f
 8001b24:	08001b7b 	.word	0x08001b7b
 8001b28:	08001b91 	.word	0x08001b91
 8001b2c:	08001b9d 	.word	0x08001b9d
 8001b30:	08001bb3 	.word	0x08001bb3
 8001b34:	08001bbf 	.word	0x08001bbf
  {
    case DOT:            return matchdot(c);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff feac 	bl	8001898 <matchdot>
 8001b40:	4603      	mov	r3, r0
 8001b42:	e04e      	b.n	8001be2 <matchone+0x106>
    case CHAR_CLASS:     return  matchcharclass(c, (const char*)p.u.ccl);
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff74 	bl	8001a38 <matchcharclass>
 8001b50:	4603      	mov	r3, r0
 8001b52:	e046      	b.n	8001be2 <matchone+0x106>
    case INV_CHAR_CLASS: return !matchcharclass(c, (const char*)p.u.ccl);
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff6c 	bl	8001a38 <matchcharclass>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e039      	b.n	8001be2 <matchone+0x106>
    case DIGIT:          return  matchdigit(c);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fe09 	bl	8001788 <matchdigit>
 8001b76:	4603      	mov	r3, r0
 8001b78:	e033      	b.n	8001be2 <matchone+0x106>
    case NOT_DIGIT:      return !matchdigit(c);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe03 	bl	8001788 <matchdigit>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e028      	b.n	8001be2 <matchone+0x106>
    case ALPHA:          return  matchalphanum(c);
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe34 	bl	8001800 <matchalphanum>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	e022      	b.n	8001be2 <matchone+0x106>
    case NOT_ALPHA:      return !matchalphanum(c);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe2e 	bl	8001800 <matchalphanum>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf0c      	ite	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	2300      	movne	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e017      	b.n	8001be2 <matchone+0x106>
    case WHITESPACE:     return  matchwhitespace(c);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe0f 	bl	80017d8 <matchwhitespace>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	e011      	b.n	8001be2 <matchone+0x106>
    case NOT_WHITESPACE: return !matchwhitespace(c);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe09 	bl	80017d8 <matchwhitespace>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e006      	b.n	8001be2 <matchone+0x106>
    default:             return  (p.u.ch == c);
 8001bd4:	7b3b      	ldrb	r3, [r7, #12]
 8001bd6:	79fa      	ldrb	r2, [r7, #7]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop

08001bec <matchstar>:

static int matchstar(regex_t p, regex_t* pattern, const char* text, int* matchlength)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	f107 0408 	add.w	r4, r7, #8
 8001bf6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  int prelen = *matchlength;
 8001bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]
  const char* prepoint = text;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	613b      	str	r3, [r7, #16]
  while ((text[0] != '\0') && matchone(p, *text))
 8001c08:	e007      	b.n	8001c1a <matchstar+0x2e>
  {
    text++;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	603b      	str	r3, [r7, #0]
    (*matchlength)++;
 8001c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c18:	601a      	str	r2, [r3, #0]
  while ((text[0] != '\0') && matchone(p, *text))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01e      	beq.n	8001c60 <matchstar+0x74>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c30:	f7ff ff54 	bl	8001adc <matchone>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e7      	bne.n	8001c0a <matchstar+0x1e>
  }
  while (text >= prepoint)
 8001c3a:	e011      	b.n	8001c60 <matchstar+0x74>
  {
    if (matchpattern(pattern, text--, matchlength))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	603a      	str	r2, [r7, #0]
 8001c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f894 	bl	8001d74 <matchpattern>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <matchstar+0x6a>
      return 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00c      	b.n	8001c70 <matchstar+0x84>
    (*matchlength)--;
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	1e5a      	subs	r2, r3, #1
 8001c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5e:	601a      	str	r2, [r3, #0]
  while (text >= prepoint)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d2e9      	bcs.n	8001c3c <matchstar+0x50>
  }

  *matchlength = prelen;
 8001c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]
  return 0;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <matchplus>:

static int matchplus(regex_t p, regex_t* pattern, const char* text, int* matchlength)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f107 0408 	add.w	r4, r7, #8
 8001c82:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  const char* prepoint = text;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
  while ((text[0] != '\0') && matchone(p, *text))
 8001c8e:	e007      	b.n	8001ca0 <matchplus+0x28>
  {
    text++;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	603b      	str	r3, [r7, #0]
    (*matchlength)++;
 8001c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9e:	601a      	str	r2, [r3, #0]
  while ((text[0] != '\0') && matchone(p, *text))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01e      	beq.n	8001ce6 <matchplus+0x6e>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cb6:	f7ff ff11 	bl	8001adc <matchone>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e7      	bne.n	8001c90 <matchplus+0x18>
  }
  while (text > prepoint)
 8001cc0:	e011      	b.n	8001ce6 <matchplus+0x6e>
  {
    if (matchpattern(pattern, text--, matchlength))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1e5a      	subs	r2, r3, #1
 8001cc6:	603a      	str	r2, [r7, #0]
 8001cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f851 	bl	8001d74 <matchpattern>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <matchplus+0x64>
      return 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e009      	b.n	8001cf0 <matchplus+0x78>
    (*matchlength)--;
 8001cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce4:	601a      	str	r2, [r3, #0]
  while (text > prepoint)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d8e9      	bhi.n	8001cc2 <matchplus+0x4a>
  }

  return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}

08001cf8 <matchquestion>:

static int matchquestion(regex_t p, regex_t* pattern, const char* text, int* matchlength)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	f107 0408 	add.w	r4, r7, #8
 8001d02:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  if (p.type == UNUSED)
 8001d0a:	7a3b      	ldrb	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <matchquestion+0x1c>
    return 1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e02b      	b.n	8001d6c <matchquestion+0x74>
  if (matchpattern(pattern, text, matchlength))
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f82b 	bl	8001d74 <matchpattern>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <matchquestion+0x30>
      return 1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e021      	b.n	8001d6c <matchquestion+0x74>
  if (*text && matchone(p, *text++))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01c      	beq.n	8001d6a <matchquestion+0x72>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	603a      	str	r2, [r7, #0]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d42:	f7ff fecb 	bl	8001adc <matchone>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <matchquestion+0x72>
  {
    if (matchpattern(pattern, text, matchlength))
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f80f 	bl	8001d74 <matchpattern>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <matchquestion+0x72>
    {
      (*matchlength)++;
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	601a      	str	r2, [r3, #0]
      return 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <matchquestion+0x74>
    }
  }
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}

08001d74 <matchpattern>:

#else

/* Iterative matching */
static int matchpattern(regex_t* pattern, const char* text, int* matchlength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  int pre = *matchlength;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	617b      	str	r3, [r7, #20]
  do
  {
    if ((pattern[0].type == UNUSED) || (pattern[1].type == QUESTIONMARK))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <matchpattern+0x24>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3308      	adds	r3, #8
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d10b      	bne.n	8001db0 <matchpattern+0x3c>
    {
      return matchquestion(pattern[0], &pattern[2], text, matchlength);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f103 0210 	add.w	r2, r3, #16
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	c903      	ldmia	r1, {r0, r1}
 8001da8:	f7ff ffa6 	bl	8001cf8 <matchquestion>
 8001dac:	4603      	mov	r3, r0
 8001dae:	e04e      	b.n	8001e4e <matchpattern+0xda>
    }
    else if (pattern[1].type == STAR)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3308      	adds	r3, #8
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d10b      	bne.n	8001dd2 <matchpattern+0x5e>
    {
      return matchstar(pattern[0], &pattern[2], text, matchlength);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f103 0210 	add.w	r2, r3, #16
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	c903      	ldmia	r1, {r0, r1}
 8001dca:	f7ff ff0f 	bl	8001bec <matchstar>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	e03d      	b.n	8001e4e <matchpattern+0xda>
    }
    else if (pattern[1].type == PLUS)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d10b      	bne.n	8001df4 <matchpattern+0x80>
    {
      return matchplus(pattern[0], &pattern[2], text, matchlength);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f103 0210 	add.w	r2, r3, #16
 8001de2:	68f9      	ldr	r1, [r7, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	c903      	ldmia	r1, {r0, r1}
 8001dec:	f7ff ff44 	bl	8001c78 <matchplus>
 8001df0:	4603      	mov	r3, r0
 8001df2:	e02c      	b.n	8001e4e <matchpattern+0xda>
    }
    else if ((pattern[0].type == END) && pattern[1].type == UNUSED)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d10c      	bne.n	8001e16 <matchpattern+0xa2>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <matchpattern+0xa2>
    {
      return (text[0] == '\0');
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	e01b      	b.n	8001e4e <matchpattern+0xda>
    else if (pattern[1].type == BRANCH)
    {
      return (matchpattern(pattern, text) || matchpattern(&pattern[2], text));
    }
*/
  (*matchlength)++;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
  }
  while ((text[0] != '\0') && matchone(*pattern++, *text++));
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <matchpattern+0xd2>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f103 0208 	add.w	r2, r3, #8
 8001e2e:	60fa      	str	r2, [r7, #12]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	1c51      	adds	r1, r2, #1
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e3c:	f7ff fe4e 	bl	8001adc <matchone>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d19f      	bne.n	8001d86 <matchpattern+0x12>

  *matchlength = pre;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <HAL_I2C_MspInit+0x14c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d13e      	bne.n	8001f48 <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a49      	ldr	r2, [pc, #292]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eec:	2312      	movs	r3, #18
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	483e      	ldr	r0, [pc, #248]	@ (8001ffc <HAL_I2C_MspInit+0x154>)
 8001f04:	f000 fd08 	bl	8002918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0e:	2312      	movs	r3, #18
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001f1a:	2309      	movs	r3, #9
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4835      	ldr	r0, [pc, #212]	@ (8001ffc <HAL_I2C_MspInit+0x154>)
 8001f26:	f000 fcf7 	bl	8002918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a31      	ldr	r2, [pc, #196]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f46:	e050      	b.n	8001fea <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002000 <HAL_I2C_MspInit+0x158>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d14b      	bne.n	8001fea <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a27      	ldr	r2, [pc, #156]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a20      	ldr	r2, [pc, #128]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f90:	2312      	movs	r3, #18
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4817      	ldr	r0, [pc, #92]	@ (8002004 <HAL_I2C_MspInit+0x15c>)
 8001fa8:	f000 fcb6 	bl	8002918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <HAL_I2C_MspInit+0x154>)
 8001fca:	f000 fca5 	bl	8002918 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a08      	ldr	r2, [pc, #32]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001fd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_I2C_MspInit+0x150>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
}
 8001fea:	bf00      	nop
 8001fec:	3730      	adds	r7, #48	@ 0x30
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40005800 	.word	0x40005800
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40005c00 	.word	0x40005c00
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	@ (8002094 <HAL_TIM_PWM_MspInit+0x8c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10e      	bne.n	8002038 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6453      	str	r3, [r2, #68]	@ 0x44
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002036:	e026      	b.n	8002086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a17      	ldr	r2, [pc, #92]	@ (800209c <HAL_TIM_PWM_MspInit+0x94>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	e012      	b.n	8002086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0e      	ldr	r2, [pc, #56]	@ (80020a0 <HAL_TIM_PWM_MspInit+0x98>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10d      	bne.n	8002086 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_TIM_PWM_MspInit+0x90>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010000 	.word	0x40010000
 8002098:	40023800 	.word	0x40023800
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000c00 	.word	0x40000c00

080020a4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	@ 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c4:	d12c      	bne.n	8002120 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	4b30      	ldr	r3, [pc, #192]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d6:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b29      	ldr	r3, [pc, #164]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a28      	ldr	r2, [pc, #160]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b26      	ldr	r3, [pc, #152]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80020fe:	2322      	movs	r3, #34	@ 0x22
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210e:	2301      	movs	r3, #1
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	481d      	ldr	r0, [pc, #116]	@ (8002190 <HAL_TIM_Encoder_MspInit+0xec>)
 800211a:	f000 fbfd 	bl	8002918 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800211e:	e030      	b.n	8002182 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12b      	bne.n	8002182 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	4a16      	ldr	r2, [pc, #88]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6413      	str	r3, [r2, #64]	@ 0x40
 800213a:	4b14      	ldr	r3, [pc, #80]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a0f      	ldr	r2, [pc, #60]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002162:	23c0      	movs	r3, #192	@ 0xc0
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002172:	2302      	movs	r3, #2
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4806      	ldr	r0, [pc, #24]	@ (8002198 <HAL_TIM_Encoder_MspInit+0xf4>)
 800217e:	f000 fbcb 	bl	8002918 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	@ 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000
 8002194:	40000800 	.word	0x40000800
 8002198:	40020400 	.word	0x40020400

0800219c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	@ 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a36      	ldr	r2, [pc, #216]	@ (8002294 <HAL_TIM_MspPostInit+0xf8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11f      	bne.n	80021fe <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b35      	ldr	r3, [pc, #212]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 80021da:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4829      	ldr	r0, [pc, #164]	@ (800229c <HAL_TIM_MspPostInit+0x100>)
 80021f8:	f000 fb8e 	bl	8002918 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021fc:	e046      	b.n	800228c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a27      	ldr	r2, [pc, #156]	@ (80022a0 <HAL_TIM_MspPostInit+0x104>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d11e      	bne.n	8002246 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6313      	str	r3, [r2, #48]	@ 0x30
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002224:	2333      	movs	r3, #51	@ 0x33
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002234:	2302      	movs	r3, #2
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4819      	ldr	r0, [pc, #100]	@ (80022a4 <HAL_TIM_MspPostInit+0x108>)
 8002240:	f000 fb6a 	bl	8002918 <HAL_GPIO_Init>
}
 8002244:	e022      	b.n	800228c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_TIM_MspPostInit+0x10c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d11d      	bne.n	800228c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	4a0f      	ldr	r2, [pc, #60]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_TIM_MspPostInit+0xfc>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800226c:	230c      	movs	r3, #12
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800227c:	2302      	movs	r3, #2
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4805      	ldr	r0, [pc, #20]	@ (800229c <HAL_TIM_MspPostInit+0x100>)
 8002288:	f000 fb46 	bl	8002918 <HAL_GPIO_Init>
}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	@ 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010000 	.word	0x40010000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40000c00 	.word	0x40000c00

080022ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_UART_MspInit+0x94>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d134      	bne.n	8002338 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_UART_MspInit+0x98>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_UART_MspInit+0x98>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_UART_MspInit+0x98>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <HAL_UART_MspInit+0x98>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <HAL_UART_MspInit+0x98>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_UART_MspInit+0x98>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002306:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002318:	2307      	movs	r3, #7
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	4809      	ldr	r0, [pc, #36]	@ (8002348 <HAL_UART_MspInit+0x9c>)
 8002324:	f000 faf8 	bl	8002918 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2025      	movs	r0, #37	@ 0x25
 800232e:	f000 fa2a 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002332:	2025      	movs	r0, #37	@ 0x25
 8002334:	f000 fa43 	bl	80027be <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	@ 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40011000 	.word	0x40011000
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <NMI_Handler+0x4>

08002354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <MemManage_Handler+0x4>

08002364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <UsageFault_Handler+0x4>

08002374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a2:	f000 f8d1 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <USART1_IRQHandler+0x10>)
 80023b2:	f002 f851 	bl	8004458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000028c 	.word	0x2000028c

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f002 ffe0 	bl	80053b4 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20020000 	.word	0x20020000
 8002420:	00000400 	.word	0x00000400
 8002424:	200004d0 	.word	0x200004d0
 8002428:	20000620 	.word	0x20000620

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002488 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002454:	f7ff ffea 	bl	800242c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002458:	480c      	ldr	r0, [pc, #48]	@ (800248c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245a:	490d      	ldr	r1, [pc, #52]	@ (8002490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800245c:	4a0d      	ldr	r2, [pc, #52]	@ (8002494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002470:	4c0a      	ldr	r4, [pc, #40]	@ (800249c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247e:	f002 ff9f 	bl	80053c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7fe f89b 	bl	80005bc <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002494:	08006808 	.word	0x08006808
  ldr r2, =_sbss
 8002498:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800249c:	20000620 	.word	0x20000620

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f94f 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fcbe 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f967 	bl	80027da <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 f92f 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000004 	.word	0x20000004
 8002540:	2000000c 	.word	0x2000000c
 8002544:	20000008 	.word	0x20000008

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	@ (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000000c 	.word	0x2000000c
 800256c:	200004d4 	.word	0x200004d4

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200004d4 	.word	0x200004d4

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff feb6 	bl	8002570 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d008      	beq.n	8002824 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2280      	movs	r2, #128	@ 0x80
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e052      	b.n	80028ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0216 	bic.w	r2, r2, #22
 8002832:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002842:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <HAL_DMA_Abort+0x62>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0208 	bic.w	r2, r2, #8
 8002862:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002874:	e013      	b.n	800289e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002876:	f7ff fe7b 	bl	8002570 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b05      	cmp	r3, #5
 8002882:	d90c      	bls.n	800289e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e015      	b.n	80028ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e4      	bne.n	8002876 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	223f      	movs	r2, #63	@ 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e00c      	b.n	800290a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2205      	movs	r2, #5
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e159      	b.n	8002be8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 8148 	bne.w	8002be2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d005      	beq.n	800296a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002966:	2b02      	cmp	r3, #2
 8002968:	d130      	bne.n	80029cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0201 	and.w	r2, r3, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d017      	beq.n	8002a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d123      	bne.n	8002a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a2 	beq.w	8002be2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b57      	ldr	r3, [pc, #348]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	4a56      	ldr	r2, [pc, #344]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aae:	4b54      	ldr	r3, [pc, #336]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aba:	4a52      	ldr	r2, [pc, #328]	@ (8002c04 <HAL_GPIO_Init+0x2ec>)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a49      	ldr	r2, [pc, #292]	@ (8002c08 <HAL_GPIO_Init+0x2f0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x202>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a48      	ldr	r2, [pc, #288]	@ (8002c0c <HAL_GPIO_Init+0x2f4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x1fe>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a47      	ldr	r2, [pc, #284]	@ (8002c10 <HAL_GPIO_Init+0x2f8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a46      	ldr	r2, [pc, #280]	@ (8002c14 <HAL_GPIO_Init+0x2fc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x1f6>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a45      	ldr	r2, [pc, #276]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x1f2>
 8002b06:	2304      	movs	r3, #4
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x204>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x204>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x204>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x204>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x204>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	@ (8002c04 <HAL_GPIO_Init+0x2ec>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b38      	ldr	r3, [pc, #224]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a24      	ldr	r2, [pc, #144]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8e:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c1c <HAL_GPIO_Init+0x304>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f aea2 	bls.w	8002934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c3c:	e003      	b.n	8002c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e12b      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff f914 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	@ 0x24
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f000 fd40 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a81      	ldr	r2, [pc, #516]	@ (8002ec8 <HAL_I2C_Init+0x274>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d807      	bhi.n	8002cd8 <HAL_I2C_Init+0x84>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a80      	ldr	r2, [pc, #512]	@ (8002ecc <HAL_I2C_Init+0x278>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e006      	b.n	8002ce6 <HAL_I2C_Init+0x92>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a7d      	ldr	r2, [pc, #500]	@ (8002ed0 <HAL_I2C_Init+0x27c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	bf94      	ite	ls
 8002ce0:	2301      	movls	r3, #1
 8002ce2:	2300      	movhi	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0e7      	b.n	8002ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a78      	ldr	r2, [pc, #480]	@ (8002ed4 <HAL_I2C_Init+0x280>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ec8 <HAL_I2C_Init+0x274>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <HAL_I2C_Init+0xd4>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	e009      	b.n	8002d3c <HAL_I2C_Init+0xe8>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a69      	ldr	r2, [pc, #420]	@ (8002ed8 <HAL_I2C_Init+0x284>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	495c      	ldr	r1, [pc, #368]	@ (8002ec8 <HAL_I2C_Init+0x274>)
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	d819      	bhi.n	8002d90 <HAL_I2C_Init+0x13c>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e59      	subs	r1, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6a:	1c59      	adds	r1, r3, #1
 8002d6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d70:	400b      	ands	r3, r1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_I2C_Init+0x138>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e59      	subs	r1, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8a:	e051      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e04f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <HAL_I2C_Init+0x168>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e012      	b.n	8002de2 <HAL_I2C_Init+0x18e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x196>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e022      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <HAL_I2C_Init+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1e58      	subs	r0, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	440b      	add	r3, r1
 8002e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Init+0x1dc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	6809      	ldr	r1, [r1, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6911      	ldr	r1, [r2, #16]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	000186a0 	.word	0x000186a0
 8002ecc:	001e847f 	.word	0x001e847f
 8002ed0:	003d08ff 	.word	0x003d08ff
 8002ed4:	431bde83 	.word	0x431bde83
 8002ed8:	10624dd3 	.word	0x10624dd3

08002edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e267      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d075      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002efa:	4b88      	ldr	r3, [pc, #544]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d00c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b85      	ldr	r3, [pc, #532]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d112      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f12:	4b82      	ldr	r3, [pc, #520]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4b7e      	ldr	r3, [pc, #504]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d05b      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x108>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d157      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e242      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x74>
 8002f42:	4b76      	ldr	r3, [pc, #472]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x98>
 8002f5a:	4b70      	ldr	r3, [pc, #448]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6d      	ldr	r3, [pc, #436]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xb0>
 8002f74:	4b69      	ldr	r3, [pc, #420]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a68      	ldr	r2, [pc, #416]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff faec 	bl	8002570 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7ff fae8 	bl	8002570 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e207      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b5b      	ldr	r3, [pc, #364]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xc0>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7ff fad8 	bl	8002570 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff fad4 	bl	8002570 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	@ 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1f3      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b51      	ldr	r3, [pc, #324]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xe8>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b47      	ldr	r3, [pc, #284]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b44      	ldr	r3, [pc, #272]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b41      	ldr	r3, [pc, #260]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x152>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1c7      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4937      	ldr	r1, [pc, #220]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e03a      	b.n	80030ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7ff fa8d 	bl	8002570 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7ff fa89 	bl	8002570 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1a8      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4925      	ldr	r1, [pc, #148]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_OscConfig+0x244>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff fa6c 	bl	8002570 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7ff fa68 	bl	8002570 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e187      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d036      	beq.n	8003134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_RCC_OscConfig+0x248>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7ff fa4c 	bl	8002570 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7ff fa48 	bl	8002570 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e167      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_RCC_OscConfig+0x240>)
 80030f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x200>
 80030fa:	e01b      	b.n	8003134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_OscConfig+0x248>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7ff fa35 	bl	8002570 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	e00e      	b.n	8003128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7ff fa31 	bl	8002570 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d907      	bls.n	8003128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e150      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
 800311c:	40023800 	.word	0x40023800
 8003120:	42470000 	.word	0x42470000
 8003124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b88      	ldr	r3, [pc, #544]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 800312a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ea      	bne.n	800310a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8097 	beq.w	8003270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b81      	ldr	r3, [pc, #516]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b7d      	ldr	r3, [pc, #500]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	4a7c      	ldr	r2, [pc, #496]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	@ 0x40
 8003162:	4b7a      	ldr	r3, [pc, #488]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b77      	ldr	r3, [pc, #476]	@ (8003350 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b74      	ldr	r3, [pc, #464]	@ (8003350 <HAL_RCC_OscConfig+0x474>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a73      	ldr	r2, [pc, #460]	@ (8003350 <HAL_RCC_OscConfig+0x474>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7ff f9f1 	bl	8002570 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7ff f9ed 	bl	8002570 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e10c      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <HAL_RCC_OscConfig+0x474>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
 80031b8:	4b64      	ldr	r3, [pc, #400]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a63      	ldr	r2, [pc, #396]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	e01c      	b.n	8003200 <HAL_RCC_OscConfig+0x324>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x30c>
 80031ce:	4b5f      	ldr	r3, [pc, #380]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	4a5e      	ldr	r2, [pc, #376]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031da:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	4a5b      	ldr	r2, [pc, #364]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x324>
 80031e8:	4b58      	ldr	r3, [pc, #352]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f4:	4b55      	ldr	r3, [pc, #340]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a54      	ldr	r2, [pc, #336]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7ff f9b2 	bl	8002570 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7ff f9ae 	bl	8002570 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0cb      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	4b49      	ldr	r3, [pc, #292]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCC_OscConfig+0x334>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7ff f99c 	bl	8002570 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7ff f998 	bl	8002570 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0b5      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003252:	4b3e      	ldr	r3, [pc, #248]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b39      	ldr	r3, [pc, #228]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	4a38      	ldr	r2, [pc, #224]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a1 	beq.w	80033bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327a:	4b34      	ldr	r3, [pc, #208]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d05c      	beq.n	8003340 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d141      	bne.n	8003312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff f96c 	bl	8002570 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7ff f968 	bl	8002570 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e087      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b27      	ldr	r3, [pc, #156]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	491b      	ldr	r1, [pc, #108]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x478>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7ff f941 	bl	8002570 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7ff f93d 	bl	8002570 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e05c      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x416>
 8003310:	e054      	b.n	80033bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_RCC_OscConfig+0x478>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7ff f92a 	bl	8002570 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7ff f926 	bl	8002570 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e045      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_RCC_OscConfig+0x470>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x444>
 800333e:	e03d      	b.n	80033bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e038      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
 800334c:	40023800 	.word	0x40023800
 8003350:	40007000 	.word	0x40007000
 8003354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_RCC_OscConfig+0x4ec>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d028      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d121      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d11a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003388:	4013      	ands	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800338e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0cc      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d90c      	bls.n	8003408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b65      	ldr	r3, [pc, #404]	@ (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b3f      	ldr	r3, [pc, #252]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e067      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b37      	ldr	r3, [pc, #220]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4934      	ldr	r1, [pc, #208]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7ff f858 	bl	8002570 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7ff f854 	bl	8002570 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b25      	ldr	r3, [pc, #148]	@ (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20c      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	@ (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe ffb8 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	08006690 	.word	0x08006690
 8003590:	20000004 	.word	0x20000004
 8003594:	20000008 	.word	0x20000008

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b090      	sub	sp, #64	@ 0x40
 800359e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b0:	4b59      	ldr	r3, [pc, #356]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d00d      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x40>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	f200 80a1 	bhi.w	8003704 <HAL_RCC_GetSysClockFreq+0x16c>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ca:	e09b      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_GetSysClockFreq+0x184>)
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035d0:	e09b      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d2:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035d6:	e098      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	2200      	movs	r2, #0
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003600:	2100      	movs	r1, #0
 8003602:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 8003604:	fb03 f201 	mul.w	r2, r3, r1
 8003608:	2300      	movs	r3, #0
 800360a:	fb00 f303 	mul.w	r3, r0, r3
 800360e:	4413      	add	r3, r2
 8003610:	4a43      	ldr	r2, [pc, #268]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 8003612:	fba0 1202 	umull	r1, r2, r0, r2
 8003616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003618:	460a      	mov	r2, r1
 800361a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800361c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800361e:	4413      	add	r3, r2
 8003620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003624:	2200      	movs	r2, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	61fa      	str	r2, [r7, #28]
 800362a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003632:	f7fc fe2d 	bl	8000290 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4613      	mov	r3, r2
 800363c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800363e:	e053      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b35      	ldr	r3, [pc, #212]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	2200      	movs	r2, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	617a      	str	r2, [r7, #20]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003652:	f04f 0b00 	mov.w	fp, #0
 8003656:	4652      	mov	r2, sl
 8003658:	465b      	mov	r3, fp
 800365a:	f04f 0000 	mov.w	r0, #0
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	0159      	lsls	r1, r3, #5
 8003664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003668:	0150      	lsls	r0, r2, #5
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	ebb2 080a 	subs.w	r8, r2, sl
 8003672:	eb63 090b 	sbc.w	r9, r3, fp
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003682:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003686:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800368a:	ebb2 0408 	subs.w	r4, r2, r8
 800368e:	eb63 0509 	sbc.w	r5, r3, r9
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	00eb      	lsls	r3, r5, #3
 800369c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a0:	00e2      	lsls	r2, r4, #3
 80036a2:	4614      	mov	r4, r2
 80036a4:	461d      	mov	r5, r3
 80036a6:	eb14 030a 	adds.w	r3, r4, sl
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	eb45 030b 	adc.w	r3, r5, fp
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036be:	4629      	mov	r1, r5
 80036c0:	028b      	lsls	r3, r1, #10
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c8:	4621      	mov	r1, r4
 80036ca:	028a      	lsls	r2, r1, #10
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d2:	2200      	movs	r2, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036dc:	f7fc fdd8 	bl	8000290 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4613      	mov	r3, r2
 80036e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	3301      	adds	r3, #1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003702:	e002      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_RCC_GetSysClockFreq+0x184>)
 8003706:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800370c:	4618      	mov	r0, r3
 800370e:	3740      	adds	r7, #64	@ 0x40
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	017d7840 	.word	0x017d7840

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000004 	.word	0x20000004

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003740:	f7ff fff0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	@ (8003760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	080066a0 	.word	0x080066a0

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003768:	f7ff ffdc 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	@ (8003788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	080066a0 	.word	0x080066a0

0800378c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e041      	b.n	8003822 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fe fc28 	bl	8002008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 fa46 	bl	8003c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <HAL_TIM_PWM_Start+0x24>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e022      	b.n	8003896 <HAL_TIM_PWM_Start+0x6a>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d109      	bne.n	800386a <HAL_TIM_PWM_Start+0x3e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e015      	b.n	8003896 <HAL_TIM_PWM_Start+0x6a>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start+0x58>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e008      	b.n	8003896 <HAL_TIM_PWM_Start+0x6a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e068      	b.n	8003970 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0x82>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038ac:	e013      	b.n	80038d6 <HAL_TIM_PWM_Start+0xaa>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start+0x92>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038bc:	e00b      	b.n	80038d6 <HAL_TIM_PWM_Start+0xaa>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0xa2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038cc:	e003      	b.n	80038d6 <HAL_TIM_PWM_Start+0xaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fbd4 	bl	800408c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	@ (8003978 <HAL_TIM_PWM_Start+0x14c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d107      	bne.n	80038fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <HAL_TIM_PWM_Start+0x14c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_TIM_PWM_Start+0x10e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003910:	d013      	beq.n	800393a <HAL_TIM_PWM_Start+0x10e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a19      	ldr	r2, [pc, #100]	@ (800397c <HAL_TIM_PWM_Start+0x150>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_TIM_PWM_Start+0x10e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <HAL_TIM_PWM_Start+0x154>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_TIM_PWM_Start+0x10e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a16      	ldr	r2, [pc, #88]	@ (8003984 <HAL_TIM_PWM_Start+0x158>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIM_PWM_Start+0x10e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <HAL_TIM_PWM_Start+0x15c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d111      	bne.n	800395e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d010      	beq.n	800396e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	e007      	b.n	800396e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010000 	.word	0x40010000
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40014000 	.word	0x40014000

0800398c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e097      	b.n	8003ad0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fe fb75 	bl	80020a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039d0:	f023 0307 	bic.w	r3, r3, #7
 80039d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f000 f93b 	bl	8003c5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a2c:	f023 030c 	bic.w	r3, r3, #12
 8003a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	011a      	lsls	r2, r3, #4
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	031b      	lsls	r3, r3, #12
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e0ae      	b.n	8003c54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f200 809f 	bhi.w	8003c44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003c45 	.word	0x08003c45
 8003b14:	08003c45 	.word	0x08003c45
 8003b18:	08003c45 	.word	0x08003c45
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003c45 	.word	0x08003c45
 8003b24:	08003c45 	.word	0x08003c45
 8003b28:	08003c45 	.word	0x08003c45
 8003b2c:	08003bc3 	.word	0x08003bc3
 8003b30:	08003c45 	.word	0x08003c45
 8003b34:	08003c45 	.word	0x08003c45
 8003b38:	08003c45 	.word	0x08003c45
 8003b3c:	08003c03 	.word	0x08003c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f914 	bl	8003d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0204 	bic.w	r2, r2, #4
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	619a      	str	r2, [r3, #24]
      break;
 8003b7e:	e064      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f95a 	bl	8003e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]
      break;
 8003bc0:	e043      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f9a5 	bl	8003f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0208 	orr.w	r2, r2, #8
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0204 	bic.w	r2, r2, #4
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
      break;
 8003c00:	e023      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f9ef 	bl	8003fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69d9      	ldr	r1, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	021a      	lsls	r2, r3, #8
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	61da      	str	r2, [r3, #28]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
      break;
 8003c48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8003d58 <TIM_Base_SetConfig+0xfc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00f      	beq.n	8003c94 <TIM_Base_SetConfig+0x38>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7a:	d00b      	beq.n	8003c94 <TIM_Base_SetConfig+0x38>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a37      	ldr	r2, [pc, #220]	@ (8003d5c <TIM_Base_SetConfig+0x100>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x38>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a36      	ldr	r2, [pc, #216]	@ (8003d60 <TIM_Base_SetConfig+0x104>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a35      	ldr	r2, [pc, #212]	@ (8003d64 <TIM_Base_SetConfig+0x108>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <TIM_Base_SetConfig+0xfc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01b      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb4:	d017      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a28      	ldr	r2, [pc, #160]	@ (8003d5c <TIM_Base_SetConfig+0x100>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <TIM_Base_SetConfig+0x104>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00f      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	@ (8003d64 <TIM_Base_SetConfig+0x108>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	@ (8003d68 <TIM_Base_SetConfig+0x10c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a24      	ldr	r2, [pc, #144]	@ (8003d6c <TIM_Base_SetConfig+0x110>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	@ (8003d70 <TIM_Base_SetConfig+0x114>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d58 <TIM_Base_SetConfig+0xfc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d105      	bne.n	8003d4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	40014800 	.word	0x40014800

08003d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f023 0201 	bic.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1c      	ldr	r2, [pc, #112]	@ (8003e3c <TIM_OC1_SetConfig+0xc8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0308 	bic.w	r3, r3, #8
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a13      	ldr	r2, [pc, #76]	@ (8003e3c <TIM_OC1_SetConfig+0xc8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40010000 	.word	0x40010000

08003e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 0210 	bic.w	r2, r3, #16
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <TIM_OC2_SetConfig+0xd4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10d      	bne.n	8003ebc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <TIM_OC2_SetConfig+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d113      	bne.n	8003eec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000

08003f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe8 <TIM_OC3_SetConfig+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10d      	bne.n	8003f92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <TIM_OC3_SetConfig+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d113      	bne.n	8003fc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40010000 	.word	0x40010000

08003fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a10      	ldr	r2, [pc, #64]	@ (8004088 <TIM_OC4_SetConfig+0x9c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d109      	bne.n	8004060 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000

0800408c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2201      	movs	r2, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e050      	b.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413c:	d013      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10c      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800416c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40014000 	.word	0x40014000

080041b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e03d      	b.n	800424c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e042      	b.n	80042f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe f814 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	@ 0x24
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800429a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fdbd 	bl	8004e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	@ 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d175      	bne.n	8004404 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_UART_Transmit+0x2c>
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e06e      	b.n	8004406 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2221      	movs	r2, #33	@ 0x21
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004336:	f7fe f91b 	bl	8002570 <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004350:	d108      	bne.n	8004364 <HAL_UART_Transmit+0x6c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e003      	b.n	800436c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800436c:	e02e      	b.n	80043cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	@ 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fb1f 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e03a      	b.n	8004406 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	3302      	adds	r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e007      	b.n	80043be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1cb      	bne.n	800436e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	2140      	movs	r1, #64	@ 0x40
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 faeb 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e006      	b.n	8004406 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	d112      	bne.n	800444e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_UART_Receive_IT+0x26>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e00b      	b.n	8004450 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	461a      	mov	r2, r3
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fb12 	bl	8004a6e <UART_Start_Receive_IT>
 800444a:	4603      	mov	r3, r0
 800444c:	e000      	b.n	8004450 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b0ba      	sub	sp, #232	@ 0xe8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004484:	2300      	movs	r3, #0
 8004486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <HAL_UART_IRQHandler+0x66>
 80044aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fbf2 	bl	8004ca0 <UART_Receive_IT>
      return;
 80044bc:	e25b      	b.n	8004976 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80de 	beq.w	8004684 <HAL_UART_IRQHandler+0x22c>
 80044c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80d1 	beq.w	8004684 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_UART_IRQHandler+0xae>
 80044ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_UART_IRQHandler+0xd2>
 8004512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f043 0202 	orr.w	r2, r3, #2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_UART_IRQHandler+0xf6>
 8004536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d011      	beq.n	800457e <HAL_UART_IRQHandler+0x126>
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	f043 0208 	orr.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 81f2 	beq.w	800496c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_UART_IRQHandler+0x14e>
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb7d 	bl	8004ca0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b40      	cmp	r3, #64	@ 0x40
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_UART_IRQHandler+0x17a>
 80045ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04f      	beq.n	8004672 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa85 	bl	8004ae2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e2:	2b40      	cmp	r3, #64	@ 0x40
 80045e4:	d141      	bne.n	800466a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004612:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800461e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800462a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1d9      	bne.n	80045e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d013      	beq.n	8004662 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463e:	4a7e      	ldr	r2, [pc, #504]	@ (8004838 <HAL_UART_IRQHandler+0x3e0>)
 8004640:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe f943 	bl	80028d2 <HAL_DMA_Abort_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	e00e      	b.n	8004680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f994 	bl	8004990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	e00a      	b.n	8004680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f990 	bl	8004990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	e006      	b.n	8004680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f98c 	bl	8004990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800467e:	e175      	b.n	800496c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	bf00      	nop
    return;
 8004682:	e173      	b.n	800496c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 814f 	bne.w	800492c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8148 	beq.w	800492c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8141 	beq.w	800492c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	f040 80b6 	bne.w	800483c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8145 	beq.w	8004970 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ee:	429a      	cmp	r2, r3
 80046f0:	f080 813e 	bcs.w	8004970 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004706:	f000 8088 	beq.w	800481a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004720:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004736:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800473a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004742:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800474e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1d9      	bne.n	800470a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800477a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800477e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004782:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800478c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e1      	bne.n	8004756 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e3      	bne.n	8004792 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004802:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800480a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e3      	bne.n	80047d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd ffec 	bl	80027f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004828:	b29b      	uxth	r3, r3
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	b29b      	uxth	r3, r3
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8b7 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004836:	e09b      	b.n	8004970 <HAL_UART_IRQHandler+0x518>
 8004838:	08004ba9 	.word	0x08004ba9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004844:	b29b      	uxth	r3, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 808e 	beq.w	8004974 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8089 	beq.w	8004974 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004886:	647a      	str	r2, [r7, #68]	@ 0x44
 8004888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800488c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e3      	bne.n	8004862 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	623b      	str	r3, [r7, #32]
   return(result);
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048be:	633a      	str	r2, [r7, #48]	@ 0x30
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e3      	bne.n	800489a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0310 	bic.w	r3, r3, #16
 80048f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004904:	61fa      	str	r2, [r7, #28]
 8004906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	617b      	str	r3, [r7, #20]
   return(result);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e3      	bne.n	80048e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800491e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f83d 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800492a:	e023      	b.n	8004974 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <HAL_UART_IRQHandler+0x4f4>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f943 	bl	8004bd0 <UART_Transmit_IT>
    return;
 800494a:	e014      	b.n	8004976 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800494c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <HAL_UART_IRQHandler+0x51e>
 8004958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f983 	bl	8004c70 <UART_EndTransmit_IT>
    return;
 800496a:	e004      	b.n	8004976 <HAL_UART_IRQHandler+0x51e>
    return;
 800496c:	bf00      	nop
 800496e:	e002      	b.n	8004976 <HAL_UART_IRQHandler+0x51e>
      return;
 8004970:	bf00      	nop
 8004972:	e000      	b.n	8004976 <HAL_UART_IRQHandler+0x51e>
      return;
 8004974:	bf00      	nop
  }
}
 8004976:	37e8      	adds	r7, #232	@ 0xe8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049cc:	e03b      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d037      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fd fdcb 	bl	8002570 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <UART_WaitOnFlagUntilTimeout+0x30>
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e03a      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d023      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b80      	cmp	r3, #128	@ 0x80
 8004a02:	d020      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b40      	cmp	r3, #64	@ 0x40
 8004a08:	d01d      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d116      	bne.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f857 	bl	8004ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2208      	movs	r2, #8
 8004a38:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00f      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d0b4      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2222      	movs	r2, #34	@ 0x22
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0220 	orr.w	r2, r2, #32
 8004ad2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b095      	sub	sp, #84	@ 0x54
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d119      	bne.n	8004b8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f023 0310 	bic.w	r3, r3, #16
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b7a:	61ba      	str	r2, [r7, #24]
 8004b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	613b      	str	r3, [r7, #16]
   return(result);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b9c:	bf00      	nop
 8004b9e:	3754      	adds	r7, #84	@ 0x54
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff fee4 	bl	8004990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b21      	cmp	r3, #33	@ 0x21
 8004be2:	d13e      	bne.n	8004c62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bec:	d114      	bne.n	8004c18 <UART_Transmit_IT+0x48>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]
 8004c16:	e008      	b.n	8004c2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6211      	str	r1, [r2, #32]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4619      	mov	r1, r3
 8004c38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fe73 	bl	800497c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	@ 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b22      	cmp	r3, #34	@ 0x22
 8004cb2:	f040 80ae 	bne.w	8004e12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	d117      	bne.n	8004cf0 <UART_Receive_IT+0x50>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d113      	bne.n	8004cf0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	1c9a      	adds	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cee:	e026      	b.n	8004d3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d02:	d007      	beq.n	8004d14 <UART_Receive_IT+0x74>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <UART_Receive_IT+0x82>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e008      	b.n	8004d34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d15d      	bne.n	8004e0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0220 	bic.w	r2, r2, #32
 8004d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d135      	bne.n	8004e04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	613b      	str	r3, [r7, #16]
   return(result);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbe:	623a      	str	r2, [r7, #32]
 8004dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d10a      	bne.n	8004df6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fdd1 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
 8004e02:	e002      	b.n	8004e0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc f869 	bl	8000edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e002      	b.n	8004e14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
  }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3730      	adds	r7, #48	@ 0x30
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b0c0      	sub	sp, #256	@ 0x100
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	ea40 0301 	orr.w	r3, r0, r1
 8004e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e74:	f021 010c 	bic.w	r1, r1, #12
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	6999      	ldr	r1, [r3, #24]
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80050e8 <UART_SetConfig+0x2cc>)
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d005      	beq.n	8004ebc <UART_SetConfig+0xa0>
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80050ec <UART_SetConfig+0x2d0>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d104      	bne.n	8004ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fe fc52 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ec4:	e003      	b.n	8004ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ec6:	f7fe fc39 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8004eca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed8:	f040 810c 	bne.w	80050f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004efe:	4621      	mov	r1, r4
 8004f00:	eb12 0801 	adds.w	r8, r2, r1
 8004f04:	4629      	mov	r1, r5
 8004f06:	eb43 0901 	adc.w	r9, r3, r1
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1e:	4690      	mov	r8, r2
 8004f20:	4699      	mov	r9, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	eb18 0303 	adds.w	r3, r8, r3
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	eb49 0303 	adc.w	r3, r9, r3
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	18db      	adds	r3, r3, r3
 8004f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f50:	4613      	mov	r3, r2
 8004f52:	eb42 0303 	adc.w	r3, r2, r3
 8004f56:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f60:	f7fb f996 	bl	8000290 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <UART_SetConfig+0x2d4>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011c      	lsls	r4, r3, #4
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f94:	4641      	mov	r1, r8
 8004f96:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb4:	4692      	mov	sl, r2
 8004fb6:	469b      	mov	fp, r3
 8004fb8:	4643      	mov	r3, r8
 8004fba:	eb1a 0303 	adds.w	r3, sl, r3
 8004fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ff6:	f7fb f94b 	bl	8000290 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <UART_SetConfig+0x2d4>)
 8005002:	fba3 2301 	umull	r2, r3, r3, r1
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2264      	movs	r2, #100	@ 0x64
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	1acb      	subs	r3, r1, r3
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005016:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <UART_SetConfig+0x2d4>)
 8005018:	fba3 2302 	umull	r2, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005024:	441c      	add	r4, r3
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005030:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005040:	415b      	adcs	r3, r3
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6339      	str	r1, [r7, #48]	@ 0x30
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005094:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800509c:	460b      	mov	r3, r1
 800509e:	18db      	adds	r3, r3, r3
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a2:	4613      	mov	r3, r2
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050b2:	f7fb f8ed 	bl	8000290 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <UART_SetConfig+0x2d4>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	@ 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3332      	adds	r3, #50	@ 0x32
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <UART_SetConfig+0x2d4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 0207 	and.w	r2, r3, #7
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4422      	add	r2, r4
 80050e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e4:	e106      	b.n	80052f4 <UART_SetConfig+0x4d8>
 80050e6:	bf00      	nop
 80050e8:	40011000 	.word	0x40011000
 80050ec:	40011400 	.word	0x40011400
 80050f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	1891      	adds	r1, r2, r2
 800510c:	6239      	str	r1, [r7, #32]
 800510e:	415b      	adcs	r3, r3
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
 8005112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005116:	4641      	mov	r1, r8
 8005118:	1854      	adds	r4, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb43 0501 	adc.w	r5, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	00eb      	lsls	r3, r5, #3
 800512a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512e:	00e2      	lsls	r2, r4, #3
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	4643      	mov	r3, r8
 8005136:	18e3      	adds	r3, r4, r3
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800513c:	464b      	mov	r3, r9
 800513e:	eb45 0303 	adc.w	r3, r5, r3
 8005142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005162:	4629      	mov	r1, r5
 8005164:	008b      	lsls	r3, r1, #2
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516c:	4621      	mov	r1, r4
 800516e:	008a      	lsls	r2, r1, #2
 8005170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005174:	f7fb f88c 	bl	8000290 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4b60      	ldr	r3, [pc, #384]	@ (8005300 <UART_SetConfig+0x4e4>)
 800517e:	fba3 2302 	umull	r2, r3, r3, r2
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	011c      	lsls	r4, r3, #4
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005190:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	61b9      	str	r1, [r7, #24]
 80051a0:	415b      	adcs	r3, r3
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6139      	str	r1, [r7, #16]
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051dc:	464b      	mov	r3, r9
 80051de:	460a      	mov	r2, r1
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005200:	4649      	mov	r1, r9
 8005202:	008b      	lsls	r3, r1, #2
 8005204:	4641      	mov	r1, r8
 8005206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520a:	4641      	mov	r1, r8
 800520c:	008a      	lsls	r2, r1, #2
 800520e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005212:	f7fb f83d 	bl	8000290 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4611      	mov	r1, r2
 800521c:	4b38      	ldr	r3, [pc, #224]	@ (8005300 <UART_SetConfig+0x4e4>)
 800521e:	fba3 2301 	umull	r2, r3, r3, r1
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	@ 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1acb      	subs	r3, r1, r3
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	3332      	adds	r3, #50	@ 0x32
 8005230:	4a33      	ldr	r2, [pc, #204]	@ (8005300 <UART_SetConfig+0x4e4>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800523c:	441c      	add	r4, r3
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	673b      	str	r3, [r7, #112]	@ 0x70
 8005246:	677a      	str	r2, [r7, #116]	@ 0x74
 8005248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	1891      	adds	r1, r2, r2
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	415b      	adcs	r3, r3
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525c:	4641      	mov	r1, r8
 800525e:	1851      	adds	r1, r2, r1
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	4649      	mov	r1, r9
 8005264:	414b      	adcs	r3, r1
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005274:	4659      	mov	r1, fp
 8005276:	00cb      	lsls	r3, r1, #3
 8005278:	4651      	mov	r1, sl
 800527a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527e:	4651      	mov	r1, sl
 8005280:	00ca      	lsls	r2, r1, #3
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	4603      	mov	r3, r0
 8005288:	4642      	mov	r2, r8
 800528a:	189b      	adds	r3, r3, r2
 800528c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800528e:	464b      	mov	r3, r9
 8005290:	460a      	mov	r2, r1
 8005292:	eb42 0303 	adc.w	r3, r2, r3
 8005296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052b0:	4649      	mov	r1, r9
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	4641      	mov	r1, r8
 80052b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ba:	4641      	mov	r1, r8
 80052bc:	008a      	lsls	r2, r1, #2
 80052be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052c2:	f7fa ffe5 	bl	8000290 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <UART_SetConfig+0x4e4>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2164      	movs	r1, #100	@ 0x64
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3332      	adds	r3, #50	@ 0x32
 80052de:	4a08      	ldr	r2, [pc, #32]	@ (8005300 <UART_SetConfig+0x4e4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4422      	add	r2, r4
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <siprintf>:
 8005304:	b40e      	push	{r1, r2, r3}
 8005306:	b510      	push	{r4, lr}
 8005308:	b09d      	sub	sp, #116	@ 0x74
 800530a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800530c:	9002      	str	r0, [sp, #8]
 800530e:	9006      	str	r0, [sp, #24]
 8005310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005314:	480a      	ldr	r0, [pc, #40]	@ (8005340 <siprintf+0x3c>)
 8005316:	9107      	str	r1, [sp, #28]
 8005318:	9104      	str	r1, [sp, #16]
 800531a:	490a      	ldr	r1, [pc, #40]	@ (8005344 <siprintf+0x40>)
 800531c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005320:	9105      	str	r1, [sp, #20]
 8005322:	2400      	movs	r4, #0
 8005324:	a902      	add	r1, sp, #8
 8005326:	6800      	ldr	r0, [r0, #0]
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800532c:	f000 f9d0 	bl	80056d0 <_svfiprintf_r>
 8005330:	9b02      	ldr	r3, [sp, #8]
 8005332:	701c      	strb	r4, [r3, #0]
 8005334:	b01d      	add	sp, #116	@ 0x74
 8005336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533a:	b003      	add	sp, #12
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000010 	.word	0x20000010
 8005344:	ffff0208 	.word	0xffff0208

08005348 <siscanf>:
 8005348:	b40e      	push	{r1, r2, r3}
 800534a:	b570      	push	{r4, r5, r6, lr}
 800534c:	b09d      	sub	sp, #116	@ 0x74
 800534e:	ac21      	add	r4, sp, #132	@ 0x84
 8005350:	2500      	movs	r5, #0
 8005352:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005356:	f854 6b04 	ldr.w	r6, [r4], #4
 800535a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800535e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005360:	9002      	str	r0, [sp, #8]
 8005362:	9006      	str	r0, [sp, #24]
 8005364:	f7fa ff3c 	bl	80001e0 <strlen>
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <siscanf+0x50>)
 800536a:	9003      	str	r0, [sp, #12]
 800536c:	9007      	str	r0, [sp, #28]
 800536e:	480b      	ldr	r0, [pc, #44]	@ (800539c <siscanf+0x54>)
 8005370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005376:	f8ad 3016 	strh.w	r3, [sp, #22]
 800537a:	4632      	mov	r2, r6
 800537c:	4623      	mov	r3, r4
 800537e:	a902      	add	r1, sp, #8
 8005380:	6800      	ldr	r0, [r0, #0]
 8005382:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005384:	9514      	str	r5, [sp, #80]	@ 0x50
 8005386:	9401      	str	r4, [sp, #4]
 8005388:	f000 faf8 	bl	800597c <__ssvfiscanf_r>
 800538c:	b01d      	add	sp, #116	@ 0x74
 800538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005392:	b003      	add	sp, #12
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	080053a1 	.word	0x080053a1
 800539c:	20000010 	.word	0x20000010

080053a0 <__seofread>:
 80053a0:	2000      	movs	r0, #0
 80053a2:	4770      	bx	lr

080053a4 <memset>:
 80053a4:	4402      	add	r2, r0
 80053a6:	4603      	mov	r3, r0
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d100      	bne.n	80053ae <memset+0xa>
 80053ac:	4770      	bx	lr
 80053ae:	f803 1b01 	strb.w	r1, [r3], #1
 80053b2:	e7f9      	b.n	80053a8 <memset+0x4>

080053b4 <__errno>:
 80053b4:	4b01      	ldr	r3, [pc, #4]	@ (80053bc <__errno+0x8>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000010 	.word	0x20000010

080053c0 <__libc_init_array>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4d0d      	ldr	r5, [pc, #52]	@ (80053f8 <__libc_init_array+0x38>)
 80053c4:	4c0d      	ldr	r4, [pc, #52]	@ (80053fc <__libc_init_array+0x3c>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	2600      	movs	r6, #0
 80053cc:	42a6      	cmp	r6, r4
 80053ce:	d109      	bne.n	80053e4 <__libc_init_array+0x24>
 80053d0:	4d0b      	ldr	r5, [pc, #44]	@ (8005400 <__libc_init_array+0x40>)
 80053d2:	4c0c      	ldr	r4, [pc, #48]	@ (8005404 <__libc_init_array+0x44>)
 80053d4:	f001 f8e2 	bl	800659c <_init>
 80053d8:	1b64      	subs	r4, r4, r5
 80053da:	10a4      	asrs	r4, r4, #2
 80053dc:	2600      	movs	r6, #0
 80053de:	42a6      	cmp	r6, r4
 80053e0:	d105      	bne.n	80053ee <__libc_init_array+0x2e>
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e8:	4798      	blx	r3
 80053ea:	3601      	adds	r6, #1
 80053ec:	e7ee      	b.n	80053cc <__libc_init_array+0xc>
 80053ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f2:	4798      	blx	r3
 80053f4:	3601      	adds	r6, #1
 80053f6:	e7f2      	b.n	80053de <__libc_init_array+0x1e>
 80053f8:	08006800 	.word	0x08006800
 80053fc:	08006800 	.word	0x08006800
 8005400:	08006800 	.word	0x08006800
 8005404:	08006804 	.word	0x08006804

08005408 <__retarget_lock_acquire_recursive>:
 8005408:	4770      	bx	lr

0800540a <__retarget_lock_release_recursive>:
 800540a:	4770      	bx	lr

0800540c <memcpy>:
 800540c:	440a      	add	r2, r1
 800540e:	4291      	cmp	r1, r2
 8005410:	f100 33ff 	add.w	r3, r0, #4294967295
 8005414:	d100      	bne.n	8005418 <memcpy+0xc>
 8005416:	4770      	bx	lr
 8005418:	b510      	push	{r4, lr}
 800541a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005422:	4291      	cmp	r1, r2
 8005424:	d1f9      	bne.n	800541a <memcpy+0xe>
 8005426:	bd10      	pop	{r4, pc}

08005428 <_free_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4605      	mov	r5, r0
 800542c:	2900      	cmp	r1, #0
 800542e:	d041      	beq.n	80054b4 <_free_r+0x8c>
 8005430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005434:	1f0c      	subs	r4, r1, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfb8      	it	lt
 800543a:	18e4      	addlt	r4, r4, r3
 800543c:	f000 f8e0 	bl	8005600 <__malloc_lock>
 8005440:	4a1d      	ldr	r2, [pc, #116]	@ (80054b8 <_free_r+0x90>)
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	b933      	cbnz	r3, 8005454 <_free_r+0x2c>
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6014      	str	r4, [r2, #0]
 800544a:	4628      	mov	r0, r5
 800544c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005450:	f000 b8dc 	b.w	800560c <__malloc_unlock>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d908      	bls.n	800546a <_free_r+0x42>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	1821      	adds	r1, r4, r0
 800545c:	428b      	cmp	r3, r1
 800545e:	bf01      	itttt	eq
 8005460:	6819      	ldreq	r1, [r3, #0]
 8005462:	685b      	ldreq	r3, [r3, #4]
 8005464:	1809      	addeq	r1, r1, r0
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	e7ed      	b.n	8005446 <_free_r+0x1e>
 800546a:	461a      	mov	r2, r3
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b10b      	cbz	r3, 8005474 <_free_r+0x4c>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d9fa      	bls.n	800546a <_free_r+0x42>
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	1850      	adds	r0, r2, r1
 8005478:	42a0      	cmp	r0, r4
 800547a:	d10b      	bne.n	8005494 <_free_r+0x6c>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	4401      	add	r1, r0
 8005480:	1850      	adds	r0, r2, r1
 8005482:	4283      	cmp	r3, r0
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	d1e0      	bne.n	800544a <_free_r+0x22>
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6053      	str	r3, [r2, #4]
 800548e:	4408      	add	r0, r1
 8005490:	6010      	str	r0, [r2, #0]
 8005492:	e7da      	b.n	800544a <_free_r+0x22>
 8005494:	d902      	bls.n	800549c <_free_r+0x74>
 8005496:	230c      	movs	r3, #12
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	e7d6      	b.n	800544a <_free_r+0x22>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf04      	itt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	bf04      	itt	eq
 80054ac:	1809      	addeq	r1, r1, r0
 80054ae:	6021      	streq	r1, [r4, #0]
 80054b0:	6054      	str	r4, [r2, #4]
 80054b2:	e7ca      	b.n	800544a <_free_r+0x22>
 80054b4:	bd38      	pop	{r3, r4, r5, pc}
 80054b6:	bf00      	nop
 80054b8:	2000061c 	.word	0x2000061c

080054bc <sbrk_aligned>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4e0f      	ldr	r6, [pc, #60]	@ (80054fc <sbrk_aligned+0x40>)
 80054c0:	460c      	mov	r4, r1
 80054c2:	6831      	ldr	r1, [r6, #0]
 80054c4:	4605      	mov	r5, r0
 80054c6:	b911      	cbnz	r1, 80054ce <sbrk_aligned+0x12>
 80054c8:	f000 ff36 	bl	8006338 <_sbrk_r>
 80054cc:	6030      	str	r0, [r6, #0]
 80054ce:	4621      	mov	r1, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 ff31 	bl	8006338 <_sbrk_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d103      	bne.n	80054e2 <sbrk_aligned+0x26>
 80054da:	f04f 34ff 	mov.w	r4, #4294967295
 80054de:	4620      	mov	r0, r4
 80054e0:	bd70      	pop	{r4, r5, r6, pc}
 80054e2:	1cc4      	adds	r4, r0, #3
 80054e4:	f024 0403 	bic.w	r4, r4, #3
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d0f8      	beq.n	80054de <sbrk_aligned+0x22>
 80054ec:	1a21      	subs	r1, r4, r0
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 ff22 	bl	8006338 <_sbrk_r>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d1f2      	bne.n	80054de <sbrk_aligned+0x22>
 80054f8:	e7ef      	b.n	80054da <sbrk_aligned+0x1e>
 80054fa:	bf00      	nop
 80054fc:	20000618 	.word	0x20000618

08005500 <_malloc_r>:
 8005500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005504:	1ccd      	adds	r5, r1, #3
 8005506:	f025 0503 	bic.w	r5, r5, #3
 800550a:	3508      	adds	r5, #8
 800550c:	2d0c      	cmp	r5, #12
 800550e:	bf38      	it	cc
 8005510:	250c      	movcc	r5, #12
 8005512:	2d00      	cmp	r5, #0
 8005514:	4606      	mov	r6, r0
 8005516:	db01      	blt.n	800551c <_malloc_r+0x1c>
 8005518:	42a9      	cmp	r1, r5
 800551a:	d904      	bls.n	8005526 <_malloc_r+0x26>
 800551c:	230c      	movs	r3, #12
 800551e:	6033      	str	r3, [r6, #0]
 8005520:	2000      	movs	r0, #0
 8005522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005526:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055fc <_malloc_r+0xfc>
 800552a:	f000 f869 	bl	8005600 <__malloc_lock>
 800552e:	f8d8 3000 	ldr.w	r3, [r8]
 8005532:	461c      	mov	r4, r3
 8005534:	bb44      	cbnz	r4, 8005588 <_malloc_r+0x88>
 8005536:	4629      	mov	r1, r5
 8005538:	4630      	mov	r0, r6
 800553a:	f7ff ffbf 	bl	80054bc <sbrk_aligned>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	4604      	mov	r4, r0
 8005542:	d158      	bne.n	80055f6 <_malloc_r+0xf6>
 8005544:	f8d8 4000 	ldr.w	r4, [r8]
 8005548:	4627      	mov	r7, r4
 800554a:	2f00      	cmp	r7, #0
 800554c:	d143      	bne.n	80055d6 <_malloc_r+0xd6>
 800554e:	2c00      	cmp	r4, #0
 8005550:	d04b      	beq.n	80055ea <_malloc_r+0xea>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	4639      	mov	r1, r7
 8005556:	4630      	mov	r0, r6
 8005558:	eb04 0903 	add.w	r9, r4, r3
 800555c:	f000 feec 	bl	8006338 <_sbrk_r>
 8005560:	4581      	cmp	r9, r0
 8005562:	d142      	bne.n	80055ea <_malloc_r+0xea>
 8005564:	6821      	ldr	r1, [r4, #0]
 8005566:	1a6d      	subs	r5, r5, r1
 8005568:	4629      	mov	r1, r5
 800556a:	4630      	mov	r0, r6
 800556c:	f7ff ffa6 	bl	80054bc <sbrk_aligned>
 8005570:	3001      	adds	r0, #1
 8005572:	d03a      	beq.n	80055ea <_malloc_r+0xea>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	442b      	add	r3, r5
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	f8d8 3000 	ldr.w	r3, [r8]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	bb62      	cbnz	r2, 80055dc <_malloc_r+0xdc>
 8005582:	f8c8 7000 	str.w	r7, [r8]
 8005586:	e00f      	b.n	80055a8 <_malloc_r+0xa8>
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	1b52      	subs	r2, r2, r5
 800558c:	d420      	bmi.n	80055d0 <_malloc_r+0xd0>
 800558e:	2a0b      	cmp	r2, #11
 8005590:	d917      	bls.n	80055c2 <_malloc_r+0xc2>
 8005592:	1961      	adds	r1, r4, r5
 8005594:	42a3      	cmp	r3, r4
 8005596:	6025      	str	r5, [r4, #0]
 8005598:	bf18      	it	ne
 800559a:	6059      	strne	r1, [r3, #4]
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	bf08      	it	eq
 80055a0:	f8c8 1000 	streq.w	r1, [r8]
 80055a4:	5162      	str	r2, [r4, r5]
 80055a6:	604b      	str	r3, [r1, #4]
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 f82f 	bl	800560c <__malloc_unlock>
 80055ae:	f104 000b 	add.w	r0, r4, #11
 80055b2:	1d23      	adds	r3, r4, #4
 80055b4:	f020 0007 	bic.w	r0, r0, #7
 80055b8:	1ac2      	subs	r2, r0, r3
 80055ba:	bf1c      	itt	ne
 80055bc:	1a1b      	subne	r3, r3, r0
 80055be:	50a3      	strne	r3, [r4, r2]
 80055c0:	e7af      	b.n	8005522 <_malloc_r+0x22>
 80055c2:	6862      	ldr	r2, [r4, #4]
 80055c4:	42a3      	cmp	r3, r4
 80055c6:	bf0c      	ite	eq
 80055c8:	f8c8 2000 	streq.w	r2, [r8]
 80055cc:	605a      	strne	r2, [r3, #4]
 80055ce:	e7eb      	b.n	80055a8 <_malloc_r+0xa8>
 80055d0:	4623      	mov	r3, r4
 80055d2:	6864      	ldr	r4, [r4, #4]
 80055d4:	e7ae      	b.n	8005534 <_malloc_r+0x34>
 80055d6:	463c      	mov	r4, r7
 80055d8:	687f      	ldr	r7, [r7, #4]
 80055da:	e7b6      	b.n	800554a <_malloc_r+0x4a>
 80055dc:	461a      	mov	r2, r3
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	d1fb      	bne.n	80055dc <_malloc_r+0xdc>
 80055e4:	2300      	movs	r3, #0
 80055e6:	6053      	str	r3, [r2, #4]
 80055e8:	e7de      	b.n	80055a8 <_malloc_r+0xa8>
 80055ea:	230c      	movs	r3, #12
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	4630      	mov	r0, r6
 80055f0:	f000 f80c 	bl	800560c <__malloc_unlock>
 80055f4:	e794      	b.n	8005520 <_malloc_r+0x20>
 80055f6:	6005      	str	r5, [r0, #0]
 80055f8:	e7d6      	b.n	80055a8 <_malloc_r+0xa8>
 80055fa:	bf00      	nop
 80055fc:	2000061c 	.word	0x2000061c

08005600 <__malloc_lock>:
 8005600:	4801      	ldr	r0, [pc, #4]	@ (8005608 <__malloc_lock+0x8>)
 8005602:	f7ff bf01 	b.w	8005408 <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	20000614 	.word	0x20000614

0800560c <__malloc_unlock>:
 800560c:	4801      	ldr	r0, [pc, #4]	@ (8005614 <__malloc_unlock+0x8>)
 800560e:	f7ff befc 	b.w	800540a <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	20000614 	.word	0x20000614

08005618 <__ssputs_r>:
 8005618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	688e      	ldr	r6, [r1, #8]
 800561e:	461f      	mov	r7, r3
 8005620:	42be      	cmp	r6, r7
 8005622:	680b      	ldr	r3, [r1, #0]
 8005624:	4682      	mov	sl, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4690      	mov	r8, r2
 800562a:	d82d      	bhi.n	8005688 <__ssputs_r+0x70>
 800562c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005630:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005634:	d026      	beq.n	8005684 <__ssputs_r+0x6c>
 8005636:	6965      	ldr	r5, [r4, #20]
 8005638:	6909      	ldr	r1, [r1, #16]
 800563a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800563e:	eba3 0901 	sub.w	r9, r3, r1
 8005642:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005646:	1c7b      	adds	r3, r7, #1
 8005648:	444b      	add	r3, r9
 800564a:	106d      	asrs	r5, r5, #1
 800564c:	429d      	cmp	r5, r3
 800564e:	bf38      	it	cc
 8005650:	461d      	movcc	r5, r3
 8005652:	0553      	lsls	r3, r2, #21
 8005654:	d527      	bpl.n	80056a6 <__ssputs_r+0x8e>
 8005656:	4629      	mov	r1, r5
 8005658:	f7ff ff52 	bl	8005500 <_malloc_r>
 800565c:	4606      	mov	r6, r0
 800565e:	b360      	cbz	r0, 80056ba <__ssputs_r+0xa2>
 8005660:	6921      	ldr	r1, [r4, #16]
 8005662:	464a      	mov	r2, r9
 8005664:	f7ff fed2 	bl	800540c <memcpy>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800566e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	6126      	str	r6, [r4, #16]
 8005676:	6165      	str	r5, [r4, #20]
 8005678:	444e      	add	r6, r9
 800567a:	eba5 0509 	sub.w	r5, r5, r9
 800567e:	6026      	str	r6, [r4, #0]
 8005680:	60a5      	str	r5, [r4, #8]
 8005682:	463e      	mov	r6, r7
 8005684:	42be      	cmp	r6, r7
 8005686:	d900      	bls.n	800568a <__ssputs_r+0x72>
 8005688:	463e      	mov	r6, r7
 800568a:	6820      	ldr	r0, [r4, #0]
 800568c:	4632      	mov	r2, r6
 800568e:	4641      	mov	r1, r8
 8005690:	f000 fe37 	bl	8006302 <memmove>
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	1b9b      	subs	r3, r3, r6
 8005698:	60a3      	str	r3, [r4, #8]
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	4433      	add	r3, r6
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	2000      	movs	r0, #0
 80056a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a6:	462a      	mov	r2, r5
 80056a8:	f000 fe56 	bl	8006358 <_realloc_r>
 80056ac:	4606      	mov	r6, r0
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d1e0      	bne.n	8005674 <__ssputs_r+0x5c>
 80056b2:	6921      	ldr	r1, [r4, #16]
 80056b4:	4650      	mov	r0, sl
 80056b6:	f7ff feb7 	bl	8005428 <_free_r>
 80056ba:	230c      	movs	r3, #12
 80056bc:	f8ca 3000 	str.w	r3, [sl]
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e7e9      	b.n	80056a2 <__ssputs_r+0x8a>
	...

080056d0 <_svfiprintf_r>:
 80056d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	4698      	mov	r8, r3
 80056d6:	898b      	ldrh	r3, [r1, #12]
 80056d8:	061b      	lsls	r3, r3, #24
 80056da:	b09d      	sub	sp, #116	@ 0x74
 80056dc:	4607      	mov	r7, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	d510      	bpl.n	8005706 <_svfiprintf_r+0x36>
 80056e4:	690b      	ldr	r3, [r1, #16]
 80056e6:	b973      	cbnz	r3, 8005706 <_svfiprintf_r+0x36>
 80056e8:	2140      	movs	r1, #64	@ 0x40
 80056ea:	f7ff ff09 	bl	8005500 <_malloc_r>
 80056ee:	6028      	str	r0, [r5, #0]
 80056f0:	6128      	str	r0, [r5, #16]
 80056f2:	b930      	cbnz	r0, 8005702 <_svfiprintf_r+0x32>
 80056f4:	230c      	movs	r3, #12
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	b01d      	add	sp, #116	@ 0x74
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005702:	2340      	movs	r3, #64	@ 0x40
 8005704:	616b      	str	r3, [r5, #20]
 8005706:	2300      	movs	r3, #0
 8005708:	9309      	str	r3, [sp, #36]	@ 0x24
 800570a:	2320      	movs	r3, #32
 800570c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005710:	f8cd 800c 	str.w	r8, [sp, #12]
 8005714:	2330      	movs	r3, #48	@ 0x30
 8005716:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058b4 <_svfiprintf_r+0x1e4>
 800571a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800571e:	f04f 0901 	mov.w	r9, #1
 8005722:	4623      	mov	r3, r4
 8005724:	469a      	mov	sl, r3
 8005726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800572a:	b10a      	cbz	r2, 8005730 <_svfiprintf_r+0x60>
 800572c:	2a25      	cmp	r2, #37	@ 0x25
 800572e:	d1f9      	bne.n	8005724 <_svfiprintf_r+0x54>
 8005730:	ebba 0b04 	subs.w	fp, sl, r4
 8005734:	d00b      	beq.n	800574e <_svfiprintf_r+0x7e>
 8005736:	465b      	mov	r3, fp
 8005738:	4622      	mov	r2, r4
 800573a:	4629      	mov	r1, r5
 800573c:	4638      	mov	r0, r7
 800573e:	f7ff ff6b 	bl	8005618 <__ssputs_r>
 8005742:	3001      	adds	r0, #1
 8005744:	f000 80a7 	beq.w	8005896 <_svfiprintf_r+0x1c6>
 8005748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800574a:	445a      	add	r2, fp
 800574c:	9209      	str	r2, [sp, #36]	@ 0x24
 800574e:	f89a 3000 	ldrb.w	r3, [sl]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 809f 	beq.w	8005896 <_svfiprintf_r+0x1c6>
 8005758:	2300      	movs	r3, #0
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005762:	f10a 0a01 	add.w	sl, sl, #1
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	9307      	str	r3, [sp, #28]
 800576a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800576e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005770:	4654      	mov	r4, sl
 8005772:	2205      	movs	r2, #5
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	484e      	ldr	r0, [pc, #312]	@ (80058b4 <_svfiprintf_r+0x1e4>)
 800577a:	f7fa fd39 	bl	80001f0 <memchr>
 800577e:	9a04      	ldr	r2, [sp, #16]
 8005780:	b9d8      	cbnz	r0, 80057ba <_svfiprintf_r+0xea>
 8005782:	06d0      	lsls	r0, r2, #27
 8005784:	bf44      	itt	mi
 8005786:	2320      	movmi	r3, #32
 8005788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800578c:	0711      	lsls	r1, r2, #28
 800578e:	bf44      	itt	mi
 8005790:	232b      	movmi	r3, #43	@ 0x2b
 8005792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005796:	f89a 3000 	ldrb.w	r3, [sl]
 800579a:	2b2a      	cmp	r3, #42	@ 0x2a
 800579c:	d015      	beq.n	80057ca <_svfiprintf_r+0xfa>
 800579e:	9a07      	ldr	r2, [sp, #28]
 80057a0:	4654      	mov	r4, sl
 80057a2:	2000      	movs	r0, #0
 80057a4:	f04f 0c0a 	mov.w	ip, #10
 80057a8:	4621      	mov	r1, r4
 80057aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ae:	3b30      	subs	r3, #48	@ 0x30
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d94b      	bls.n	800584c <_svfiprintf_r+0x17c>
 80057b4:	b1b0      	cbz	r0, 80057e4 <_svfiprintf_r+0x114>
 80057b6:	9207      	str	r2, [sp, #28]
 80057b8:	e014      	b.n	80057e4 <_svfiprintf_r+0x114>
 80057ba:	eba0 0308 	sub.w	r3, r0, r8
 80057be:	fa09 f303 	lsl.w	r3, r9, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	46a2      	mov	sl, r4
 80057c8:	e7d2      	b.n	8005770 <_svfiprintf_r+0xa0>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	1d19      	adds	r1, r3, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	9103      	str	r1, [sp, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bfbb      	ittet	lt
 80057d6:	425b      	neglt	r3, r3
 80057d8:	f042 0202 	orrlt.w	r2, r2, #2
 80057dc:	9307      	strge	r3, [sp, #28]
 80057de:	9307      	strlt	r3, [sp, #28]
 80057e0:	bfb8      	it	lt
 80057e2:	9204      	strlt	r2, [sp, #16]
 80057e4:	7823      	ldrb	r3, [r4, #0]
 80057e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80057e8:	d10a      	bne.n	8005800 <_svfiprintf_r+0x130>
 80057ea:	7863      	ldrb	r3, [r4, #1]
 80057ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ee:	d132      	bne.n	8005856 <_svfiprintf_r+0x186>
 80057f0:	9b03      	ldr	r3, [sp, #12]
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	9203      	str	r2, [sp, #12]
 80057f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057fc:	3402      	adds	r4, #2
 80057fe:	9305      	str	r3, [sp, #20]
 8005800:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058c4 <_svfiprintf_r+0x1f4>
 8005804:	7821      	ldrb	r1, [r4, #0]
 8005806:	2203      	movs	r2, #3
 8005808:	4650      	mov	r0, sl
 800580a:	f7fa fcf1 	bl	80001f0 <memchr>
 800580e:	b138      	cbz	r0, 8005820 <_svfiprintf_r+0x150>
 8005810:	9b04      	ldr	r3, [sp, #16]
 8005812:	eba0 000a 	sub.w	r0, r0, sl
 8005816:	2240      	movs	r2, #64	@ 0x40
 8005818:	4082      	lsls	r2, r0
 800581a:	4313      	orrs	r3, r2
 800581c:	3401      	adds	r4, #1
 800581e:	9304      	str	r3, [sp, #16]
 8005820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005824:	4824      	ldr	r0, [pc, #144]	@ (80058b8 <_svfiprintf_r+0x1e8>)
 8005826:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800582a:	2206      	movs	r2, #6
 800582c:	f7fa fce0 	bl	80001f0 <memchr>
 8005830:	2800      	cmp	r0, #0
 8005832:	d036      	beq.n	80058a2 <_svfiprintf_r+0x1d2>
 8005834:	4b21      	ldr	r3, [pc, #132]	@ (80058bc <_svfiprintf_r+0x1ec>)
 8005836:	bb1b      	cbnz	r3, 8005880 <_svfiprintf_r+0x1b0>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	3307      	adds	r3, #7
 800583c:	f023 0307 	bic.w	r3, r3, #7
 8005840:	3308      	adds	r3, #8
 8005842:	9303      	str	r3, [sp, #12]
 8005844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005846:	4433      	add	r3, r6
 8005848:	9309      	str	r3, [sp, #36]	@ 0x24
 800584a:	e76a      	b.n	8005722 <_svfiprintf_r+0x52>
 800584c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005850:	460c      	mov	r4, r1
 8005852:	2001      	movs	r0, #1
 8005854:	e7a8      	b.n	80057a8 <_svfiprintf_r+0xd8>
 8005856:	2300      	movs	r3, #0
 8005858:	3401      	adds	r4, #1
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	4619      	mov	r1, r3
 800585e:	f04f 0c0a 	mov.w	ip, #10
 8005862:	4620      	mov	r0, r4
 8005864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005868:	3a30      	subs	r2, #48	@ 0x30
 800586a:	2a09      	cmp	r2, #9
 800586c:	d903      	bls.n	8005876 <_svfiprintf_r+0x1a6>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0c6      	beq.n	8005800 <_svfiprintf_r+0x130>
 8005872:	9105      	str	r1, [sp, #20]
 8005874:	e7c4      	b.n	8005800 <_svfiprintf_r+0x130>
 8005876:	fb0c 2101 	mla	r1, ip, r1, r2
 800587a:	4604      	mov	r4, r0
 800587c:	2301      	movs	r3, #1
 800587e:	e7f0      	b.n	8005862 <_svfiprintf_r+0x192>
 8005880:	ab03      	add	r3, sp, #12
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	462a      	mov	r2, r5
 8005886:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <_svfiprintf_r+0x1f0>)
 8005888:	a904      	add	r1, sp, #16
 800588a:	4638      	mov	r0, r7
 800588c:	f3af 8000 	nop.w
 8005890:	1c42      	adds	r2, r0, #1
 8005892:	4606      	mov	r6, r0
 8005894:	d1d6      	bne.n	8005844 <_svfiprintf_r+0x174>
 8005896:	89ab      	ldrh	r3, [r5, #12]
 8005898:	065b      	lsls	r3, r3, #25
 800589a:	f53f af2d 	bmi.w	80056f8 <_svfiprintf_r+0x28>
 800589e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058a0:	e72c      	b.n	80056fc <_svfiprintf_r+0x2c>
 80058a2:	ab03      	add	r3, sp, #12
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	462a      	mov	r2, r5
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <_svfiprintf_r+0x1f0>)
 80058aa:	a904      	add	r1, sp, #16
 80058ac:	4638      	mov	r0, r7
 80058ae:	f000 fa49 	bl	8005d44 <_printf_i>
 80058b2:	e7ed      	b.n	8005890 <_svfiprintf_r+0x1c0>
 80058b4:	080067a9 	.word	0x080067a9
 80058b8:	080067b3 	.word	0x080067b3
 80058bc:	00000000 	.word	0x00000000
 80058c0:	08005619 	.word	0x08005619
 80058c4:	080067af 	.word	0x080067af

080058c8 <_sungetc_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	1c4b      	adds	r3, r1, #1
 80058cc:	4614      	mov	r4, r2
 80058ce:	d103      	bne.n	80058d8 <_sungetc_r+0x10>
 80058d0:	f04f 35ff 	mov.w	r5, #4294967295
 80058d4:	4628      	mov	r0, r5
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	8993      	ldrh	r3, [r2, #12]
 80058da:	f023 0320 	bic.w	r3, r3, #32
 80058de:	8193      	strh	r3, [r2, #12]
 80058e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	b2cd      	uxtb	r5, r1
 80058e6:	b18b      	cbz	r3, 800590c <_sungetc_r+0x44>
 80058e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80058ea:	4293      	cmp	r3, r2
 80058ec:	dd08      	ble.n	8005900 <_sungetc_r+0x38>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	6022      	str	r2, [r4, #0]
 80058f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80058f8:	6863      	ldr	r3, [r4, #4]
 80058fa:	3301      	adds	r3, #1
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	e7e9      	b.n	80058d4 <_sungetc_r+0xc>
 8005900:	4621      	mov	r1, r4
 8005902:	f000 fcc4 	bl	800628e <__submore>
 8005906:	2800      	cmp	r0, #0
 8005908:	d0f1      	beq.n	80058ee <_sungetc_r+0x26>
 800590a:	e7e1      	b.n	80058d0 <_sungetc_r+0x8>
 800590c:	6921      	ldr	r1, [r4, #16]
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	b151      	cbz	r1, 8005928 <_sungetc_r+0x60>
 8005912:	4299      	cmp	r1, r3
 8005914:	d208      	bcs.n	8005928 <_sungetc_r+0x60>
 8005916:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800591a:	42a9      	cmp	r1, r5
 800591c:	d104      	bne.n	8005928 <_sungetc_r+0x60>
 800591e:	3b01      	subs	r3, #1
 8005920:	3201      	adds	r2, #1
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	6062      	str	r2, [r4, #4]
 8005926:	e7d5      	b.n	80058d4 <_sungetc_r+0xc>
 8005928:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800592c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005930:	6363      	str	r3, [r4, #52]	@ 0x34
 8005932:	2303      	movs	r3, #3
 8005934:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005936:	4623      	mov	r3, r4
 8005938:	f803 5f46 	strb.w	r5, [r3, #70]!
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	e7dc      	b.n	80058fc <_sungetc_r+0x34>

08005942 <__ssrefill_r>:
 8005942:	b510      	push	{r4, lr}
 8005944:	460c      	mov	r4, r1
 8005946:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005948:	b169      	cbz	r1, 8005966 <__ssrefill_r+0x24>
 800594a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800594e:	4299      	cmp	r1, r3
 8005950:	d001      	beq.n	8005956 <__ssrefill_r+0x14>
 8005952:	f7ff fd69 	bl	8005428 <_free_r>
 8005956:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	2000      	movs	r0, #0
 800595c:	6360      	str	r0, [r4, #52]	@ 0x34
 800595e:	b113      	cbz	r3, 8005966 <__ssrefill_r+0x24>
 8005960:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	bd10      	pop	{r4, pc}
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	e7f3      	b.n	8005964 <__ssrefill_r+0x22>

0800597c <__ssvfiscanf_r>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	460c      	mov	r4, r1
 8005982:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8005986:	2100      	movs	r1, #0
 8005988:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800598c:	49a6      	ldr	r1, [pc, #664]	@ (8005c28 <__ssvfiscanf_r+0x2ac>)
 800598e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005990:	f10d 0804 	add.w	r8, sp, #4
 8005994:	49a5      	ldr	r1, [pc, #660]	@ (8005c2c <__ssvfiscanf_r+0x2b0>)
 8005996:	4fa6      	ldr	r7, [pc, #664]	@ (8005c30 <__ssvfiscanf_r+0x2b4>)
 8005998:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800599c:	4606      	mov	r6, r0
 800599e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	f892 9000 	ldrb.w	r9, [r2]
 80059a6:	f1b9 0f00 	cmp.w	r9, #0
 80059aa:	f000 8158 	beq.w	8005c5e <__ssvfiscanf_r+0x2e2>
 80059ae:	f817 3009 	ldrb.w	r3, [r7, r9]
 80059b2:	f013 0308 	ands.w	r3, r3, #8
 80059b6:	f102 0501 	add.w	r5, r2, #1
 80059ba:	d019      	beq.n	80059f0 <__ssvfiscanf_r+0x74>
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dd0f      	ble.n	80059e2 <__ssvfiscanf_r+0x66>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	5cba      	ldrb	r2, [r7, r2]
 80059c8:	0712      	lsls	r2, r2, #28
 80059ca:	d401      	bmi.n	80059d0 <__ssvfiscanf_r+0x54>
 80059cc:	462a      	mov	r2, r5
 80059ce:	e7e8      	b.n	80059a2 <__ssvfiscanf_r+0x26>
 80059d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80059d2:	3201      	adds	r2, #1
 80059d4:	9245      	str	r2, [sp, #276]	@ 0x114
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	3301      	adds	r3, #1
 80059da:	3a01      	subs	r2, #1
 80059dc:	6062      	str	r2, [r4, #4]
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	e7ec      	b.n	80059bc <__ssvfiscanf_r+0x40>
 80059e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80059e4:	4621      	mov	r1, r4
 80059e6:	4630      	mov	r0, r6
 80059e8:	4798      	blx	r3
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d0e9      	beq.n	80059c2 <__ssvfiscanf_r+0x46>
 80059ee:	e7ed      	b.n	80059cc <__ssvfiscanf_r+0x50>
 80059f0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80059f4:	f040 8085 	bne.w	8005b02 <__ssvfiscanf_r+0x186>
 80059f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80059fa:	9343      	str	r3, [sp, #268]	@ 0x10c
 80059fc:	7853      	ldrb	r3, [r2, #1]
 80059fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a00:	bf02      	ittt	eq
 8005a02:	2310      	moveq	r3, #16
 8005a04:	1c95      	addeq	r5, r2, #2
 8005a06:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005a08:	220a      	movs	r2, #10
 8005a0a:	46aa      	mov	sl, r5
 8005a0c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005a10:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d91e      	bls.n	8005a56 <__ssvfiscanf_r+0xda>
 8005a18:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8005c34 <__ssvfiscanf_r+0x2b8>
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	4658      	mov	r0, fp
 8005a20:	f7fa fbe6 	bl	80001f0 <memchr>
 8005a24:	b138      	cbz	r0, 8005a36 <__ssvfiscanf_r+0xba>
 8005a26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005a28:	eba0 000b 	sub.w	r0, r0, fp
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4083      	lsls	r3, r0
 8005a30:	4313      	orrs	r3, r2
 8005a32:	9341      	str	r3, [sp, #260]	@ 0x104
 8005a34:	4655      	mov	r5, sl
 8005a36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a3a:	2b78      	cmp	r3, #120	@ 0x78
 8005a3c:	d806      	bhi.n	8005a4c <__ssvfiscanf_r+0xd0>
 8005a3e:	2b57      	cmp	r3, #87	@ 0x57
 8005a40:	d810      	bhi.n	8005a64 <__ssvfiscanf_r+0xe8>
 8005a42:	2b25      	cmp	r3, #37	@ 0x25
 8005a44:	d05d      	beq.n	8005b02 <__ssvfiscanf_r+0x186>
 8005a46:	d857      	bhi.n	8005af8 <__ssvfiscanf_r+0x17c>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d075      	beq.n	8005b38 <__ssvfiscanf_r+0x1bc>
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005a50:	230a      	movs	r3, #10
 8005a52:	9342      	str	r3, [sp, #264]	@ 0x108
 8005a54:	e088      	b.n	8005b68 <__ssvfiscanf_r+0x1ec>
 8005a56:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005a58:	fb02 1103 	mla	r1, r2, r3, r1
 8005a5c:	3930      	subs	r1, #48	@ 0x30
 8005a5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005a60:	4655      	mov	r5, sl
 8005a62:	e7d2      	b.n	8005a0a <__ssvfiscanf_r+0x8e>
 8005a64:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005a68:	2a20      	cmp	r2, #32
 8005a6a:	d8ef      	bhi.n	8005a4c <__ssvfiscanf_r+0xd0>
 8005a6c:	a101      	add	r1, pc, #4	@ (adr r1, 8005a74 <__ssvfiscanf_r+0xf8>)
 8005a6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005b47 	.word	0x08005b47
 8005a78:	08005a4d 	.word	0x08005a4d
 8005a7c:	08005a4d 	.word	0x08005a4d
 8005a80:	08005ba1 	.word	0x08005ba1
 8005a84:	08005a4d 	.word	0x08005a4d
 8005a88:	08005a4d 	.word	0x08005a4d
 8005a8c:	08005a4d 	.word	0x08005a4d
 8005a90:	08005a4d 	.word	0x08005a4d
 8005a94:	08005a4d 	.word	0x08005a4d
 8005a98:	08005a4d 	.word	0x08005a4d
 8005a9c:	08005a4d 	.word	0x08005a4d
 8005aa0:	08005bb7 	.word	0x08005bb7
 8005aa4:	08005b9d 	.word	0x08005b9d
 8005aa8:	08005aff 	.word	0x08005aff
 8005aac:	08005aff 	.word	0x08005aff
 8005ab0:	08005aff 	.word	0x08005aff
 8005ab4:	08005a4d 	.word	0x08005a4d
 8005ab8:	08005b59 	.word	0x08005b59
 8005abc:	08005a4d 	.word	0x08005a4d
 8005ac0:	08005a4d 	.word	0x08005a4d
 8005ac4:	08005a4d 	.word	0x08005a4d
 8005ac8:	08005a4d 	.word	0x08005a4d
 8005acc:	08005bc7 	.word	0x08005bc7
 8005ad0:	08005b61 	.word	0x08005b61
 8005ad4:	08005b3f 	.word	0x08005b3f
 8005ad8:	08005a4d 	.word	0x08005a4d
 8005adc:	08005a4d 	.word	0x08005a4d
 8005ae0:	08005bc3 	.word	0x08005bc3
 8005ae4:	08005a4d 	.word	0x08005a4d
 8005ae8:	08005b9d 	.word	0x08005b9d
 8005aec:	08005a4d 	.word	0x08005a4d
 8005af0:	08005a4d 	.word	0x08005a4d
 8005af4:	08005b47 	.word	0x08005b47
 8005af8:	3b45      	subs	r3, #69	@ 0x45
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d8a6      	bhi.n	8005a4c <__ssvfiscanf_r+0xd0>
 8005afe:	2305      	movs	r3, #5
 8005b00:	e031      	b.n	8005b66 <__ssvfiscanf_r+0x1ea>
 8005b02:	6863      	ldr	r3, [r4, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd0d      	ble.n	8005b24 <__ssvfiscanf_r+0x1a8>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	454a      	cmp	r2, r9
 8005b0e:	f040 80a6 	bne.w	8005c5e <__ssvfiscanf_r+0x2e2>
 8005b12:	3301      	adds	r3, #1
 8005b14:	6862      	ldr	r2, [r4, #4]
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005b1a:	3a01      	subs	r2, #1
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	6062      	str	r2, [r4, #4]
 8005b20:	9345      	str	r3, [sp, #276]	@ 0x114
 8005b22:	e753      	b.n	80059cc <__ssvfiscanf_r+0x50>
 8005b24:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005b26:	4621      	mov	r1, r4
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4798      	blx	r3
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d0eb      	beq.n	8005b08 <__ssvfiscanf_r+0x18c>
 8005b30:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f040 808b 	bne.w	8005c4e <__ssvfiscanf_r+0x2d2>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e08b      	b.n	8005c56 <__ssvfiscanf_r+0x2da>
 8005b3e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005b40:	f042 0220 	orr.w	r2, r2, #32
 8005b44:	9241      	str	r2, [sp, #260]	@ 0x104
 8005b46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4c:	9241      	str	r2, [sp, #260]	@ 0x104
 8005b4e:	2210      	movs	r2, #16
 8005b50:	2b6e      	cmp	r3, #110	@ 0x6e
 8005b52:	9242      	str	r2, [sp, #264]	@ 0x108
 8005b54:	d902      	bls.n	8005b5c <__ssvfiscanf_r+0x1e0>
 8005b56:	e005      	b.n	8005b64 <__ssvfiscanf_r+0x1e8>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9342      	str	r3, [sp, #264]	@ 0x108
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e002      	b.n	8005b66 <__ssvfiscanf_r+0x1ea>
 8005b60:	2308      	movs	r3, #8
 8005b62:	9342      	str	r3, [sp, #264]	@ 0x108
 8005b64:	2304      	movs	r3, #4
 8005b66:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	dd39      	ble.n	8005be2 <__ssvfiscanf_r+0x266>
 8005b6e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005b70:	0659      	lsls	r1, r3, #25
 8005b72:	d404      	bmi.n	8005b7e <__ssvfiscanf_r+0x202>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	5cba      	ldrb	r2, [r7, r2]
 8005b7a:	0712      	lsls	r2, r2, #28
 8005b7c:	d438      	bmi.n	8005bf0 <__ssvfiscanf_r+0x274>
 8005b7e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	dc47      	bgt.n	8005c14 <__ssvfiscanf_r+0x298>
 8005b84:	466b      	mov	r3, sp
 8005b86:	4622      	mov	r2, r4
 8005b88:	a941      	add	r1, sp, #260	@ 0x104
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f000 f9f8 	bl	8005f80 <_scanf_chars>
 8005b90:	2801      	cmp	r0, #1
 8005b92:	d064      	beq.n	8005c5e <__ssvfiscanf_r+0x2e2>
 8005b94:	2802      	cmp	r0, #2
 8005b96:	f47f af19 	bne.w	80059cc <__ssvfiscanf_r+0x50>
 8005b9a:	e7c9      	b.n	8005b30 <__ssvfiscanf_r+0x1b4>
 8005b9c:	220a      	movs	r2, #10
 8005b9e:	e7d7      	b.n	8005b50 <__ssvfiscanf_r+0x1d4>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f000 fb3a 	bl	800621c <__sccl>
 8005ba8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bae:	9341      	str	r3, [sp, #260]	@ 0x104
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7d7      	b.n	8005b66 <__ssvfiscanf_r+0x1ea>
 8005bb6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bbc:	9341      	str	r3, [sp, #260]	@ 0x104
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e7d1      	b.n	8005b66 <__ssvfiscanf_r+0x1ea>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e7cf      	b.n	8005b66 <__ssvfiscanf_r+0x1ea>
 8005bc6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005bc8:	06c3      	lsls	r3, r0, #27
 8005bca:	f53f aeff 	bmi.w	80059cc <__ssvfiscanf_r+0x50>
 8005bce:	9b00      	ldr	r3, [sp, #0]
 8005bd0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	9100      	str	r1, [sp, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	07c0      	lsls	r0, r0, #31
 8005bda:	bf4c      	ite	mi
 8005bdc:	801a      	strhmi	r2, [r3, #0]
 8005bde:	601a      	strpl	r2, [r3, #0]
 8005be0:	e6f4      	b.n	80059cc <__ssvfiscanf_r+0x50>
 8005be2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005be4:	4621      	mov	r1, r4
 8005be6:	4630      	mov	r0, r6
 8005be8:	4798      	blx	r3
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d0bf      	beq.n	8005b6e <__ssvfiscanf_r+0x1f2>
 8005bee:	e79f      	b.n	8005b30 <__ssvfiscanf_r+0x1b4>
 8005bf0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005bf2:	3201      	adds	r2, #1
 8005bf4:	9245      	str	r2, [sp, #276]	@ 0x114
 8005bf6:	6862      	ldr	r2, [r4, #4]
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	6062      	str	r2, [r4, #4]
 8005bfe:	dd02      	ble.n	8005c06 <__ssvfiscanf_r+0x28a>
 8005c00:	3301      	adds	r3, #1
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	e7b6      	b.n	8005b74 <__ssvfiscanf_r+0x1f8>
 8005c06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	4798      	blx	r3
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0b0      	beq.n	8005b74 <__ssvfiscanf_r+0x1f8>
 8005c12:	e78d      	b.n	8005b30 <__ssvfiscanf_r+0x1b4>
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	dc0f      	bgt.n	8005c38 <__ssvfiscanf_r+0x2bc>
 8005c18:	466b      	mov	r3, sp
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	a941      	add	r1, sp, #260	@ 0x104
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f000 fa08 	bl	8006034 <_scanf_i>
 8005c24:	e7b4      	b.n	8005b90 <__ssvfiscanf_r+0x214>
 8005c26:	bf00      	nop
 8005c28:	080058c9 	.word	0x080058c9
 8005c2c:	08005943 	.word	0x08005943
 8005c30:	080066a9 	.word	0x080066a9
 8005c34:	080067af 	.word	0x080067af
 8005c38:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <__ssvfiscanf_r+0x2e8>)
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f43f aec6 	beq.w	80059cc <__ssvfiscanf_r+0x50>
 8005c40:	466b      	mov	r3, sp
 8005c42:	4622      	mov	r2, r4
 8005c44:	a941      	add	r1, sp, #260	@ 0x104
 8005c46:	4630      	mov	r0, r6
 8005c48:	f3af 8000 	nop.w
 8005c4c:	e7a0      	b.n	8005b90 <__ssvfiscanf_r+0x214>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	065b      	lsls	r3, r3, #25
 8005c52:	f53f af71 	bmi.w	8005b38 <__ssvfiscanf_r+0x1bc>
 8005c56:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005c60:	e7f9      	b.n	8005c56 <__ssvfiscanf_r+0x2da>
 8005c62:	bf00      	nop
 8005c64:	00000000 	.word	0x00000000

08005c68 <_printf_common>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	4698      	mov	r8, r3
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bfb8      	it	lt
 8005c7c:	4613      	movlt	r3, r2
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c84:	4607      	mov	r7, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	b10a      	cbz	r2, 8005c8e <_printf_common+0x26>
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	0699      	lsls	r1, r3, #26
 8005c92:	bf42      	ittt	mi
 8005c94:	6833      	ldrmi	r3, [r6, #0]
 8005c96:	3302      	addmi	r3, #2
 8005c98:	6033      	strmi	r3, [r6, #0]
 8005c9a:	6825      	ldr	r5, [r4, #0]
 8005c9c:	f015 0506 	ands.w	r5, r5, #6
 8005ca0:	d106      	bne.n	8005cb0 <_printf_common+0x48>
 8005ca2:	f104 0a19 	add.w	sl, r4, #25
 8005ca6:	68e3      	ldr	r3, [r4, #12]
 8005ca8:	6832      	ldr	r2, [r6, #0]
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	dc26      	bgt.n	8005cfe <_printf_common+0x96>
 8005cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	3b00      	subs	r3, #0
 8005cb8:	bf18      	it	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	0692      	lsls	r2, r2, #26
 8005cbe:	d42b      	bmi.n	8005d18 <_printf_common+0xb0>
 8005cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c8      	blx	r9
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d01e      	beq.n	8005d0c <_printf_common+0xa4>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	6922      	ldr	r2, [r4, #16]
 8005cd2:	f003 0306 	and.w	r3, r3, #6
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	bf02      	ittt	eq
 8005cda:	68e5      	ldreq	r5, [r4, #12]
 8005cdc:	6833      	ldreq	r3, [r6, #0]
 8005cde:	1aed      	subeq	r5, r5, r3
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	bf0c      	ite	eq
 8005ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce8:	2500      	movne	r5, #0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bfc4      	itt	gt
 8005cee:	1a9b      	subgt	r3, r3, r2
 8005cf0:	18ed      	addgt	r5, r5, r3
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	341a      	adds	r4, #26
 8005cf6:	42b5      	cmp	r5, r6
 8005cf8:	d11a      	bne.n	8005d30 <_printf_common+0xc8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e008      	b.n	8005d10 <_printf_common+0xa8>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4641      	mov	r1, r8
 8005d04:	4638      	mov	r0, r7
 8005d06:	47c8      	blx	r9
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d103      	bne.n	8005d14 <_printf_common+0xac>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7c6      	b.n	8005ca6 <_printf_common+0x3e>
 8005d18:	18e1      	adds	r1, r4, r3
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	2030      	movs	r0, #48	@ 0x30
 8005d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d22:	4422      	add	r2, r4
 8005d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	e7c7      	b.n	8005cc0 <_printf_common+0x58>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	4641      	mov	r1, r8
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c8      	blx	r9
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0e6      	beq.n	8005d0c <_printf_common+0xa4>
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7d9      	b.n	8005cf6 <_printf_common+0x8e>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	7e0f      	ldrb	r7, [r1, #24]
 8005d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d4c:	2f78      	cmp	r7, #120	@ 0x78
 8005d4e:	4691      	mov	r9, r2
 8005d50:	4680      	mov	r8, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	469a      	mov	sl, r3
 8005d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d5a:	d807      	bhi.n	8005d6c <_printf_i+0x28>
 8005d5c:	2f62      	cmp	r7, #98	@ 0x62
 8005d5e:	d80a      	bhi.n	8005d76 <_printf_i+0x32>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	f000 80d1 	beq.w	8005f08 <_printf_i+0x1c4>
 8005d66:	2f58      	cmp	r7, #88	@ 0x58
 8005d68:	f000 80b8 	beq.w	8005edc <_printf_i+0x198>
 8005d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d74:	e03a      	b.n	8005dec <_printf_i+0xa8>
 8005d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d7a:	2b15      	cmp	r3, #21
 8005d7c:	d8f6      	bhi.n	8005d6c <_printf_i+0x28>
 8005d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d84 <_printf_i+0x40>)
 8005d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005d6d 	.word	0x08005d6d
 8005d90:	08005d6d 	.word	0x08005d6d
 8005d94:	08005d6d 	.word	0x08005d6d
 8005d98:	08005d6d 	.word	0x08005d6d
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005d6d 	.word	0x08005d6d
 8005da4:	08005d6d 	.word	0x08005d6d
 8005da8:	08005d6d 	.word	0x08005d6d
 8005dac:	08005d6d 	.word	0x08005d6d
 8005db0:	08005eef 	.word	0x08005eef
 8005db4:	08005e1b 	.word	0x08005e1b
 8005db8:	08005ea9 	.word	0x08005ea9
 8005dbc:	08005d6d 	.word	0x08005d6d
 8005dc0:	08005d6d 	.word	0x08005d6d
 8005dc4:	08005f11 	.word	0x08005f11
 8005dc8:	08005d6d 	.word	0x08005d6d
 8005dcc:	08005e1b 	.word	0x08005e1b
 8005dd0:	08005d6d 	.word	0x08005d6d
 8005dd4:	08005d6d 	.word	0x08005d6d
 8005dd8:	08005eb1 	.word	0x08005eb1
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6032      	str	r2, [r6, #0]
 8005de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dec:	2301      	movs	r3, #1
 8005dee:	e09c      	b.n	8005f2a <_printf_i+0x1e6>
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	6031      	str	r1, [r6, #0]
 8005df8:	0606      	lsls	r6, r0, #24
 8005dfa:	d501      	bpl.n	8005e00 <_printf_i+0xbc>
 8005dfc:	681d      	ldr	r5, [r3, #0]
 8005dfe:	e003      	b.n	8005e08 <_printf_i+0xc4>
 8005e00:	0645      	lsls	r5, r0, #25
 8005e02:	d5fb      	bpl.n	8005dfc <_printf_i+0xb8>
 8005e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	da03      	bge.n	8005e14 <_printf_i+0xd0>
 8005e0c:	232d      	movs	r3, #45	@ 0x2d
 8005e0e:	426d      	negs	r5, r5
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e14:	4858      	ldr	r0, [pc, #352]	@ (8005f78 <_printf_i+0x234>)
 8005e16:	230a      	movs	r3, #10
 8005e18:	e011      	b.n	8005e3e <_printf_i+0xfa>
 8005e1a:	6821      	ldr	r1, [r4, #0]
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	0608      	lsls	r0, r1, #24
 8005e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e24:	d402      	bmi.n	8005e2c <_printf_i+0xe8>
 8005e26:	0649      	lsls	r1, r1, #25
 8005e28:	bf48      	it	mi
 8005e2a:	b2ad      	uxthmi	r5, r5
 8005e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e2e:	4852      	ldr	r0, [pc, #328]	@ (8005f78 <_printf_i+0x234>)
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	bf14      	ite	ne
 8005e34:	230a      	movne	r3, #10
 8005e36:	2308      	moveq	r3, #8
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e3e:	6866      	ldr	r6, [r4, #4]
 8005e40:	60a6      	str	r6, [r4, #8]
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	db05      	blt.n	8005e52 <_printf_i+0x10e>
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	432e      	orrs	r6, r5
 8005e4a:	f021 0104 	bic.w	r1, r1, #4
 8005e4e:	6021      	str	r1, [r4, #0]
 8005e50:	d04b      	beq.n	8005eea <_printf_i+0x1a6>
 8005e52:	4616      	mov	r6, r2
 8005e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e58:	fb03 5711 	mls	r7, r3, r1, r5
 8005e5c:	5dc7      	ldrb	r7, [r0, r7]
 8005e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e62:	462f      	mov	r7, r5
 8005e64:	42bb      	cmp	r3, r7
 8005e66:	460d      	mov	r5, r1
 8005e68:	d9f4      	bls.n	8005e54 <_printf_i+0x110>
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d10b      	bne.n	8005e86 <_printf_i+0x142>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	07df      	lsls	r7, r3, #31
 8005e72:	d508      	bpl.n	8005e86 <_printf_i+0x142>
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	6861      	ldr	r1, [r4, #4]
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	bfde      	ittt	le
 8005e7c:	2330      	movle	r3, #48	@ 0x30
 8005e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e86:	1b92      	subs	r2, r2, r6
 8005e88:	6122      	str	r2, [r4, #16]
 8005e8a:	f8cd a000 	str.w	sl, [sp]
 8005e8e:	464b      	mov	r3, r9
 8005e90:	aa03      	add	r2, sp, #12
 8005e92:	4621      	mov	r1, r4
 8005e94:	4640      	mov	r0, r8
 8005e96:	f7ff fee7 	bl	8005c68 <_printf_common>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d14a      	bne.n	8005f34 <_printf_i+0x1f0>
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	b004      	add	sp, #16
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	f043 0320 	orr.w	r3, r3, #32
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	4832      	ldr	r0, [pc, #200]	@ (8005f7c <_printf_i+0x238>)
 8005eb2:	2778      	movs	r7, #120	@ 0x78
 8005eb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	6831      	ldr	r1, [r6, #0]
 8005ebc:	061f      	lsls	r7, r3, #24
 8005ebe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ec2:	d402      	bmi.n	8005eca <_printf_i+0x186>
 8005ec4:	065f      	lsls	r7, r3, #25
 8005ec6:	bf48      	it	mi
 8005ec8:	b2ad      	uxthmi	r5, r5
 8005eca:	6031      	str	r1, [r6, #0]
 8005ecc:	07d9      	lsls	r1, r3, #31
 8005ece:	bf44      	itt	mi
 8005ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed4:	6023      	strmi	r3, [r4, #0]
 8005ed6:	b11d      	cbz	r5, 8005ee0 <_printf_i+0x19c>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	e7ad      	b.n	8005e38 <_printf_i+0xf4>
 8005edc:	4826      	ldr	r0, [pc, #152]	@ (8005f78 <_printf_i+0x234>)
 8005ede:	e7e9      	b.n	8005eb4 <_printf_i+0x170>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	f023 0320 	bic.w	r3, r3, #32
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	e7f6      	b.n	8005ed8 <_printf_i+0x194>
 8005eea:	4616      	mov	r6, r2
 8005eec:	e7bd      	b.n	8005e6a <_printf_i+0x126>
 8005eee:	6833      	ldr	r3, [r6, #0]
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	6961      	ldr	r1, [r4, #20]
 8005ef4:	1d18      	adds	r0, r3, #4
 8005ef6:	6030      	str	r0, [r6, #0]
 8005ef8:	062e      	lsls	r6, r5, #24
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	d501      	bpl.n	8005f02 <_printf_i+0x1be>
 8005efe:	6019      	str	r1, [r3, #0]
 8005f00:	e002      	b.n	8005f08 <_printf_i+0x1c4>
 8005f02:	0668      	lsls	r0, r5, #25
 8005f04:	d5fb      	bpl.n	8005efe <_printf_i+0x1ba>
 8005f06:	8019      	strh	r1, [r3, #0]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	e7bc      	b.n	8005e8a <_printf_i+0x146>
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	6032      	str	r2, [r6, #0]
 8005f16:	681e      	ldr	r6, [r3, #0]
 8005f18:	6862      	ldr	r2, [r4, #4]
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7fa f967 	bl	80001f0 <memchr>
 8005f22:	b108      	cbz	r0, 8005f28 <_printf_i+0x1e4>
 8005f24:	1b80      	subs	r0, r0, r6
 8005f26:	6060      	str	r0, [r4, #4]
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	6123      	str	r3, [r4, #16]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f32:	e7aa      	b.n	8005e8a <_printf_i+0x146>
 8005f34:	6923      	ldr	r3, [r4, #16]
 8005f36:	4632      	mov	r2, r6
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	47d0      	blx	sl
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d0ad      	beq.n	8005e9e <_printf_i+0x15a>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	079b      	lsls	r3, r3, #30
 8005f46:	d413      	bmi.n	8005f70 <_printf_i+0x22c>
 8005f48:	68e0      	ldr	r0, [r4, #12]
 8005f4a:	9b03      	ldr	r3, [sp, #12]
 8005f4c:	4298      	cmp	r0, r3
 8005f4e:	bfb8      	it	lt
 8005f50:	4618      	movlt	r0, r3
 8005f52:	e7a6      	b.n	8005ea2 <_printf_i+0x15e>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4632      	mov	r2, r6
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	47d0      	blx	sl
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d09d      	beq.n	8005e9e <_printf_i+0x15a>
 8005f62:	3501      	adds	r5, #1
 8005f64:	68e3      	ldr	r3, [r4, #12]
 8005f66:	9903      	ldr	r1, [sp, #12]
 8005f68:	1a5b      	subs	r3, r3, r1
 8005f6a:	42ab      	cmp	r3, r5
 8005f6c:	dcf2      	bgt.n	8005f54 <_printf_i+0x210>
 8005f6e:	e7eb      	b.n	8005f48 <_printf_i+0x204>
 8005f70:	2500      	movs	r5, #0
 8005f72:	f104 0619 	add.w	r6, r4, #25
 8005f76:	e7f5      	b.n	8005f64 <_printf_i+0x220>
 8005f78:	080067ba 	.word	0x080067ba
 8005f7c:	080067cb 	.word	0x080067cb

08005f80 <_scanf_chars>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	4615      	mov	r5, r2
 8005f86:	688a      	ldr	r2, [r1, #8]
 8005f88:	4680      	mov	r8, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	b932      	cbnz	r2, 8005f9c <_scanf_chars+0x1c>
 8005f8e:	698a      	ldr	r2, [r1, #24]
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	bf14      	ite	ne
 8005f94:	f04f 32ff 	movne.w	r2, #4294967295
 8005f98:	2201      	moveq	r2, #1
 8005f9a:	608a      	str	r2, [r1, #8]
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006030 <_scanf_chars+0xb0>
 8005fa2:	06d1      	lsls	r1, r2, #27
 8005fa4:	bf5f      	itttt	pl
 8005fa6:	681a      	ldrpl	r2, [r3, #0]
 8005fa8:	1d11      	addpl	r1, r2, #4
 8005faa:	6019      	strpl	r1, [r3, #0]
 8005fac:	6816      	ldrpl	r6, [r2, #0]
 8005fae:	2700      	movs	r7, #0
 8005fb0:	69a0      	ldr	r0, [r4, #24]
 8005fb2:	b188      	cbz	r0, 8005fd8 <_scanf_chars+0x58>
 8005fb4:	2801      	cmp	r0, #1
 8005fb6:	d107      	bne.n	8005fc8 <_scanf_chars+0x48>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	6963      	ldr	r3, [r4, #20]
 8005fbe:	5c9b      	ldrb	r3, [r3, r2]
 8005fc0:	b953      	cbnz	r3, 8005fd8 <_scanf_chars+0x58>
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	d031      	beq.n	800602a <_scanf_chars+0xaa>
 8005fc6:	e022      	b.n	800600e <_scanf_chars+0x8e>
 8005fc8:	2802      	cmp	r0, #2
 8005fca:	d120      	bne.n	800600e <_scanf_chars+0x8e>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	d41a      	bmi.n	800600e <_scanf_chars+0x8e>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	06da      	lsls	r2, r3, #27
 8005fdc:	bf5e      	ittt	pl
 8005fde:	682b      	ldrpl	r3, [r5, #0]
 8005fe0:	781b      	ldrbpl	r3, [r3, #0]
 8005fe2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005fe6:	682a      	ldr	r2, [r5, #0]
 8005fe8:	686b      	ldr	r3, [r5, #4]
 8005fea:	3201      	adds	r2, #1
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	68a2      	ldr	r2, [r4, #8]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	3a01      	subs	r2, #1
 8005ff4:	606b      	str	r3, [r5, #4]
 8005ff6:	3701      	adds	r7, #1
 8005ff8:	60a2      	str	r2, [r4, #8]
 8005ffa:	b142      	cbz	r2, 800600e <_scanf_chars+0x8e>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dcd7      	bgt.n	8005fb0 <_scanf_chars+0x30>
 8006000:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006004:	4629      	mov	r1, r5
 8006006:	4640      	mov	r0, r8
 8006008:	4798      	blx	r3
 800600a:	2800      	cmp	r0, #0
 800600c:	d0d0      	beq.n	8005fb0 <_scanf_chars+0x30>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	f013 0310 	ands.w	r3, r3, #16
 8006014:	d105      	bne.n	8006022 <_scanf_chars+0xa2>
 8006016:	68e2      	ldr	r2, [r4, #12]
 8006018:	3201      	adds	r2, #1
 800601a:	60e2      	str	r2, [r4, #12]
 800601c:	69a2      	ldr	r2, [r4, #24]
 800601e:	b102      	cbz	r2, 8006022 <_scanf_chars+0xa2>
 8006020:	7033      	strb	r3, [r6, #0]
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	443b      	add	r3, r7
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	2000      	movs	r0, #0
 800602a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602e:	bf00      	nop
 8006030:	080066a9 	.word	0x080066a9

08006034 <_scanf_i>:
 8006034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	4698      	mov	r8, r3
 800603a:	4b74      	ldr	r3, [pc, #464]	@ (800620c <_scanf_i+0x1d8>)
 800603c:	460c      	mov	r4, r1
 800603e:	4682      	mov	sl, r0
 8006040:	4616      	mov	r6, r2
 8006042:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006046:	b087      	sub	sp, #28
 8006048:	ab03      	add	r3, sp, #12
 800604a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800604e:	4b70      	ldr	r3, [pc, #448]	@ (8006210 <_scanf_i+0x1dc>)
 8006050:	69a1      	ldr	r1, [r4, #24]
 8006052:	4a70      	ldr	r2, [pc, #448]	@ (8006214 <_scanf_i+0x1e0>)
 8006054:	2903      	cmp	r1, #3
 8006056:	bf08      	it	eq
 8006058:	461a      	moveq	r2, r3
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	9201      	str	r2, [sp, #4]
 800605e:	1e5a      	subs	r2, r3, #1
 8006060:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006064:	bf88      	it	hi
 8006066:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800606a:	4627      	mov	r7, r4
 800606c:	bf82      	ittt	hi
 800606e:	eb03 0905 	addhi.w	r9, r3, r5
 8006072:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006076:	60a3      	strhi	r3, [r4, #8]
 8006078:	f857 3b1c 	ldr.w	r3, [r7], #28
 800607c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006080:	bf98      	it	ls
 8006082:	f04f 0900 	movls.w	r9, #0
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	463d      	mov	r5, r7
 800608a:	f04f 0b00 	mov.w	fp, #0
 800608e:	6831      	ldr	r1, [r6, #0]
 8006090:	ab03      	add	r3, sp, #12
 8006092:	7809      	ldrb	r1, [r1, #0]
 8006094:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006098:	2202      	movs	r2, #2
 800609a:	f7fa f8a9 	bl	80001f0 <memchr>
 800609e:	b328      	cbz	r0, 80060ec <_scanf_i+0xb8>
 80060a0:	f1bb 0f01 	cmp.w	fp, #1
 80060a4:	d159      	bne.n	800615a <_scanf_i+0x126>
 80060a6:	6862      	ldr	r2, [r4, #4]
 80060a8:	b92a      	cbnz	r2, 80060b6 <_scanf_i+0x82>
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	2108      	movs	r1, #8
 80060ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060b2:	6061      	str	r1, [r4, #4]
 80060b4:	6022      	str	r2, [r4, #0]
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80060bc:	6022      	str	r2, [r4, #0]
 80060be:	68a2      	ldr	r2, [r4, #8]
 80060c0:	1e51      	subs	r1, r2, #1
 80060c2:	60a1      	str	r1, [r4, #8]
 80060c4:	b192      	cbz	r2, 80060ec <_scanf_i+0xb8>
 80060c6:	6832      	ldr	r2, [r6, #0]
 80060c8:	1c51      	adds	r1, r2, #1
 80060ca:	6031      	str	r1, [r6, #0]
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	f805 2b01 	strb.w	r2, [r5], #1
 80060d2:	6872      	ldr	r2, [r6, #4]
 80060d4:	3a01      	subs	r2, #1
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	6072      	str	r2, [r6, #4]
 80060da:	dc07      	bgt.n	80060ec <_scanf_i+0xb8>
 80060dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80060e0:	4631      	mov	r1, r6
 80060e2:	4650      	mov	r0, sl
 80060e4:	4790      	blx	r2
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f040 8085 	bne.w	80061f6 <_scanf_i+0x1c2>
 80060ec:	f10b 0b01 	add.w	fp, fp, #1
 80060f0:	f1bb 0f03 	cmp.w	fp, #3
 80060f4:	d1cb      	bne.n	800608e <_scanf_i+0x5a>
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	b90b      	cbnz	r3, 80060fe <_scanf_i+0xca>
 80060fa:	230a      	movs	r3, #10
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	4945      	ldr	r1, [pc, #276]	@ (8006218 <_scanf_i+0x1e4>)
 8006102:	6960      	ldr	r0, [r4, #20]
 8006104:	1ac9      	subs	r1, r1, r3
 8006106:	f000 f889 	bl	800621c <__sccl>
 800610a:	f04f 0b00 	mov.w	fp, #0
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d03d      	beq.n	8006192 <_scanf_i+0x15e>
 8006116:	6831      	ldr	r1, [r6, #0]
 8006118:	6960      	ldr	r0, [r4, #20]
 800611a:	f891 c000 	ldrb.w	ip, [r1]
 800611e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006122:	2800      	cmp	r0, #0
 8006124:	d035      	beq.n	8006192 <_scanf_i+0x15e>
 8006126:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800612a:	d124      	bne.n	8006176 <_scanf_i+0x142>
 800612c:	0510      	lsls	r0, r2, #20
 800612e:	d522      	bpl.n	8006176 <_scanf_i+0x142>
 8006130:	f10b 0b01 	add.w	fp, fp, #1
 8006134:	f1b9 0f00 	cmp.w	r9, #0
 8006138:	d003      	beq.n	8006142 <_scanf_i+0x10e>
 800613a:	3301      	adds	r3, #1
 800613c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006140:	60a3      	str	r3, [r4, #8]
 8006142:	6873      	ldr	r3, [r6, #4]
 8006144:	3b01      	subs	r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	6073      	str	r3, [r6, #4]
 800614a:	dd1b      	ble.n	8006184 <_scanf_i+0x150>
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	3b01      	subs	r3, #1
 8006156:	60a3      	str	r3, [r4, #8]
 8006158:	e7d9      	b.n	800610e <_scanf_i+0xda>
 800615a:	f1bb 0f02 	cmp.w	fp, #2
 800615e:	d1ae      	bne.n	80060be <_scanf_i+0x8a>
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006166:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800616a:	d1c4      	bne.n	80060f6 <_scanf_i+0xc2>
 800616c:	2110      	movs	r1, #16
 800616e:	6061      	str	r1, [r4, #4]
 8006170:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006174:	e7a2      	b.n	80060bc <_scanf_i+0x88>
 8006176:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800617a:	6022      	str	r2, [r4, #0]
 800617c:	780b      	ldrb	r3, [r1, #0]
 800617e:	f805 3b01 	strb.w	r3, [r5], #1
 8006182:	e7de      	b.n	8006142 <_scanf_i+0x10e>
 8006184:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006188:	4631      	mov	r1, r6
 800618a:	4650      	mov	r0, sl
 800618c:	4798      	blx	r3
 800618e:	2800      	cmp	r0, #0
 8006190:	d0df      	beq.n	8006152 <_scanf_i+0x11e>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	05d9      	lsls	r1, r3, #23
 8006196:	d50d      	bpl.n	80061b4 <_scanf_i+0x180>
 8006198:	42bd      	cmp	r5, r7
 800619a:	d909      	bls.n	80061b0 <_scanf_i+0x17c>
 800619c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80061a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061a4:	4632      	mov	r2, r6
 80061a6:	4650      	mov	r0, sl
 80061a8:	4798      	blx	r3
 80061aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80061ae:	464d      	mov	r5, r9
 80061b0:	42bd      	cmp	r5, r7
 80061b2:	d028      	beq.n	8006206 <_scanf_i+0x1d2>
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	f012 0210 	ands.w	r2, r2, #16
 80061ba:	d113      	bne.n	80061e4 <_scanf_i+0x1b0>
 80061bc:	702a      	strb	r2, [r5, #0]
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	9e01      	ldr	r6, [sp, #4]
 80061c2:	4639      	mov	r1, r7
 80061c4:	4650      	mov	r0, sl
 80061c6:	47b0      	blx	r6
 80061c8:	f8d8 3000 	ldr.w	r3, [r8]
 80061cc:	6821      	ldr	r1, [r4, #0]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	f8c8 2000 	str.w	r2, [r8]
 80061d4:	f011 0f20 	tst.w	r1, #32
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	d00f      	beq.n	80061fc <_scanf_i+0x1c8>
 80061dc:	6018      	str	r0, [r3, #0]
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60e3      	str	r3, [r4, #12]
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	1bed      	subs	r5, r5, r7
 80061e8:	445d      	add	r5, fp
 80061ea:	442b      	add	r3, r5
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	2000      	movs	r0, #0
 80061f0:	b007      	add	sp, #28
 80061f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	f04f 0b00 	mov.w	fp, #0
 80061fa:	e7ca      	b.n	8006192 <_scanf_i+0x15e>
 80061fc:	07ca      	lsls	r2, r1, #31
 80061fe:	bf4c      	ite	mi
 8006200:	8018      	strhmi	r0, [r3, #0]
 8006202:	6018      	strpl	r0, [r3, #0]
 8006204:	e7eb      	b.n	80061de <_scanf_i+0x1aa>
 8006206:	2001      	movs	r0, #1
 8006208:	e7f2      	b.n	80061f0 <_scanf_i+0x1bc>
 800620a:	bf00      	nop
 800620c:	08006684 	.word	0x08006684
 8006210:	080064a9 	.word	0x080064a9
 8006214:	08006589 	.word	0x08006589
 8006218:	080067ec 	.word	0x080067ec

0800621c <__sccl>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	780b      	ldrb	r3, [r1, #0]
 8006220:	4604      	mov	r4, r0
 8006222:	2b5e      	cmp	r3, #94	@ 0x5e
 8006224:	bf0b      	itete	eq
 8006226:	784b      	ldrbeq	r3, [r1, #1]
 8006228:	1c4a      	addne	r2, r1, #1
 800622a:	1c8a      	addeq	r2, r1, #2
 800622c:	2100      	movne	r1, #0
 800622e:	bf08      	it	eq
 8006230:	2101      	moveq	r1, #1
 8006232:	3801      	subs	r0, #1
 8006234:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006238:	f800 1f01 	strb.w	r1, [r0, #1]!
 800623c:	42a8      	cmp	r0, r5
 800623e:	d1fb      	bne.n	8006238 <__sccl+0x1c>
 8006240:	b90b      	cbnz	r3, 8006246 <__sccl+0x2a>
 8006242:	1e50      	subs	r0, r2, #1
 8006244:	bd70      	pop	{r4, r5, r6, pc}
 8006246:	f081 0101 	eor.w	r1, r1, #1
 800624a:	54e1      	strb	r1, [r4, r3]
 800624c:	4610      	mov	r0, r2
 800624e:	4602      	mov	r2, r0
 8006250:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006254:	2d2d      	cmp	r5, #45	@ 0x2d
 8006256:	d005      	beq.n	8006264 <__sccl+0x48>
 8006258:	2d5d      	cmp	r5, #93	@ 0x5d
 800625a:	d016      	beq.n	800628a <__sccl+0x6e>
 800625c:	2d00      	cmp	r5, #0
 800625e:	d0f1      	beq.n	8006244 <__sccl+0x28>
 8006260:	462b      	mov	r3, r5
 8006262:	e7f2      	b.n	800624a <__sccl+0x2e>
 8006264:	7846      	ldrb	r6, [r0, #1]
 8006266:	2e5d      	cmp	r6, #93	@ 0x5d
 8006268:	d0fa      	beq.n	8006260 <__sccl+0x44>
 800626a:	42b3      	cmp	r3, r6
 800626c:	dcf8      	bgt.n	8006260 <__sccl+0x44>
 800626e:	3002      	adds	r0, #2
 8006270:	461a      	mov	r2, r3
 8006272:	3201      	adds	r2, #1
 8006274:	4296      	cmp	r6, r2
 8006276:	54a1      	strb	r1, [r4, r2]
 8006278:	dcfb      	bgt.n	8006272 <__sccl+0x56>
 800627a:	1af2      	subs	r2, r6, r3
 800627c:	3a01      	subs	r2, #1
 800627e:	1c5d      	adds	r5, r3, #1
 8006280:	42b3      	cmp	r3, r6
 8006282:	bfa8      	it	ge
 8006284:	2200      	movge	r2, #0
 8006286:	18ab      	adds	r3, r5, r2
 8006288:	e7e1      	b.n	800624e <__sccl+0x32>
 800628a:	4610      	mov	r0, r2
 800628c:	e7da      	b.n	8006244 <__sccl+0x28>

0800628e <__submore>:
 800628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800629a:	4299      	cmp	r1, r3
 800629c:	d11d      	bne.n	80062da <__submore+0x4c>
 800629e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062a2:	f7ff f92d 	bl	8005500 <_malloc_r>
 80062a6:	b918      	cbnz	r0, 80062b0 <__submore+0x22>
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80062b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80062ba:	6360      	str	r0, [r4, #52]	@ 0x34
 80062bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80062c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80062c4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80062c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80062cc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80062d0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80062d4:	6020      	str	r0, [r4, #0]
 80062d6:	2000      	movs	r0, #0
 80062d8:	e7e8      	b.n	80062ac <__submore+0x1e>
 80062da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80062dc:	0077      	lsls	r7, r6, #1
 80062de:	463a      	mov	r2, r7
 80062e0:	f000 f83a 	bl	8006358 <_realloc_r>
 80062e4:	4605      	mov	r5, r0
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d0de      	beq.n	80062a8 <__submore+0x1a>
 80062ea:	eb00 0806 	add.w	r8, r0, r6
 80062ee:	4601      	mov	r1, r0
 80062f0:	4632      	mov	r2, r6
 80062f2:	4640      	mov	r0, r8
 80062f4:	f7ff f88a 	bl	800540c <memcpy>
 80062f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80062fc:	f8c4 8000 	str.w	r8, [r4]
 8006300:	e7e9      	b.n	80062d6 <__submore+0x48>

08006302 <memmove>:
 8006302:	4288      	cmp	r0, r1
 8006304:	b510      	push	{r4, lr}
 8006306:	eb01 0402 	add.w	r4, r1, r2
 800630a:	d902      	bls.n	8006312 <memmove+0x10>
 800630c:	4284      	cmp	r4, r0
 800630e:	4623      	mov	r3, r4
 8006310:	d807      	bhi.n	8006322 <memmove+0x20>
 8006312:	1e43      	subs	r3, r0, #1
 8006314:	42a1      	cmp	r1, r4
 8006316:	d008      	beq.n	800632a <memmove+0x28>
 8006318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800631c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006320:	e7f8      	b.n	8006314 <memmove+0x12>
 8006322:	4402      	add	r2, r0
 8006324:	4601      	mov	r1, r0
 8006326:	428a      	cmp	r2, r1
 8006328:	d100      	bne.n	800632c <memmove+0x2a>
 800632a:	bd10      	pop	{r4, pc}
 800632c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006330:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006334:	e7f7      	b.n	8006326 <memmove+0x24>
	...

08006338 <_sbrk_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d06      	ldr	r5, [pc, #24]	@ (8006354 <_sbrk_r+0x1c>)
 800633c:	2300      	movs	r3, #0
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	f7fc f83c 	bl	80023c0 <_sbrk>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_sbrk_r+0x1a>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_sbrk_r+0x1a>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000610 	.word	0x20000610

08006358 <_realloc_r>:
 8006358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635c:	4607      	mov	r7, r0
 800635e:	4614      	mov	r4, r2
 8006360:	460d      	mov	r5, r1
 8006362:	b921      	cbnz	r1, 800636e <_realloc_r+0x16>
 8006364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4611      	mov	r1, r2
 800636a:	f7ff b8c9 	b.w	8005500 <_malloc_r>
 800636e:	b92a      	cbnz	r2, 800637c <_realloc_r+0x24>
 8006370:	f7ff f85a 	bl	8005428 <_free_r>
 8006374:	4625      	mov	r5, r4
 8006376:	4628      	mov	r0, r5
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	f000 f906 	bl	800658c <_malloc_usable_size_r>
 8006380:	4284      	cmp	r4, r0
 8006382:	4606      	mov	r6, r0
 8006384:	d802      	bhi.n	800638c <_realloc_r+0x34>
 8006386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800638a:	d8f4      	bhi.n	8006376 <_realloc_r+0x1e>
 800638c:	4621      	mov	r1, r4
 800638e:	4638      	mov	r0, r7
 8006390:	f7ff f8b6 	bl	8005500 <_malloc_r>
 8006394:	4680      	mov	r8, r0
 8006396:	b908      	cbnz	r0, 800639c <_realloc_r+0x44>
 8006398:	4645      	mov	r5, r8
 800639a:	e7ec      	b.n	8006376 <_realloc_r+0x1e>
 800639c:	42b4      	cmp	r4, r6
 800639e:	4622      	mov	r2, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	bf28      	it	cs
 80063a4:	4632      	movcs	r2, r6
 80063a6:	f7ff f831 	bl	800540c <memcpy>
 80063aa:	4629      	mov	r1, r5
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff f83b 	bl	8005428 <_free_r>
 80063b2:	e7f1      	b.n	8006398 <_realloc_r+0x40>

080063b4 <_strtol_l.isra.0>:
 80063b4:	2b24      	cmp	r3, #36	@ 0x24
 80063b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ba:	4686      	mov	lr, r0
 80063bc:	4690      	mov	r8, r2
 80063be:	d801      	bhi.n	80063c4 <_strtol_l.isra.0+0x10>
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d106      	bne.n	80063d2 <_strtol_l.isra.0+0x1e>
 80063c4:	f7fe fff6 	bl	80053b4 <__errno>
 80063c8:	2316      	movs	r3, #22
 80063ca:	6003      	str	r3, [r0, #0]
 80063cc:	2000      	movs	r0, #0
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	4834      	ldr	r0, [pc, #208]	@ (80064a4 <_strtol_l.isra.0+0xf0>)
 80063d4:	460d      	mov	r5, r1
 80063d6:	462a      	mov	r2, r5
 80063d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063dc:	5d06      	ldrb	r6, [r0, r4]
 80063de:	f016 0608 	ands.w	r6, r6, #8
 80063e2:	d1f8      	bne.n	80063d6 <_strtol_l.isra.0+0x22>
 80063e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80063e6:	d110      	bne.n	800640a <_strtol_l.isra.0+0x56>
 80063e8:	782c      	ldrb	r4, [r5, #0]
 80063ea:	2601      	movs	r6, #1
 80063ec:	1c95      	adds	r5, r2, #2
 80063ee:	f033 0210 	bics.w	r2, r3, #16
 80063f2:	d115      	bne.n	8006420 <_strtol_l.isra.0+0x6c>
 80063f4:	2c30      	cmp	r4, #48	@ 0x30
 80063f6:	d10d      	bne.n	8006414 <_strtol_l.isra.0+0x60>
 80063f8:	782a      	ldrb	r2, [r5, #0]
 80063fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80063fe:	2a58      	cmp	r2, #88	@ 0x58
 8006400:	d108      	bne.n	8006414 <_strtol_l.isra.0+0x60>
 8006402:	786c      	ldrb	r4, [r5, #1]
 8006404:	3502      	adds	r5, #2
 8006406:	2310      	movs	r3, #16
 8006408:	e00a      	b.n	8006420 <_strtol_l.isra.0+0x6c>
 800640a:	2c2b      	cmp	r4, #43	@ 0x2b
 800640c:	bf04      	itt	eq
 800640e:	782c      	ldrbeq	r4, [r5, #0]
 8006410:	1c95      	addeq	r5, r2, #2
 8006412:	e7ec      	b.n	80063ee <_strtol_l.isra.0+0x3a>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f6      	bne.n	8006406 <_strtol_l.isra.0+0x52>
 8006418:	2c30      	cmp	r4, #48	@ 0x30
 800641a:	bf14      	ite	ne
 800641c:	230a      	movne	r3, #10
 800641e:	2308      	moveq	r3, #8
 8006420:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006424:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006428:	2200      	movs	r2, #0
 800642a:	fbbc f9f3 	udiv	r9, ip, r3
 800642e:	4610      	mov	r0, r2
 8006430:	fb03 ca19 	mls	sl, r3, r9, ip
 8006434:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006438:	2f09      	cmp	r7, #9
 800643a:	d80f      	bhi.n	800645c <_strtol_l.isra.0+0xa8>
 800643c:	463c      	mov	r4, r7
 800643e:	42a3      	cmp	r3, r4
 8006440:	dd1b      	ble.n	800647a <_strtol_l.isra.0+0xc6>
 8006442:	1c57      	adds	r7, r2, #1
 8006444:	d007      	beq.n	8006456 <_strtol_l.isra.0+0xa2>
 8006446:	4581      	cmp	r9, r0
 8006448:	d314      	bcc.n	8006474 <_strtol_l.isra.0+0xc0>
 800644a:	d101      	bne.n	8006450 <_strtol_l.isra.0+0x9c>
 800644c:	45a2      	cmp	sl, r4
 800644e:	db11      	blt.n	8006474 <_strtol_l.isra.0+0xc0>
 8006450:	fb00 4003 	mla	r0, r0, r3, r4
 8006454:	2201      	movs	r2, #1
 8006456:	f815 4b01 	ldrb.w	r4, [r5], #1
 800645a:	e7eb      	b.n	8006434 <_strtol_l.isra.0+0x80>
 800645c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006460:	2f19      	cmp	r7, #25
 8006462:	d801      	bhi.n	8006468 <_strtol_l.isra.0+0xb4>
 8006464:	3c37      	subs	r4, #55	@ 0x37
 8006466:	e7ea      	b.n	800643e <_strtol_l.isra.0+0x8a>
 8006468:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800646c:	2f19      	cmp	r7, #25
 800646e:	d804      	bhi.n	800647a <_strtol_l.isra.0+0xc6>
 8006470:	3c57      	subs	r4, #87	@ 0x57
 8006472:	e7e4      	b.n	800643e <_strtol_l.isra.0+0x8a>
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	e7ed      	b.n	8006456 <_strtol_l.isra.0+0xa2>
 800647a:	1c53      	adds	r3, r2, #1
 800647c:	d108      	bne.n	8006490 <_strtol_l.isra.0+0xdc>
 800647e:	2322      	movs	r3, #34	@ 0x22
 8006480:	f8ce 3000 	str.w	r3, [lr]
 8006484:	4660      	mov	r0, ip
 8006486:	f1b8 0f00 	cmp.w	r8, #0
 800648a:	d0a0      	beq.n	80063ce <_strtol_l.isra.0+0x1a>
 800648c:	1e69      	subs	r1, r5, #1
 800648e:	e006      	b.n	800649e <_strtol_l.isra.0+0xea>
 8006490:	b106      	cbz	r6, 8006494 <_strtol_l.isra.0+0xe0>
 8006492:	4240      	negs	r0, r0
 8006494:	f1b8 0f00 	cmp.w	r8, #0
 8006498:	d099      	beq.n	80063ce <_strtol_l.isra.0+0x1a>
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1f6      	bne.n	800648c <_strtol_l.isra.0+0xd8>
 800649e:	f8c8 1000 	str.w	r1, [r8]
 80064a2:	e794      	b.n	80063ce <_strtol_l.isra.0+0x1a>
 80064a4:	080066a9 	.word	0x080066a9

080064a8 <_strtol_r>:
 80064a8:	f7ff bf84 	b.w	80063b4 <_strtol_l.isra.0>

080064ac <_strtoul_l.isra.0>:
 80064ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b0:	4e34      	ldr	r6, [pc, #208]	@ (8006584 <_strtoul_l.isra.0+0xd8>)
 80064b2:	4686      	mov	lr, r0
 80064b4:	460d      	mov	r5, r1
 80064b6:	4628      	mov	r0, r5
 80064b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064bc:	5d37      	ldrb	r7, [r6, r4]
 80064be:	f017 0708 	ands.w	r7, r7, #8
 80064c2:	d1f8      	bne.n	80064b6 <_strtoul_l.isra.0+0xa>
 80064c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80064c6:	d110      	bne.n	80064ea <_strtoul_l.isra.0+0x3e>
 80064c8:	782c      	ldrb	r4, [r5, #0]
 80064ca:	2701      	movs	r7, #1
 80064cc:	1c85      	adds	r5, r0, #2
 80064ce:	f033 0010 	bics.w	r0, r3, #16
 80064d2:	d115      	bne.n	8006500 <_strtoul_l.isra.0+0x54>
 80064d4:	2c30      	cmp	r4, #48	@ 0x30
 80064d6:	d10d      	bne.n	80064f4 <_strtoul_l.isra.0+0x48>
 80064d8:	7828      	ldrb	r0, [r5, #0]
 80064da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80064de:	2858      	cmp	r0, #88	@ 0x58
 80064e0:	d108      	bne.n	80064f4 <_strtoul_l.isra.0+0x48>
 80064e2:	786c      	ldrb	r4, [r5, #1]
 80064e4:	3502      	adds	r5, #2
 80064e6:	2310      	movs	r3, #16
 80064e8:	e00a      	b.n	8006500 <_strtoul_l.isra.0+0x54>
 80064ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80064ec:	bf04      	itt	eq
 80064ee:	782c      	ldrbeq	r4, [r5, #0]
 80064f0:	1c85      	addeq	r5, r0, #2
 80064f2:	e7ec      	b.n	80064ce <_strtoul_l.isra.0+0x22>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f6      	bne.n	80064e6 <_strtoul_l.isra.0+0x3a>
 80064f8:	2c30      	cmp	r4, #48	@ 0x30
 80064fa:	bf14      	ite	ne
 80064fc:	230a      	movne	r3, #10
 80064fe:	2308      	moveq	r3, #8
 8006500:	f04f 38ff 	mov.w	r8, #4294967295
 8006504:	2600      	movs	r6, #0
 8006506:	fbb8 f8f3 	udiv	r8, r8, r3
 800650a:	fb03 f908 	mul.w	r9, r3, r8
 800650e:	ea6f 0909 	mvn.w	r9, r9
 8006512:	4630      	mov	r0, r6
 8006514:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006518:	f1bc 0f09 	cmp.w	ip, #9
 800651c:	d810      	bhi.n	8006540 <_strtoul_l.isra.0+0x94>
 800651e:	4664      	mov	r4, ip
 8006520:	42a3      	cmp	r3, r4
 8006522:	dd1e      	ble.n	8006562 <_strtoul_l.isra.0+0xb6>
 8006524:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006528:	d007      	beq.n	800653a <_strtoul_l.isra.0+0x8e>
 800652a:	4580      	cmp	r8, r0
 800652c:	d316      	bcc.n	800655c <_strtoul_l.isra.0+0xb0>
 800652e:	d101      	bne.n	8006534 <_strtoul_l.isra.0+0x88>
 8006530:	45a1      	cmp	r9, r4
 8006532:	db13      	blt.n	800655c <_strtoul_l.isra.0+0xb0>
 8006534:	fb00 4003 	mla	r0, r0, r3, r4
 8006538:	2601      	movs	r6, #1
 800653a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800653e:	e7e9      	b.n	8006514 <_strtoul_l.isra.0+0x68>
 8006540:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006544:	f1bc 0f19 	cmp.w	ip, #25
 8006548:	d801      	bhi.n	800654e <_strtoul_l.isra.0+0xa2>
 800654a:	3c37      	subs	r4, #55	@ 0x37
 800654c:	e7e8      	b.n	8006520 <_strtoul_l.isra.0+0x74>
 800654e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006552:	f1bc 0f19 	cmp.w	ip, #25
 8006556:	d804      	bhi.n	8006562 <_strtoul_l.isra.0+0xb6>
 8006558:	3c57      	subs	r4, #87	@ 0x57
 800655a:	e7e1      	b.n	8006520 <_strtoul_l.isra.0+0x74>
 800655c:	f04f 36ff 	mov.w	r6, #4294967295
 8006560:	e7eb      	b.n	800653a <_strtoul_l.isra.0+0x8e>
 8006562:	1c73      	adds	r3, r6, #1
 8006564:	d106      	bne.n	8006574 <_strtoul_l.isra.0+0xc8>
 8006566:	2322      	movs	r3, #34	@ 0x22
 8006568:	f8ce 3000 	str.w	r3, [lr]
 800656c:	4630      	mov	r0, r6
 800656e:	b932      	cbnz	r2, 800657e <_strtoul_l.isra.0+0xd2>
 8006570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006574:	b107      	cbz	r7, 8006578 <_strtoul_l.isra.0+0xcc>
 8006576:	4240      	negs	r0, r0
 8006578:	2a00      	cmp	r2, #0
 800657a:	d0f9      	beq.n	8006570 <_strtoul_l.isra.0+0xc4>
 800657c:	b106      	cbz	r6, 8006580 <_strtoul_l.isra.0+0xd4>
 800657e:	1e69      	subs	r1, r5, #1
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	e7f5      	b.n	8006570 <_strtoul_l.isra.0+0xc4>
 8006584:	080066a9 	.word	0x080066a9

08006588 <_strtoul_r>:
 8006588:	f7ff bf90 	b.w	80064ac <_strtoul_l.isra.0>

0800658c <_malloc_usable_size_r>:
 800658c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006590:	1f18      	subs	r0, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	bfbc      	itt	lt
 8006596:	580b      	ldrlt	r3, [r1, r0]
 8006598:	18c0      	addlt	r0, r0, r3
 800659a:	4770      	bx	lr

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
