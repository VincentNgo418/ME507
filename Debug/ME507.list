
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006abc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006c5c  08006c5c  00007c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f24  08006f24  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f24  08006f24  00007f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f2c  08006f2c  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f2c  08006f2c  00007f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006f34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000007c  08006fb0  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08006fb0  00008570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018287  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e0  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00022a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001414  00000000  00000000  000242b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018605  00000000  00000000  000256c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be0a  00000000  00000000  0003dcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc45  00000000  00000000  00059ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007308  00000000  00000000  000f775c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fea64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c44 	.word	0x08006c44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006c44 	.word	0x08006c44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80005c4:	23ff      	movs	r3, #255	@ 0xff
 80005c6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80005cc:	2300      	movs	r3, #0
 80005ce:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80005d0:	2300      	movs	r3, #0
 80005d2:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80005d4:	4a58      	ldr	r2, [pc, #352]	@ (8000738 <bno055_init+0x17c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80005da:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <bno055_init+0x17c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68dc      	ldr	r4, [r3, #12]
 80005e0:	4b55      	ldr	r3, [pc, #340]	@ (8000738 <bno055_init+0x17c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	7a58      	ldrb	r0, [r3, #9]
 80005e6:	f107 020d 	add.w	r2, r7, #13
 80005ea:	2301      	movs	r3, #1
 80005ec:	2107      	movs	r1, #7
 80005ee:	47a0      	blx	r4
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80005f4:	4b50      	ldr	r3, [pc, #320]	@ (8000738 <bno055_init+0x17c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	691c      	ldr	r4, [r3, #16]
 80005fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000738 <bno055_init+0x17c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	7a58      	ldrb	r0, [r3, #9]
 8000600:	f107 020e 	add.w	r2, r7, #14
 8000604:	2301      	movs	r3, #1
 8000606:	2100      	movs	r1, #0
 8000608:	47a0      	blx	r4
 800060a:	4603      	mov	r3, r0
 800060c:	b2da      	uxtb	r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4413      	add	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000616:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <bno055_init+0x17c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	7bba      	ldrb	r2, [r7, #14]
 800061c:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800061e:	4b46      	ldr	r3, [pc, #280]	@ (8000738 <bno055_init+0x17c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	691c      	ldr	r4, [r3, #16]
 8000624:	4b44      	ldr	r3, [pc, #272]	@ (8000738 <bno055_init+0x17c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	7a58      	ldrb	r0, [r3, #9]
 800062a:	f107 020e 	add.w	r2, r7, #14
 800062e:	2301      	movs	r3, #1
 8000630:	2101      	movs	r1, #1
 8000632:	47a0      	blx	r4
 8000634:	4603      	mov	r3, r0
 8000636:	b2da      	uxtb	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4413      	add	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <bno055_init+0x17c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	7bba      	ldrb	r2, [r7, #14]
 8000646:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000648:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <bno055_init+0x17c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	691c      	ldr	r4, [r3, #16]
 800064e:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <bno055_init+0x17c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	7a58      	ldrb	r0, [r3, #9]
 8000654:	f107 020e 	add.w	r2, r7, #14
 8000658:	2301      	movs	r3, #1
 800065a:	2102      	movs	r1, #2
 800065c:	47a0      	blx	r4
 800065e:	4603      	mov	r3, r0
 8000660:	b2da      	uxtb	r2, r3
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4413      	add	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800066a:	4b33      	ldr	r3, [pc, #204]	@ (8000738 <bno055_init+0x17c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7bba      	ldrb	r2, [r7, #14]
 8000670:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000672:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <bno055_init+0x17c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	691c      	ldr	r4, [r3, #16]
 8000678:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <bno055_init+0x17c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	7a58      	ldrb	r0, [r3, #9]
 800067e:	f107 020e 	add.w	r2, r7, #14
 8000682:	2301      	movs	r3, #1
 8000684:	2103      	movs	r1, #3
 8000686:	47a0      	blx	r4
 8000688:	4603      	mov	r3, r0
 800068a:	b2da      	uxtb	r2, r3
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4413      	add	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <bno055_init+0x17c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	7bba      	ldrb	r2, [r7, #14]
 800069a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <bno055_init+0x17c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	691c      	ldr	r4, [r3, #16]
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <bno055_init+0x17c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7a58      	ldrb	r0, [r3, #9]
 80006a8:	f107 020e 	add.w	r2, r7, #14
 80006ac:	2301      	movs	r3, #1
 80006ae:	2106      	movs	r1, #6
 80006b0:	47a0      	blx	r4
 80006b2:	4603      	mov	r3, r0
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <bno055_init+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <bno055_init+0x17c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	691c      	ldr	r4, [r3, #16]
 80006cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <bno055_init+0x17c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	7a58      	ldrb	r0, [r3, #9]
 80006d2:	f107 0208 	add.w	r2, r7, #8
 80006d6:	2302      	movs	r3, #2
 80006d8:	2104      	movs	r1, #4
 80006da:	47a0      	blx	r4
 80006dc:	4603      	mov	r3, r0
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80006e8:	7a3b      	ldrb	r3, [r7, #8]
 80006ea:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80006ec:	7a7b      	ldrb	r3, [r7, #9]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	7a3b      	ldrb	r3, [r7, #8]
 80006f4:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <bno055_init+0x17c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80006fa:	430a      	orrs	r2, r1
 80006fc:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80006fe:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <bno055_init+0x17c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	691c      	ldr	r4, [r3, #16]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <bno055_init+0x17c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7a58      	ldrb	r0, [r3, #9]
 800070c:	f107 020e 	add.w	r2, r7, #14
 8000710:	2301      	movs	r3, #1
 8000712:	2107      	movs	r1, #7
 8000714:	47a0      	blx	r4
 8000716:	4603      	mov	r3, r0
 8000718:	b2da      	uxtb	r2, r3
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	4413      	add	r3, r2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <bno055_init+0x17c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7bba      	ldrb	r2, [r7, #14]
 8000728:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	20000098 	.word	0x20000098

0800073c <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800074c:	23ff      	movs	r3, #255	@ 0xff
 800074e:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <bno055_write_register+0x48>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000758:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800075c:	e00d      	b.n	800077a <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <bno055_write_register+0x48>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68dc      	ldr	r4, [r3, #12]
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <bno055_write_register+0x48>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	7a58      	ldrb	r0, [r3, #9]
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	79f9      	ldrb	r1, [r7, #7]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	47a0      	blx	r4
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	20000098 	.word	0x20000098

08000788 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000792:	23ff      	movs	r3, #255	@ 0xff
 8000794:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000796:	2300      	movs	r3, #0
 8000798:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800079a:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <bno055_write_page_id+0x8c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 80007a2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80007a6:	e030      	b.n	800080a <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	691c      	ldr	r4, [r3, #16]
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7a58      	ldrb	r0, [r3, #9]
 80007b4:	f107 020e 	add.w	r2, r7, #14
 80007b8:	2301      	movs	r3, #1
 80007ba:	2107      	movs	r1, #7
 80007bc:	47a0      	blx	r4
 80007be:	4603      	mov	r3, r0
 80007c0:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d11b      	bne.n	8000802 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68dc      	ldr	r4, [r3, #12]
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7a58      	ldrb	r0, [r3, #9]
 80007da:	f107 020e 	add.w	r2, r7, #14
 80007de:	2301      	movs	r3, #1
 80007e0:	2107      	movs	r1, #7
 80007e2:	47a0      	blx	r4
 80007e4:	4603      	mov	r3, r0
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4413      	add	r3, r2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d106      	bne.n	8000806 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	711a      	strb	r2, [r3, #4]
 8000800:	e001      	b.n	8000806 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000802:	23ff      	movs	r3, #255	@ 0xff
 8000804:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	bf00      	nop
 8000814:	20000098 	.word	0x20000098

08000818 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000820:	23ff      	movs	r3, #255	@ 0xff
 8000822:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 800082e:	23ff      	movs	r3, #255	@ 0xff
 8000830:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000832:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d102      	bne.n	8000840 <bno055_read_accel_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 800083a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800083e:	e04e      	b.n	80008de <bno055_read_accel_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <bno055_read_accel_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff9c 	bl	8000788 <bno055_write_page_id>
 8000850:	4603      	mov	r3, r0
 8000852:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <bno055_read_accel_xyz+0x4e>
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d137      	bne.n	80008d6 <bno055_read_accel_xyz+0xbe>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	691c      	ldr	r4, [r3, #16]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	7a58      	ldrb	r0, [r3, #9]
 8000872:	f107 0208 	add.w	r2, r7, #8
 8000876:	2306      	movs	r3, #6
 8000878:	2108      	movs	r1, #8
 800087a:	47a0      	blx	r4
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000880:	7a3b      	ldrb	r3, [r7, #8]
 8000882:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000884:	7a7b      	ldrb	r3, [r7, #9]
 8000886:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000890:	7a3b      	ldrb	r3, [r7, #8]
 8000892:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000894:	4313      	orrs	r3, r2
 8000896:	b21a      	sxth	r2, r3
            accel->x =
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 800089c:	7abb      	ldrb	r3, [r7, #10]
 800089e:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008a4:	7afb      	ldrb	r3, [r7, #11]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 80008ac:	7abb      	ldrb	r3, [r7, #10]
 80008ae:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
            accel->y =
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 80008b8:	7b3b      	ldrb	r3, [r7, #12]
 80008ba:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008c0:	7b7b      	ldrb	r3, [r7, #13]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 80008c8:	7b3b      	ldrb	r3, [r7, #12]
 80008ca:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21a      	sxth	r2, r3
            accel->z =
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	809a      	strh	r2, [r3, #4]
 80008d4:	e001      	b.n	80008da <bno055_read_accel_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80008d6:	23ff      	movs	r3, #255	@ 0xff
 80008d8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000098 	.word	0x20000098

080008ec <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008f4:	23ff      	movs	r3, #255	@ 0xff
 80008f6:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000902:	23ff      	movs	r3, #255	@ 0xff
 8000904:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000906:	4b2d      	ldr	r3, [pc, #180]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 800090e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000912:	e04e      	b.n	80009b2 <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000914:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d004      	beq.n	8000928 <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff32 	bl	8000788 <bno055_write_page_id>
 8000924:	4603      	mov	r3, r0
 8000926:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d004      	beq.n	800093a <bno055_read_euler_hrp+0x4e>
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d137      	bne.n	80009aa <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	691c      	ldr	r4, [r3, #16]
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	7a58      	ldrb	r0, [r3, #9]
 8000946:	f107 0208 	add.w	r2, r7, #8
 800094a:	2306      	movs	r3, #6
 800094c:	211a      	movs	r1, #26
 800094e:	47a0      	blx	r4
 8000950:	4603      	mov	r3, r0
 8000952:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 8000954:	7a3b      	ldrb	r3, [r7, #8]
 8000956:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8000958:	7a7b      	ldrb	r3, [r7, #9]
 800095a:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800095c:	7a7b      	ldrb	r3, [r7, #9]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8000964:	7a3b      	ldrb	r3, [r7, #8]
 8000966:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000968:	4313      	orrs	r3, r2
 800096a:	b21a      	sxth	r2, r3
            euler->h =
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000978:	7afb      	ldrb	r3, [r7, #11]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8000980:	7abb      	ldrb	r3, [r7, #10]
 8000982:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
            euler->r =
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000994:	7b7b      	ldrb	r3, [r7, #13]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 800099c:	7b3b      	ldrb	r3, [r7, #12]
 800099e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
            euler->p =
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	809a      	strh	r2, [r3, #4]
 80009a8:	e001      	b.n	80009ae <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80009aa:	23ff      	movs	r3, #255	@ 0xff
 80009ac:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000098 	.word	0x20000098

080009c0 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009c8:	23ff      	movs	r3, #255	@ 0xff
 80009ca:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80009d0:	23ff      	movs	r3, #255	@ 0xff
 80009d2:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80009dc:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80009e0:	e02a      	b.n	8000a38 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fecb 	bl	8000788 <bno055_write_page_id>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80009f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <bno055_get_operation_mode+0x48>
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	791b      	ldrb	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d113      	bne.n	8000a30 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691c      	ldr	r4, [r3, #16]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a58      	ldrb	r0, [r3, #9]
 8000a14:	f107 020d 	add.w	r2, r7, #13
 8000a18:	2301      	movs	r3, #1
 8000a1a:	213d      	movs	r1, #61	@ 0x3d
 8000a1c:	47a0      	blx	r4
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000a22:	7b7b      	ldrb	r3, [r7, #13]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e001      	b.n	8000a34 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a30:	23ff      	movs	r3, #255	@ 0xff
 8000a32:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	20000098 	.word	0x20000098

08000a44 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a4e:	23ff      	movs	r3, #255	@ 0xff
 8000a50:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000a56:	2300      	movs	r3, #0
 8000a58:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000a5a:	23ff      	movs	r3, #255	@ 0xff
 8000a5c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000a66:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a6a:	e0ac      	b.n	8000bc6 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffa5 	bl	80009c0 <bno055_get_operation_mode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 809d 	bne.w	8000bbe <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000a84:	7b3b      	ldrb	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d137      	bne.n	8000afa <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a8a:	4b51      	ldr	r3, [pc, #324]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	691c      	ldr	r4, [r3, #16]
 8000a90:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	7a58      	ldrb	r0, [r3, #9]
 8000a96:	f107 020d 	add.w	r2, r7, #13
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	213d      	movs	r1, #61	@ 0x3d
 8000a9e:	47a0      	blx	r4
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f040 808a 	bne.w	8000bc2 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000aca:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68dc      	ldr	r4, [r3, #12]
 8000ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	7a58      	ldrb	r0, [r3, #9]
 8000ad6:	f107 020d 	add.w	r2, r7, #13
 8000ada:	2301      	movs	r3, #1
 8000adc:	213d      	movs	r1, #61	@ 0x3d
 8000ade:	47a0      	blx	r4
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000aec:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000af6:	4798      	blx	r3
 8000af8:	e063      	b.n	8000bc2 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000afa:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691c      	ldr	r4, [r3, #16]
 8000b00:	4b33      	ldr	r3, [pc, #204]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	7a58      	ldrb	r0, [r3, #9]
 8000b06:	f107 020d 	add.w	r2, r7, #13
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	213d      	movs	r1, #61	@ 0x3d
 8000b0e:	47a0      	blx	r4
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d116      	bne.n	8000b4a <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	f023 030f 	bic.w	r3, r3, #15
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000b26:	f107 030d 	add.w	r3, r7, #13
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	203d      	movs	r0, #61	@ 0x3d
 8000b30:	f7ff fe04 	bl	800073c <bno055_write_register>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	2014      	movs	r0, #20
 8000b48:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d038      	beq.n	8000bc2 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	691c      	ldr	r4, [r3, #16]
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	7a58      	ldrb	r0, [r3, #9]
 8000b5c:	f107 020d 	add.w	r2, r7, #13
 8000b60:	2301      	movs	r3, #1
 8000b62:	213d      	movs	r1, #61	@ 0x3d
 8000b64:	47a0      	blx	r4
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d127      	bne.n	8000bc2 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	f023 030f 	bic.w	r3, r3, #15
 8000b7a:	b25a      	sxtb	r2, r3
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68dc      	ldr	r4, [r3, #12]
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	7a58      	ldrb	r0, [r3, #9]
 8000b9a:	f107 020d 	add.w	r2, r7, #13
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	213d      	movs	r1, #61	@ 0x3d
 8000ba2:	47a0      	blx	r4
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4413      	add	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000bba:	4798      	blx	r3
 8000bbc:	e001      	b.n	8000bc2 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000bbe:	23ff      	movs	r3, #255	@ 0xff
 8000bc0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000098 	.word	0x20000098

08000bd4 <bno055_get_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_power_mode(u8 *power_mode_u8)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000bdc:	23ff      	movs	r3, #255	@ 0xff
 8000bde:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000be4:	23ff      	movs	r3, #255	@ 0xff
 8000be6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <bno055_get_power_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000bf0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000bf4:	e02a      	b.n	8000c4c <bno055_get_power_mode+0x78>
    }
    else
    {
        /*condition check for page, power mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <bno055_get_power_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fdc1 	bl	8000788 <bno055_write_page_id>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <bno055_get_power_mode+0x48>
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d113      	bne.n	8000c44 <bno055_get_power_mode+0x70>
        {
            /* Read the value of power mode */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	691c      	ldr	r4, [r3, #16]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	7a58      	ldrb	r0, [r3, #9]
 8000c28:	f107 020d 	add.w	r2, r7, #13
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	213e      	movs	r1, #62	@ 0x3e
 8000c30:	47a0      	blx	r4
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_POWER_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *power_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_POWER_MODE);
 8000c36:	7b7b      	ldrb	r3, [r7, #13]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e001      	b.n	8000c48 <bno055_get_power_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c44:	23ff      	movs	r3, #255	@ 0xff
 8000c46:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	20000098 	.word	0x20000098

08000c58 <BNO055_I2C_bus_write>:
#include "bno055.h"

extern I2C_HandleTypeDef hi2c3;

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 wr_len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	603a      	str	r2, [r7, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	460b      	mov	r3, r1
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Write(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, wr_len, HAL_MAX_DELAY) == HAL_OK)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	b299      	uxth	r1, r3
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c82:	9002      	str	r0, [sp, #8]
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <BNO055_I2C_bus_write+0x50>)
 8000c8e:	f002 f82b 	bl	8002ce8 <HAL_I2C_Mem_Write>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <BNO055_I2C_bus_write+0x44>
        return 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e000      	b.n	8000c9e <BNO055_I2C_bus_write+0x46>
    else
        return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000f0 	.word	0x200000f0

08000cac <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 r_len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	603a      	str	r2, [r7, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Read(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, r_len, HAL_MAX_DELAY) == HAL_OK){
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd6:	9002      	str	r0, [sp, #8]
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <BNO055_I2C_bus_read+0x50>)
 8000ce2:	f002 f8fb 	bl	8002edc <HAL_I2C_Mem_Read>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <BNO055_I2C_bus_read+0x44>
        return 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <BNO055_I2C_bus_read+0x46>
    }
    return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000f0 	.word	0x200000f0

08000d00 <BNO055_delay_msec>:

void BNO055_delay_msec(u32 msec)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    HAL_Delay(msec);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f001 fb43 	bl	8002394 <HAL_Delay>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <BNO055_setup>:


void BNO055_setup(struct bno055_t* bno055_device)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    bno055_device ->dev_addr = BNO055_I2C_ADDR1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2228      	movs	r2, #40	@ 0x28
 8000d24:	725a      	strb	r2, [r3, #9]
    bno055_device->bus_write = BNO055_I2C_bus_write;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <BNO055_setup+0x30>)
 8000d2a:	60da      	str	r2, [r3, #12]
    bno055_device->bus_read = BNO055_I2C_bus_read;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <BNO055_setup+0x34>)
 8000d30:	611a      	str	r2, [r3, #16]
    bno055_device->delay_msec = BNO055_delay_msec;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <BNO055_setup+0x38>)
 8000d36:	615a      	str	r2, [r3, #20]

    if (bno055_init(bno055_device) == 0)
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fc3f 	bl	80005bc <bno055_init>
    {
        // Initialization successful
    }
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	08000c59 	.word	0x08000c59
 8000d4c:	08000cad 	.word	0x08000cad
 8000d50:	08000d01 	.word	0x08000d01

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f001 faaa 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f84e 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 fb5c 	bl	800141c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d64:	f000 fb30 	bl	80013c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d68:	f000 f9a8 	bl	80010bc <MX_TIM2_Init>
  MX_I2C3_Init();
 8000d6c:	f000 f8dc 	bl	8000f28 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000d70:	f000 f908 	bl	8000f84 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d74:	f000 f9f6 	bl	8001164 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d78:	f000 fa6e 	bl	8001258 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d7c:	f000 fac0 	bl	8001300 <MX_TIM5_Init>
  MX_I2C2_Init();
 8000d80:	f000 f8a4 	bl	8000ecc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <main+0x8c>)
 8000d88:	f003 fc7e 	bl	8004688 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <main+0x8c>)
 8000d90:	f003 fc7a 	bl	8004688 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
 8000d94:	2108      	movs	r1, #8
 8000d96:	4813      	ldr	r0, [pc, #76]	@ (8000de4 <main+0x90>)
 8000d98:	f003 fc76 	bl	8004688 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);
 8000d9c:	210c      	movs	r1, #12
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <main+0x90>)
 8000da0:	f003 fc72 	bl	8004688 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 8000da4:	210c      	movs	r1, #12
 8000da6:	4810      	ldr	r0, [pc, #64]	@ (8000de8 <main+0x94>)
 8000da8:	f003 fc6e 	bl	8004688 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	490f      	ldr	r1, [pc, #60]	@ (8000dec <main+0x98>)
 8000db0:	480f      	ldr	r0, [pc, #60]	@ (8000df0 <main+0x9c>)
 8000db2:	f004 faa8 	bl	8005306 <HAL_UART_Receive_IT>

  //set BNO055 reset to low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <main+0xa0>)
 8000dbe:	f001 fe35 	bl	8002a2c <HAL_GPIO_WritePin>
  //initialize BNO055
  BNO055_setup(&IMU);
 8000dc2:	480d      	ldr	r0, [pc, #52]	@ (8000df8 <main+0xa4>)
 8000dc4:	f7ff ffa8 	bl	8000d18 <BNO055_setup>


  initialize_IMU();
 8000dc8:	f000 fd00 	bl	80017cc <initialize_IMU>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(500);
 8000dcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dd0:	f001 fae0 	bl	8002394 <HAL_Delay>
	  log_IMU();
 8000dd4:	f000 fde2 	bl	800199c <log_IMU>
	  log_LIDAR();
 8000dd8:	f000 fe60 	bl	8001a9c <log_LIDAR>
	  HAL_Delay(500);
 8000ddc:	bf00      	nop
 8000dde:	e7f5      	b.n	8000dcc <main+0x78>
 8000de0:	200001d4 	.word	0x200001d4
 8000de4:	20000264 	.word	0x20000264
 8000de8:	20000144 	.word	0x20000144
 8000dec:	20000334 	.word	0x20000334
 8000df0:	200002ac 	.word	0x200002ac
 8000df4:	40020400 	.word	0x40020400
 8000df8:	200003a8 	.word	0x200003a8

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	@ 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	@ 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fa9c 	bl	8006348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a26      	ldr	r2, [pc, #152]	@ (8000ec4 <SystemClock_Config+0xc8>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <SystemClock_Config+0xc8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <SystemClock_Config+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a20      	ldr	r2, [pc, #128]	@ (8000ec8 <SystemClock_Config+0xcc>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <SystemClock_Config+0xcc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e70:	2360      	movs	r3, #96	@ 0x60
 8000e72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 ff59 	bl	8003d38 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e8c:	f000 fe64 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2103      	movs	r1, #3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f9bb 	bl	8004228 <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb8:	f000 fe4e 	bl	8001b58 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3750      	adds	r7, #80	@ 0x50
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <MX_I2C2_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_I2C2_Init+0x58>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_I2C2_Init+0x50>)
 8000f0a:	f001 fda9 	bl	8002a60 <HAL_I2C_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f14:	f000 fe20 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000009c 	.word	0x2000009c
 8000f20:	40005800 	.word	0x40005800
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <MX_I2C3_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_I2C3_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <MX_I2C3_Init+0x50>)
 8000f66:	f001 fd7b 	bl	8002a60 <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 fdf2 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000f0 	.word	0x200000f0
 8000f7c:	40005c00 	.word	0x40005c00
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b092      	sub	sp, #72	@ 0x48
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2220      	movs	r2, #32
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 f9ca 	bl	8006348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fb6:	4a40      	ldr	r2, [pc, #256]	@ (80010b8 <MX_TIM1_Init+0x134>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b39      	ldr	r3, [pc, #228]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd4:	4b37      	ldr	r3, [pc, #220]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe0:	4834      	ldr	r0, [pc, #208]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8000fe2:	f003 fb01 	bl	80045e8 <HAL_TIM_PWM_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000fec:	f000 fdb4 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	482d      	ldr	r0, [pc, #180]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8001000:	f003 ffe6 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800100a:	f000 fda5 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	@ 0x60
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4820      	ldr	r0, [pc, #128]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8001034:	f003 fccc 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800103e:	f000 fd8b 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001046:	2204      	movs	r2, #4
 8001048:	4619      	mov	r1, r3
 800104a:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <MX_TIM1_Init+0x130>)
 800104c:	f003 fcc0 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001056:	f000 fd7f 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	220c      	movs	r2, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4814      	ldr	r0, [pc, #80]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8001064:	f003 fcb4 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800106e:	f000 fd73 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM1_Init+0x130>)
 8001096:	f004 f809 	bl	80050ac <HAL_TIMEx_ConfigBreakDeadTime>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80010a0:	f000 fd5a 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM1_Init+0x130>)
 80010a6:	f000 ff7f 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3748      	adds	r7, #72	@ 0x48
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000144 	.word	0x20000144
 80010b8:	40010000 	.word	0x40010000

080010bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	@ 0x30
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2224      	movs	r2, #36	@ 0x24
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 f93c 	bl	8006348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <MX_TIM2_Init+0xa4>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_TIM2_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_TIM2_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_TIM2_Init+0xa4>)
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295
 80010f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_TIM2_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_TIM2_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001100:	2301      	movs	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001118:	2301      	movs	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_TIM2_Init+0xa4>)
 800112c:	f003 fbaa 	bl	8004884 <HAL_TIM_Encoder_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001136:	f000 fd0f 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_TIM2_Init+0xa4>)
 8001148:	f003 ff42 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001152:	f000 fd01 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3730      	adds	r7, #48	@ 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000018c 	.word	0x2000018c

08001164 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <MX_TIM3_Init+0xec>)
 8001188:	4a32      	ldr	r2, [pc, #200]	@ (8001254 <MX_TIM3_Init+0xf0>)
 800118a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <MX_TIM3_Init+0xec>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <MX_TIM3_Init+0xec>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <MX_TIM3_Init+0xec>)
 800119a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <MX_TIM3_Init+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <MX_TIM3_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011ac:	4828      	ldr	r0, [pc, #160]	@ (8001250 <MX_TIM3_Init+0xec>)
 80011ae:	f003 fa1b 	bl	80045e8 <HAL_TIM_PWM_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011b8:	f000 fcce 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	4619      	mov	r1, r3
 80011ca:	4821      	ldr	r0, [pc, #132]	@ (8001250 <MX_TIM3_Init+0xec>)
 80011cc:	f003 ff00 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011d6:	f000 fcbf 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011da:	2360      	movs	r3, #96	@ 0x60
 80011dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4817      	ldr	r0, [pc, #92]	@ (8001250 <MX_TIM3_Init+0xec>)
 80011f2:	f003 fbed 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011fc:	f000 fcac 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2204      	movs	r2, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4812      	ldr	r0, [pc, #72]	@ (8001250 <MX_TIM3_Init+0xec>)
 8001208:	f003 fbe2 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001212:	f000 fca1 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2208      	movs	r2, #8
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <MX_TIM3_Init+0xec>)
 800121e:	f003 fbd7 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001228:	f000 fc96 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	220c      	movs	r2, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	@ (8001250 <MX_TIM3_Init+0xec>)
 8001234:	f003 fbcc 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800123e:	f000 fc8b 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001242:	4803      	ldr	r0, [pc, #12]	@ (8001250 <MX_TIM3_Init+0xec>)
 8001244:	f000 feb0 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001d4 	.word	0x200001d4
 8001254:	40000400 	.word	0x40000400

08001258 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	@ 0x30
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2224      	movs	r2, #36	@ 0x24
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f86e 	bl	8006348 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <MX_TIM4_Init+0xa4>)
 8001278:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 8001288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800129a:	2301      	movs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a2:	2301      	movs	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b2:	2301      	movs	r3, #1
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 80012c6:	f003 fadd 	bl	8004884 <HAL_TIM_Encoder_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012d0:	f000 fc42 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_TIM4_Init+0xa0>)
 80012e2:	f003 fe75 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80012ec:	f000 fc34 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	@ 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000021c 	.word	0x2000021c
 80012fc:	40000800 	.word	0x40000800

08001300 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 8001324:	4a27      	ldr	r2, [pc, #156]	@ (80013c4 <MX_TIM5_Init+0xc4>)
 8001326:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001334:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 8001336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001348:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 800134a:	f003 f94d 	bl	80045e8 <HAL_TIM_PWM_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 fc00 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4619      	mov	r1, r3
 8001366:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 8001368:	f003 fe32 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001372:	f000 fbf1 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001376:	2360      	movs	r3, #96	@ 0x60
 8001378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2208      	movs	r2, #8
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 800138e:	f003 fb1f 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001398:	f000 fbde 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	220c      	movs	r2, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 80013a4:	f003 fb14 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013ae:	f000 fbd3 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM5_Init+0xc0>)
 80013b4:	f000 fdf8 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	@ 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000264 	.word	0x20000264
 80013c4:	40000c00 	.word	0x40000c00

080013c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_USART1_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 8001400:	f003 fea6 	bl	8005150 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f000 fba5 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002ac 	.word	0x200002ac
 8001418:	40011000 	.word	0x40011000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a2d      	ldr	r2, [pc, #180]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <MX_GPIO_Init+0xd4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a8:	4812      	ldr	r0, [pc, #72]	@ (80014f4 <MX_GPIO_Init+0xd8>)
 80014aa:	f001 fabf 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MX_GPIO_Init+0xdc>)
 80014c4:	f001 f92e 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MX_GPIO_Init+0xd8>)
 80014e2:	f001 f91f 	bl	8002724 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	@ 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800

080014fc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4aa0      	ldr	r2, [pc, #640]	@ (800178c <HAL_UART_RxCpltCallback+0x290>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 813a 	bne.w	8001784 <HAL_UART_RxCpltCallback+0x288>
    {
        char c = rx_buf[0];
 8001510:	4b9f      	ldr	r3, [pc, #636]	@ (8001790 <HAL_UART_RxCpltCallback+0x294>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	76bb      	strb	r3, [r7, #26]
        static char cmd_buffer[64];
        static uint8_t cmd_index = 0;

        if (c == '\r' || c == '\n')  // End of command
 8001516:	7ebb      	ldrb	r3, [r7, #26]
 8001518:	2b0d      	cmp	r3, #13
 800151a:	d003      	beq.n	8001524 <HAL_UART_RxCpltCallback+0x28>
 800151c:	7ebb      	ldrb	r3, [r7, #26]
 800151e:	2b0a      	cmp	r3, #10
 8001520:	f040 811d 	bne.w	800175e <HAL_UART_RxCpltCallback+0x262>
        {
            cmd_buffer[cmd_index] = '\0';
 8001524:	4b9b      	ldr	r3, [pc, #620]	@ (8001794 <HAL_UART_RxCpltCallback+0x298>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b9b      	ldr	r3, [pc, #620]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]

            if (cmd_index >= 4)
 8001530:	4b98      	ldr	r3, [pc, #608]	@ (8001794 <HAL_UART_RxCpltCallback+0x298>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b03      	cmp	r3, #3
 8001536:	f240 8107 	bls.w	8001748 <HAL_UART_RxCpltCallback+0x24c>
            {
                if (cmd_buffer[0] == 'M')
 800153a:	4b97      	ldr	r3, [pc, #604]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001540:	f040 8086 	bne.w	8001650 <HAL_UART_RxCpltCallback+0x154>
                {
                    // Motor command
                    if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8001544:	4b94      	ldr	r3, [pc, #592]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	2b30      	cmp	r3, #48	@ 0x30
 800154a:	d903      	bls.n	8001554 <HAL_UART_RxCpltCallback+0x58>
 800154c:	4b92      	ldr	r3, [pc, #584]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	2b32      	cmp	r3, #50	@ 0x32
 8001552:	d907      	bls.n	8001564 <HAL_UART_RxCpltCallback+0x68>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Motor Number\r\n", 23, 1000);
 8001554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001558:	2217      	movs	r2, #23
 800155a:	4990      	ldr	r1, [pc, #576]	@ (800179c <HAL_UART_RxCpltCallback+0x2a0>)
 800155c:	4890      	ldr	r0, [pc, #576]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 800155e:	f003 fe47 	bl	80051f0 <HAL_UART_Transmit>
 8001562:	e0f8      	b.n	8001756 <HAL_UART_RxCpltCallback+0x25a>
                    } else {
                        uint8_t motor_num = cmd_buffer[1] - '0';
 8001564:	4b8c      	ldr	r3, [pc, #560]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	3b30      	subs	r3, #48	@ 0x30
 800156a:	757b      	strb	r3, [r7, #21]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 800156c:	4b8a      	ldr	r3, [pc, #552]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	743b      	strb	r3, [r7, #16]
 8001572:	4b89      	ldr	r3, [pc, #548]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	747b      	strb	r3, [r7, #17]
 8001578:	2300      	movs	r3, #0
 800157a:	74bb      	strb	r3, [r7, #18]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	2210      	movs	r2, #16
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f004 feb3 	bl	80062f0 <strtol>
 800158a:	4603      	mov	r3, r0
 800158c:	77fb      	strb	r3, [r7, #31]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 800158e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	dd01      	ble.n	800159a <HAL_UART_RxCpltCallback+0x9e>
 8001596:	2364      	movs	r3, #100	@ 0x64
 8001598:	77fb      	strb	r3, [r7, #31]
                        if (duty < -100) duty = -100;
 800159a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800159e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80015a2:	da01      	bge.n	80015a8 <HAL_UART_RxCpltCallback+0xac>
 80015a4:	239c      	movs	r3, #156	@ 0x9c
 80015a6:	77fb      	strb	r3, [r7, #31]
                        int16_t pulse = (duty * 4799) / 100;
 80015a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015ac:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	4a7b      	ldr	r2, [pc, #492]	@ (80017a4 <HAL_UART_RxCpltCallback+0x2a8>)
 80015b6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ba:	1152      	asrs	r2, r2, #5
 80015bc:	17db      	asrs	r3, r3, #31
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	83bb      	strh	r3, [r7, #28]
                        if (pulse < 0) pulse = -pulse;
 80015c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da03      	bge.n	80015d2 <HAL_UART_RxCpltCallback+0xd6>
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	425b      	negs	r3, r3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	83bb      	strh	r3, [r7, #28]

                        if (motor_num == 1)
 80015d2:	7d7b      	ldrb	r3, [r7, #21]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d114      	bne.n	8001602 <HAL_UART_RxCpltCallback+0x106>
                            set_duty(&motor_1, (duty >= 0) ? pulse : 0, (duty < 0) ? pulse : 0);
 80015d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db02      	blt.n	80015e6 <HAL_UART_RxCpltCallback+0xea>
 80015e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015e4:	e000      	b.n	80015e8 <HAL_UART_RxCpltCallback+0xec>
 80015e6:	2300      	movs	r3, #0
 80015e8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	da02      	bge.n	80015f6 <HAL_UART_RxCpltCallback+0xfa>
 80015f0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80015f4:	e000      	b.n	80015f8 <HAL_UART_RxCpltCallback+0xfc>
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	486b      	ldr	r0, [pc, #428]	@ (80017a8 <HAL_UART_RxCpltCallback+0x2ac>)
 80015fc:	f000 fab2 	bl	8001b64 <set_duty>
 8001600:	e013      	b.n	800162a <HAL_UART_RxCpltCallback+0x12e>
                        else
                            set_duty(&motor_2, (duty >= 0) ? pulse : 0, (duty < 0) ? pulse : 0);
 8001602:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db02      	blt.n	8001610 <HAL_UART_RxCpltCallback+0x114>
 800160a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800160e:	e000      	b.n	8001612 <HAL_UART_RxCpltCallback+0x116>
 8001610:	2300      	movs	r3, #0
 8001612:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001616:	2a00      	cmp	r2, #0
 8001618:	da02      	bge.n	8001620 <HAL_UART_RxCpltCallback+0x124>
 800161a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800161e:	e000      	b.n	8001622 <HAL_UART_RxCpltCallback+0x126>
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	4861      	ldr	r0, [pc, #388]	@ (80017ac <HAL_UART_RxCpltCallback+0x2b0>)
 8001626:	f000 fa9d 	bl	8001b64 <set_duty>

                        sprintf((char*)tx_buf, "Motor %d set to duty %d\r\n", motor_num, duty);
 800162a:	7d7a      	ldrb	r2, [r7, #21]
 800162c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001630:	495f      	ldr	r1, [pc, #380]	@ (80017b0 <HAL_UART_RxCpltCallback+0x2b4>)
 8001632:	4860      	ldr	r0, [pc, #384]	@ (80017b4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001634:	f004 fe66 	bl	8006304 <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001638:	485e      	ldr	r0, [pc, #376]	@ (80017b4 <HAL_UART_RxCpltCallback+0x2b8>)
 800163a:	f7fe fdd1 	bl	80001e0 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001646:	495b      	ldr	r1, [pc, #364]	@ (80017b4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001648:	4855      	ldr	r0, [pc, #340]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 800164a:	f003 fdd1 	bl	80051f0 <HAL_UART_Transmit>
 800164e:	e082      	b.n	8001756 <HAL_UART_RxCpltCallback+0x25a>
                    }
                }
                else if (cmd_buffer[0] == 'S')
 8001650:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b53      	cmp	r3, #83	@ 0x53
 8001656:	d16f      	bne.n	8001738 <HAL_UART_RxCpltCallback+0x23c>
                {
                    // Servo command
                    if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8001658:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	2b30      	cmp	r3, #48	@ 0x30
 800165e:	d903      	bls.n	8001668 <HAL_UART_RxCpltCallback+0x16c>
 8001660:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	2b32      	cmp	r3, #50	@ 0x32
 8001666:	d907      	bls.n	8001678 <HAL_UART_RxCpltCallback+0x17c>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Servo Number\r\n", 23, 1000);
 8001668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166c:	2217      	movs	r2, #23
 800166e:	4952      	ldr	r1, [pc, #328]	@ (80017b8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001670:	484b      	ldr	r0, [pc, #300]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001672:	f003 fdbd 	bl	80051f0 <HAL_UART_Transmit>
 8001676:	e06e      	b.n	8001756 <HAL_UART_RxCpltCallback+0x25a>
                    } else {
                        uint8_t servo_num = cmd_buffer[1] - '0';
 8001678:	4b47      	ldr	r3, [pc, #284]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	3b30      	subs	r3, #48	@ 0x30
 800167e:	767b      	strb	r3, [r7, #25]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8001680:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	733b      	strb	r3, [r7, #12]
 8001686:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001688:	78db      	ldrb	r3, [r3, #3]
 800168a:	737b      	strb	r3, [r7, #13]
 800168c:	2300      	movs	r3, #0
 800168e:	73bb      	strb	r3, [r7, #14]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2210      	movs	r2, #16
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fe29 	bl	80062f0 <strtol>
 800169e:	4603      	mov	r3, r0
 80016a0:	76fb      	strb	r3, [r7, #27]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 80016a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016a6:	2b64      	cmp	r3, #100	@ 0x64
 80016a8:	dd01      	ble.n	80016ae <HAL_UART_RxCpltCallback+0x1b2>
 80016aa:	2364      	movs	r3, #100	@ 0x64
 80016ac:	76fb      	strb	r3, [r7, #27]
                        if (duty < -100) duty = 100;
 80016ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016b2:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80016b6:	da01      	bge.n	80016bc <HAL_UART_RxCpltCallback+0x1c0>
 80016b8:	2364      	movs	r3, #100	@ 0x64
 80016ba:	76fb      	strb	r3, [r7, #27]
                        // int16_t pulse_us = (duty * 5) + 1500;
                        int16_t pulse = duty * (8275 - 1655) / 100 + 1655;
 80016bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016c0:	f641 12dc 	movw	r2, #6620	@ 0x19dc
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	4a36      	ldr	r2, [pc, #216]	@ (80017a4 <HAL_UART_RxCpltCallback+0x2a8>)
 80016ca:	fb82 1203 	smull	r1, r2, r2, r3
 80016ce:	1152      	asrs	r2, r2, #5
 80016d0:	17db      	asrs	r3, r3, #31
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f203 6377 	addw	r3, r3, #1655	@ 0x677
 80016da:	b29b      	uxth	r3, r3
 80016dc:	82fb      	strh	r3, [r7, #22]
                        if (pulse < 0) {
 80016de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da06      	bge.n	80016f4 <HAL_UART_RxCpltCallback+0x1f8>
                        	HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Duty\r\n", 23, 1000);
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	2217      	movs	r2, #23
 80016ec:	4933      	ldr	r1, [pc, #204]	@ (80017bc <HAL_UART_RxCpltCallback+0x2c0>)
 80016ee:	482c      	ldr	r0, [pc, #176]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 80016f0:	f003 fd7e 	bl	80051f0 <HAL_UART_Transmit>
                        }

                        if (servo_num == 1)
 80016f4:	7e7b      	ldrb	r3, [r7, #25]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d10b      	bne.n	8001712 <HAL_UART_RxCpltCallback+0x216>
                            servo_duty(&servo_1, (duty >= 0) ? pulse : 0);
 80016fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db02      	blt.n	8001708 <HAL_UART_RxCpltCallback+0x20c>
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	e000      	b.n	800170a <HAL_UART_RxCpltCallback+0x20e>
 8001708:	2300      	movs	r3, #0
 800170a:	4619      	mov	r1, r3
 800170c:	482c      	ldr	r0, [pc, #176]	@ (80017c0 <HAL_UART_RxCpltCallback+0x2c4>)
 800170e:	f000 fa7b 	bl	8001c08 <servo_duty>
                        else
                            ; // placeholder for servo_2

                        sprintf((char*)tx_buf, "Servo %d set to duty %d\r\n", servo_num, duty);
 8001712:	7e7a      	ldrb	r2, [r7, #25]
 8001714:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001718:	492a      	ldr	r1, [pc, #168]	@ (80017c4 <HAL_UART_RxCpltCallback+0x2c8>)
 800171a:	4826      	ldr	r0, [pc, #152]	@ (80017b4 <HAL_UART_RxCpltCallback+0x2b8>)
 800171c:	f004 fdf2 	bl	8006304 <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001720:	4824      	ldr	r0, [pc, #144]	@ (80017b4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001722:	f7fe fd5d 	bl	80001e0 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	4921      	ldr	r1, [pc, #132]	@ (80017b4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001730:	481b      	ldr	r0, [pc, #108]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001732:	f003 fd5d 	bl	80051f0 <HAL_UART_Transmit>
 8001736:	e00e      	b.n	8001756 <HAL_UART_RxCpltCallback+0x25a>
                    }
                }
                else
                {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8001738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173c:	2212      	movs	r2, #18
 800173e:	4922      	ldr	r1, [pc, #136]	@ (80017c8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001740:	4817      	ldr	r0, [pc, #92]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001742:	f003 fd55 	bl	80051f0 <HAL_UART_Transmit>
 8001746:	e006      	b.n	8001756 <HAL_UART_RxCpltCallback+0x25a>
                }
            }
            else
            {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8001748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174c:	2212      	movs	r2, #18
 800174e:	491e      	ldr	r1, [pc, #120]	@ (80017c8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001750:	4813      	ldr	r0, [pc, #76]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001752:	f003 fd4d 	bl	80051f0 <HAL_UART_Transmit>
            }

            cmd_index = 0; // reset for next command
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_UART_RxCpltCallback+0x298>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e00d      	b.n	800177a <HAL_UART_RxCpltCallback+0x27e>
        }
        else
        {
            if (cmd_index < sizeof(cmd_buffer) - 1)
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_UART_RxCpltCallback+0x298>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b3e      	cmp	r3, #62	@ 0x3e
 8001764:	d809      	bhi.n	800177a <HAL_UART_RxCpltCallback+0x27e>
                cmd_buffer[cmd_index++] = c;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_UART_RxCpltCallback+0x298>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	b2d1      	uxtb	r1, r2
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <HAL_UART_RxCpltCallback+0x298>)
 8001770:	7011      	strb	r1, [r2, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_UART_RxCpltCallback+0x29c>)
 8001776:	7ebb      	ldrb	r3, [r7, #26]
 8001778:	5453      	strb	r3, [r2, r1]
        }

        // Continue receiving next character
        HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	4904      	ldr	r1, [pc, #16]	@ (8001790 <HAL_UART_RxCpltCallback+0x294>)
 800177e:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001780:	f003 fdc1 	bl	8005306 <HAL_UART_Receive_IT>
    }
}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40011000 	.word	0x40011000
 8001790:	20000334 	.word	0x20000334
 8001794:	200003dc 	.word	0x200003dc
 8001798:	200003e0 	.word	0x200003e0
 800179c:	08006c5c 	.word	0x08006c5c
 80017a0:	200002ac 	.word	0x200002ac
 80017a4:	51eb851f 	.word	0x51eb851f
 80017a8:	20000000 	.word	0x20000000
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	08006c74 	.word	0x08006c74
 80017b4:	200002f4 	.word	0x200002f4
 80017b8:	08006c90 	.word	0x08006c90
 80017bc:	08006ca8 	.word	0x08006ca8
 80017c0:	20000018 	.word	0x20000018
 80017c4:	08006cb8 	.word	0x08006cb8
 80017c8:	08006cd4 	.word	0x08006cd4

080017cc <initialize_IMU>:


void initialize_IMU(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80017d2:	2064      	movs	r0, #100	@ 0x64
 80017d4:	f000 fdde 	bl	8002394 <HAL_Delay>
	sprintf((char*)log_buf, "INIT IMU \r\n");
 80017d8:	4965      	ldr	r1, [pc, #404]	@ (8001970 <initialize_IMU+0x1a4>)
 80017da:	4866      	ldr	r0, [pc, #408]	@ (8001974 <initialize_IMU+0x1a8>)
 80017dc:	f004 fd92 	bl	8006304 <siprintf>
	HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 80017e0:	4864      	ldr	r0, [pc, #400]	@ (8001974 <initialize_IMU+0x1a8>)
 80017e2:	f7fe fcfd 	bl	80001e0 <strlen>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	4961      	ldr	r1, [pc, #388]	@ (8001974 <initialize_IMU+0x1a8>)
 80017f0:	4861      	ldr	r0, [pc, #388]	@ (8001978 <initialize_IMU+0x1ac>)
 80017f2:	f003 fcfd 	bl	80051f0 <HAL_UART_Transmit>
	  if(HAL_I2C_IsDeviceReady (&hi2c3, 0x28 << 1, 10, 500) == HAL_OK) {
 80017f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017fa:	220a      	movs	r2, #10
 80017fc:	2150      	movs	r1, #80	@ 0x50
 80017fe:	485f      	ldr	r0, [pc, #380]	@ (800197c <initialize_IMU+0x1b0>)
 8001800:	f001 fd9e 	bl	8003340 <HAL_I2C_IsDeviceReady>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d014      	beq.n	8001834 <initialize_IMU+0x68>

	  } else {
		  const int error = HAL_I2C_GetError(&hi2c3);
 800180a:	485c      	ldr	r0, [pc, #368]	@ (800197c <initialize_IMU+0x1b0>)
 800180c:	f001 fed4 	bl	80035b8 <HAL_I2C_GetError>
 8001810:	4603      	mov	r3, r0
 8001812:	607b      	str	r3, [r7, #4]
		  sprintf((char*)log_buf, "Device status error: %d\r\n", error);
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	495a      	ldr	r1, [pc, #360]	@ (8001980 <initialize_IMU+0x1b4>)
 8001818:	4856      	ldr	r0, [pc, #344]	@ (8001974 <initialize_IMU+0x1a8>)
 800181a:	f004 fd73 	bl	8006304 <siprintf>
		  HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 800181e:	4855      	ldr	r0, [pc, #340]	@ (8001974 <initialize_IMU+0x1a8>)
 8001820:	f7fe fcde 	bl	80001e0 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182c:	4951      	ldr	r1, [pc, #324]	@ (8001974 <initialize_IMU+0x1a8>)
 800182e:	4852      	ldr	r0, [pc, #328]	@ (8001978 <initialize_IMU+0x1ac>)
 8001830:	f003 fcde 	bl	80051f0 <HAL_UART_Transmit>
	  }


	  if(bno055_get_operation_mode(&op_mode) != 0) {
 8001834:	4853      	ldr	r0, [pc, #332]	@ (8001984 <initialize_IMU+0x1b8>)
 8001836:	f7ff f8c3 	bl	80009c0 <bno055_get_operation_mode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00f      	beq.n	8001860 <initialize_IMU+0x94>
		  sprintf((char*)log_buf, "Failed to read op mode\r\n");
 8001840:	4951      	ldr	r1, [pc, #324]	@ (8001988 <initialize_IMU+0x1bc>)
 8001842:	484c      	ldr	r0, [pc, #304]	@ (8001974 <initialize_IMU+0x1a8>)
 8001844:	f004 fd5e 	bl	8006304 <siprintf>
		  HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 8001848:	484a      	ldr	r0, [pc, #296]	@ (8001974 <initialize_IMU+0x1a8>)
 800184a:	f7fe fcc9 	bl	80001e0 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	4947      	ldr	r1, [pc, #284]	@ (8001974 <initialize_IMU+0x1a8>)
 8001858:	4847      	ldr	r0, [pc, #284]	@ (8001978 <initialize_IMU+0x1ac>)
 800185a:	f003 fcc9 	bl	80051f0 <HAL_UART_Transmit>
 800185e:	e011      	b.n	8001884 <initialize_IMU+0xb8>
	  } else {
		  sprintf((char*)log_buf, "Op mode is: %d \r\n", op_mode);
 8001860:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <initialize_IMU+0x1b8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4949      	ldr	r1, [pc, #292]	@ (800198c <initialize_IMU+0x1c0>)
 8001868:	4842      	ldr	r0, [pc, #264]	@ (8001974 <initialize_IMU+0x1a8>)
 800186a:	f004 fd4b 	bl	8006304 <siprintf>
		  HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 800186e:	4841      	ldr	r0, [pc, #260]	@ (8001974 <initialize_IMU+0x1a8>)
 8001870:	f7fe fcb6 	bl	80001e0 <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187c:	493d      	ldr	r1, [pc, #244]	@ (8001974 <initialize_IMU+0x1a8>)
 800187e:	483e      	ldr	r0, [pc, #248]	@ (8001978 <initialize_IMU+0x1ac>)
 8001880:	f003 fcb6 	bl	80051f0 <HAL_UART_Transmit>
	  }


	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG)) {
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff f8dd 	bl	8000a44 <bno055_set_operation_mode>
 800188a:	4603      	mov	r3, r0
 800188c:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001890:	d012      	beq.n	80018b8 <initialize_IMU+0xec>
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d11f      	bne.n	80018d8 <initialize_IMU+0x10c>
	    	  case BNO055_ERROR:
	    		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 8001898:	493d      	ldr	r1, [pc, #244]	@ (8001990 <initialize_IMU+0x1c4>)
 800189a:	4836      	ldr	r0, [pc, #216]	@ (8001974 <initialize_IMU+0x1a8>)
 800189c:	f004 fd32 	bl	8006304 <siprintf>
	    		HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 80018a0:	4834      	ldr	r0, [pc, #208]	@ (8001974 <initialize_IMU+0x1a8>)
 80018a2:	f7fe fc9d 	bl	80001e0 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ae:	4931      	ldr	r1, [pc, #196]	@ (8001974 <initialize_IMU+0x1a8>)
 80018b0:	4831      	ldr	r0, [pc, #196]	@ (8001978 <initialize_IMU+0x1ac>)
 80018b2:	f003 fc9d 	bl	80051f0 <HAL_UART_Transmit>
	    		  break;
 80018b6:	e010      	b.n	80018da <initialize_IMU+0x10e>
	    	  case BNO055_E_NULL_PTR:
	    		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 80018b8:	4936      	ldr	r1, [pc, #216]	@ (8001994 <initialize_IMU+0x1c8>)
 80018ba:	482e      	ldr	r0, [pc, #184]	@ (8001974 <initialize_IMU+0x1a8>)
 80018bc:	f004 fd22 	bl	8006304 <siprintf>
	    		HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 80018c0:	482c      	ldr	r0, [pc, #176]	@ (8001974 <initialize_IMU+0x1a8>)
 80018c2:	f7fe fc8d 	bl	80001e0 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	4929      	ldr	r1, [pc, #164]	@ (8001974 <initialize_IMU+0x1a8>)
 80018d0:	4829      	ldr	r0, [pc, #164]	@ (8001978 <initialize_IMU+0x1ac>)
 80018d2:	f003 fc8d 	bl	80051f0 <HAL_UART_Transmit>
	    		  break;
 80018d6:	e000      	b.n	80018da <initialize_IMU+0x10e>
	    	  default:
	    		  break;
 80018d8:	bf00      	nop
	  }
	  HAL_Delay(100);
 80018da:	2064      	movs	r0, #100	@ 0x64
 80018dc:	f000 fd5a 	bl	8002394 <HAL_Delay>
	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS)) {
 80018e0:	2008      	movs	r0, #8
 80018e2:	f7ff f8af 	bl	8000a44 <bno055_set_operation_mode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 80018ec:	d012      	beq.n	8001914 <initialize_IMU+0x148>
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f2:	d11f      	bne.n	8001934 <initialize_IMU+0x168>
	  	  case BNO055_ERROR:
	  		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 80018f4:	4926      	ldr	r1, [pc, #152]	@ (8001990 <initialize_IMU+0x1c4>)
 80018f6:	481f      	ldr	r0, [pc, #124]	@ (8001974 <initialize_IMU+0x1a8>)
 80018f8:	f004 fd04 	bl	8006304 <siprintf>
	  		HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 80018fc:	481d      	ldr	r0, [pc, #116]	@ (8001974 <initialize_IMU+0x1a8>)
 80018fe:	f7fe fc6f 	bl	80001e0 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190a:	491a      	ldr	r1, [pc, #104]	@ (8001974 <initialize_IMU+0x1a8>)
 800190c:	481a      	ldr	r0, [pc, #104]	@ (8001978 <initialize_IMU+0x1ac>)
 800190e:	f003 fc6f 	bl	80051f0 <HAL_UART_Transmit>
	  		  break;
 8001912:	e010      	b.n	8001936 <initialize_IMU+0x16a>
	  	  case BNO055_E_NULL_PTR:
	  		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 8001914:	491f      	ldr	r1, [pc, #124]	@ (8001994 <initialize_IMU+0x1c8>)
 8001916:	4817      	ldr	r0, [pc, #92]	@ (8001974 <initialize_IMU+0x1a8>)
 8001918:	f004 fcf4 	bl	8006304 <siprintf>
	  		HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 800191c:	4815      	ldr	r0, [pc, #84]	@ (8001974 <initialize_IMU+0x1a8>)
 800191e:	f7fe fc5f 	bl	80001e0 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	4912      	ldr	r1, [pc, #72]	@ (8001974 <initialize_IMU+0x1a8>)
 800192c:	4812      	ldr	r0, [pc, #72]	@ (8001978 <initialize_IMU+0x1ac>)
 800192e:	f003 fc5f 	bl	80051f0 <HAL_UART_Transmit>
	  		  break;
 8001932:	e000      	b.n	8001936 <initialize_IMU+0x16a>
	  	  default:
	  		  break;
 8001934:	bf00      	nop
	}
	  bno055_get_operation_mode(&op_mode);
 8001936:	4813      	ldr	r0, [pc, #76]	@ (8001984 <initialize_IMU+0x1b8>)
 8001938:	f7ff f842 	bl	80009c0 <bno055_get_operation_mode>
	  sprintf((char*)log_buf, "Set Op Mode to: %d \r\n", op_mode);
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <initialize_IMU+0x1b8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4915      	ldr	r1, [pc, #84]	@ (8001998 <initialize_IMU+0x1cc>)
 8001944:	480b      	ldr	r0, [pc, #44]	@ (8001974 <initialize_IMU+0x1a8>)
 8001946:	f004 fcdd 	bl	8006304 <siprintf>
	  HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 800194a:	480a      	ldr	r0, [pc, #40]	@ (8001974 <initialize_IMU+0x1a8>)
 800194c:	f7fe fc48 	bl	80001e0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001958:	4906      	ldr	r1, [pc, #24]	@ (8001974 <initialize_IMU+0x1a8>)
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <initialize_IMU+0x1ac>)
 800195c:	f003 fc48 	bl	80051f0 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001960:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001964:	f000 fd16 	bl	8002394 <HAL_Delay>



}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	08006ce8 	.word	0x08006ce8
 8001974:	20000374 	.word	0x20000374
 8001978:	200002ac 	.word	0x200002ac
 800197c:	200000f0 	.word	0x200000f0
 8001980:	08006cf4 	.word	0x08006cf4
 8001984:	200003cf 	.word	0x200003cf
 8001988:	08006d10 	.word	0x08006d10
 800198c:	08006d2c 	.word	0x08006d2c
 8001990:	08006d40 	.word	0x08006d40
 8001994:	08006d5c 	.word	0x08006d5c
 8001998:	08006d70 	.word	0x08006d70

0800199c <log_IMU>:

void log_IMU(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af02      	add	r7, sp, #8
	if(HAL_I2C_IsDeviceReady (&hi2c3, 0x29 << 1, 10, 500) == HAL_OK) {
 80019a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019a6:	220a      	movs	r2, #10
 80019a8:	2152      	movs	r1, #82	@ 0x52
 80019aa:	4831      	ldr	r0, [pc, #196]	@ (8001a70 <log_IMU+0xd4>)
 80019ac:	f001 fcc8 	bl	8003340 <HAL_I2C_IsDeviceReady>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d014      	beq.n	80019e0 <log_IMU+0x44>

		  } else {
			  const int error = HAL_I2C_GetError(&hi2c3);
 80019b6:	482e      	ldr	r0, [pc, #184]	@ (8001a70 <log_IMU+0xd4>)
 80019b8:	f001 fdfe 	bl	80035b8 <HAL_I2C_GetError>
 80019bc:	4603      	mov	r3, r0
 80019be:	607b      	str	r3, [r7, #4]
			  sprintf((char*)log_buf, "Device status error: %d\r\n", error);
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	492c      	ldr	r1, [pc, #176]	@ (8001a74 <log_IMU+0xd8>)
 80019c4:	482c      	ldr	r0, [pc, #176]	@ (8001a78 <log_IMU+0xdc>)
 80019c6:	f004 fc9d 	bl	8006304 <siprintf>
			  HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 80019ca:	482b      	ldr	r0, [pc, #172]	@ (8001a78 <log_IMU+0xdc>)
 80019cc:	f7fe fc08 	bl	80001e0 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d8:	4927      	ldr	r1, [pc, #156]	@ (8001a78 <log_IMU+0xdc>)
 80019da:	4828      	ldr	r0, [pc, #160]	@ (8001a7c <log_IMU+0xe0>)
 80019dc:	f003 fc08 	bl	80051f0 <HAL_UART_Transmit>
		  }

		//poll the BNO055 for state
		bno055_get_operation_mode(&op_mode);
 80019e0:	4827      	ldr	r0, [pc, #156]	@ (8001a80 <log_IMU+0xe4>)
 80019e2:	f7fe ffed 	bl	80009c0 <bno055_get_operation_mode>
		bno055_get_power_mode(&pow_mode);
 80019e6:	4827      	ldr	r0, [pc, #156]	@ (8001a84 <log_IMU+0xe8>)
 80019e8:	f7ff f8f4 	bl	8000bd4 <bno055_get_power_mode>
		sprintf((char*)log_buf, "Op Mode: %d Power Mode: %d, \r\n", op_mode, pow_mode);
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <log_IMU+0xe4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <log_IMU+0xe8>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4924      	ldr	r1, [pc, #144]	@ (8001a88 <log_IMU+0xec>)
 80019f8:	481f      	ldr	r0, [pc, #124]	@ (8001a78 <log_IMU+0xdc>)
 80019fa:	f004 fc83 	bl	8006304 <siprintf>
		HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 80019fe:	481e      	ldr	r0, [pc, #120]	@ (8001a78 <log_IMU+0xdc>)
 8001a00:	f7fe fbee 	bl	80001e0 <strlen>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0c:	491a      	ldr	r1, [pc, #104]	@ (8001a78 <log_IMU+0xdc>)
 8001a0e:	481b      	ldr	r0, [pc, #108]	@ (8001a7c <log_IMU+0xe0>)
 8001a10:	f003 fbee 	bl	80051f0 <HAL_UART_Transmit>

		//poll the BNO055 for data
		state = HAL_I2C_GetState(&hi2c3);
 8001a14:	4816      	ldr	r0, [pc, #88]	@ (8001a70 <log_IMU+0xd4>)
 8001a16:	f001 fdc1 	bl	800359c <HAL_I2C_GetState>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <log_IMU+0xf0>)
 8001a20:	701a      	strb	r2, [r3, #0]
		bno055_read_accel_xyz(&accel_data);
 8001a22:	481b      	ldr	r0, [pc, #108]	@ (8001a90 <log_IMU+0xf4>)
 8001a24:	f7fe fef8 	bl	8000818 <bno055_read_accel_xyz>
		bno055_read_euler_hrp(&euler_data);
 8001a28:	481a      	ldr	r0, [pc, #104]	@ (8001a94 <log_IMU+0xf8>)
 8001a2a:	f7fe ff5f 	bl	80008ec <bno055_read_euler_hrp>
		sprintf((char*)log_buf, "X: %d Y: %d, Z: %d\r\n", euler_data.p, euler_data.h, euler_data.r);
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <log_IMU+0xf8>)
 8001a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <log_IMU+0xf8>)
 8001a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <log_IMU+0xf8>)
 8001a40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	460b      	mov	r3, r1
 8001a48:	4913      	ldr	r1, [pc, #76]	@ (8001a98 <log_IMU+0xfc>)
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <log_IMU+0xdc>)
 8001a4c:	f004 fc5a 	bl	8006304 <siprintf>
		HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 8001a50:	4809      	ldr	r0, [pc, #36]	@ (8001a78 <log_IMU+0xdc>)
 8001a52:	f7fe fbc5 	bl	80001e0 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5e:	4906      	ldr	r1, [pc, #24]	@ (8001a78 <log_IMU+0xdc>)
 8001a60:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <log_IMU+0xe0>)
 8001a62:	f003 fbc5 	bl	80051f0 <HAL_UART_Transmit>

}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200000f0 	.word	0x200000f0
 8001a74:	08006cf4 	.word	0x08006cf4
 8001a78:	20000374 	.word	0x20000374
 8001a7c:	200002ac 	.word	0x200002ac
 8001a80:	200003cf 	.word	0x200003cf
 8001a84:	200003d0 	.word	0x200003d0
 8001a88:	08006d88 	.word	0x08006d88
 8001a8c:	200003ce 	.word	0x200003ce
 8001a90:	200003c0 	.word	0x200003c0
 8001a94:	200003c8 	.word	0x200003c8
 8001a98:	08006da8 	.word	0x08006da8

08001a9c <log_LIDAR>:

void log_LIDAR(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read(&hi2c2, 0x10 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, distance_data, 2, 500);
 8001aa2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <log_LIDAR+0x9c>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4821      	ldr	r0, [pc, #132]	@ (8001b3c <log_LIDAR+0xa0>)
 8001ab8:	f001 fa10 	bl	8002edc <HAL_I2C_Mem_Read>
	distance_cm = (uint16_t)(distance_data[1] << 8 | distance_data[0]);
 8001abc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <log_LIDAR+0x9c>)
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <log_LIDAR+0x9c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <log_LIDAR+0xa4>)
 8001ad4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c2, 0x10 << 1, 0x02, I2C_MEMADD_SIZE_8BIT, intensity_data, 2, 500);
 8001ad6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <log_LIDAR+0xa8>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	2120      	movs	r1, #32
 8001aea:	4814      	ldr	r0, [pc, #80]	@ (8001b3c <log_LIDAR+0xa0>)
 8001aec:	f001 f9f6 	bl	8002edc <HAL_I2C_Mem_Read>
	intensity_value = (uint16_t)(intensity_data[1] << 8 | intensity_data[0]);
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <log_LIDAR+0xa8>)
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <log_LIDAR+0xa8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <log_LIDAR+0xac>)
 8001b08:	801a      	strh	r2, [r3, #0]

	sprintf((char*)log_buf, "distance: %d amp: %d\r\n", distance_cm, intensity_value);
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <log_LIDAR+0xa4>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <log_LIDAR+0xac>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	490d      	ldr	r1, [pc, #52]	@ (8001b4c <log_LIDAR+0xb0>)
 8001b16:	480e      	ldr	r0, [pc, #56]	@ (8001b50 <log_LIDAR+0xb4>)
 8001b18:	f004 fbf4 	bl	8006304 <siprintf>
	HAL_UART_Transmit(&huart1, log_buf, strlen((char*)log_buf), 1000);
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <log_LIDAR+0xb4>)
 8001b1e:	f7fe fb5f 	bl	80001e0 <strlen>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2a:	4909      	ldr	r1, [pc, #36]	@ (8001b50 <log_LIDAR+0xb4>)
 8001b2c:	4809      	ldr	r0, [pc, #36]	@ (8001b54 <log_LIDAR+0xb8>)
 8001b2e:	f003 fb5f 	bl	80051f0 <HAL_UART_Transmit>


}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200003d4 	.word	0x200003d4
 8001b3c:	2000009c 	.word	0x2000009c
 8001b40:	200003d6 	.word	0x200003d6
 8001b44:	200003d8 	.word	0x200003d8
 8001b48:	200003da 	.word	0x200003da
 8001b4c:	08006dc0 	.word	0x08006dc0
 8001b50:	20000374 	.word	0x20000374
 8001b54:	200002ac 	.word	0x200002ac

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <set_duty>:
    .htim = &htim3
};



void set_duty(motor_t* motor, uint32_t pulse_1, uint32_t pulse_2) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <set_duty+0x20>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b82:	e018      	b.n	8001bb6 <set_duty+0x52>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d105      	bne.n	8001b98 <set_duty+0x34>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b96:	e00e      	b.n	8001bb6 <set_duty+0x52>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d105      	bne.n	8001bac <set_duty+0x48>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001baa:	e004      	b.n	8001bb6 <set_duty+0x52>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_2, pulse_2);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <set_duty+0x66>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001bc8:	e018      	b.n	8001bfc <set_duty+0x98>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_2, pulse_2);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d105      	bne.n	8001bde <set_duty+0x7a>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bdc:	e00e      	b.n	8001bfc <set_duty+0x98>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_2, pulse_2);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d105      	bne.n	8001bf2 <set_duty+0x8e>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001bf0:	e004      	b.n	8001bfc <set_duty+0x98>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_2, pulse_2);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <servo_duty>:
servo_t servo_1 = {
	.PWM_CHANNEL = TIM_CHANNEL_4,
	.htim = &htim1
};

void servo_duty(servo_t* servo, uint32_t pulse_1) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <servo_duty+0x1e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c24:	e018      	b.n	8001c58 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d105      	bne.n	8001c3a <servo_duty+0x32>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c38:	e00e      	b.n	8001c58 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d105      	bne.n	8001c4e <servo_duty+0x46>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001c4c:	e004      	b.n	8001c58 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001e00 <HAL_I2C_MspInit+0x14c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d13e      	bne.n	8001d54 <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	4b4a      	ldr	r3, [pc, #296]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a49      	ldr	r2, [pc, #292]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d04:	2304      	movs	r3, #4
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	483e      	ldr	r0, [pc, #248]	@ (8001e08 <HAL_I2C_MspInit+0x154>)
 8001d10:	f000 fd08 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001d26:	2309      	movs	r3, #9
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4835      	ldr	r0, [pc, #212]	@ (8001e08 <HAL_I2C_MspInit+0x154>)
 8001d32:	f000 fcf7 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a31      	ldr	r2, [pc, #196]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d52:	e050      	b.n	8001df6 <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2c      	ldr	r2, [pc, #176]	@ (8001e0c <HAL_I2C_MspInit+0x158>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d14b      	bne.n	8001df6 <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a27      	ldr	r2, [pc, #156]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a20      	ldr	r2, [pc, #128]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9c:	2312      	movs	r3, #18
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001da8:	2304      	movs	r3, #4
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4817      	ldr	r0, [pc, #92]	@ (8001e10 <HAL_I2C_MspInit+0x15c>)
 8001db4:	f000 fcb6 	bl	8002724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001dca:	2309      	movs	r3, #9
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <HAL_I2C_MspInit+0x154>)
 8001dd6:	f000 fca5 	bl	8002724 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_I2C_MspInit+0x150>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
}
 8001df6:	bf00      	nop
 8001df8:	3730      	adds	r7, #48	@ 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005800 	.word	0x40005800
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40005c00 	.word	0x40005c00
 8001e10:	40020000 	.word	0x40020000

08001e14 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e42:	e026      	b.n	8001e92 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <HAL_TIM_PWM_MspInit+0x94>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
}
 8001e6a:	e012      	b.n	8001e92 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <HAL_TIM_PWM_MspInit+0x98>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10d      	bne.n	8001e92 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x90>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000c00 	.word	0x40000c00

08001eb0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	@ 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed0:	d12c      	bne.n	8001f2c <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a2f      	ldr	r2, [pc, #188]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	4b29      	ldr	r3, [pc, #164]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001f0a:	2322      	movs	r3, #34	@ 0x22
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	481d      	ldr	r0, [pc, #116]	@ (8001f9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001f26:	f000 fbfd 	bl	8002724 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f2a:	e030      	b.n	8001f8e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a16      	ldr	r2, [pc, #88]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f6e:	23c0      	movs	r3, #192	@ 0xc0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001f8a:	f000 fbcb 	bl	8002724 <HAL_GPIO_Init>
}
 8001f8e:	bf00      	nop
 8001f90:	3730      	adds	r7, #48	@ 0x30
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40000800 	.word	0x40000800
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a36      	ldr	r2, [pc, #216]	@ (80020a0 <HAL_TIM_MspPostInit+0xf8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d11f      	bne.n	800200a <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001fe6:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4829      	ldr	r0, [pc, #164]	@ (80020a8 <HAL_TIM_MspPostInit+0x100>)
 8002004:	f000 fb8e 	bl	8002724 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002008:	e046      	b.n	8002098 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a27      	ldr	r2, [pc, #156]	@ (80020ac <HAL_TIM_MspPostInit+0x104>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d11e      	bne.n	8002052 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4a21      	ldr	r2, [pc, #132]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002030:	2333      	movs	r3, #51	@ 0x33
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002040:	2302      	movs	r3, #2
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4819      	ldr	r0, [pc, #100]	@ (80020b0 <HAL_TIM_MspPostInit+0x108>)
 800204c:	f000 fb6a 	bl	8002724 <HAL_GPIO_Init>
}
 8002050:	e022      	b.n	8002098 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_TIM_MspPostInit+0x10c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d11d      	bne.n	8002098 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6313      	str	r3, [r2, #48]	@ 0x30
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_TIM_MspPostInit+0xfc>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002078:	230c      	movs	r3, #12
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002088:	2302      	movs	r3, #2
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <HAL_TIM_MspPostInit+0x100>)
 8002094:	f000 fb46 	bl	8002724 <HAL_GPIO_Init>
}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40000c00 	.word	0x40000c00

080020b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_UART_MspInit+0x94>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d134      	bne.n	8002144 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_UART_MspInit+0x98>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_UART_MspInit+0x98>)
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_UART_MspInit+0x98>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_UART_MspInit+0x98>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_UART_MspInit+0x98>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_UART_MspInit+0x98>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002112:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002124:	2307      	movs	r3, #7
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4809      	ldr	r0, [pc, #36]	@ (8002154 <HAL_UART_MspInit+0x9c>)
 8002130:	f000 faf8 	bl	8002724 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	2025      	movs	r0, #37	@ 0x25
 800213a:	f000 fa2a 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800213e:	2025      	movs	r0, #37	@ 0x25
 8002140:	f000 fa43 	bl	80025ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	@ 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40011000 	.word	0x40011000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <NMI_Handler+0x4>

08002160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <MemManage_Handler+0x4>

08002170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <UsageFault_Handler+0x4>

08002180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ae:	f000 f8d1 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <USART1_IRQHandler+0x10>)
 80021be:	f003 f8c7 	bl	8005350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002ac 	.word	0x200002ac

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f004 f8ac 	bl	8006358 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20020000 	.word	0x20020000
 800222c:	00000400 	.word	0x00000400
 8002230:	20000420 	.word	0x20000420
 8002234:	20000570 	.word	0x20000570

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800225c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002260:	f7ff ffea 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	@ (8002298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	@ (800229c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	@ (80022a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f004 f86b 	bl	8006364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228e:	f7fe fd61 	bl	8000d54 <main>
  bx  lr    
 8002292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80022a0:	08006f34 	.word	0x08006f34
  ldr r2, =_sbss
 80022a4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80022a8:	20000570 	.word	0x20000570

080022ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <HAL_Init+0x40>)
 80022ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	@ (80022f0 <HAL_Init+0x40>)
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <HAL_Init+0x40>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f94f 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fcbe 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f967 	bl	80025e6 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f000 f92f 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	@ (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000020 	.word	0x20000020
 800234c:	20000028 	.word	0x20000028
 8002350:	20000024 	.word	0x20000024

08002354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000028 	.word	0x20000028
 8002378:	20000424 	.word	0x20000424

0800237c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000424 	.word	0x20000424

08002394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff ffee 	bl	800237c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d005      	beq.n	80023ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_Delay+0x44>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ba:	bf00      	nop
 80023bc:	f7ff ffde 	bl	800237c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <HAL_Delay+0x28>
  {
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000028 	.word	0x20000028

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff feb6 	bl	800237c <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d008      	beq.n	8002630 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e052      	b.n	80026d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0216 	bic.w	r2, r2, #22
 800263e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800264e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <HAL_DMA_Abort+0x62>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0208 	bic.w	r2, r2, #8
 800266e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002680:	e013      	b.n	80026aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002682:	f7ff fe7b 	bl	800237c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b05      	cmp	r3, #5
 800268e:	d90c      	bls.n	80026aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2203      	movs	r2, #3
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e015      	b.n	80026d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e4      	bne.n	8002682 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	223f      	movs	r2, #63	@ 0x3f
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2280      	movs	r2, #128	@ 0x80
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e00c      	b.n	8002716 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2205      	movs	r2, #5
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e159      	b.n	80029f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8148 	bne.w	80029ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d005      	beq.n	8002776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	2b02      	cmp	r3, #2
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d017      	beq.n	8002814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d123      	bne.n	8002868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a2 	beq.w	80029ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <HAL_GPIO_Init+0x2e8>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	4a56      	ldr	r2, [pc, #344]	@ (8002a0c <HAL_GPIO_Init+0x2e8>)
 80028b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ba:	4b54      	ldr	r3, [pc, #336]	@ (8002a0c <HAL_GPIO_Init+0x2e8>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	4a52      	ldr	r2, [pc, #328]	@ (8002a10 <HAL_GPIO_Init+0x2ec>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a49      	ldr	r2, [pc, #292]	@ (8002a14 <HAL_GPIO_Init+0x2f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_GPIO_Init+0x202>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <HAL_GPIO_Init+0x2f4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x1fe>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a47      	ldr	r2, [pc, #284]	@ (8002a1c <HAL_GPIO_Init+0x2f8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x1fa>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <HAL_GPIO_Init+0x2fc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x1f6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a45      	ldr	r2, [pc, #276]	@ (8002a24 <HAL_GPIO_Init+0x300>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x1f2>
 8002912:	2304      	movs	r3, #4
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x204>
 8002916:	2307      	movs	r3, #7
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x204>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x204>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x204>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x204>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002938:	4935      	ldr	r1, [pc, #212]	@ (8002a10 <HAL_GPIO_Init+0x2ec>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b38      	ldr	r3, [pc, #224]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a24      	ldr	r2, [pc, #144]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299a:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029be:	4a1a      	ldr	r2, [pc, #104]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f aea2 	bls.w	8002740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020c00 	.word	0x40020c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a48:	e003      	b.n	8002a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e12b      	b.n	8002cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff f914 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	@ 0x24
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f001 fd68 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a81      	ldr	r2, [pc, #516]	@ (8002cd4 <HAL_I2C_Init+0x274>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d807      	bhi.n	8002ae4 <HAL_I2C_Init+0x84>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a80      	ldr	r2, [pc, #512]	@ (8002cd8 <HAL_I2C_Init+0x278>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e006      	b.n	8002af2 <HAL_I2C_Init+0x92>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cdc <HAL_I2C_Init+0x27c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0e7      	b.n	8002cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a78      	ldr	r2, [pc, #480]	@ (8002ce0 <HAL_I2C_Init+0x280>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a6a      	ldr	r2, [pc, #424]	@ (8002cd4 <HAL_I2C_Init+0x274>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d802      	bhi.n	8002b34 <HAL_I2C_Init+0xd4>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	e009      	b.n	8002b48 <HAL_I2C_Init+0xe8>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ce4 <HAL_I2C_Init+0x284>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	3301      	adds	r3, #1
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	495c      	ldr	r1, [pc, #368]	@ (8002cd4 <HAL_I2C_Init+0x274>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d819      	bhi.n	8002b9c <HAL_I2C_Init+0x13c>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e59      	subs	r1, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_I2C_Init+0x138>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e59      	subs	r1, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	e051      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	e04f      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_I2C_Init+0x168>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e012      	b.n	8002bee <HAL_I2C_Init+0x18e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e58      	subs	r0, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	0099      	lsls	r1, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Init+0x196>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e022      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10e      	bne.n	8002c1c <HAL_I2C_Init+0x1bc>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e58      	subs	r0, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c1a:	e00f      	b.n	8002c3c <HAL_I2C_Init+0x1dc>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6809      	ldr	r1, [r1, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6911      	ldr	r1, [r2, #16]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	000186a0 	.word	0x000186a0
 8002cd8:	001e847f 	.word	0x001e847f
 8002cdc:	003d08ff 	.word	0x003d08ff
 8002ce0:	431bde83 	.word	0x431bde83
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d02:	f7ff fb3b 	bl	800237c <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	f040 80d9 	bne.w	8002ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2319      	movs	r3, #25
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	496d      	ldr	r1, [pc, #436]	@ (8002ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fdd3 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e0cc      	b.n	8002eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Mem_Write+0x56>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0c5      	b.n	8002eca <HAL_I2C_Mem_Write+0x1e2>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d007      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2221      	movs	r2, #33	@ 0x21
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da6:	88f8      	ldrh	r0, [r7, #6]
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4603      	mov	r3, r0
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fc0a 	bl	80035d0 <I2C_RequestMemoryWrite>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d052      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e081      	b.n	8002eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fe98 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d107      	bne.n	8002dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e06b      	b.n	8002eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11b      	bne.n	8002e68 <HAL_I2C_Mem_Write+0x180>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d017      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1aa      	bne.n	8002dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fe8b 	bl	8003b90 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e016      	b.n	8002eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	00100002 	.word	0x00100002
 8002ed8:	ffff0000 	.word	0xffff0000

08002edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	@ 0x30
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef6:	f7ff fa41 	bl	800237c <HAL_GetTick>
 8002efa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 8214 	bne.w	8003332 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2319      	movs	r3, #25
 8002f10:	2201      	movs	r2, #1
 8002f12:	497b      	ldr	r1, [pc, #492]	@ (8003100 <HAL_I2C_Mem_Read+0x224>)
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fcd9 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
 8002f22:	e207      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x56>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e200      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d007      	beq.n	8002f58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2222      	movs	r2, #34	@ 0x22
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a5b      	ldr	r2, [pc, #364]	@ (8003104 <HAL_I2C_Mem_Read+0x228>)
 8002f98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9a:	88f8      	ldrh	r0, [r7, #6]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	8979      	ldrh	r1, [r7, #10]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4603      	mov	r3, r0
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fba6 	bl	80036fc <I2C_RequestMemoryRead>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1bc      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d113      	bne.n	8002fea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e190      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d11b      	bne.n	800302a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e170      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302e:	2b02      	cmp	r3, #2
 8003030:	d11b      	bne.n	800306a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003040:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	e150      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003080:	e144      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	2b03      	cmp	r3, #3
 8003088:	f200 80f1 	bhi.w	800326e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	2b01      	cmp	r3, #1
 8003092:	d123      	bne.n	80030dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003096:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fdc1 	bl	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e145      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030da:	e117      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d14e      	bne.n	8003182 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	2200      	movs	r2, #0
 80030ec:	4906      	ldr	r1, [pc, #24]	@ (8003108 <HAL_I2C_Mem_Read+0x22c>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fbec 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e11a      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
 80030fe:	bf00      	nop
 8003100:	00100002 	.word	0x00100002
 8003104:	ffff0000 	.word	0xffff0000
 8003108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003180:	e0c4      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	2200      	movs	r2, #0
 800318a:	496c      	ldr	r1, [pc, #432]	@ (800333c <HAL_I2C_Mem_Read+0x460>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fb9d 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cb      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	2200      	movs	r2, #0
 80031e6:	4955      	ldr	r1, [pc, #340]	@ (800333c <HAL_I2C_Mem_Read+0x460>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb6f 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e09d      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800326c:	e04e      	b.n	800330c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003270:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fcd4 	bl	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e058      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d124      	bne.n	800330c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f aeb6 	bne.w	8003082 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	e000      	b.n	8003334 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003332:	2302      	movs	r3, #2
  }
}
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	@ 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	00010004 	.word	0x00010004

08003340 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7ff f814 	bl	800237c <HAL_GetTick>
 8003354:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	f040 8111 	bne.w	800358a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2319      	movs	r3, #25
 800336e:	2201      	movs	r2, #1
 8003370:	4988      	ldr	r1, [pc, #544]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 faaa 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e104      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2C_IsDeviceReady+0x50>
 800338c:	2302      	movs	r3, #2
 800338e:	e0fd      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d007      	beq.n	80033b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2224      	movs	r2, #36	@ 0x24
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a70      	ldr	r2, [pc, #448]	@ (8003598 <HAL_I2C_IsDeviceReady+0x258>)
 80033d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa68 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003410:	d103      	bne.n	800341a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0b6      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800342c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe ffa5 	bl	800237c <HAL_GetTick>
 8003432:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003462:	e025      	b.n	80034b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe ff8a 	bl	800237c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <HAL_I2C_IsDeviceReady+0x13a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22a0      	movs	r2, #160	@ 0xa0
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80034ba:	d005      	beq.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0cd      	beq.n	8003464 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d129      	bne.n	8003532 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	4921      	ldr	r1, [pc, #132]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f9dc 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e036      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e02c      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003540:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800354a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	490f      	ldr	r1, [pc, #60]	@ (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f9b8 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e012      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	f4ff af32 	bcc.w	80033da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00100002 	.word	0x00100002
 8003598:	ffff0000 	.word	0xffff0000

0800359c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2200      	movs	r2, #0
 8003602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f960 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003620:	d103      	bne.n	800362a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e05f      	b.n	80036ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800363c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	492d      	ldr	r1, [pc, #180]	@ (80036f8 <I2C_RequestMemoryWrite+0x128>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f9bb 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e04c      	b.n	80036ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	6a39      	ldr	r1, [r7, #32]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fa46 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	2b04      	cmp	r3, #4
 8003680:	d107      	bne.n	8003692 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e02b      	b.n	80036ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	611a      	str	r2, [r3, #16]
 80036a6:	e021      	b.n	80036ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036a8:	893b      	ldrh	r3, [r7, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fa20 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d107      	bne.n	80036de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e005      	b.n	80036ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e2:	893b      	ldrh	r3, [r7, #8]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00010002 	.word	0x00010002

080036fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4603      	mov	r3, r0
 800370c:	817b      	strh	r3, [r7, #10]
 800370e:	460b      	mov	r3, r1
 8003710:	813b      	strh	r3, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003724:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2200      	movs	r2, #0
 800373e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f8c2 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800375c:	d103      	bne.n	8003766 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0aa      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	4952      	ldr	r1, [pc, #328]	@ (80038c8 <I2C_RequestMemoryRead+0x1cc>)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f91d 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e097      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f9a8 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e076      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d8:	893b      	ldrh	r3, [r7, #8]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]
 80037e2:	e021      	b.n	8003828 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037e4:	893b      	ldrh	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	6a39      	ldr	r1, [r7, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f982 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	2b04      	cmp	r3, #4
 8003808:	d107      	bne.n	800381a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e050      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382a:	6a39      	ldr	r1, [r7, #32]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f967 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	2b04      	cmp	r3, #4
 800383e:	d107      	bne.n	8003850 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e035      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003862:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2200      	movs	r2, #0
 800386c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f82b 	bl	80038cc <I2C_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388a:	d103      	bne.n	8003894 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e013      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003898:	897b      	ldrh	r3, [r7, #10]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	4906      	ldr	r1, [pc, #24]	@ (80038c8 <I2C_RequestMemoryRead+0x1cc>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f886 	bl	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	00010002 	.word	0x00010002

080038cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038dc:	e048      	b.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d044      	beq.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fd49 	bl	800237c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d139      	bne.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10d      	bne.n	8003922 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	43da      	mvns	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	e00c      	b.n	800393c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	43da      	mvns	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	429a      	cmp	r2, r3
 8003940:	d116      	bne.n	8003970 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e023      	b.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0xca>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	e00c      	b.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d093      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ce:	e071      	b.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039de:	d123      	bne.n	8003a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e067      	b.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d041      	beq.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fe fca4 	bl	800237c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d136      	bne.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d10c      	bne.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e00b      	b.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e021      	b.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10c      	bne.n	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e00b      	b.n	8003af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af6d 	bne.w	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0c:	e034      	b.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8e3 	bl	8003cda <I2C_IsAcknowledgeFailed>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e034      	b.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d028      	beq.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fe fc29 	bl	800237c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11d      	bne.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	2b80      	cmp	r3, #128	@ 0x80
 8003b48:	d016      	beq.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e007      	b.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b80      	cmp	r3, #128	@ 0x80
 8003b84:	d1c3      	bne.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9c:	e034      	b.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f89b 	bl	8003cda <I2C_IsAcknowledgeFailed>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e034      	b.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d028      	beq.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fe fbe1 	bl	800237c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11d      	bne.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d016      	beq.n	8003c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e007      	b.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d1c3      	bne.n	8003b9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c2c:	e049      	b.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d119      	bne.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0210 	mvn.w	r2, #16
 8003c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e030      	b.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c70:	f7fe fb84 	bl	800237c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11d      	bne.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c90:	2b40      	cmp	r3, #64	@ 0x40
 8003c92:	d016      	beq.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e007      	b.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b40      	cmp	r3, #64	@ 0x40
 8003cce:	d1ae      	bne.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf0:	d11b      	bne.n	8003d2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f043 0204 	orr.w	r2, r3, #4
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e267      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d075      	beq.n	8003e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d56:	4b88      	ldr	r3, [pc, #544]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d112      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b82      	ldr	r3, [pc, #520]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x108>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d157      	bne.n	8003e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e242      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x74>
 8003d9e:	4b76      	ldr	r3, [pc, #472]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a75      	ldr	r2, [pc, #468]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b70      	ldr	r3, [pc, #448]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6f      	ldr	r2, [pc, #444]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dd0:	4b69      	ldr	r3, [pc, #420]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a68      	ldr	r2, [pc, #416]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b66      	ldr	r3, [pc, #408]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe fac4 	bl	800237c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe fac0 	bl	800237c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	@ 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e207      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xc0>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe fab0 	bl	800237c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fe faac 	bl	800237c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1f3      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b51      	ldr	r3, [pc, #324]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0xe8>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b44      	ldr	r3, [pc, #272]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1c7      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4937      	ldr	r1, [pc, #220]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e03a      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_RCC_OscConfig+0x244>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe fa65 	bl	800237c <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fa61 	bl	800237c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1a8      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b28      	ldr	r3, [pc, #160]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4925      	ldr	r1, [pc, #148]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <HAL_RCC_OscConfig+0x244>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fa44 	bl	800237c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fa40 	bl	800237c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e187      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d036      	beq.n	8003f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <HAL_RCC_OscConfig+0x248>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe fa24 	bl	800237c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fa20 	bl	800237c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e167      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x200>
 8003f56:	e01b      	b.n	8003f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f58:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <HAL_RCC_OscConfig+0x248>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fa0d 	bl	800237c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e00e      	b.n	8003f84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe fa09 	bl	800237c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d907      	bls.n	8003f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e150      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	42470000 	.word	0x42470000
 8003f80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b88      	ldr	r3, [pc, #544]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ea      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8097 	beq.w	80040cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b81      	ldr	r3, [pc, #516]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b77      	ldr	r3, [pc, #476]	@ (80041ac <HAL_RCC_OscConfig+0x474>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b74      	ldr	r3, [pc, #464]	@ (80041ac <HAL_RCC_OscConfig+0x474>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a73      	ldr	r2, [pc, #460]	@ (80041ac <HAL_RCC_OscConfig+0x474>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe f9c9 	bl	800237c <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fe f9c5 	bl	800237c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e10c      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCC_OscConfig+0x474>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x2ea>
 8004014:	4b64      	ldr	r3, [pc, #400]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a63      	ldr	r2, [pc, #396]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x324>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x30c>
 800402a:	4b5f      	ldr	r3, [pc, #380]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a5e      	ldr	r2, [pc, #376]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
 8004036:	4b5c      	ldr	r3, [pc, #368]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a5b      	ldr	r2, [pc, #364]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x324>
 8004044:	4b58      	ldr	r3, [pc, #352]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a57      	ldr	r2, [pc, #348]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	4b55      	ldr	r3, [pc, #340]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	4a54      	ldr	r2, [pc, #336]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe f98a 	bl	800237c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe f986 	bl	800237c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0cb      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	4b49      	ldr	r3, [pc, #292]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x334>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004090:	f7fe f974 	bl	800237c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe f970 	bl	800237c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0b5      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	4b3e      	ldr	r3, [pc, #248]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c0:	4b39      	ldr	r3, [pc, #228]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	4a38      	ldr	r2, [pc, #224]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80a1 	beq.w	8004218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d6:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d05c      	beq.n	800419c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d141      	bne.n	800416e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b31      	ldr	r3, [pc, #196]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe f944 	bl	800237c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe f940 	bl	800237c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e087      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b27      	ldr	r3, [pc, #156]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	491b      	ldr	r1, [pc, #108]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fe f919 	bl	800237c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7fe f915 	bl	800237c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e05c      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004160:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x416>
 800416c:	e054      	b.n	8004218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe f902 	bl	800237c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fe f8fe 	bl	800237c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e045      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_RCC_OscConfig+0x470>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x444>
 800419a:	e03d      	b.n	8004218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e038      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <HAL_RCC_OscConfig+0x4ec>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d028      	beq.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d121      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d11a      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d107      	bne.n	8004214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800

08004228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0cc      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800423c:	4b68      	ldr	r3, [pc, #416]	@ (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d90c      	bls.n	8004264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b65      	ldr	r3, [pc, #404]	@ (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b63      	ldr	r3, [pc, #396]	@ (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0b8      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b59      	ldr	r3, [pc, #356]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a58      	ldr	r2, [pc, #352]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004286:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004294:	4b53      	ldr	r3, [pc, #332]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a52      	ldr	r2, [pc, #328]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800429e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b50      	ldr	r3, [pc, #320]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	494d      	ldr	r1, [pc, #308]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d044      	beq.n	8004348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d119      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b3f      	ldr	r3, [pc, #252]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e067      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004306:	4b37      	ldr	r3, [pc, #220]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4934      	ldr	r1, [pc, #208]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004318:	f7fe f830 	bl	800237c <HAL_GetTick>
 800431c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	e00a      	b.n	8004336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe f82c 	bl	800237c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e04f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 020c 	and.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	429a      	cmp	r2, r3
 8004346:	d1eb      	bne.n	8004320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004348:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d20c      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b22      	ldr	r3, [pc, #136]	@ (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e032      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4916      	ldr	r1, [pc, #88]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439a:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490e      	ldr	r1, [pc, #56]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ae:	f000 f821 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	490a      	ldr	r1, [pc, #40]	@ (80043e8 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	@ (80043ec <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd ff90 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08006dd8 	.word	0x08006dd8
 80043ec:	20000020 	.word	0x20000020
 80043f0:	20000024 	.word	0x20000024

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b090      	sub	sp, #64	@ 0x40
 80043fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440c:	4b59      	ldr	r3, [pc, #356]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x180>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d00d      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x40>
 8004418:	2b08      	cmp	r3, #8
 800441a:	f200 80a1 	bhi.w	8004560 <HAL_RCC_GetSysClockFreq+0x16c>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x34>
 8004422:	2b04      	cmp	r3, #4
 8004424:	d003      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x3a>
 8004426:	e09b      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b53      	ldr	r3, [pc, #332]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x184>)
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800442c:	e09b      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442e:	4b53      	ldr	r3, [pc, #332]	@ (800457c <HAL_RCC_GetSysClockFreq+0x188>)
 8004430:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004432:	e098      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004434:	4b4f      	ldr	r3, [pc, #316]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x180>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800443e:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x180>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d028      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x180>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	2200      	movs	r2, #0
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	627a      	str	r2, [r7, #36]	@ 0x24
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800445c:	2100      	movs	r1, #0
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_GetSysClockFreq+0x188>)
 8004460:	fb03 f201 	mul.w	r2, r3, r1
 8004464:	2300      	movs	r3, #0
 8004466:	fb00 f303 	mul.w	r3, r0, r3
 800446a:	4413      	add	r3, r2
 800446c:	4a43      	ldr	r2, [pc, #268]	@ (800457c <HAL_RCC_GetSysClockFreq+0x188>)
 800446e:	fba0 1202 	umull	r1, r2, r0, r2
 8004472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004474:	460a      	mov	r2, r1
 8004476:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447a:	4413      	add	r3, r2
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	2200      	movs	r2, #0
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	61fa      	str	r2, [r7, #28]
 8004486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800448e:	f7fb feff 	bl	8000290 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4613      	mov	r3, r2
 8004498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800449a:	e053      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449c:	4b35      	ldr	r3, [pc, #212]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x180>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	2200      	movs	r2, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	617a      	str	r2, [r7, #20]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044ae:	f04f 0b00 	mov.w	fp, #0
 80044b2:	4652      	mov	r2, sl
 80044b4:	465b      	mov	r3, fp
 80044b6:	f04f 0000 	mov.w	r0, #0
 80044ba:	f04f 0100 	mov.w	r1, #0
 80044be:	0159      	lsls	r1, r3, #5
 80044c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c4:	0150      	lsls	r0, r2, #5
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	ebb2 080a 	subs.w	r8, r2, sl
 80044ce:	eb63 090b 	sbc.w	r9, r3, fp
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044e6:	ebb2 0408 	subs.w	r4, r2, r8
 80044ea:	eb63 0509 	sbc.w	r5, r3, r9
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	00eb      	lsls	r3, r5, #3
 80044f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fc:	00e2      	lsls	r2, r4, #3
 80044fe:	4614      	mov	r4, r2
 8004500:	461d      	mov	r5, r3
 8004502:	eb14 030a 	adds.w	r3, r4, sl
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	eb45 030b 	adc.w	r3, r5, fp
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451a:	4629      	mov	r1, r5
 800451c:	028b      	lsls	r3, r1, #10
 800451e:	4621      	mov	r1, r4
 8004520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004524:	4621      	mov	r1, r4
 8004526:	028a      	lsls	r2, r1, #10
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	2200      	movs	r2, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	60fa      	str	r2, [r7, #12]
 8004534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004538:	f7fb feaa 	bl	8000290 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4613      	mov	r3, r2
 8004542:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x180>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	3301      	adds	r3, #1
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004554:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800455e:	e002      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x184>)
 8004562:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004568:	4618      	mov	r0, r3
 800456a:	3740      	adds	r7, #64	@ 0x40
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	00f42400 	.word	0x00f42400
 800457c:	017d7840 	.word	0x017d7840

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004584:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <HAL_RCC_GetHCLKFreq+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000020 	.word	0x20000020

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800459c:	f7ff fff0 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	@ (80045bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	08006de8 	.word	0x08006de8

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045c4:	f7ff ffdc 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0b5b      	lsrs	r3, r3, #13
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4903      	ldr	r1, [pc, #12]	@ (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40023800 	.word	0x40023800
 80045e4:	08006de8 	.word	0x08006de8

080045e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fd fc00 	bl	8001e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fa94 	bl	8004b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_TIM_PWM_Start_IT+0x28>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e022      	b.n	80046f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d109      	bne.n	80046ca <HAL_TIM_PWM_Start_IT+0x42>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	e015      	b.n	80046f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d109      	bne.n	80046e4 <HAL_TIM_PWM_Start_IT+0x5c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e008      	b.n	80046f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0b3      	b.n	8004866 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start_IT+0x86>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800470c:	e013      	b.n	8004736 <HAL_TIM_PWM_Start_IT+0xae>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start_IT+0x96>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800471c:	e00b      	b.n	8004736 <HAL_TIM_PWM_Start_IT+0xae>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start_IT+0xa6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800472c:	e003      	b.n	8004736 <HAL_TIM_PWM_Start_IT+0xae>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b0c      	cmp	r3, #12
 800473a:	d841      	bhi.n	80047c0 <HAL_TIM_PWM_Start_IT+0x138>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <HAL_TIM_PWM_Start_IT+0xbc>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004779 	.word	0x08004779
 8004748:	080047c1 	.word	0x080047c1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047c1 	.word	0x080047c1
 8004754:	0800478b 	.word	0x0800478b
 8004758:	080047c1 	.word	0x080047c1
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080047c1 	.word	0x080047c1
 8004764:	0800479d 	.word	0x0800479d
 8004768:	080047c1 	.word	0x080047c1
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c1 	.word	0x080047c1
 8004774:	080047af 	.word	0x080047af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0202 	orr.w	r2, r2, #2
 8004786:	60da      	str	r2, [r3, #12]
      break;
 8004788:	e01d      	b.n	80047c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0204 	orr.w	r2, r2, #4
 8004798:	60da      	str	r2, [r3, #12]
      break;
 800479a:	e014      	b.n	80047c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0208 	orr.w	r2, r2, #8
 80047aa:	60da      	str	r2, [r3, #12]
      break;
 80047ac:	e00b      	b.n	80047c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0210 	orr.w	r2, r2, #16
 80047bc:	60da      	str	r2, [r3, #12]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d14b      	bne.n	8004864 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fbd5 	bl	8004f84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_TIM_PWM_Start_IT+0x1a8>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004806:	d013      	beq.n	8004830 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	@ (8004878 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_TIM_PWM_Start_IT+0x1a8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a16      	ldr	r2, [pc, #88]	@ (800487c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a15      	ldr	r2, [pc, #84]	@ (8004880 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d111      	bne.n	8004854 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d010      	beq.n	8004864 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	e007      	b.n	8004864 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40014000 	.word	0x40014000

08004884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e097      	b.n	80049c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd faff 	bl	8001eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 f93b 	bl	8004b54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	4313      	orrs	r3, r2
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004924:	f023 030c 	bic.w	r3, r3, #12
 8004928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	4313      	orrs	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	031b      	lsls	r3, r3, #12
 8004954:	4313      	orrs	r3, r2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4313      	orrs	r3, r2
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0ae      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f200 809f 	bhi.w	8004b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004b3d 	.word	0x08004b3d
 8004a0c:	08004b3d 	.word	0x08004b3d
 8004a10:	08004b3d 	.word	0x08004b3d
 8004a14:	08004a79 	.word	0x08004a79
 8004a18:	08004b3d 	.word	0x08004b3d
 8004a1c:	08004b3d 	.word	0x08004b3d
 8004a20:	08004b3d 	.word	0x08004b3d
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004b3d 	.word	0x08004b3d
 8004a2c:	08004b3d 	.word	0x08004b3d
 8004a30:	08004b3d 	.word	0x08004b3d
 8004a34:	08004afb 	.word	0x08004afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f914 	bl	8004c6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	619a      	str	r2, [r3, #24]
      break;
 8004a76:	e064      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f95a 	bl	8004d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
      break;
 8004ab8:	e043      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f9a5 	bl	8004e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0208 	orr.w	r2, r2, #8
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0204 	bic.w	r2, r2, #4
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	61da      	str	r2, [r3, #28]
      break;
 8004af8:	e023      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f9ef 	bl	8004ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	021a      	lsls	r2, r3, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	61da      	str	r2, [r3, #28]
      break;
 8004b3a:	e002      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3a      	ldr	r2, [pc, #232]	@ (8004c50 <TIM_Base_SetConfig+0xfc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00f      	beq.n	8004b8c <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b72:	d00b      	beq.n	8004b8c <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a37      	ldr	r2, [pc, #220]	@ (8004c54 <TIM_Base_SetConfig+0x100>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_Base_SetConfig+0x38>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a36      	ldr	r2, [pc, #216]	@ (8004c58 <TIM_Base_SetConfig+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0x38>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a35      	ldr	r2, [pc, #212]	@ (8004c5c <TIM_Base_SetConfig+0x108>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c50 <TIM_Base_SetConfig+0xfc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01b      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bac:	d017      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	@ (8004c54 <TIM_Base_SetConfig+0x100>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a27      	ldr	r2, [pc, #156]	@ (8004c58 <TIM_Base_SetConfig+0x104>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a26      	ldr	r2, [pc, #152]	@ (8004c5c <TIM_Base_SetConfig+0x108>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	@ (8004c60 <TIM_Base_SetConfig+0x10c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a24      	ldr	r2, [pc, #144]	@ (8004c64 <TIM_Base_SetConfig+0x110>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_Base_SetConfig+0x8a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	@ (8004c68 <TIM_Base_SetConfig+0x114>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <TIM_Base_SetConfig+0xfc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d103      	bne.n	8004c24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f023 0201 	bic.w	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]
  }
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800

08004c6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f023 0201 	bic.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0302 	bic.w	r3, r3, #2
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d34 <TIM_OC1_SetConfig+0xc8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10c      	bne.n	8004ce2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0308 	bic.w	r3, r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <TIM_OC1_SetConfig+0xc8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d111      	bne.n	8004d0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40010000 	.word	0x40010000

08004d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f023 0210 	bic.w	r2, r3, #16
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 0320 	bic.w	r3, r3, #32
 8004d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1e      	ldr	r2, [pc, #120]	@ (8004e0c <TIM_OC2_SetConfig+0xd4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d10d      	bne.n	8004db4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <TIM_OC2_SetConfig+0xd4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d113      	bne.n	8004de4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000

08004e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <TIM_OC3_SetConfig+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10d      	bne.n	8004e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <TIM_OC3_SetConfig+0xd0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d113      	bne.n	8004eba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40010000 	.word	0x40010000

08004ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a10      	ldr	r2, [pc, #64]	@ (8004f80 <TIM_OC4_SetConfig+0x9c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000

08004f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2201      	movs	r2, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e050      	b.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005034:	d013      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a15      	ldr	r2, [pc, #84]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a13      	ldr	r2, [pc, #76]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10c      	bne.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	4313      	orrs	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e03d      	b.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e042      	b.n	80051e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fc ff9e 	bl	80020b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	@ 0x24
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fdbd 	bl	8005d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	@ 0x28
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b20      	cmp	r3, #32
 800520e:	d175      	bne.n	80052fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Transmit+0x2c>
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e06e      	b.n	80052fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2221      	movs	r2, #33	@ 0x21
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522e:	f7fd f8a5 	bl	800237c <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005248:	d108      	bne.n	800525c <HAL_UART_Transmit+0x6c>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	e003      	b.n	8005264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005264:	e02e      	b.n	80052c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	2180      	movs	r1, #128	@ 0x80
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fb1f 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e03a      	b.n	80052fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3302      	adds	r3, #2
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	e007      	b.n	80052b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	781a      	ldrb	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1cb      	bne.n	8005266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2140      	movs	r1, #64	@ 0x40
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 faeb 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e006      	b.n	80052fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	4613      	mov	r3, r2
 8005312:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b20      	cmp	r3, #32
 800531e:	d112      	bne.n	8005346 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_UART_Receive_IT+0x26>
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e00b      	b.n	8005348 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	461a      	mov	r2, r3
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fb12 	bl	8005966 <UART_Start_Receive_IT>
 8005342:	4603      	mov	r3, r0
 8005344:	e000      	b.n	8005348 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005346:	2302      	movs	r3, #2
  }
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b0ba      	sub	sp, #232	@ 0xe8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800538e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_UART_IRQHandler+0x66>
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fbf2 	bl	8005b98 <UART_Receive_IT>
      return;
 80053b4:	e25b      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80de 	beq.w	800557c <HAL_UART_IRQHandler+0x22c>
 80053c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80d1 	beq.w	800557c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_UART_IRQHandler+0xae>
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f043 0201 	orr.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_UART_IRQHandler+0xd2>
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f043 0202 	orr.w	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_UART_IRQHandler+0xf6>
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f043 0204 	orr.w	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d011      	beq.n	8005476 <HAL_UART_IRQHandler+0x126>
 8005452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f043 0208 	orr.w	r2, r3, #8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 81f2 	beq.w	8005864 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_UART_IRQHandler+0x14e>
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb7d 	bl	8005b98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b40      	cmp	r3, #64	@ 0x40
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_UART_IRQHandler+0x17a>
 80054c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04f      	beq.n	800556a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa85 	bl	80059da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054da:	2b40      	cmp	r3, #64	@ 0x40
 80054dc:	d141      	bne.n	8005562 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800550a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800550e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	4a7e      	ldr	r2, [pc, #504]	@ (8005730 <HAL_UART_IRQHandler+0x3e0>)
 8005538:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd f8cd 	bl	80026de <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e00e      	b.n	8005578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f994 	bl	8005888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	e00a      	b.n	8005578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f990 	bl	8005888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e006      	b.n	8005578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f98c 	bl	8005888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005576:	e175      	b.n	8005864 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	bf00      	nop
    return;
 800557a:	e173      	b.n	8005864 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	2b01      	cmp	r3, #1
 8005582:	f040 814f 	bne.w	8005824 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8148 	beq.w	8005824 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8141 	beq.w	8005824 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	f040 80b6 	bne.w	8005734 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8145 	beq.w	8005868 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055e6:	429a      	cmp	r2, r3
 80055e8:	f080 813e 	bcs.w	8005868 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055fe:	f000 8088 	beq.w	8005712 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800561c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800562e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800563a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1d9      	bne.n	8005602 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800565e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3314      	adds	r3, #20
 800566e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005672:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005676:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800567a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e1      	bne.n	800564e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800569a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800569c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3314      	adds	r3, #20
 80056aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e3      	bne.n	800568a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e2:	f023 0310 	bic.w	r3, r3, #16
 80056e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	4618      	mov	r0, r3
 800570e:	f7fc ff76 	bl	80025fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005720:	b29b      	uxth	r3, r3
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8b7 	bl	800589c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572e:	e09b      	b.n	8005868 <HAL_UART_IRQHandler+0x518>
 8005730:	08005aa1 	.word	0x08005aa1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 808e 	beq.w	800586c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8089 	beq.w	800586c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800576a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800577e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e3      	bne.n	800575a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e3      	bne.n	8005792 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0310 	bic.w	r3, r3, #16
 80057ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057fc:	61fa      	str	r2, [r7, #28]
 80057fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	617b      	str	r3, [r7, #20]
   return(result);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e3      	bne.n	80057d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f83d 	bl	800589c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005822:	e023      	b.n	800586c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <HAL_UART_IRQHandler+0x4f4>
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f943 	bl	8005ac8 <UART_Transmit_IT>
    return;
 8005842:	e014      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <HAL_UART_IRQHandler+0x51e>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f983 	bl	8005b68 <UART_EndTransmit_IT>
    return;
 8005862:	e004      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
    return;
 8005864:	bf00      	nop
 8005866:	e002      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
      return;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HAL_UART_IRQHandler+0x51e>
      return;
 800586c:	bf00      	nop
  }
}
 800586e:	37e8      	adds	r7, #232	@ 0xe8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e03b      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d037      	beq.n	800593e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fc fd55 	bl	800237c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e03a      	b.n	800595e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d023      	beq.n	800593e <UART_WaitOnFlagUntilTimeout+0x8a>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b80      	cmp	r3, #128	@ 0x80
 80058fa:	d020      	beq.n	800593e <UART_WaitOnFlagUntilTimeout+0x8a>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b40      	cmp	r3, #64	@ 0x40
 8005900:	d01d      	beq.n	800593e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d116      	bne.n	800593e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f857 	bl	80059da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2208      	movs	r2, #8
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e00f      	b.n	800595e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	bf0c      	ite	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	2300      	movne	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	429a      	cmp	r2, r3
 800595a:	d0b4      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	4613      	mov	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2222      	movs	r2, #34	@ 0x22
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0220 	orr.w	r2, r2, #32
 80059ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059da:	b480      	push	{r7}
 80059dc:	b095      	sub	sp, #84	@ 0x54
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a02:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e5      	bne.n	80059e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3314      	adds	r3, #20
 8005a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e5      	bne.n	8005a16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d119      	bne.n	8005a86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a72:	61ba      	str	r2, [r7, #24]
 8005a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6979      	ldr	r1, [r7, #20]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a94:	bf00      	nop
 8005a96:	3754      	adds	r7, #84	@ 0x54
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff fee4 	bl	8005888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b21      	cmp	r3, #33	@ 0x21
 8005ada:	d13e      	bne.n	8005b5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae4:	d114      	bne.n	8005b10 <UART_Transmit_IT+0x48>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d110      	bne.n	8005b10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]
 8005b0e:	e008      	b.n	8005b22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6211      	str	r1, [r2, #32]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e000      	b.n	8005b5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff fe73 	bl	8005874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08c      	sub	sp, #48	@ 0x30
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b22      	cmp	r3, #34	@ 0x22
 8005baa:	f040 80ae 	bne.w	8005d0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb6:	d117      	bne.n	8005be8 <UART_Receive_IT+0x50>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d113      	bne.n	8005be8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be0:	1c9a      	adds	r2, r3, #2
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005be6:	e026      	b.n	8005c36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bfa:	d007      	beq.n	8005c0c <UART_Receive_IT+0x74>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <UART_Receive_IT+0x82>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e008      	b.n	8005c2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4619      	mov	r1, r3
 8005c44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d15d      	bne.n	8005d06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0220 	bic.w	r2, r2, #32
 8005c58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d135      	bne.n	8005cfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	623a      	str	r2, [r7, #32]
 8005cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	69f9      	ldr	r1, [r7, #28]
 8005cbc:	6a3a      	ldr	r2, [r7, #32]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d10a      	bne.n	8005cee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fdd1 	bl	800589c <HAL_UARTEx_RxEventCallback>
 8005cfa:	e002      	b.n	8005d02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fb fbfd 	bl	80014fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e002      	b.n	8005d0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e000      	b.n	8005d0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d0a:	2302      	movs	r3, #2
  }
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3730      	adds	r7, #48	@ 0x30
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d18:	b0c0      	sub	sp, #256	@ 0x100
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	68d9      	ldr	r1, [r3, #12]
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	ea40 0301 	orr.w	r3, r0, r1
 8005d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d6c:	f021 010c 	bic.w	r1, r1, #12
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	6999      	ldr	r1, [r3, #24]
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	ea40 0301 	orr.w	r3, r0, r1
 8005d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d005      	beq.n	8005db4 <UART_SetConfig+0xa0>
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe4 <UART_SetConfig+0x2d0>)
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d104      	bne.n	8005dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fe fc04 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8005db8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dbc:	e003      	b.n	8005dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe fbeb 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd0:	f040 810c 	bne.w	8005fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dee:	415b      	adcs	r3, r3
 8005df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005df6:	4621      	mov	r1, r4
 8005df8:	eb12 0801 	adds.w	r8, r2, r1
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	eb43 0901 	adc.w	r9, r3, r1
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e16:	4690      	mov	r8, r2
 8005e18:	4699      	mov	r9, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	eb18 0303 	adds.w	r3, r8, r3
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e24:	462b      	mov	r3, r5
 8005e26:	eb49 0303 	adc.w	r3, r9, r3
 8005e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e42:	460b      	mov	r3, r1
 8005e44:	18db      	adds	r3, r3, r3
 8005e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e48:	4613      	mov	r3, r2
 8005e4a:	eb42 0303 	adc.w	r3, r2, r3
 8005e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e58:	f7fa fa1a 	bl	8000290 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4b61      	ldr	r3, [pc, #388]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005e62:	fba3 2302 	umull	r2, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	011c      	lsls	r4, r3, #4
 8005e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	1891      	adds	r1, r2, r2
 8005e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e84:	415b      	adcs	r3, r3
 8005e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e92:	4649      	mov	r1, r9
 8005e94:	eb43 0b01 	adc.w	fp, r3, r1
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eac:	4692      	mov	sl, r2
 8005eae:	469b      	mov	fp, r3
 8005eb0:	4643      	mov	r3, r8
 8005eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8005eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	18db      	adds	r3, r3, r3
 8005edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ede:	4613      	mov	r3, r2
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005eee:	f7fa f9cf 	bl	8000290 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005efa:	fba3 2301 	umull	r2, r3, r3, r1
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2264      	movs	r2, #100	@ 0x64
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	1acb      	subs	r3, r1, r3
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f0e:	4b36      	ldr	r3, [pc, #216]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005f10:	fba3 2302 	umull	r2, r3, r3, r2
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f1c:	441c      	add	r4, r3
 8005f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f30:	4642      	mov	r2, r8
 8005f32:	464b      	mov	r3, r9
 8005f34:	1891      	adds	r1, r2, r2
 8005f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f38:	415b      	adcs	r3, r3
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f40:	4641      	mov	r1, r8
 8005f42:	1851      	adds	r1, r2, r1
 8005f44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f46:	4649      	mov	r1, r9
 8005f48:	414b      	adcs	r3, r1
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f58:	4659      	mov	r1, fp
 8005f5a:	00cb      	lsls	r3, r1, #3
 8005f5c:	4651      	mov	r1, sl
 8005f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f62:	4651      	mov	r1, sl
 8005f64:	00ca      	lsls	r2, r1, #3
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	189b      	adds	r3, r3, r2
 8005f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f74:	464b      	mov	r3, r9
 8005f76:	460a      	mov	r2, r1
 8005f78:	eb42 0303 	adc.w	r3, r2, r3
 8005f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f94:	460b      	mov	r3, r1
 8005f96:	18db      	adds	r3, r3, r3
 8005f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	eb42 0303 	adc.w	r3, r2, r3
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005faa:	f7fa f971 	bl	8000290 <__aeabi_uldivmod>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	2164      	movs	r1, #100	@ 0x64
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	3332      	adds	r3, #50	@ 0x32
 8005fc6:	4a08      	ldr	r2, [pc, #32]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	f003 0207 	and.w	r2, r3, #7
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4422      	add	r2, r4
 8005fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fdc:	e106      	b.n	80061ec <UART_SetConfig+0x4d8>
 8005fde:	bf00      	nop
 8005fe0:	40011000 	.word	0x40011000
 8005fe4:	40011400 	.word	0x40011400
 8005fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ffe:	4642      	mov	r2, r8
 8006000:	464b      	mov	r3, r9
 8006002:	1891      	adds	r1, r2, r2
 8006004:	6239      	str	r1, [r7, #32]
 8006006:	415b      	adcs	r3, r3
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
 800600a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800600e:	4641      	mov	r1, r8
 8006010:	1854      	adds	r4, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb43 0501 	adc.w	r5, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	00eb      	lsls	r3, r5, #3
 8006022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006026:	00e2      	lsls	r2, r4, #3
 8006028:	4614      	mov	r4, r2
 800602a:	461d      	mov	r5, r3
 800602c:	4643      	mov	r3, r8
 800602e:	18e3      	adds	r3, r4, r3
 8006030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006034:	464b      	mov	r3, r9
 8006036:	eb45 0303 	adc.w	r3, r5, r3
 800603a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800604a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800605a:	4629      	mov	r1, r5
 800605c:	008b      	lsls	r3, r1, #2
 800605e:	4621      	mov	r1, r4
 8006060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006064:	4621      	mov	r1, r4
 8006066:	008a      	lsls	r2, r1, #2
 8006068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800606c:	f7fa f910 	bl	8000290 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4b60      	ldr	r3, [pc, #384]	@ (80061f8 <UART_SetConfig+0x4e4>)
 8006076:	fba3 2302 	umull	r2, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	011c      	lsls	r4, r3, #4
 800607e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006082:	2200      	movs	r2, #0
 8006084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800608c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006090:	4642      	mov	r2, r8
 8006092:	464b      	mov	r3, r9
 8006094:	1891      	adds	r1, r2, r2
 8006096:	61b9      	str	r1, [r7, #24]
 8006098:	415b      	adcs	r3, r3
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a0:	4641      	mov	r1, r8
 80060a2:	1851      	adds	r1, r2, r1
 80060a4:	6139      	str	r1, [r7, #16]
 80060a6:	4649      	mov	r1, r9
 80060a8:	414b      	adcs	r3, r1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b8:	4659      	mov	r1, fp
 80060ba:	00cb      	lsls	r3, r1, #3
 80060bc:	4651      	mov	r1, sl
 80060be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c2:	4651      	mov	r1, sl
 80060c4:	00ca      	lsls	r2, r1, #3
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	4642      	mov	r2, r8
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060d4:	464b      	mov	r3, r9
 80060d6:	460a      	mov	r2, r1
 80060d8:	eb42 0303 	adc.w	r3, r2, r3
 80060dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060f8:	4649      	mov	r1, r9
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	4641      	mov	r1, r8
 80060fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006102:	4641      	mov	r1, r8
 8006104:	008a      	lsls	r2, r1, #2
 8006106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800610a:	f7fa f8c1 	bl	8000290 <__aeabi_uldivmod>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4611      	mov	r1, r2
 8006114:	4b38      	ldr	r3, [pc, #224]	@ (80061f8 <UART_SetConfig+0x4e4>)
 8006116:	fba3 2301 	umull	r2, r3, r3, r1
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	2264      	movs	r2, #100	@ 0x64
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	1acb      	subs	r3, r1, r3
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	3332      	adds	r3, #50	@ 0x32
 8006128:	4a33      	ldr	r2, [pc, #204]	@ (80061f8 <UART_SetConfig+0x4e4>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006134:	441c      	add	r4, r3
 8006136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613a:	2200      	movs	r2, #0
 800613c:	673b      	str	r3, [r7, #112]	@ 0x70
 800613e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006140:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	1891      	adds	r1, r2, r2
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	415b      	adcs	r3, r3
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006154:	4641      	mov	r1, r8
 8006156:	1851      	adds	r1, r2, r1
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	4649      	mov	r1, r9
 800615c:	414b      	adcs	r3, r1
 800615e:	607b      	str	r3, [r7, #4]
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800616c:	4659      	mov	r1, fp
 800616e:	00cb      	lsls	r3, r1, #3
 8006170:	4651      	mov	r1, sl
 8006172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006176:	4651      	mov	r1, sl
 8006178:	00ca      	lsls	r2, r1, #3
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	4603      	mov	r3, r0
 8006180:	4642      	mov	r2, r8
 8006182:	189b      	adds	r3, r3, r2
 8006184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006186:	464b      	mov	r3, r9
 8006188:	460a      	mov	r2, r1
 800618a:	eb42 0303 	adc.w	r3, r2, r3
 800618e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	663b      	str	r3, [r7, #96]	@ 0x60
 800619a:	667a      	str	r2, [r7, #100]	@ 0x64
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061a8:	4649      	mov	r1, r9
 80061aa:	008b      	lsls	r3, r1, #2
 80061ac:	4641      	mov	r1, r8
 80061ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b2:	4641      	mov	r1, r8
 80061b4:	008a      	lsls	r2, r1, #2
 80061b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061ba:	f7fa f869 	bl	8000290 <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4b0d      	ldr	r3, [pc, #52]	@ (80061f8 <UART_SetConfig+0x4e4>)
 80061c4:	fba3 1302 	umull	r1, r3, r3, r2
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	2164      	movs	r1, #100	@ 0x64
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	3332      	adds	r3, #50	@ 0x32
 80061d6:	4a08      	ldr	r2, [pc, #32]	@ (80061f8 <UART_SetConfig+0x4e4>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4422      	add	r2, r4
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061f2:	46bd      	mov	sp, r7
 80061f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f8:	51eb851f 	.word	0x51eb851f

080061fc <_strtol_l.isra.0>:
 80061fc:	2b24      	cmp	r3, #36	@ 0x24
 80061fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006202:	4686      	mov	lr, r0
 8006204:	4690      	mov	r8, r2
 8006206:	d801      	bhi.n	800620c <_strtol_l.isra.0+0x10>
 8006208:	2b01      	cmp	r3, #1
 800620a:	d106      	bne.n	800621a <_strtol_l.isra.0+0x1e>
 800620c:	f000 f8a4 	bl	8006358 <__errno>
 8006210:	2316      	movs	r3, #22
 8006212:	6003      	str	r3, [r0, #0]
 8006214:	2000      	movs	r0, #0
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	4834      	ldr	r0, [pc, #208]	@ (80062ec <_strtol_l.isra.0+0xf0>)
 800621c:	460d      	mov	r5, r1
 800621e:	462a      	mov	r2, r5
 8006220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006224:	5d06      	ldrb	r6, [r0, r4]
 8006226:	f016 0608 	ands.w	r6, r6, #8
 800622a:	d1f8      	bne.n	800621e <_strtol_l.isra.0+0x22>
 800622c:	2c2d      	cmp	r4, #45	@ 0x2d
 800622e:	d110      	bne.n	8006252 <_strtol_l.isra.0+0x56>
 8006230:	782c      	ldrb	r4, [r5, #0]
 8006232:	2601      	movs	r6, #1
 8006234:	1c95      	adds	r5, r2, #2
 8006236:	f033 0210 	bics.w	r2, r3, #16
 800623a:	d115      	bne.n	8006268 <_strtol_l.isra.0+0x6c>
 800623c:	2c30      	cmp	r4, #48	@ 0x30
 800623e:	d10d      	bne.n	800625c <_strtol_l.isra.0+0x60>
 8006240:	782a      	ldrb	r2, [r5, #0]
 8006242:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006246:	2a58      	cmp	r2, #88	@ 0x58
 8006248:	d108      	bne.n	800625c <_strtol_l.isra.0+0x60>
 800624a:	786c      	ldrb	r4, [r5, #1]
 800624c:	3502      	adds	r5, #2
 800624e:	2310      	movs	r3, #16
 8006250:	e00a      	b.n	8006268 <_strtol_l.isra.0+0x6c>
 8006252:	2c2b      	cmp	r4, #43	@ 0x2b
 8006254:	bf04      	itt	eq
 8006256:	782c      	ldrbeq	r4, [r5, #0]
 8006258:	1c95      	addeq	r5, r2, #2
 800625a:	e7ec      	b.n	8006236 <_strtol_l.isra.0+0x3a>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f6      	bne.n	800624e <_strtol_l.isra.0+0x52>
 8006260:	2c30      	cmp	r4, #48	@ 0x30
 8006262:	bf14      	ite	ne
 8006264:	230a      	movne	r3, #10
 8006266:	2308      	moveq	r3, #8
 8006268:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800626c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006270:	2200      	movs	r2, #0
 8006272:	fbbc f9f3 	udiv	r9, ip, r3
 8006276:	4610      	mov	r0, r2
 8006278:	fb03 ca19 	mls	sl, r3, r9, ip
 800627c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006280:	2f09      	cmp	r7, #9
 8006282:	d80f      	bhi.n	80062a4 <_strtol_l.isra.0+0xa8>
 8006284:	463c      	mov	r4, r7
 8006286:	42a3      	cmp	r3, r4
 8006288:	dd1b      	ble.n	80062c2 <_strtol_l.isra.0+0xc6>
 800628a:	1c57      	adds	r7, r2, #1
 800628c:	d007      	beq.n	800629e <_strtol_l.isra.0+0xa2>
 800628e:	4581      	cmp	r9, r0
 8006290:	d314      	bcc.n	80062bc <_strtol_l.isra.0+0xc0>
 8006292:	d101      	bne.n	8006298 <_strtol_l.isra.0+0x9c>
 8006294:	45a2      	cmp	sl, r4
 8006296:	db11      	blt.n	80062bc <_strtol_l.isra.0+0xc0>
 8006298:	fb00 4003 	mla	r0, r0, r3, r4
 800629c:	2201      	movs	r2, #1
 800629e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062a2:	e7eb      	b.n	800627c <_strtol_l.isra.0+0x80>
 80062a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80062a8:	2f19      	cmp	r7, #25
 80062aa:	d801      	bhi.n	80062b0 <_strtol_l.isra.0+0xb4>
 80062ac:	3c37      	subs	r4, #55	@ 0x37
 80062ae:	e7ea      	b.n	8006286 <_strtol_l.isra.0+0x8a>
 80062b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80062b4:	2f19      	cmp	r7, #25
 80062b6:	d804      	bhi.n	80062c2 <_strtol_l.isra.0+0xc6>
 80062b8:	3c57      	subs	r4, #87	@ 0x57
 80062ba:	e7e4      	b.n	8006286 <_strtol_l.isra.0+0x8a>
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	e7ed      	b.n	800629e <_strtol_l.isra.0+0xa2>
 80062c2:	1c53      	adds	r3, r2, #1
 80062c4:	d108      	bne.n	80062d8 <_strtol_l.isra.0+0xdc>
 80062c6:	2322      	movs	r3, #34	@ 0x22
 80062c8:	f8ce 3000 	str.w	r3, [lr]
 80062cc:	4660      	mov	r0, ip
 80062ce:	f1b8 0f00 	cmp.w	r8, #0
 80062d2:	d0a0      	beq.n	8006216 <_strtol_l.isra.0+0x1a>
 80062d4:	1e69      	subs	r1, r5, #1
 80062d6:	e006      	b.n	80062e6 <_strtol_l.isra.0+0xea>
 80062d8:	b106      	cbz	r6, 80062dc <_strtol_l.isra.0+0xe0>
 80062da:	4240      	negs	r0, r0
 80062dc:	f1b8 0f00 	cmp.w	r8, #0
 80062e0:	d099      	beq.n	8006216 <_strtol_l.isra.0+0x1a>
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	d1f6      	bne.n	80062d4 <_strtol_l.isra.0+0xd8>
 80062e6:	f8c8 1000 	str.w	r1, [r8]
 80062ea:	e794      	b.n	8006216 <_strtol_l.isra.0+0x1a>
 80062ec:	08006df1 	.word	0x08006df1

080062f0 <strtol>:
 80062f0:	4613      	mov	r3, r2
 80062f2:	460a      	mov	r2, r1
 80062f4:	4601      	mov	r1, r0
 80062f6:	4802      	ldr	r0, [pc, #8]	@ (8006300 <strtol+0x10>)
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f7ff bf7f 	b.w	80061fc <_strtol_l.isra.0>
 80062fe:	bf00      	nop
 8006300:	2000002c 	.word	0x2000002c

08006304 <siprintf>:
 8006304:	b40e      	push	{r1, r2, r3}
 8006306:	b510      	push	{r4, lr}
 8006308:	b09d      	sub	sp, #116	@ 0x74
 800630a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800630c:	9002      	str	r0, [sp, #8]
 800630e:	9006      	str	r0, [sp, #24]
 8006310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006314:	480a      	ldr	r0, [pc, #40]	@ (8006340 <siprintf+0x3c>)
 8006316:	9107      	str	r1, [sp, #28]
 8006318:	9104      	str	r1, [sp, #16]
 800631a:	490a      	ldr	r1, [pc, #40]	@ (8006344 <siprintf+0x40>)
 800631c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006320:	9105      	str	r1, [sp, #20]
 8006322:	2400      	movs	r4, #0
 8006324:	a902      	add	r1, sp, #8
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800632c:	f000 f9a2 	bl	8006674 <_svfiprintf_r>
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	701c      	strb	r4, [r3, #0]
 8006334:	b01d      	add	sp, #116	@ 0x74
 8006336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633a:	b003      	add	sp, #12
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	2000002c 	.word	0x2000002c
 8006344:	ffff0208 	.word	0xffff0208

08006348 <memset>:
 8006348:	4402      	add	r2, r0
 800634a:	4603      	mov	r3, r0
 800634c:	4293      	cmp	r3, r2
 800634e:	d100      	bne.n	8006352 <memset+0xa>
 8006350:	4770      	bx	lr
 8006352:	f803 1b01 	strb.w	r1, [r3], #1
 8006356:	e7f9      	b.n	800634c <memset+0x4>

08006358 <__errno>:
 8006358:	4b01      	ldr	r3, [pc, #4]	@ (8006360 <__errno+0x8>)
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	2000002c 	.word	0x2000002c

08006364 <__libc_init_array>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	4d0d      	ldr	r5, [pc, #52]	@ (800639c <__libc_init_array+0x38>)
 8006368:	4c0d      	ldr	r4, [pc, #52]	@ (80063a0 <__libc_init_array+0x3c>)
 800636a:	1b64      	subs	r4, r4, r5
 800636c:	10a4      	asrs	r4, r4, #2
 800636e:	2600      	movs	r6, #0
 8006370:	42a6      	cmp	r6, r4
 8006372:	d109      	bne.n	8006388 <__libc_init_array+0x24>
 8006374:	4d0b      	ldr	r5, [pc, #44]	@ (80063a4 <__libc_init_array+0x40>)
 8006376:	4c0c      	ldr	r4, [pc, #48]	@ (80063a8 <__libc_init_array+0x44>)
 8006378:	f000 fc64 	bl	8006c44 <_init>
 800637c:	1b64      	subs	r4, r4, r5
 800637e:	10a4      	asrs	r4, r4, #2
 8006380:	2600      	movs	r6, #0
 8006382:	42a6      	cmp	r6, r4
 8006384:	d105      	bne.n	8006392 <__libc_init_array+0x2e>
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	f855 3b04 	ldr.w	r3, [r5], #4
 800638c:	4798      	blx	r3
 800638e:	3601      	adds	r6, #1
 8006390:	e7ee      	b.n	8006370 <__libc_init_array+0xc>
 8006392:	f855 3b04 	ldr.w	r3, [r5], #4
 8006396:	4798      	blx	r3
 8006398:	3601      	adds	r6, #1
 800639a:	e7f2      	b.n	8006382 <__libc_init_array+0x1e>
 800639c:	08006f2c 	.word	0x08006f2c
 80063a0:	08006f2c 	.word	0x08006f2c
 80063a4:	08006f2c 	.word	0x08006f2c
 80063a8:	08006f30 	.word	0x08006f30

080063ac <__retarget_lock_acquire_recursive>:
 80063ac:	4770      	bx	lr

080063ae <__retarget_lock_release_recursive>:
 80063ae:	4770      	bx	lr

080063b0 <memcpy>:
 80063b0:	440a      	add	r2, r1
 80063b2:	4291      	cmp	r1, r2
 80063b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b8:	d100      	bne.n	80063bc <memcpy+0xc>
 80063ba:	4770      	bx	lr
 80063bc:	b510      	push	{r4, lr}
 80063be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c6:	4291      	cmp	r1, r2
 80063c8:	d1f9      	bne.n	80063be <memcpy+0xe>
 80063ca:	bd10      	pop	{r4, pc}

080063cc <_free_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4605      	mov	r5, r0
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d041      	beq.n	8006458 <_free_r+0x8c>
 80063d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d8:	1f0c      	subs	r4, r1, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	18e4      	addlt	r4, r4, r3
 80063e0:	f000 f8e0 	bl	80065a4 <__malloc_lock>
 80063e4:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <_free_r+0x90>)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	b933      	cbnz	r3, 80063f8 <_free_r+0x2c>
 80063ea:	6063      	str	r3, [r4, #4]
 80063ec:	6014      	str	r4, [r2, #0]
 80063ee:	4628      	mov	r0, r5
 80063f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f4:	f000 b8dc 	b.w	80065b0 <__malloc_unlock>
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	d908      	bls.n	800640e <_free_r+0x42>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	1821      	adds	r1, r4, r0
 8006400:	428b      	cmp	r3, r1
 8006402:	bf01      	itttt	eq
 8006404:	6819      	ldreq	r1, [r3, #0]
 8006406:	685b      	ldreq	r3, [r3, #4]
 8006408:	1809      	addeq	r1, r1, r0
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	e7ed      	b.n	80063ea <_free_r+0x1e>
 800640e:	461a      	mov	r2, r3
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b10b      	cbz	r3, 8006418 <_free_r+0x4c>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d9fa      	bls.n	800640e <_free_r+0x42>
 8006418:	6811      	ldr	r1, [r2, #0]
 800641a:	1850      	adds	r0, r2, r1
 800641c:	42a0      	cmp	r0, r4
 800641e:	d10b      	bne.n	8006438 <_free_r+0x6c>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	4401      	add	r1, r0
 8006424:	1850      	adds	r0, r2, r1
 8006426:	4283      	cmp	r3, r0
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	d1e0      	bne.n	80063ee <_free_r+0x22>
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	4408      	add	r0, r1
 8006434:	6010      	str	r0, [r2, #0]
 8006436:	e7da      	b.n	80063ee <_free_r+0x22>
 8006438:	d902      	bls.n	8006440 <_free_r+0x74>
 800643a:	230c      	movs	r3, #12
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	e7d6      	b.n	80063ee <_free_r+0x22>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	1821      	adds	r1, r4, r0
 8006444:	428b      	cmp	r3, r1
 8006446:	bf04      	itt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	bf04      	itt	eq
 8006450:	1809      	addeq	r1, r1, r0
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	6054      	str	r4, [r2, #4]
 8006456:	e7ca      	b.n	80063ee <_free_r+0x22>
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	2000056c 	.word	0x2000056c

08006460 <sbrk_aligned>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4e0f      	ldr	r6, [pc, #60]	@ (80064a0 <sbrk_aligned+0x40>)
 8006464:	460c      	mov	r4, r1
 8006466:	6831      	ldr	r1, [r6, #0]
 8006468:	4605      	mov	r5, r0
 800646a:	b911      	cbnz	r1, 8006472 <sbrk_aligned+0x12>
 800646c:	f000 fba4 	bl	8006bb8 <_sbrk_r>
 8006470:	6030      	str	r0, [r6, #0]
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	f000 fb9f 	bl	8006bb8 <_sbrk_r>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d103      	bne.n	8006486 <sbrk_aligned+0x26>
 800647e:	f04f 34ff 	mov.w	r4, #4294967295
 8006482:	4620      	mov	r0, r4
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	1cc4      	adds	r4, r0, #3
 8006488:	f024 0403 	bic.w	r4, r4, #3
 800648c:	42a0      	cmp	r0, r4
 800648e:	d0f8      	beq.n	8006482 <sbrk_aligned+0x22>
 8006490:	1a21      	subs	r1, r4, r0
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fb90 	bl	8006bb8 <_sbrk_r>
 8006498:	3001      	adds	r0, #1
 800649a:	d1f2      	bne.n	8006482 <sbrk_aligned+0x22>
 800649c:	e7ef      	b.n	800647e <sbrk_aligned+0x1e>
 800649e:	bf00      	nop
 80064a0:	20000568 	.word	0x20000568

080064a4 <_malloc_r>:
 80064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a8:	1ccd      	adds	r5, r1, #3
 80064aa:	f025 0503 	bic.w	r5, r5, #3
 80064ae:	3508      	adds	r5, #8
 80064b0:	2d0c      	cmp	r5, #12
 80064b2:	bf38      	it	cc
 80064b4:	250c      	movcc	r5, #12
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	4606      	mov	r6, r0
 80064ba:	db01      	blt.n	80064c0 <_malloc_r+0x1c>
 80064bc:	42a9      	cmp	r1, r5
 80064be:	d904      	bls.n	80064ca <_malloc_r+0x26>
 80064c0:	230c      	movs	r3, #12
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	2000      	movs	r0, #0
 80064c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065a0 <_malloc_r+0xfc>
 80064ce:	f000 f869 	bl	80065a4 <__malloc_lock>
 80064d2:	f8d8 3000 	ldr.w	r3, [r8]
 80064d6:	461c      	mov	r4, r3
 80064d8:	bb44      	cbnz	r4, 800652c <_malloc_r+0x88>
 80064da:	4629      	mov	r1, r5
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff ffbf 	bl	8006460 <sbrk_aligned>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	4604      	mov	r4, r0
 80064e6:	d158      	bne.n	800659a <_malloc_r+0xf6>
 80064e8:	f8d8 4000 	ldr.w	r4, [r8]
 80064ec:	4627      	mov	r7, r4
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	d143      	bne.n	800657a <_malloc_r+0xd6>
 80064f2:	2c00      	cmp	r4, #0
 80064f4:	d04b      	beq.n	800658e <_malloc_r+0xea>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	4639      	mov	r1, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	eb04 0903 	add.w	r9, r4, r3
 8006500:	f000 fb5a 	bl	8006bb8 <_sbrk_r>
 8006504:	4581      	cmp	r9, r0
 8006506:	d142      	bne.n	800658e <_malloc_r+0xea>
 8006508:	6821      	ldr	r1, [r4, #0]
 800650a:	1a6d      	subs	r5, r5, r1
 800650c:	4629      	mov	r1, r5
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ffa6 	bl	8006460 <sbrk_aligned>
 8006514:	3001      	adds	r0, #1
 8006516:	d03a      	beq.n	800658e <_malloc_r+0xea>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	442b      	add	r3, r5
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	f8d8 3000 	ldr.w	r3, [r8]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	bb62      	cbnz	r2, 8006580 <_malloc_r+0xdc>
 8006526:	f8c8 7000 	str.w	r7, [r8]
 800652a:	e00f      	b.n	800654c <_malloc_r+0xa8>
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	1b52      	subs	r2, r2, r5
 8006530:	d420      	bmi.n	8006574 <_malloc_r+0xd0>
 8006532:	2a0b      	cmp	r2, #11
 8006534:	d917      	bls.n	8006566 <_malloc_r+0xc2>
 8006536:	1961      	adds	r1, r4, r5
 8006538:	42a3      	cmp	r3, r4
 800653a:	6025      	str	r5, [r4, #0]
 800653c:	bf18      	it	ne
 800653e:	6059      	strne	r1, [r3, #4]
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	bf08      	it	eq
 8006544:	f8c8 1000 	streq.w	r1, [r8]
 8006548:	5162      	str	r2, [r4, r5]
 800654a:	604b      	str	r3, [r1, #4]
 800654c:	4630      	mov	r0, r6
 800654e:	f000 f82f 	bl	80065b0 <__malloc_unlock>
 8006552:	f104 000b 	add.w	r0, r4, #11
 8006556:	1d23      	adds	r3, r4, #4
 8006558:	f020 0007 	bic.w	r0, r0, #7
 800655c:	1ac2      	subs	r2, r0, r3
 800655e:	bf1c      	itt	ne
 8006560:	1a1b      	subne	r3, r3, r0
 8006562:	50a3      	strne	r3, [r4, r2]
 8006564:	e7af      	b.n	80064c6 <_malloc_r+0x22>
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	42a3      	cmp	r3, r4
 800656a:	bf0c      	ite	eq
 800656c:	f8c8 2000 	streq.w	r2, [r8]
 8006570:	605a      	strne	r2, [r3, #4]
 8006572:	e7eb      	b.n	800654c <_malloc_r+0xa8>
 8006574:	4623      	mov	r3, r4
 8006576:	6864      	ldr	r4, [r4, #4]
 8006578:	e7ae      	b.n	80064d8 <_malloc_r+0x34>
 800657a:	463c      	mov	r4, r7
 800657c:	687f      	ldr	r7, [r7, #4]
 800657e:	e7b6      	b.n	80064ee <_malloc_r+0x4a>
 8006580:	461a      	mov	r2, r3
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	42a3      	cmp	r3, r4
 8006586:	d1fb      	bne.n	8006580 <_malloc_r+0xdc>
 8006588:	2300      	movs	r3, #0
 800658a:	6053      	str	r3, [r2, #4]
 800658c:	e7de      	b.n	800654c <_malloc_r+0xa8>
 800658e:	230c      	movs	r3, #12
 8006590:	6033      	str	r3, [r6, #0]
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f80c 	bl	80065b0 <__malloc_unlock>
 8006598:	e794      	b.n	80064c4 <_malloc_r+0x20>
 800659a:	6005      	str	r5, [r0, #0]
 800659c:	e7d6      	b.n	800654c <_malloc_r+0xa8>
 800659e:	bf00      	nop
 80065a0:	2000056c 	.word	0x2000056c

080065a4 <__malloc_lock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	@ (80065ac <__malloc_lock+0x8>)
 80065a6:	f7ff bf01 	b.w	80063ac <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000564 	.word	0x20000564

080065b0 <__malloc_unlock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__malloc_unlock+0x8>)
 80065b2:	f7ff befc 	b.w	80063ae <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000564 	.word	0x20000564

080065bc <__ssputs_r>:
 80065bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c0:	688e      	ldr	r6, [r1, #8]
 80065c2:	461f      	mov	r7, r3
 80065c4:	42be      	cmp	r6, r7
 80065c6:	680b      	ldr	r3, [r1, #0]
 80065c8:	4682      	mov	sl, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4690      	mov	r8, r2
 80065ce:	d82d      	bhi.n	800662c <__ssputs_r+0x70>
 80065d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065d8:	d026      	beq.n	8006628 <__ssputs_r+0x6c>
 80065da:	6965      	ldr	r5, [r4, #20]
 80065dc:	6909      	ldr	r1, [r1, #16]
 80065de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065e2:	eba3 0901 	sub.w	r9, r3, r1
 80065e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065ea:	1c7b      	adds	r3, r7, #1
 80065ec:	444b      	add	r3, r9
 80065ee:	106d      	asrs	r5, r5, #1
 80065f0:	429d      	cmp	r5, r3
 80065f2:	bf38      	it	cc
 80065f4:	461d      	movcc	r5, r3
 80065f6:	0553      	lsls	r3, r2, #21
 80065f8:	d527      	bpl.n	800664a <__ssputs_r+0x8e>
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7ff ff52 	bl	80064a4 <_malloc_r>
 8006600:	4606      	mov	r6, r0
 8006602:	b360      	cbz	r0, 800665e <__ssputs_r+0xa2>
 8006604:	6921      	ldr	r1, [r4, #16]
 8006606:	464a      	mov	r2, r9
 8006608:	f7ff fed2 	bl	80063b0 <memcpy>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	6126      	str	r6, [r4, #16]
 800661a:	6165      	str	r5, [r4, #20]
 800661c:	444e      	add	r6, r9
 800661e:	eba5 0509 	sub.w	r5, r5, r9
 8006622:	6026      	str	r6, [r4, #0]
 8006624:	60a5      	str	r5, [r4, #8]
 8006626:	463e      	mov	r6, r7
 8006628:	42be      	cmp	r6, r7
 800662a:	d900      	bls.n	800662e <__ssputs_r+0x72>
 800662c:	463e      	mov	r6, r7
 800662e:	6820      	ldr	r0, [r4, #0]
 8006630:	4632      	mov	r2, r6
 8006632:	4641      	mov	r1, r8
 8006634:	f000 faa6 	bl	8006b84 <memmove>
 8006638:	68a3      	ldr	r3, [r4, #8]
 800663a:	1b9b      	subs	r3, r3, r6
 800663c:	60a3      	str	r3, [r4, #8]
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	4433      	add	r3, r6
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	2000      	movs	r0, #0
 8006646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664a:	462a      	mov	r2, r5
 800664c:	f000 fac4 	bl	8006bd8 <_realloc_r>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	d1e0      	bne.n	8006618 <__ssputs_r+0x5c>
 8006656:	6921      	ldr	r1, [r4, #16]
 8006658:	4650      	mov	r0, sl
 800665a:	f7ff feb7 	bl	80063cc <_free_r>
 800665e:	230c      	movs	r3, #12
 8006660:	f8ca 3000 	str.w	r3, [sl]
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	e7e9      	b.n	8006646 <__ssputs_r+0x8a>
	...

08006674 <_svfiprintf_r>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4698      	mov	r8, r3
 800667a:	898b      	ldrh	r3, [r1, #12]
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	b09d      	sub	sp, #116	@ 0x74
 8006680:	4607      	mov	r7, r0
 8006682:	460d      	mov	r5, r1
 8006684:	4614      	mov	r4, r2
 8006686:	d510      	bpl.n	80066aa <_svfiprintf_r+0x36>
 8006688:	690b      	ldr	r3, [r1, #16]
 800668a:	b973      	cbnz	r3, 80066aa <_svfiprintf_r+0x36>
 800668c:	2140      	movs	r1, #64	@ 0x40
 800668e:	f7ff ff09 	bl	80064a4 <_malloc_r>
 8006692:	6028      	str	r0, [r5, #0]
 8006694:	6128      	str	r0, [r5, #16]
 8006696:	b930      	cbnz	r0, 80066a6 <_svfiprintf_r+0x32>
 8006698:	230c      	movs	r3, #12
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	b01d      	add	sp, #116	@ 0x74
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a6:	2340      	movs	r3, #64	@ 0x40
 80066a8:	616b      	str	r3, [r5, #20]
 80066aa:	2300      	movs	r3, #0
 80066ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ae:	2320      	movs	r3, #32
 80066b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b8:	2330      	movs	r3, #48	@ 0x30
 80066ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006858 <_svfiprintf_r+0x1e4>
 80066be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066c2:	f04f 0901 	mov.w	r9, #1
 80066c6:	4623      	mov	r3, r4
 80066c8:	469a      	mov	sl, r3
 80066ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ce:	b10a      	cbz	r2, 80066d4 <_svfiprintf_r+0x60>
 80066d0:	2a25      	cmp	r2, #37	@ 0x25
 80066d2:	d1f9      	bne.n	80066c8 <_svfiprintf_r+0x54>
 80066d4:	ebba 0b04 	subs.w	fp, sl, r4
 80066d8:	d00b      	beq.n	80066f2 <_svfiprintf_r+0x7e>
 80066da:	465b      	mov	r3, fp
 80066dc:	4622      	mov	r2, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7ff ff6b 	bl	80065bc <__ssputs_r>
 80066e6:	3001      	adds	r0, #1
 80066e8:	f000 80a7 	beq.w	800683a <_svfiprintf_r+0x1c6>
 80066ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066ee:	445a      	add	r2, fp
 80066f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80066f2:	f89a 3000 	ldrb.w	r3, [sl]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 809f 	beq.w	800683a <_svfiprintf_r+0x1c6>
 80066fc:	2300      	movs	r3, #0
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006706:	f10a 0a01 	add.w	sl, sl, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006712:	931a      	str	r3, [sp, #104]	@ 0x68
 8006714:	4654      	mov	r4, sl
 8006716:	2205      	movs	r2, #5
 8006718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671c:	484e      	ldr	r0, [pc, #312]	@ (8006858 <_svfiprintf_r+0x1e4>)
 800671e:	f7f9 fd67 	bl	80001f0 <memchr>
 8006722:	9a04      	ldr	r2, [sp, #16]
 8006724:	b9d8      	cbnz	r0, 800675e <_svfiprintf_r+0xea>
 8006726:	06d0      	lsls	r0, r2, #27
 8006728:	bf44      	itt	mi
 800672a:	2320      	movmi	r3, #32
 800672c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006730:	0711      	lsls	r1, r2, #28
 8006732:	bf44      	itt	mi
 8006734:	232b      	movmi	r3, #43	@ 0x2b
 8006736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800673a:	f89a 3000 	ldrb.w	r3, [sl]
 800673e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006740:	d015      	beq.n	800676e <_svfiprintf_r+0xfa>
 8006742:	9a07      	ldr	r2, [sp, #28]
 8006744:	4654      	mov	r4, sl
 8006746:	2000      	movs	r0, #0
 8006748:	f04f 0c0a 	mov.w	ip, #10
 800674c:	4621      	mov	r1, r4
 800674e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006752:	3b30      	subs	r3, #48	@ 0x30
 8006754:	2b09      	cmp	r3, #9
 8006756:	d94b      	bls.n	80067f0 <_svfiprintf_r+0x17c>
 8006758:	b1b0      	cbz	r0, 8006788 <_svfiprintf_r+0x114>
 800675a:	9207      	str	r2, [sp, #28]
 800675c:	e014      	b.n	8006788 <_svfiprintf_r+0x114>
 800675e:	eba0 0308 	sub.w	r3, r0, r8
 8006762:	fa09 f303 	lsl.w	r3, r9, r3
 8006766:	4313      	orrs	r3, r2
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	46a2      	mov	sl, r4
 800676c:	e7d2      	b.n	8006714 <_svfiprintf_r+0xa0>
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	1d19      	adds	r1, r3, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	9103      	str	r1, [sp, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	bfbb      	ittet	lt
 800677a:	425b      	neglt	r3, r3
 800677c:	f042 0202 	orrlt.w	r2, r2, #2
 8006780:	9307      	strge	r3, [sp, #28]
 8006782:	9307      	strlt	r3, [sp, #28]
 8006784:	bfb8      	it	lt
 8006786:	9204      	strlt	r2, [sp, #16]
 8006788:	7823      	ldrb	r3, [r4, #0]
 800678a:	2b2e      	cmp	r3, #46	@ 0x2e
 800678c:	d10a      	bne.n	80067a4 <_svfiprintf_r+0x130>
 800678e:	7863      	ldrb	r3, [r4, #1]
 8006790:	2b2a      	cmp	r3, #42	@ 0x2a
 8006792:	d132      	bne.n	80067fa <_svfiprintf_r+0x186>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1d1a      	adds	r2, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	9203      	str	r2, [sp, #12]
 800679c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067a0:	3402      	adds	r4, #2
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006868 <_svfiprintf_r+0x1f4>
 80067a8:	7821      	ldrb	r1, [r4, #0]
 80067aa:	2203      	movs	r2, #3
 80067ac:	4650      	mov	r0, sl
 80067ae:	f7f9 fd1f 	bl	80001f0 <memchr>
 80067b2:	b138      	cbz	r0, 80067c4 <_svfiprintf_r+0x150>
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	eba0 000a 	sub.w	r0, r0, sl
 80067ba:	2240      	movs	r2, #64	@ 0x40
 80067bc:	4082      	lsls	r2, r0
 80067be:	4313      	orrs	r3, r2
 80067c0:	3401      	adds	r4, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	4824      	ldr	r0, [pc, #144]	@ (800685c <_svfiprintf_r+0x1e8>)
 80067ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067ce:	2206      	movs	r2, #6
 80067d0:	f7f9 fd0e 	bl	80001f0 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d036      	beq.n	8006846 <_svfiprintf_r+0x1d2>
 80067d8:	4b21      	ldr	r3, [pc, #132]	@ (8006860 <_svfiprintf_r+0x1ec>)
 80067da:	bb1b      	cbnz	r3, 8006824 <_svfiprintf_r+0x1b0>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3307      	adds	r3, #7
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	4433      	add	r3, r6
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	e76a      	b.n	80066c6 <_svfiprintf_r+0x52>
 80067f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f4:	460c      	mov	r4, r1
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7a8      	b.n	800674c <_svfiprintf_r+0xd8>
 80067fa:	2300      	movs	r3, #0
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4619      	mov	r1, r3
 8006802:	f04f 0c0a 	mov.w	ip, #10
 8006806:	4620      	mov	r0, r4
 8006808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680c:	3a30      	subs	r2, #48	@ 0x30
 800680e:	2a09      	cmp	r2, #9
 8006810:	d903      	bls.n	800681a <_svfiprintf_r+0x1a6>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0c6      	beq.n	80067a4 <_svfiprintf_r+0x130>
 8006816:	9105      	str	r1, [sp, #20]
 8006818:	e7c4      	b.n	80067a4 <_svfiprintf_r+0x130>
 800681a:	fb0c 2101 	mla	r1, ip, r1, r2
 800681e:	4604      	mov	r4, r0
 8006820:	2301      	movs	r3, #1
 8006822:	e7f0      	b.n	8006806 <_svfiprintf_r+0x192>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	462a      	mov	r2, r5
 800682a:	4b0e      	ldr	r3, [pc, #56]	@ (8006864 <_svfiprintf_r+0x1f0>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4638      	mov	r0, r7
 8006830:	f3af 8000 	nop.w
 8006834:	1c42      	adds	r2, r0, #1
 8006836:	4606      	mov	r6, r0
 8006838:	d1d6      	bne.n	80067e8 <_svfiprintf_r+0x174>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	065b      	lsls	r3, r3, #25
 800683e:	f53f af2d 	bmi.w	800669c <_svfiprintf_r+0x28>
 8006842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006844:	e72c      	b.n	80066a0 <_svfiprintf_r+0x2c>
 8006846:	ab03      	add	r3, sp, #12
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	462a      	mov	r2, r5
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <_svfiprintf_r+0x1f0>)
 800684e:	a904      	add	r1, sp, #16
 8006850:	4638      	mov	r0, r7
 8006852:	f000 f879 	bl	8006948 <_printf_i>
 8006856:	e7ed      	b.n	8006834 <_svfiprintf_r+0x1c0>
 8006858:	08006ef1 	.word	0x08006ef1
 800685c:	08006efb 	.word	0x08006efb
 8006860:	00000000 	.word	0x00000000
 8006864:	080065bd 	.word	0x080065bd
 8006868:	08006ef7 	.word	0x08006ef7

0800686c <_printf_common>:
 800686c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	4616      	mov	r6, r2
 8006872:	4698      	mov	r8, r3
 8006874:	688a      	ldr	r2, [r1, #8]
 8006876:	690b      	ldr	r3, [r1, #16]
 8006878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800687c:	4293      	cmp	r3, r2
 800687e:	bfb8      	it	lt
 8006880:	4613      	movlt	r3, r2
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006888:	4607      	mov	r7, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b10a      	cbz	r2, 8006892 <_printf_common+0x26>
 800688e:	3301      	adds	r3, #1
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	0699      	lsls	r1, r3, #26
 8006896:	bf42      	ittt	mi
 8006898:	6833      	ldrmi	r3, [r6, #0]
 800689a:	3302      	addmi	r3, #2
 800689c:	6033      	strmi	r3, [r6, #0]
 800689e:	6825      	ldr	r5, [r4, #0]
 80068a0:	f015 0506 	ands.w	r5, r5, #6
 80068a4:	d106      	bne.n	80068b4 <_printf_common+0x48>
 80068a6:	f104 0a19 	add.w	sl, r4, #25
 80068aa:	68e3      	ldr	r3, [r4, #12]
 80068ac:	6832      	ldr	r2, [r6, #0]
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	dc26      	bgt.n	8006902 <_printf_common+0x96>
 80068b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068b8:	6822      	ldr	r2, [r4, #0]
 80068ba:	3b00      	subs	r3, #0
 80068bc:	bf18      	it	ne
 80068be:	2301      	movne	r3, #1
 80068c0:	0692      	lsls	r2, r2, #26
 80068c2:	d42b      	bmi.n	800691c <_printf_common+0xb0>
 80068c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068c8:	4641      	mov	r1, r8
 80068ca:	4638      	mov	r0, r7
 80068cc:	47c8      	blx	r9
 80068ce:	3001      	adds	r0, #1
 80068d0:	d01e      	beq.n	8006910 <_printf_common+0xa4>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	f003 0306 	and.w	r3, r3, #6
 80068da:	2b04      	cmp	r3, #4
 80068dc:	bf02      	ittt	eq
 80068de:	68e5      	ldreq	r5, [r4, #12]
 80068e0:	6833      	ldreq	r3, [r6, #0]
 80068e2:	1aed      	subeq	r5, r5, r3
 80068e4:	68a3      	ldr	r3, [r4, #8]
 80068e6:	bf0c      	ite	eq
 80068e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068ec:	2500      	movne	r5, #0
 80068ee:	4293      	cmp	r3, r2
 80068f0:	bfc4      	itt	gt
 80068f2:	1a9b      	subgt	r3, r3, r2
 80068f4:	18ed      	addgt	r5, r5, r3
 80068f6:	2600      	movs	r6, #0
 80068f8:	341a      	adds	r4, #26
 80068fa:	42b5      	cmp	r5, r6
 80068fc:	d11a      	bne.n	8006934 <_printf_common+0xc8>
 80068fe:	2000      	movs	r0, #0
 8006900:	e008      	b.n	8006914 <_printf_common+0xa8>
 8006902:	2301      	movs	r3, #1
 8006904:	4652      	mov	r2, sl
 8006906:	4641      	mov	r1, r8
 8006908:	4638      	mov	r0, r7
 800690a:	47c8      	blx	r9
 800690c:	3001      	adds	r0, #1
 800690e:	d103      	bne.n	8006918 <_printf_common+0xac>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006918:	3501      	adds	r5, #1
 800691a:	e7c6      	b.n	80068aa <_printf_common+0x3e>
 800691c:	18e1      	adds	r1, r4, r3
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	2030      	movs	r0, #48	@ 0x30
 8006922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006926:	4422      	add	r2, r4
 8006928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800692c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006930:	3302      	adds	r3, #2
 8006932:	e7c7      	b.n	80068c4 <_printf_common+0x58>
 8006934:	2301      	movs	r3, #1
 8006936:	4622      	mov	r2, r4
 8006938:	4641      	mov	r1, r8
 800693a:	4638      	mov	r0, r7
 800693c:	47c8      	blx	r9
 800693e:	3001      	adds	r0, #1
 8006940:	d0e6      	beq.n	8006910 <_printf_common+0xa4>
 8006942:	3601      	adds	r6, #1
 8006944:	e7d9      	b.n	80068fa <_printf_common+0x8e>
	...

08006948 <_printf_i>:
 8006948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800694c:	7e0f      	ldrb	r7, [r1, #24]
 800694e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006950:	2f78      	cmp	r7, #120	@ 0x78
 8006952:	4691      	mov	r9, r2
 8006954:	4680      	mov	r8, r0
 8006956:	460c      	mov	r4, r1
 8006958:	469a      	mov	sl, r3
 800695a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800695e:	d807      	bhi.n	8006970 <_printf_i+0x28>
 8006960:	2f62      	cmp	r7, #98	@ 0x62
 8006962:	d80a      	bhi.n	800697a <_printf_i+0x32>
 8006964:	2f00      	cmp	r7, #0
 8006966:	f000 80d1 	beq.w	8006b0c <_printf_i+0x1c4>
 800696a:	2f58      	cmp	r7, #88	@ 0x58
 800696c:	f000 80b8 	beq.w	8006ae0 <_printf_i+0x198>
 8006970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006978:	e03a      	b.n	80069f0 <_printf_i+0xa8>
 800697a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800697e:	2b15      	cmp	r3, #21
 8006980:	d8f6      	bhi.n	8006970 <_printf_i+0x28>
 8006982:	a101      	add	r1, pc, #4	@ (adr r1, 8006988 <_printf_i+0x40>)
 8006984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006988:	080069e1 	.word	0x080069e1
 800698c:	080069f5 	.word	0x080069f5
 8006990:	08006971 	.word	0x08006971
 8006994:	08006971 	.word	0x08006971
 8006998:	08006971 	.word	0x08006971
 800699c:	08006971 	.word	0x08006971
 80069a0:	080069f5 	.word	0x080069f5
 80069a4:	08006971 	.word	0x08006971
 80069a8:	08006971 	.word	0x08006971
 80069ac:	08006971 	.word	0x08006971
 80069b0:	08006971 	.word	0x08006971
 80069b4:	08006af3 	.word	0x08006af3
 80069b8:	08006a1f 	.word	0x08006a1f
 80069bc:	08006aad 	.word	0x08006aad
 80069c0:	08006971 	.word	0x08006971
 80069c4:	08006971 	.word	0x08006971
 80069c8:	08006b15 	.word	0x08006b15
 80069cc:	08006971 	.word	0x08006971
 80069d0:	08006a1f 	.word	0x08006a1f
 80069d4:	08006971 	.word	0x08006971
 80069d8:	08006971 	.word	0x08006971
 80069dc:	08006ab5 	.word	0x08006ab5
 80069e0:	6833      	ldr	r3, [r6, #0]
 80069e2:	1d1a      	adds	r2, r3, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6032      	str	r2, [r6, #0]
 80069e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069f0:	2301      	movs	r3, #1
 80069f2:	e09c      	b.n	8006b2e <_printf_i+0x1e6>
 80069f4:	6833      	ldr	r3, [r6, #0]
 80069f6:	6820      	ldr	r0, [r4, #0]
 80069f8:	1d19      	adds	r1, r3, #4
 80069fa:	6031      	str	r1, [r6, #0]
 80069fc:	0606      	lsls	r6, r0, #24
 80069fe:	d501      	bpl.n	8006a04 <_printf_i+0xbc>
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	e003      	b.n	8006a0c <_printf_i+0xc4>
 8006a04:	0645      	lsls	r5, r0, #25
 8006a06:	d5fb      	bpl.n	8006a00 <_printf_i+0xb8>
 8006a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	da03      	bge.n	8006a18 <_printf_i+0xd0>
 8006a10:	232d      	movs	r3, #45	@ 0x2d
 8006a12:	426d      	negs	r5, r5
 8006a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a18:	4858      	ldr	r0, [pc, #352]	@ (8006b7c <_printf_i+0x234>)
 8006a1a:	230a      	movs	r3, #10
 8006a1c:	e011      	b.n	8006a42 <_printf_i+0xfa>
 8006a1e:	6821      	ldr	r1, [r4, #0]
 8006a20:	6833      	ldr	r3, [r6, #0]
 8006a22:	0608      	lsls	r0, r1, #24
 8006a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a28:	d402      	bmi.n	8006a30 <_printf_i+0xe8>
 8006a2a:	0649      	lsls	r1, r1, #25
 8006a2c:	bf48      	it	mi
 8006a2e:	b2ad      	uxthmi	r5, r5
 8006a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a32:	4852      	ldr	r0, [pc, #328]	@ (8006b7c <_printf_i+0x234>)
 8006a34:	6033      	str	r3, [r6, #0]
 8006a36:	bf14      	ite	ne
 8006a38:	230a      	movne	r3, #10
 8006a3a:	2308      	moveq	r3, #8
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a42:	6866      	ldr	r6, [r4, #4]
 8006a44:	60a6      	str	r6, [r4, #8]
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	db05      	blt.n	8006a56 <_printf_i+0x10e>
 8006a4a:	6821      	ldr	r1, [r4, #0]
 8006a4c:	432e      	orrs	r6, r5
 8006a4e:	f021 0104 	bic.w	r1, r1, #4
 8006a52:	6021      	str	r1, [r4, #0]
 8006a54:	d04b      	beq.n	8006aee <_printf_i+0x1a6>
 8006a56:	4616      	mov	r6, r2
 8006a58:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a5c:	fb03 5711 	mls	r7, r3, r1, r5
 8006a60:	5dc7      	ldrb	r7, [r0, r7]
 8006a62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a66:	462f      	mov	r7, r5
 8006a68:	42bb      	cmp	r3, r7
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	d9f4      	bls.n	8006a58 <_printf_i+0x110>
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d10b      	bne.n	8006a8a <_printf_i+0x142>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	07df      	lsls	r7, r3, #31
 8006a76:	d508      	bpl.n	8006a8a <_printf_i+0x142>
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	6861      	ldr	r1, [r4, #4]
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	bfde      	ittt	le
 8006a80:	2330      	movle	r3, #48	@ 0x30
 8006a82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a8a:	1b92      	subs	r2, r2, r6
 8006a8c:	6122      	str	r2, [r4, #16]
 8006a8e:	f8cd a000 	str.w	sl, [sp]
 8006a92:	464b      	mov	r3, r9
 8006a94:	aa03      	add	r2, sp, #12
 8006a96:	4621      	mov	r1, r4
 8006a98:	4640      	mov	r0, r8
 8006a9a:	f7ff fee7 	bl	800686c <_printf_common>
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d14a      	bne.n	8006b38 <_printf_i+0x1f0>
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa6:	b004      	add	sp, #16
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	f043 0320 	orr.w	r3, r3, #32
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	4832      	ldr	r0, [pc, #200]	@ (8006b80 <_printf_i+0x238>)
 8006ab6:	2778      	movs	r7, #120	@ 0x78
 8006ab8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	6831      	ldr	r1, [r6, #0]
 8006ac0:	061f      	lsls	r7, r3, #24
 8006ac2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ac6:	d402      	bmi.n	8006ace <_printf_i+0x186>
 8006ac8:	065f      	lsls	r7, r3, #25
 8006aca:	bf48      	it	mi
 8006acc:	b2ad      	uxthmi	r5, r5
 8006ace:	6031      	str	r1, [r6, #0]
 8006ad0:	07d9      	lsls	r1, r3, #31
 8006ad2:	bf44      	itt	mi
 8006ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad8:	6023      	strmi	r3, [r4, #0]
 8006ada:	b11d      	cbz	r5, 8006ae4 <_printf_i+0x19c>
 8006adc:	2310      	movs	r3, #16
 8006ade:	e7ad      	b.n	8006a3c <_printf_i+0xf4>
 8006ae0:	4826      	ldr	r0, [pc, #152]	@ (8006b7c <_printf_i+0x234>)
 8006ae2:	e7e9      	b.n	8006ab8 <_printf_i+0x170>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	e7f6      	b.n	8006adc <_printf_i+0x194>
 8006aee:	4616      	mov	r6, r2
 8006af0:	e7bd      	b.n	8006a6e <_printf_i+0x126>
 8006af2:	6833      	ldr	r3, [r6, #0]
 8006af4:	6825      	ldr	r5, [r4, #0]
 8006af6:	6961      	ldr	r1, [r4, #20]
 8006af8:	1d18      	adds	r0, r3, #4
 8006afa:	6030      	str	r0, [r6, #0]
 8006afc:	062e      	lsls	r6, r5, #24
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	d501      	bpl.n	8006b06 <_printf_i+0x1be>
 8006b02:	6019      	str	r1, [r3, #0]
 8006b04:	e002      	b.n	8006b0c <_printf_i+0x1c4>
 8006b06:	0668      	lsls	r0, r5, #25
 8006b08:	d5fb      	bpl.n	8006b02 <_printf_i+0x1ba>
 8006b0a:	8019      	strh	r1, [r3, #0]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	4616      	mov	r6, r2
 8006b12:	e7bc      	b.n	8006a8e <_printf_i+0x146>
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	1d1a      	adds	r2, r3, #4
 8006b18:	6032      	str	r2, [r6, #0]
 8006b1a:	681e      	ldr	r6, [r3, #0]
 8006b1c:	6862      	ldr	r2, [r4, #4]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7f9 fb65 	bl	80001f0 <memchr>
 8006b26:	b108      	cbz	r0, 8006b2c <_printf_i+0x1e4>
 8006b28:	1b80      	subs	r0, r0, r6
 8006b2a:	6060      	str	r0, [r4, #4]
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	6123      	str	r3, [r4, #16]
 8006b30:	2300      	movs	r3, #0
 8006b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b36:	e7aa      	b.n	8006a8e <_printf_i+0x146>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4640      	mov	r0, r8
 8006b40:	47d0      	blx	sl
 8006b42:	3001      	adds	r0, #1
 8006b44:	d0ad      	beq.n	8006aa2 <_printf_i+0x15a>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	079b      	lsls	r3, r3, #30
 8006b4a:	d413      	bmi.n	8006b74 <_printf_i+0x22c>
 8006b4c:	68e0      	ldr	r0, [r4, #12]
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	4298      	cmp	r0, r3
 8006b52:	bfb8      	it	lt
 8006b54:	4618      	movlt	r0, r3
 8006b56:	e7a6      	b.n	8006aa6 <_printf_i+0x15e>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4640      	mov	r0, r8
 8006b60:	47d0      	blx	sl
 8006b62:	3001      	adds	r0, #1
 8006b64:	d09d      	beq.n	8006aa2 <_printf_i+0x15a>
 8006b66:	3501      	adds	r5, #1
 8006b68:	68e3      	ldr	r3, [r4, #12]
 8006b6a:	9903      	ldr	r1, [sp, #12]
 8006b6c:	1a5b      	subs	r3, r3, r1
 8006b6e:	42ab      	cmp	r3, r5
 8006b70:	dcf2      	bgt.n	8006b58 <_printf_i+0x210>
 8006b72:	e7eb      	b.n	8006b4c <_printf_i+0x204>
 8006b74:	2500      	movs	r5, #0
 8006b76:	f104 0619 	add.w	r6, r4, #25
 8006b7a:	e7f5      	b.n	8006b68 <_printf_i+0x220>
 8006b7c:	08006f02 	.word	0x08006f02
 8006b80:	08006f13 	.word	0x08006f13

08006b84 <memmove>:
 8006b84:	4288      	cmp	r0, r1
 8006b86:	b510      	push	{r4, lr}
 8006b88:	eb01 0402 	add.w	r4, r1, r2
 8006b8c:	d902      	bls.n	8006b94 <memmove+0x10>
 8006b8e:	4284      	cmp	r4, r0
 8006b90:	4623      	mov	r3, r4
 8006b92:	d807      	bhi.n	8006ba4 <memmove+0x20>
 8006b94:	1e43      	subs	r3, r0, #1
 8006b96:	42a1      	cmp	r1, r4
 8006b98:	d008      	beq.n	8006bac <memmove+0x28>
 8006b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ba2:	e7f8      	b.n	8006b96 <memmove+0x12>
 8006ba4:	4402      	add	r2, r0
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	428a      	cmp	r2, r1
 8006baa:	d100      	bne.n	8006bae <memmove+0x2a>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bb6:	e7f7      	b.n	8006ba8 <memmove+0x24>

08006bb8 <_sbrk_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d06      	ldr	r5, [pc, #24]	@ (8006bd4 <_sbrk_r+0x1c>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	602b      	str	r3, [r5, #0]
 8006bc4:	f7fb fb02 	bl	80021cc <_sbrk>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_sbrk_r+0x1a>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_sbrk_r+0x1a>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20000560 	.word	0x20000560

08006bd8 <_realloc_r>:
 8006bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bdc:	4607      	mov	r7, r0
 8006bde:	4614      	mov	r4, r2
 8006be0:	460d      	mov	r5, r1
 8006be2:	b921      	cbnz	r1, 8006bee <_realloc_r+0x16>
 8006be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	4611      	mov	r1, r2
 8006bea:	f7ff bc5b 	b.w	80064a4 <_malloc_r>
 8006bee:	b92a      	cbnz	r2, 8006bfc <_realloc_r+0x24>
 8006bf0:	f7ff fbec 	bl	80063cc <_free_r>
 8006bf4:	4625      	mov	r5, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfc:	f000 f81a 	bl	8006c34 <_malloc_usable_size_r>
 8006c00:	4284      	cmp	r4, r0
 8006c02:	4606      	mov	r6, r0
 8006c04:	d802      	bhi.n	8006c0c <_realloc_r+0x34>
 8006c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c0a:	d8f4      	bhi.n	8006bf6 <_realloc_r+0x1e>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff fc48 	bl	80064a4 <_malloc_r>
 8006c14:	4680      	mov	r8, r0
 8006c16:	b908      	cbnz	r0, 8006c1c <_realloc_r+0x44>
 8006c18:	4645      	mov	r5, r8
 8006c1a:	e7ec      	b.n	8006bf6 <_realloc_r+0x1e>
 8006c1c:	42b4      	cmp	r4, r6
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	bf28      	it	cs
 8006c24:	4632      	movcs	r2, r6
 8006c26:	f7ff fbc3 	bl	80063b0 <memcpy>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f7ff fbcd 	bl	80063cc <_free_r>
 8006c32:	e7f1      	b.n	8006c18 <_realloc_r+0x40>

08006c34 <_malloc_usable_size_r>:
 8006c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c38:	1f18      	subs	r0, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfbc      	itt	lt
 8006c3e:	580b      	ldrlt	r3, [r1, r0]
 8006c40:	18c0      	addlt	r0, r0, r3
 8006c42:	4770      	bx	lr

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
