
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800599c  0800599c  00007080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a4  080059a4  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080059a4  080059a4  000069a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080059b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000080  08005a30  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08005a30  0000750c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c18  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002731  00000000  00000000  00018cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca0  00000000  00000000  0001c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ed  00000000  00000000  0001d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f7e  00000000  00000000  00035785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935c7  00000000  00000000  00049703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dccca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c8  00000000  00000000  000dcd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e16d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056d4 	.word	0x080056d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080056d4 	.word	0x080056d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <_ZN3FSMC1Ev>:
extern UART_HandleTypeDef huart1;




FSM::FSM():state(S0_INIT){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]


}
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <_ZN3FSM3runEv>:


void FSM::run(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    // Switch case is a bit tidier than a bunch of if / else if statements
    // but you must remember to use break or fall through into later states
    switch(state)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d811      	bhi.n	800060c <_ZN3FSM3runEv+0x34>
 80005e8:	a201      	add	r2, pc, #4	@ (adr r2, 80005f0 <_ZN3FSM3runEv+0x18>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000605 	.word	0x08000605
 80005f4:	0800061d 	.word	0x0800061d
 80005f8:	0800061d 	.word	0x0800061d
 80005fc:	0800061d 	.word	0x0800061d
 8000600:	0800061d 	.word	0x0800061d
    {
        case S0_INIT:

        	//HAL_UART_Transmit(&huart1, (uint8_t*)"In State 0\r\n", 13, HAL_MAX_DELAY);
            state = S1_IDLE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
            break;
 800060a:	e008      	b.n	800061e <_ZN3FSM3runEv+0x46>




        default:
        	HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid State\r\n", 16, HAL_MAX_DELAY);
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	2210      	movs	r2, #16
 8000612:	4905      	ldr	r1, [pc, #20]	@ (8000628 <_ZN3FSM3runEv+0x50>)
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <_ZN3FSM3runEv+0x54>)
 8000616:	f003 fb17 	bl	8003c48 <HAL_UART_Transmit>
        	break;
 800061a:	e000      	b.n	800061e <_ZN3FSM3runEv+0x46>
            break;
 800061c:	bf00      	nop
    }


}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	080056ec 	.word	0x080056ec
 800062c:	200002b0 	.word	0x200002b0

08000630 <_ZN3FSM9set_stateENS_5stateE>:


void FSM::set_state(system_state_t new_state) {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    state = new_state;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	78fa      	ldrb	r2, [r7, #3]
 8000640:	701a      	strb	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <_ZNK3FSM9get_stateEv>:

	  void run(void);

	  void set_state(system_state_t new_state);

	  system_state_t get_state() const { return this->state; }
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f001 fac5 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f861 	bl	8000738 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 fbc9 	bl	8000e0c <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800067a:	f000 fb99 	bl	8000db0 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 800067e:	f000 f9cb 	bl	8000a18 <_ZL12MX_TIM2_Initv>
  MX_I2C3_Init();
 8000682:	f000 f8ff 	bl	8000884 <_ZL12MX_I2C3_Initv>
  MX_TIM1_Init();
 8000686:	f000 f931 	bl	80008ec <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800068a:	f000 fa23 	bl	8000ad4 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800068e:	f000 fab9 	bl	8000c04 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000692:	f000 fb15 	bl	8000cc0 <_ZL12MX_TIM5_Initv>
  MX_I2C2_Init();
 8000696:	f000 f8c1 	bl	800081c <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */


  // SERVO MOTOR
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 800069a:	210c      	movs	r1, #12
 800069c:	481d      	ldr	r0, [pc, #116]	@ (8000714 <main+0xac>)
 800069e:	f002 fc71 	bl	8002f84 <HAL_TIM_PWM_Start_IT>


  // BASE MOTOR
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 80006a2:	213c      	movs	r1, #60	@ 0x3c
 80006a4:	481c      	ldr	r0, [pc, #112]	@ (8000718 <main+0xb0>)
 80006a6:	f002 fe11 	bl	80032cc <HAL_TIM_Encoder_Start_IT>

  // POLOLU 2
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	481b      	ldr	r0, [pc, #108]	@ (800071c <main+0xb4>)
 80006ae:	f002 fc69 	bl	8002f84 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80006b2:	2104      	movs	r1, #4
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <main+0xb4>)
 80006b6:	f002 fc65 	bl	8002f84 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80006ba:	2108      	movs	r1, #8
 80006bc:	4817      	ldr	r0, [pc, #92]	@ (800071c <main+0xb4>)
 80006be:	f002 fc61 	bl	8002f84 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 80006c2:	210c      	movs	r1, #12
 80006c4:	4815      	ldr	r0, [pc, #84]	@ (800071c <main+0xb4>)
 80006c6:	f002 fc5d 	bl	8002f84 <HAL_TIM_PWM_Start_IT>


  // LAUNCHER MOTOR
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 80006ca:	213c      	movs	r1, #60	@ 0x3c
 80006cc:	4814      	ldr	r0, [pc, #80]	@ (8000720 <main+0xb8>)
 80006ce:	f002 fdfd 	bl	80032cc <HAL_TIM_Encoder_Start_IT>


  // POLOLU 1
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
 80006d2:	2108      	movs	r1, #8
 80006d4:	4813      	ldr	r0, [pc, #76]	@ (8000724 <main+0xbc>)
 80006d6:	f002 fc55 	bl	8002f84 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);
 80006da:	210c      	movs	r1, #12
 80006dc:	4811      	ldr	r0, [pc, #68]	@ (8000724 <main+0xbc>)
 80006de:	f002 fc51 	bl	8002f84 <HAL_TIM_PWM_Start_IT>



  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	4910      	ldr	r1, [pc, #64]	@ (8000728 <main+0xc0>)
 80006e6:	4811      	ldr	r0, [pc, #68]	@ (800072c <main+0xc4>)
 80006e8:	f003 fb39 	bl	8003d5e <HAL_UART_Receive_IT>



  int16_t last_count1 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	80fb      	strh	r3, [r7, #6]
  int16_t last_count2 = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	80bb      	strh	r3, [r7, #4]
  {

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  set_duty_dual(&Pololu_1, 0, 4999);
 80006f4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80006f8:	2100      	movs	r1, #0
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <main+0xc8>)
 80006fc:	f000 fed7 	bl	80014ae <set_duty_dual>
	  fsm.run();
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <main+0xcc>)
 8000702:	f7ff ff69 	bl	80005d8 <_ZN3FSM3runEv>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"FSM RUNNING\r\n", 13, HAL_MAX_DELAY);
	  HAL_Delay(2000);
 8000706:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800070a:	f001 fae9 	bl	8001ce0 <HAL_Delay>
	  set_duty_dual(&Pololu_1, 0, 4999);
 800070e:	bf00      	nop
 8000710:	e7f0      	b.n	80006f4 <main+0x8c>
 8000712:	bf00      	nop
 8000714:	20000148 	.word	0x20000148
 8000718:	20000190 	.word	0x20000190
 800071c:	200001d8 	.word	0x200001d8
 8000720:	20000220 	.word	0x20000220
 8000724:	20000268 	.word	0x20000268
 8000728:	20000338 	.word	0x20000338
 800072c:	200002b0 	.word	0x200002b0
 8000730:	20000010 	.word	0x20000010
 8000734:	2000009c 	.word	0x2000009c

08000738 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fb34 	bl	8004db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <_Z18SystemClock_Configv+0xdc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a2b      	ldr	r2, [pc, #172]	@ (8000814 <_Z18SystemClock_Configv+0xdc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <_Z18SystemClock_Configv+0xdc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <_Z18SystemClock_Configv+0xe0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a25      	ldr	r2, [pc, #148]	@ (8000818 <_Z18SystemClock_Configv+0xe0>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <_Z18SystemClock_Configv+0xe0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ac:	2360      	movs	r3, #96	@ 0x60
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 ff39 	bl	8002634 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bf14      	ite	ne
 80007c8:	2301      	movne	r3, #1
 80007ca:	2300      	moveq	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80007d2:	f000 fe29 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2103      	movs	r1, #3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f996 	bl	8002b24 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000808:	f000 fe0e 	bl	8001428 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3750      	adds	r7, #80	@ 0x50
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <_ZL12MX_I2C2_Initv+0x60>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 8000828:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <_ZL12MX_I2C2_Initv+0x64>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 800083a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000858:	4807      	ldr	r0, [pc, #28]	@ (8000878 <_ZL12MX_I2C2_Initv+0x5c>)
 800085a:	f001 fda7 	bl	80023ac <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 800086e:	f000 fddb 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000a0 	.word	0x200000a0
 800087c:	40005800 	.word	0x40005800
 8000880:	000186a0 	.word	0x000186a0

08000884 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 800088a:	4a16      	ldr	r2, [pc, #88]	@ (80008e4 <_ZL12MX_I2C3_Initv+0x60>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 8000890:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <_ZL12MX_I2C3_Initv+0x64>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <_ZL12MX_I2C3_Initv+0x5c>)
 80008c2:	f001 fd73 	bl	80023ac <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80008d6:	f000 fda7 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000f4 	.word	0x200000f4
 80008e4:	40005c00 	.word	0x40005c00
 80008e8:	000186a0 	.word	0x000186a0

080008ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	@ 0x48
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fa4c 	bl	8004db4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 800091e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a14 <_ZL12MX_TIM1_Initv+0x128>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 28;
 8000922:	4b3b      	ldr	r3, [pc, #236]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 8000924:	221c      	movs	r2, #28
 8000926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b39      	ldr	r3, [pc, #228]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092e:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 8000930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b36      	ldr	r3, [pc, #216]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093c:	4b34      	ldr	r3, [pc, #208]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000948:	4831      	ldr	r0, [pc, #196]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 800094a:	f002 facb 	bl	8002ee4 <HAL_TIM_PWM_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800095e:	f000 fd63 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800096e:	4619      	mov	r1, r3
 8000970:	4827      	ldr	r0, [pc, #156]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 8000972:	f003 f859 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000986:	f000 fd4f 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098a:	2360      	movs	r3, #96	@ 0x60
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	220c      	movs	r2, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4819      	ldr	r0, [pc, #100]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 80009ac:	f002 fd3c 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 80009c0:	f000 fd32 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	480a      	ldr	r0, [pc, #40]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 80009e8:	f003 f88c 	bl	8003b04 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_ZL12MX_TIM1_Initv+0x114>
  {
    Error_Handler();
 80009fc:	f000 fd14 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <_ZL12MX_TIM1_Initv+0x124>)
 8000a02:	f000 ff77 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3748      	adds	r7, #72	@ 0x48
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000148 	.word	0x20000148
 8000a14:	40010000 	.word	0x40010000

08000a18 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2224      	movs	r2, #36	@ 0x24
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 f9c4 	bl	8004db4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000a88:	f002 fb7a 	bl	8003180 <HAL_TIM_Encoder_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf14      	ite	ne
 8000a92:	2301      	movne	r3, #1
 8000a94:	2300      	moveq	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8000a9c:	f000 fcc4 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000aae:	f002 ffbb 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8000ac2:	f000 fcb1 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	@ 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000190 	.word	0x20000190

08000ad4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af6:	4b41      	ldr	r3, [pc, #260]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000af8:	4a41      	ldr	r2, [pc, #260]	@ (8000c00 <_ZL12MX_TIM3_Initv+0x12c>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afc:	4b3f      	ldr	r3, [pc, #252]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000b08:	4b3c      	ldr	r3, [pc, #240]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b0a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b3a      	ldr	r3, [pc, #232]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b39      	ldr	r3, [pc, #228]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b1c:	4837      	ldr	r0, [pc, #220]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b1e:	f002 f9e1 	bl	8002ee4 <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000b32:	f000 fc79 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	4619      	mov	r1, r3
 8000b44:	482d      	ldr	r0, [pc, #180]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b46:	f002 ff6f 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf14      	ite	ne
 8000b50:	2301      	movne	r3, #1
 8000b52:	2300      	moveq	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000b5a:	f000 fc65 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2360      	movs	r3, #96	@ 0x60
 8000b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4821      	ldr	r0, [pc, #132]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b76:	f002 fc57 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf14      	ite	ne
 8000b80:	2301      	movne	r3, #1
 8000b82:	2300      	moveq	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000b8a:	f000 fc4d 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2204      	movs	r2, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4819      	ldr	r0, [pc, #100]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000b96:	f002 fc47 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf14      	ite	ne
 8000ba0:	2301      	movne	r3, #1
 8000ba2:	2300      	moveq	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000baa:	f000 fc3d 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4811      	ldr	r0, [pc, #68]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000bb6:	f002 fc37 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2301      	movne	r3, #1
 8000bc2:	2300      	moveq	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8000bca:	f000 fc2d 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	220c      	movs	r2, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000bd6:	f002 fc27 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8000bea:	f000 fc1d 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <_ZL12MX_TIM3_Initv+0x128>)
 8000bf0:	f000 fe80 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	@ 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001d8 	.word	0x200001d8
 8000c00:	40000400 	.word	0x40000400

08000c04 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	@ 0x30
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2224      	movs	r2, #36	@ 0x24
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 f8ce 	bl	8004db4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c20:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c22:	4a26      	ldr	r2, [pc, #152]	@ (8000cbc <_ZL12MX_TIM4_Initv+0xb8>)
 8000c24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c26:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4811      	ldr	r0, [pc, #68]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c72:	f002 fa85 	bl	8003180 <HAL_TIM_Encoder_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf14      	ite	ne
 8000c7c:	2301      	movne	r3, #1
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8000c86:	f000 fbcf 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000c98:	f002 fec6 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8000cac:	f000 fbbc 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	@ 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000220 	.word	0x20000220
 8000cbc:	40000800 	.word	0x40000800

08000cc0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ce2:	4b31      	ldr	r3, [pc, #196]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000ce4:	4a31      	ldr	r2, [pc, #196]	@ (8000dac <_ZL12MX_TIM5_Initv+0xec>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000cf6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cfa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d08:	4827      	ldr	r0, [pc, #156]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000d0a:	f002 f8eb 	bl	8002ee4 <HAL_TIM_PWM_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8000d1e:	f000 fb83 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481d      	ldr	r0, [pc, #116]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000d32:	f002 fe79 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf14      	ite	ne
 8000d3c:	2301      	movne	r3, #1
 8000d3e:	2300      	moveq	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8000d46:	f000 fb6f 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	2360      	movs	r3, #96	@ 0x60
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000d62:	f002 fb61 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf14      	ite	ne
 8000d6c:	2301      	movne	r3, #1
 8000d6e:	2300      	moveq	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8000d76:	f000 fb57 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000d82:	f002 fb51 	bl	8003428 <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8000d96:	f000 fb47 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <_ZL12MX_TIM5_Initv+0xe8>)
 8000d9c:	f000 fdaa 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000268 	.word	0x20000268
 8000dac:	40000c00 	.word	0x40000c00

08000db0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000db6:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de6:	4807      	ldr	r0, [pc, #28]	@ (8000e04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000de8:	f002 fede 	bl	8003ba8 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bf14      	ite	ne
 8000df2:	2301      	movne	r3, #1
 8000df4:	2300      	moveq	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000dfc:	f000 fb14 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200002b0 	.word	0x200002b0
 8000e08:	40011000 	.word	0x40011000

08000e0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a37      	ldr	r2, [pc, #220]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a29      	ldr	r2, [pc, #164]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a22      	ldr	r2, [pc, #136]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8000e98:	481c      	ldr	r0, [pc, #112]	@ (8000f0c <_ZL12MX_GPIO_Initv+0x100>)
 8000e9a:	f001 fa6d 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea4:	481a      	ldr	r0, [pc, #104]	@ (8000f10 <_ZL12MX_GPIO_Initv+0x104>)
 8000ea6:	f001 fa67 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eaa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <_ZL12MX_GPIO_Initv+0x108>)
 8000ec0:	f001 f8d6 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000ec4:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <_ZL12MX_GPIO_Initv+0x100>)
 8000ede:	f001 f8c7 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ee2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <_ZL12MX_GPIO_Initv+0x104>)
 8000efc:	f001 f8b8 	bl	8002070 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020800 	.word	0x40020800

08000f18 <HAL_UART_RxCpltCallback>:


#include <ctype.h>  // for toupper()

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a9e      	ldr	r2, [pc, #632]	@ (80011a0 <HAL_UART_RxCpltCallback+0x288>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	f040 825a 	bne.w	80013e0 <HAL_UART_RxCpltCallback+0x4c8>
    {
        char c = rx_buf[0];
 8000f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80011a4 <HAL_UART_RxCpltCallback+0x28c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	76bb      	strb	r3, [r7, #26]
        static char cmd_buffer[64];
        static uint8_t cmd_index = 0;

        if (c == '\r' || c == '\n')  // End of command
 8000f32:	7ebb      	ldrb	r3, [r7, #26]
 8000f34:	2b0d      	cmp	r3, #13
 8000f36:	d003      	beq.n	8000f40 <HAL_UART_RxCpltCallback+0x28>
 8000f38:	7ebb      	ldrb	r3, [r7, #26]
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	f040 823d 	bne.w	80013ba <HAL_UART_RxCpltCallback+0x4a2>
        {
            cmd_buffer[cmd_index] = '\0';
 8000f40:	4b99      	ldr	r3, [pc, #612]	@ (80011a8 <HAL_UART_RxCpltCallback+0x290>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b99      	ldr	r3, [pc, #612]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]

            // Convert to uppercase for consistent parsing
            for (uint8_t i = 0; i < cmd_index; i++) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	77fb      	strb	r3, [r7, #31]
 8000f50:	e00d      	b.n	8000f6e <HAL_UART_RxCpltCallback+0x56>
                cmd_buffer[i] = toupper((unsigned char)cmd_buffer[i]);
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	4a95      	ldr	r2, [pc, #596]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 feff 	bl	8004d5c <toupper>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	7ffb      	ldrb	r3, [r7, #31]
 8000f62:	b2d1      	uxtb	r1, r2
 8000f64:	4a91      	ldr	r2, [pc, #580]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8000f66:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < cmd_index; i++) {
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	77fb      	strb	r3, [r7, #31]
 8000f6e:	4b8e      	ldr	r3, [pc, #568]	@ (80011a8 <HAL_UART_RxCpltCallback+0x290>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	7ffa      	ldrb	r2, [r7, #31]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3ec      	bcc.n	8000f52 <HAL_UART_RxCpltCallback+0x3a>
            }

            // Process full command
            if (cmd_index >= 4)
 8000f78:	4b8b      	ldr	r3, [pc, #556]	@ (80011a8 <HAL_UART_RxCpltCallback+0x290>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	f240 8211 	bls.w	80013a4 <HAL_UART_RxCpltCallback+0x48c>
            {
                // === FSM STATE TRANSITION ===
                if (strncmp(cmd_buffer, "MODE", 4) == 0)
 8000f82:	2204      	movs	r2, #4
 8000f84:	498a      	ldr	r1, [pc, #552]	@ (80011b0 <HAL_UART_RxCpltCallback+0x298>)
 8000f86:	4889      	ldr	r0, [pc, #548]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8000f88:	f003 ff1c 	bl	8004dc4 <strncmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d14a      	bne.n	8001028 <HAL_UART_RxCpltCallback+0x110>
                {
                    uint8_t mode = cmd_buffer[4] - '0';
 8000f92:	4b86      	ldr	r3, [pc, #536]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8000f94:	791b      	ldrb	r3, [r3, #4]
 8000f96:	3b30      	subs	r3, #48	@ 0x30
 8000f98:	753b      	strb	r3, [r7, #20]
                    switch (mode) {
 8000f9a:	7d3b      	ldrb	r3, [r7, #20]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d826      	bhi.n	8000fee <HAL_UART_RxCpltCallback+0xd6>
 8000fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa8 <HAL_UART_RxCpltCallback+0x90>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fbd 	.word	0x08000fbd
 8000fac:	08000fc7 	.word	0x08000fc7
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	08000fdb 	.word	0x08000fdb
 8000fb8:	08000fe5 	.word	0x08000fe5
                        case 0: fsm.set_state(FSM::S0_INIT); break;
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	487d      	ldr	r0, [pc, #500]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8000fc0:	f7ff fb36 	bl	8000630 <_ZN3FSM9set_stateENS_5stateE>
 8000fc4:	e01b      	b.n	8000ffe <HAL_UART_RxCpltCallback+0xe6>
                        case 1: fsm.set_state(FSM::S1_IDLE); break;
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	487a      	ldr	r0, [pc, #488]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8000fca:	f7ff fb31 	bl	8000630 <_ZN3FSM9set_stateENS_5stateE>
 8000fce:	e016      	b.n	8000ffe <HAL_UART_RxCpltCallback+0xe6>
                        case 2: fsm.set_state(FSM::S2_MANUAL_STEP_INPUT); break;
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4878      	ldr	r0, [pc, #480]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8000fd4:	f7ff fb2c 	bl	8000630 <_ZN3FSM9set_stateENS_5stateE>
 8000fd8:	e011      	b.n	8000ffe <HAL_UART_RxCpltCallback+0xe6>
                        case 3: fsm.set_state(FSM::S3_MANUAL_TARGET); break;
 8000fda:	2103      	movs	r1, #3
 8000fdc:	4875      	ldr	r0, [pc, #468]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8000fde:	f7ff fb27 	bl	8000630 <_ZN3FSM9set_stateENS_5stateE>
 8000fe2:	e00c      	b.n	8000ffe <HAL_UART_RxCpltCallback+0xe6>
                        case 4: fsm.set_state(FSM::S4_AUTOMATIC); break;
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4873      	ldr	r0, [pc, #460]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8000fe8:	f7ff fb22 	bl	8000630 <_ZN3FSM9set_stateENS_5stateE>
 8000fec:	e007      	b.n	8000ffe <HAL_UART_RxCpltCallback+0xe6>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Mode\r\n", 15, 1000);
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	4970      	ldr	r1, [pc, #448]	@ (80011b8 <HAL_UART_RxCpltCallback+0x2a0>)
 8000ff6:	4871      	ldr	r0, [pc, #452]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8000ff8:	f002 fe26 	bl	8003c48 <HAL_UART_Transmit>
                            break;
 8000ffc:	bf00      	nop
                    }

                    sprintf((char*)tx_buf, "FSM state: %d\r\n", fsm.get_state());
 8000ffe:	486d      	ldr	r0, [pc, #436]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8001000:	f7ff fb25 	bl	800064e <_ZNK3FSM9get_stateEv>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	496d      	ldr	r1, [pc, #436]	@ (80011c0 <HAL_UART_RxCpltCallback+0x2a8>)
 800100a:	486e      	ldr	r0, [pc, #440]	@ (80011c4 <HAL_UART_RxCpltCallback+0x2ac>)
 800100c:	f003 feb0 	bl	8004d70 <siprintf>
                    HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001010:	486c      	ldr	r0, [pc, #432]	@ (80011c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001012:	f7ff f8e5 	bl	80001e0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	b29a      	uxth	r2, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	4969      	ldr	r1, [pc, #420]	@ (80011c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001020:	4866      	ldr	r0, [pc, #408]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8001022:	f002 fe11 	bl	8003c48 <HAL_UART_Transmit>
 8001026:	e1c4      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                }

                // === MOTOR COMMAND: M1FF / M2FF ===
                else if (cmd_buffer[0] == 'M')
 8001028:	4b60      	ldr	r3, [pc, #384]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b4d      	cmp	r3, #77	@ 0x4d
 800102e:	f040 808e 	bne.w	800114e <HAL_UART_RxCpltCallback+0x236>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8001032:	4860      	ldr	r0, [pc, #384]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 8001034:	f7ff fb0b 	bl	800064e <_ZNK3FSM9get_stateEv>
 8001038:	4603      	mov	r3, r0
 800103a:	2b02      	cmp	r3, #2
 800103c:	bf14      	ite	ne
 800103e:	2301      	movne	r3, #1
 8001040:	2300      	moveq	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d007      	beq.n	8001058 <HAL_UART_RxCpltCallback+0x140>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Motor command not allowed in this state\r\n", 41, 1000);
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	2229      	movs	r2, #41	@ 0x29
 800104e:	495e      	ldr	r1, [pc, #376]	@ (80011c8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001050:	485a      	ldr	r0, [pc, #360]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8001052:	f002 fdf9 	bl	8003c48 <HAL_UART_Transmit>
 8001056:	e1ac      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8001058:	4b54      	ldr	r3, [pc, #336]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	2b30      	cmp	r3, #48	@ 0x30
 800105e:	d903      	bls.n	8001068 <HAL_UART_RxCpltCallback+0x150>
 8001060:	4b52      	ldr	r3, [pc, #328]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	2b32      	cmp	r3, #50	@ 0x32
 8001066:	d907      	bls.n	8001078 <HAL_UART_RxCpltCallback+0x160>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Motor Number\r\n", 23, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106c:	2217      	movs	r2, #23
 800106e:	4957      	ldr	r1, [pc, #348]	@ (80011cc <HAL_UART_RxCpltCallback+0x2b4>)
 8001070:	4852      	ldr	r0, [pc, #328]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8001072:	f002 fde9 	bl	8003c48 <HAL_UART_Transmit>
 8001076:	e19c      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                    } else {
                        uint8_t motor_num = cmd_buffer[1] - '0';
 8001078:	4b4c      	ldr	r3, [pc, #304]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	757b      	strb	r3, [r7, #21]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2100      	movs	r1, #0
 8001086:	460a      	mov	r2, r1
 8001088:	801a      	strh	r2, [r3, #0]
 800108a:	460a      	mov	r2, r1
 800108c:	709a      	strb	r2, [r3, #2]
 800108e:	4b47      	ldr	r3, [pc, #284]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	743b      	strb	r3, [r7, #16]
 8001094:	4b45      	ldr	r3, [pc, #276]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8001096:	78db      	ldrb	r3, [r3, #3]
 8001098:	747b      	strb	r3, [r7, #17]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2210      	movs	r2, #16
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fe50 	bl	8004d48 <strtol>
 80010a8:	4603      	mov	r3, r0
 80010aa:	77bb      	strb	r3, [r7, #30]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 80010ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010b0:	2b64      	cmp	r3, #100	@ 0x64
 80010b2:	dd01      	ble.n	80010b8 <HAL_UART_RxCpltCallback+0x1a0>
 80010b4:	2364      	movs	r3, #100	@ 0x64
 80010b6:	77bb      	strb	r3, [r7, #30]
                        if (duty < -100) duty = -100;
 80010b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010bc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80010c0:	da01      	bge.n	80010c6 <HAL_UART_RxCpltCallback+0x1ae>
 80010c2:	239c      	movs	r3, #156	@ 0x9c
 80010c4:	77bb      	strb	r3, [r7, #30]
                        int16_t pulse = (duty * 4799) / 100;
 80010c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010ca:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	4a3f      	ldr	r2, [pc, #252]	@ (80011d0 <HAL_UART_RxCpltCallback+0x2b8>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1152      	asrs	r2, r2, #5
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	83bb      	strh	r3, [r7, #28]
                        if (pulse < 0) pulse = -pulse;
 80010e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da03      	bge.n	80010f0 <HAL_UART_RxCpltCallback+0x1d8>
 80010e8:	8bbb      	ldrh	r3, [r7, #28]
 80010ea:	425b      	negs	r3, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	83bb      	strh	r3, [r7, #28]

                        if (motor_num == 1)
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10c      	bne.n	8001110 <HAL_UART_RxCpltCallback+0x1f8>
                            set_duty(&motor_1, (duty >= 0) ? pulse : 0);
 80010f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db02      	blt.n	8001104 <HAL_UART_RxCpltCallback+0x1ec>
 80010fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001102:	e000      	b.n	8001106 <HAL_UART_RxCpltCallback+0x1ee>
 8001104:	2300      	movs	r3, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <HAL_UART_RxCpltCallback+0x2bc>)
 800110a:	f000 f9a2 	bl	8001452 <set_duty>
 800110e:	e00b      	b.n	8001128 <HAL_UART_RxCpltCallback+0x210>
                        else
                            set_duty(&motor_2, (duty >= 0) ? pulse : 0);
 8001110:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db02      	blt.n	800111e <HAL_UART_RxCpltCallback+0x206>
 8001118:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800111c:	e000      	b.n	8001120 <HAL_UART_RxCpltCallback+0x208>
 800111e:	2300      	movs	r3, #0
 8001120:	4619      	mov	r1, r3
 8001122:	482d      	ldr	r0, [pc, #180]	@ (80011d8 <HAL_UART_RxCpltCallback+0x2c0>)
 8001124:	f000 f995 	bl	8001452 <set_duty>

                        sprintf((char*)tx_buf, "Motor %d set to duty %d\r\n", motor_num, duty);
 8001128:	7d7a      	ldrb	r2, [r7, #21]
 800112a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800112e:	492b      	ldr	r1, [pc, #172]	@ (80011dc <HAL_UART_RxCpltCallback+0x2c4>)
 8001130:	4824      	ldr	r0, [pc, #144]	@ (80011c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001132:	f003 fe1d 	bl	8004d70 <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001136:	4823      	ldr	r0, [pc, #140]	@ (80011c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001138:	f7ff f852 	bl	80001e0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001144:	491f      	ldr	r1, [pc, #124]	@ (80011c4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001146:	481d      	ldr	r0, [pc, #116]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8001148:	f002 fd7e 	bl	8003c48 <HAL_UART_Transmit>
 800114c:	e131      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === SERVO COMMAND: S1XX / S2XX ===
                else if (cmd_buffer[0] == 'S')
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b53      	cmp	r3, #83	@ 0x53
 8001154:	f040 80ad 	bne.w	80012b2 <HAL_UART_RxCpltCallback+0x39a>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8001158:	4816      	ldr	r0, [pc, #88]	@ (80011b4 <HAL_UART_RxCpltCallback+0x29c>)
 800115a:	f7ff fa78 	bl	800064e <_ZNK3FSM9get_stateEv>
 800115e:	4603      	mov	r3, r0
 8001160:	2b02      	cmp	r3, #2
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_UART_RxCpltCallback+0x266>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Servo command not allowed in this state\r\n", 41, 1000);
 800116e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001172:	2229      	movs	r2, #41	@ 0x29
 8001174:	491a      	ldr	r1, [pc, #104]	@ (80011e0 <HAL_UART_RxCpltCallback+0x2c8>)
 8001176:	4811      	ldr	r0, [pc, #68]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8001178:	f002 fd66 	bl	8003c48 <HAL_UART_Transmit>
 800117c:	e119      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	2b30      	cmp	r3, #48	@ 0x30
 8001184:	d903      	bls.n	800118e <HAL_UART_RxCpltCallback+0x276>
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <HAL_UART_RxCpltCallback+0x294>)
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	2b32      	cmp	r3, #50	@ 0x32
 800118c:	d92c      	bls.n	80011e8 <HAL_UART_RxCpltCallback+0x2d0>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Servo Number\r\n", 23, 1000);
 800118e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001192:	2217      	movs	r2, #23
 8001194:	4913      	ldr	r1, [pc, #76]	@ (80011e4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001196:	4809      	ldr	r0, [pc, #36]	@ (80011bc <HAL_UART_RxCpltCallback+0x2a4>)
 8001198:	f002 fd56 	bl	8003c48 <HAL_UART_Transmit>
 800119c:	e109      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
 800119e:	bf00      	nop
 80011a0:	40011000 	.word	0x40011000
 80011a4:	20000338 	.word	0x20000338
 80011a8:	200003b8 	.word	0x200003b8
 80011ac:	20000378 	.word	0x20000378
 80011b0:	080056fc 	.word	0x080056fc
 80011b4:	2000009c 	.word	0x2000009c
 80011b8:	08005704 	.word	0x08005704
 80011bc:	200002b0 	.word	0x200002b0
 80011c0:	08005714 	.word	0x08005714
 80011c4:	200002f8 	.word	0x200002f8
 80011c8:	08005724 	.word	0x08005724
 80011cc:	08005750 	.word	0x08005750
 80011d0:	51eb851f 	.word	0x51eb851f
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	08005768 	.word	0x08005768
 80011e0:	08005784 	.word	0x08005784
 80011e4:	080057b0 	.word	0x080057b0
                    } else {
                        uint8_t servo_num = cmd_buffer[1] - '0';
 80011e8:	4b7f      	ldr	r3, [pc, #508]	@ (80013e8 <HAL_UART_RxCpltCallback+0x4d0>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	3b30      	subs	r3, #48	@ 0x30
 80011ee:	763b      	strb	r3, [r7, #24]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2100      	movs	r1, #0
 80011f6:	460a      	mov	r2, r1
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	460a      	mov	r2, r1
 80011fc:	709a      	strb	r2, [r3, #2]
 80011fe:	4b7a      	ldr	r3, [pc, #488]	@ (80013e8 <HAL_UART_RxCpltCallback+0x4d0>)
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	733b      	strb	r3, [r7, #12]
 8001204:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <HAL_UART_RxCpltCallback+0x4d0>)
 8001206:	78db      	ldrb	r3, [r3, #3]
 8001208:	737b      	strb	r3, [r7, #13]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2210      	movs	r2, #16
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fd98 	bl	8004d48 <strtol>
 8001218:	4603      	mov	r3, r0
 800121a:	76fb      	strb	r3, [r7, #27]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 800121c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001220:	2b64      	cmp	r3, #100	@ 0x64
 8001222:	dd01      	ble.n	8001228 <HAL_UART_RxCpltCallback+0x310>
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	76fb      	strb	r3, [r7, #27]
                        if (duty < -100) duty = -100;
 8001228:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800122c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001230:	da01      	bge.n	8001236 <HAL_UART_RxCpltCallback+0x31e>
 8001232:	239c      	movs	r3, #156	@ 0x9c
 8001234:	76fb      	strb	r3, [r7, #27]

                        int16_t pulse = duty * (8275 - 1655) / 100 + 1655;
 8001236:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800123a:	f641 12dc 	movw	r2, #6620	@ 0x19dc
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	4a6a      	ldr	r2, [pc, #424]	@ (80013ec <HAL_UART_RxCpltCallback+0x4d4>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	1152      	asrs	r2, r2, #5
 800124a:	17db      	asrs	r3, r3, #31
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b29b      	uxth	r3, r3
 8001250:	f203 6377 	addw	r3, r3, #1655	@ 0x677
 8001254:	b29b      	uxth	r3, r3
 8001256:	82fb      	strh	r3, [r7, #22]
                        if (pulse < 0) {
 8001258:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800125c:	2b00      	cmp	r3, #0
 800125e:	da06      	bge.n	800126e <HAL_UART_RxCpltCallback+0x356>
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Duty\r\n", 15, 1000);
 8001260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001264:	220f      	movs	r2, #15
 8001266:	4962      	ldr	r1, [pc, #392]	@ (80013f0 <HAL_UART_RxCpltCallback+0x4d8>)
 8001268:	4862      	ldr	r0, [pc, #392]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800126a:	f002 fced 	bl	8003c48 <HAL_UART_Transmit>
                        }

                        if (servo_num == 1)
 800126e:	7e3b      	ldrb	r3, [r7, #24]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d10b      	bne.n	800128c <HAL_UART_RxCpltCallback+0x374>
                            servo_duty(&servo_1, (duty >= 0) ? pulse : 0);
 8001274:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db02      	blt.n	8001282 <HAL_UART_RxCpltCallback+0x36a>
 800127c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001280:	e000      	b.n	8001284 <HAL_UART_RxCpltCallback+0x36c>
 8001282:	2300      	movs	r3, #0
 8001284:	4619      	mov	r1, r3
 8001286:	485c      	ldr	r0, [pc, #368]	@ (80013f8 <HAL_UART_RxCpltCallback+0x4e0>)
 8001288:	f000 f963 	bl	8001552 <servo_duty>
                        else
                            ; // placeholder for servo_2

                        sprintf((char*)tx_buf, "Servo %d set to duty %d\r\n", servo_num, duty);
 800128c:	7e3a      	ldrb	r2, [r7, #24]
 800128e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001292:	495a      	ldr	r1, [pc, #360]	@ (80013fc <HAL_UART_RxCpltCallback+0x4e4>)
 8001294:	485a      	ldr	r0, [pc, #360]	@ (8001400 <HAL_UART_RxCpltCallback+0x4e8>)
 8001296:	f003 fd6b 	bl	8004d70 <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 800129a:	4859      	ldr	r0, [pc, #356]	@ (8001400 <HAL_UART_RxCpltCallback+0x4e8>)
 800129c:	f7fe ffa0 	bl	80001e0 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a8:	4955      	ldr	r1, [pc, #340]	@ (8001400 <HAL_UART_RxCpltCallback+0x4e8>)
 80012aa:	4852      	ldr	r0, [pc, #328]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 80012ac:	f002 fccc 	bl	8003c48 <HAL_UART_Transmit>
 80012b0:	e07f      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === MOVEMENT COMMANDS (W/A/S/D) ===
                else if (fsm.get_state() == FSM::S2_MANUAL_STEP_INPUT || fsm.get_state() == FSM::S3_MANUAL_TARGET)
 80012b2:	4854      	ldr	r0, [pc, #336]	@ (8001404 <HAL_UART_RxCpltCallback+0x4ec>)
 80012b4:	f7ff f9cb 	bl	800064e <_ZNK3FSM9get_stateEv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d005      	beq.n	80012ca <HAL_UART_RxCpltCallback+0x3b2>
 80012be:	4851      	ldr	r0, [pc, #324]	@ (8001404 <HAL_UART_RxCpltCallback+0x4ec>)
 80012c0:	f7ff f9c5 	bl	800064e <_ZNK3FSM9get_stateEv>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d101      	bne.n	80012ce <HAL_UART_RxCpltCallback+0x3b6>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_UART_RxCpltCallback+0x3b8>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d05f      	beq.n	8001394 <HAL_UART_RxCpltCallback+0x47c>
                {
                    char dir = cmd_buffer[0];
 80012d4:	4b44      	ldr	r3, [pc, #272]	@ (80013e8 <HAL_UART_RxCpltCallback+0x4d0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	767b      	strb	r3, [r7, #25]
                    switch (dir) {
 80012da:	7e7b      	ldrb	r3, [r7, #25]
 80012dc:	3b41      	subs	r3, #65	@ 0x41
 80012de:	2b16      	cmp	r3, #22
 80012e0:	d850      	bhi.n	8001384 <HAL_UART_RxCpltCallback+0x46c>
 80012e2:	a201      	add	r2, pc, #4	@ (adr r2, 80012e8 <HAL_UART_RxCpltCallback+0x3d0>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001355 	.word	0x08001355
 80012ec:	08001385 	.word	0x08001385
 80012f0:	08001385 	.word	0x08001385
 80012f4:	08001375 	.word	0x08001375
 80012f8:	08001385 	.word	0x08001385
 80012fc:	08001385 	.word	0x08001385
 8001300:	08001385 	.word	0x08001385
 8001304:	08001385 	.word	0x08001385
 8001308:	08001385 	.word	0x08001385
 800130c:	08001385 	.word	0x08001385
 8001310:	08001385 	.word	0x08001385
 8001314:	08001385 	.word	0x08001385
 8001318:	08001385 	.word	0x08001385
 800131c:	08001385 	.word	0x08001385
 8001320:	08001385 	.word	0x08001385
 8001324:	08001385 	.word	0x08001385
 8001328:	08001385 	.word	0x08001385
 800132c:	08001385 	.word	0x08001385
 8001330:	08001365 	.word	0x08001365
 8001334:	08001385 	.word	0x08001385
 8001338:	08001385 	.word	0x08001385
 800133c:	08001385 	.word	0x08001385
 8001340:	08001345 	.word	0x08001345
                        case 'W': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Up\r\n", 9, 1000); break;
 8001344:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001348:	2209      	movs	r2, #9
 800134a:	492f      	ldr	r1, [pc, #188]	@ (8001408 <HAL_UART_RxCpltCallback+0x4f0>)
 800134c:	4829      	ldr	r0, [pc, #164]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800134e:	f002 fc7b 	bl	8003c48 <HAL_UART_Transmit>
 8001352:	e02e      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                        case 'A': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Left\r\n", 11, 1000); break;
 8001354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001358:	220b      	movs	r2, #11
 800135a:	492c      	ldr	r1, [pc, #176]	@ (800140c <HAL_UART_RxCpltCallback+0x4f4>)
 800135c:	4825      	ldr	r0, [pc, #148]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800135e:	f002 fc73 	bl	8003c48 <HAL_UART_Transmit>
 8001362:	e026      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                        case 'S': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Down\r\n", 11, 1000); break;
 8001364:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001368:	220b      	movs	r2, #11
 800136a:	4929      	ldr	r1, [pc, #164]	@ (8001410 <HAL_UART_RxCpltCallback+0x4f8>)
 800136c:	4821      	ldr	r0, [pc, #132]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800136e:	f002 fc6b 	bl	8003c48 <HAL_UART_Transmit>
 8001372:	e01e      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                        case 'D': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Right\r\n", 12, 1000); break;
 8001374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001378:	220c      	movs	r2, #12
 800137a:	4926      	ldr	r1, [pc, #152]	@ (8001414 <HAL_UART_RxCpltCallback+0x4fc>)
 800137c:	481d      	ldr	r0, [pc, #116]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800137e:	f002 fc63 	bl	8003c48 <HAL_UART_Transmit>
 8001382:	e016      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Unknown Direction\r\n", 20, 1000);
 8001384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001388:	2214      	movs	r2, #20
 800138a:	4923      	ldr	r1, [pc, #140]	@ (8001418 <HAL_UART_RxCpltCallback+0x500>)
 800138c:	4819      	ldr	r0, [pc, #100]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800138e:	f002 fc5b 	bl	8003c48 <HAL_UART_Transmit>
                            break;
 8001392:	e00e      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === INVALID COMMAND ===
                else {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8001394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001398:	2212      	movs	r2, #18
 800139a:	4920      	ldr	r1, [pc, #128]	@ (800141c <HAL_UART_RxCpltCallback+0x504>)
 800139c:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 800139e:	f002 fc53 	bl	8003c48 <HAL_UART_Transmit>
 80013a2:	e006      	b.n	80013b2 <HAL_UART_RxCpltCallback+0x49a>
                }
            }
            else {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 80013a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a8:	2212      	movs	r2, #18
 80013aa:	491c      	ldr	r1, [pc, #112]	@ (800141c <HAL_UART_RxCpltCallback+0x504>)
 80013ac:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 80013ae:	f002 fc4b 	bl	8003c48 <HAL_UART_Transmit>
            }

            cmd_index = 0; // reset buffer
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_UART_RxCpltCallback+0x508>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
        }
 80013b8:	e00d      	b.n	80013d6 <HAL_UART_RxCpltCallback+0x4be>
        else
        {
            if (cmd_index < sizeof(cmd_buffer) - 1)
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_UART_RxCpltCallback+0x508>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b3e      	cmp	r3, #62	@ 0x3e
 80013c0:	d809      	bhi.n	80013d6 <HAL_UART_RxCpltCallback+0x4be>
                cmd_buffer[cmd_index++] = c;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <HAL_UART_RxCpltCallback+0x508>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	b2d1      	uxtb	r1, r2
 80013ca:	4a15      	ldr	r2, [pc, #84]	@ (8001420 <HAL_UART_RxCpltCallback+0x508>)
 80013cc:	7011      	strb	r1, [r2, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <HAL_UART_RxCpltCallback+0x4d0>)
 80013d2:	7ebb      	ldrb	r3, [r7, #26]
 80013d4:	5453      	strb	r3, [r2, r1]
        }

        // Enable next UART RX interrupt
        HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	4912      	ldr	r1, [pc, #72]	@ (8001424 <HAL_UART_RxCpltCallback+0x50c>)
 80013da:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <HAL_UART_RxCpltCallback+0x4dc>)
 80013dc:	f002 fcbf 	bl	8003d5e <HAL_UART_Receive_IT>
    }
}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000378 	.word	0x20000378
 80013ec:	51eb851f 	.word	0x51eb851f
 80013f0:	080057c8 	.word	0x080057c8
 80013f4:	200002b0 	.word	0x200002b0
 80013f8:	2000001c 	.word	0x2000001c
 80013fc:	080057d8 	.word	0x080057d8
 8001400:	200002f8 	.word	0x200002f8
 8001404:	2000009c 	.word	0x2000009c
 8001408:	080057f4 	.word	0x080057f4
 800140c:	08005800 	.word	0x08005800
 8001410:	0800580c 	.word	0x0800580c
 8001414:	08005818 	.word	0x08005818
 8001418:	08005828 	.word	0x08005828
 800141c:	0800583c 	.word	0x0800583c
 8001420:	200003b8 	.word	0x200003b8
 8001424:	20000338 	.word	0x20000338

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>

08001434 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  FSM fsm;
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800143a:	f7ff f8bf 	bl	80005bc <_ZN3FSMC1Ev>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000009c 	.word	0x2000009c

08001448 <_GLOBAL__sub_I_fsm>:
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
 800144c:	f7ff fff2 	bl	8001434 <_Z41__static_initialization_and_destruction_0v>
 8001450:	bd80      	pop	{r7, pc}

08001452 <set_duty>:
};




void set_duty(motor_t* motor, uint32_t pulse_1) {
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <set_duty+0x1e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800146e:	e018      	b.n	80014a2 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d105      	bne.n	8001484 <set_duty+0x32>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001482:	e00e      	b.n	80014a2 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d105      	bne.n	8001498 <set_duty+0x46>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001496:	e004      	b.n	80014a2 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <set_duty_dual>:

void set_duty_dual(motor_dual* motor_d, uint32_t pulse_1, uint32_t pulse_2) {
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, pulse_1);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <set_duty_dual+0x20>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80014cc:	e018      	b.n	8001500 <set_duty_dual+0x52>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d105      	bne.n	80014e2 <set_duty_dual+0x34>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	6393      	str	r3, [r2, #56]	@ 0x38
 80014e0:	e00e      	b.n	8001500 <set_duty_dual+0x52>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d105      	bne.n	80014f6 <set_duty_dual+0x48>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014f4:	e004      	b.n	8001500 <set_duty_dual+0x52>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <set_duty_dual+0x66>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001512:	e018      	b.n	8001546 <set_duty_dual+0x98>
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d105      	bne.n	8001528 <set_duty_dual+0x7a>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001526:	e00e      	b.n	8001546 <set_duty_dual+0x98>
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d105      	bne.n	800153c <set_duty_dual+0x8e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800153a:	e004      	b.n	8001546 <set_duty_dual+0x98>
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <servo_duty>:
servo_t servo_1 = {
	.PWM_CHANNEL = TIM_CHANNEL_4,
	.htim = &htim1
};

void servo_duty(servo_t* servo, uint32_t pulse_1) {
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <servo_duty+0x1e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800156e:	e018      	b.n	80015a2 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d105      	bne.n	8001584 <servo_duty+0x32>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001582:	e00e      	b.n	80015a2 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b08      	cmp	r3, #8
 800158a:	d105      	bne.n	8001598 <servo_duty+0x46>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001596:	e004      	b.n	80015a2 <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a4b      	ldr	r2, [pc, #300]	@ (800174c <HAL_I2C_MspInit+0x14c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d13e      	bne.n	80016a0 <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800163e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001650:	2304      	movs	r3, #4
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	483e      	ldr	r0, [pc, #248]	@ (8001754 <HAL_I2C_MspInit+0x154>)
 800165c:	f000 fd08 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001672:	2309      	movs	r3, #9
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4835      	ldr	r0, [pc, #212]	@ (8001754 <HAL_I2C_MspInit+0x154>)
 800167e:	f000 fcf7 	bl	8002070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a31      	ldr	r2, [pc, #196]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 800168c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800169e:	e050      	b.n	8001742 <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001758 <HAL_I2C_MspInit+0x158>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d14b      	bne.n	8001742 <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016f4:	2304      	movs	r3, #4
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4817      	ldr	r0, [pc, #92]	@ (800175c <HAL_I2C_MspInit+0x15c>)
 8001700:	f000 fcb6 	bl	8002070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001716:	2309      	movs	r3, #9
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <HAL_I2C_MspInit+0x154>)
 8001722:	f000 fca5 	bl	8002070 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 8001730:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_I2C_MspInit+0x150>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
}
 8001742:	bf00      	nop
 8001744:	3730      	adds	r7, #48	@ 0x30
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40005800 	.word	0x40005800
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400
 8001758:	40005c00 	.word	0x40005c00
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <HAL_TIM_PWM_MspInit+0x8c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a1d      	ldr	r2, [pc, #116]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800178e:	e026      	b.n	80017de <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_TIM_PWM_MspInit+0x94>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10e      	bne.n	80017b8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
}
 80017b6:	e012      	b.n	80017de <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <HAL_TIM_PWM_MspInit+0x98>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10d      	bne.n	80017de <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x90>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
}
 80017de:	bf00      	nop
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40000c00 	.word	0x40000c00

080017fc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	@ 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181c:	d12c      	bne.n	8001878 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	4a2f      	ldr	r2, [pc, #188]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6413      	str	r3, [r2, #64]	@ 0x40
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a28      	ldr	r2, [pc, #160]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001856:	2322      	movs	r3, #34	@ 0x22
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001866:	2301      	movs	r3, #1
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	481d      	ldr	r0, [pc, #116]	@ (80018e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001872:	f000 fbfd 	bl	8002070 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001876:	e030      	b.n	80018da <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <HAL_TIM_Encoder_MspInit+0xf0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12b      	bne.n	80018da <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a0f      	ldr	r2, [pc, #60]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ba:	23c0      	movs	r3, #192	@ 0xc0
 80018bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80018d6:	f000 fbcb 	bl	8002070 <HAL_GPIO_Init>
}
 80018da:	bf00      	nop
 80018dc:	3730      	adds	r7, #48	@ 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40000800 	.word	0x40000800
 80018f0:	40020400 	.word	0x40020400

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a36      	ldr	r2, [pc, #216]	@ (80019ec <HAL_TIM_MspPostInit+0xf8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11f      	bne.n	8001956 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a34      	ldr	r2, [pc, #208]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b32      	ldr	r3, [pc, #200]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001932:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4829      	ldr	r0, [pc, #164]	@ (80019f4 <HAL_TIM_MspPostInit+0x100>)
 8001950:	f000 fb8e 	bl	8002070 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001954:	e046      	b.n	80019e4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <HAL_TIM_MspPostInit+0x104>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d11e      	bne.n	800199e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800197c:	2333      	movs	r3, #51	@ 0x33
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800198c:	2302      	movs	r3, #2
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4819      	ldr	r0, [pc, #100]	@ (80019fc <HAL_TIM_MspPostInit+0x108>)
 8001998:	f000 fb6a 	bl	8002070 <HAL_GPIO_Init>
}
 800199c:	e022      	b.n	80019e4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_TIM_MspPostInit+0x10c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d11d      	bne.n	80019e4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_TIM_MspPostInit+0xfc>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c4:	230c      	movs	r3, #12
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019d4:	2302      	movs	r3, #2
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <HAL_TIM_MspPostInit+0x100>)
 80019e0:	f000 fb46 	bl	8002070 <HAL_GPIO_Init>
}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	@ 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40000c00 	.word	0x40000c00

08001a04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_UART_MspInit+0x94>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d134      	bne.n	8001a90 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <HAL_UART_MspInit+0x98>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a9c <HAL_UART_MspInit+0x98>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_UART_MspInit+0x98>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_UART_MspInit+0x98>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <HAL_UART_MspInit+0x98>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_UART_MspInit+0x98>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001a5e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a70:	2307      	movs	r3, #7
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <HAL_UART_MspInit+0x9c>)
 8001a7c:	f000 faf8 	bl	8002070 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2025      	movs	r0, #37	@ 0x25
 8001a86:	f000 fa2a 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8a:	2025      	movs	r0, #37	@ 0x25
 8001a8c:	f000 fa43 	bl	8001f16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	@ 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afa:	f000 f8d1 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <USART1_IRQHandler+0x10>)
 8001b0a:	f002 f94d 	bl	8003da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002b0 	.word	0x200002b0

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	@ (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f003 f94e 	bl	8004de8 <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20020000 	.word	0x20020000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	200003bc 	.word	0x200003bc
 8001b80:	20000510 	.word	0x20000510

08001b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bac:	f7ff ffea 	bl	8001b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bb2:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f003 f90d 	bl	8004df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7fe fd45 	bl	8000668 <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001bec:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8001bf0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001bf4:	2000050c 	.word	0x2000050c

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f94f 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fcbe 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f967 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f92f 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000024 	.word	0x20000024
 8001c98:	2000002c 	.word	0x2000002c
 8001c9c:	20000028 	.word	0x20000028

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2000002c 	.word	0x2000002c
 8001cc4:	200003c0 	.word	0x200003c0

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200003c0 	.word	0x200003c0

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000002c 	.word	0x2000002c

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	@ (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	@ (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff3e 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff8e 	bl	8001e1c <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff31 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa2 	bl	8001e84 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff feb6 	bl	8001cc8 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d008      	beq.n	8001f7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2280      	movs	r2, #128	@ 0x80
 8001f6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e052      	b.n	8002022 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0216 	bic.w	r2, r2, #22
 8001f8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <HAL_DMA_Abort+0x62>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0208 	bic.w	r2, r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fcc:	e013      	b.n	8001ff6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fce:	f7ff fe7b 	bl	8001cc8 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d90c      	bls.n	8001ff6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e015      	b.n	8002022 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e4      	bne.n	8001fce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	223f      	movs	r2, #63	@ 0x3f
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d004      	beq.n	8002048 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00c      	b.n	8002062 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2205      	movs	r2, #5
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e159      	b.n	8002340 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800208c:	2201      	movs	r2, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f040 8148 	bne.w	800233a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d005      	beq.n	80020c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d130      	bne.n	8002124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f8:	2201      	movs	r2, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 0201 	and.w	r2, r3, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b03      	cmp	r3, #3
 800212e:	d017      	beq.n	8002160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d123      	bne.n	80021b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a2 	beq.w	800233a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b57      	ldr	r3, [pc, #348]	@ (8002358 <HAL_GPIO_Init+0x2e8>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_GPIO_Init+0x2e8>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b54      	ldr	r3, [pc, #336]	@ (8002358 <HAL_GPIO_Init+0x2e8>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002212:	4a52      	ldr	r2, [pc, #328]	@ (800235c <HAL_GPIO_Init+0x2ec>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a49      	ldr	r2, [pc, #292]	@ (8002360 <HAL_GPIO_Init+0x2f0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d019      	beq.n	8002272 <HAL_GPIO_Init+0x202>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a48      	ldr	r2, [pc, #288]	@ (8002364 <HAL_GPIO_Init+0x2f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_GPIO_Init+0x1fe>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a47      	ldr	r2, [pc, #284]	@ (8002368 <HAL_GPIO_Init+0x2f8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00d      	beq.n	800226a <HAL_GPIO_Init+0x1fa>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a46      	ldr	r2, [pc, #280]	@ (800236c <HAL_GPIO_Init+0x2fc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x1f6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a45      	ldr	r2, [pc, #276]	@ (8002370 <HAL_GPIO_Init+0x300>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_GPIO_Init+0x1f2>
 800225e:	2304      	movs	r3, #4
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x204>
 8002262:	2307      	movs	r3, #7
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x204>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x204>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x204>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x204>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	@ (800235c <HAL_GPIO_Init+0x2ec>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <HAL_GPIO_Init+0x304>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002374 <HAL_GPIO_Init+0x304>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_GPIO_Init+0x304>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a24      	ldr	r2, [pc, #144]	@ (8002374 <HAL_GPIO_Init+0x304>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <HAL_GPIO_Init+0x304>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1a      	ldr	r2, [pc, #104]	@ (8002374 <HAL_GPIO_Init+0x304>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <HAL_GPIO_Init+0x304>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <HAL_GPIO_Init+0x304>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f aea2 	bls.w	800208c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002394:	e003      	b.n	800239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e12b      	b.n	8002616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff f914 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	@ 0x24
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800240e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002410:	f000 fd40 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a81      	ldr	r2, [pc, #516]	@ (8002620 <HAL_I2C_Init+0x274>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d807      	bhi.n	8002430 <HAL_I2C_Init+0x84>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a80      	ldr	r2, [pc, #512]	@ (8002624 <HAL_I2C_Init+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e006      	b.n	800243e <HAL_I2C_Init+0x92>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <HAL_I2C_Init+0x27c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0e7      	b.n	8002616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a78      	ldr	r2, [pc, #480]	@ (800262c <HAL_I2C_Init+0x280>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_I2C_Init+0x274>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d802      	bhi.n	8002480 <HAL_I2C_Init+0xd4>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	e009      	b.n	8002494 <HAL_I2C_Init+0xe8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a69      	ldr	r2, [pc, #420]	@ (8002630 <HAL_I2C_Init+0x284>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	3301      	adds	r3, #1
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	495c      	ldr	r1, [pc, #368]	@ (8002620 <HAL_I2C_Init+0x274>)
 80024b0:	428b      	cmp	r3, r1
 80024b2:	d819      	bhi.n	80024e8 <HAL_I2C_Init+0x13c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e59      	subs	r1, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_I2C_Init+0x138>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e59      	subs	r1, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	e051      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e04f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_I2C_Init+0x168>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e012      	b.n	800253a <HAL_I2C_Init+0x18e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x196>
 800253e:	2301      	movs	r3, #1
 8002540:	e022      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_I2C_Init+0x1bc>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e58      	subs	r0, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	fbb0 f3f3 	udiv	r3, r0, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6911      	ldr	r1, [r2, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	000186a0 	.word	0x000186a0
 8002624:	001e847f 	.word	0x001e847f
 8002628:	003d08ff 	.word	0x003d08ff
 800262c:	431bde83 	.word	0x431bde83
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e267      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d075      	beq.n	800273e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002652:	4b88      	ldr	r3, [pc, #544]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00c      	beq.n	8002678 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b85      	ldr	r3, [pc, #532]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002666:	2b08      	cmp	r3, #8
 8002668:	d112      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266a:	4b82      	ldr	r3, [pc, #520]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002676:	d10b      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4b7e      	ldr	r3, [pc, #504]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05b      	beq.n	800273c <HAL_RCC_OscConfig+0x108>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d157      	bne.n	800273c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e242      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002698:	d106      	bne.n	80026a8 <HAL_RCC_OscConfig+0x74>
 800269a:	4b76      	ldr	r3, [pc, #472]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a75      	ldr	r2, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x98>
 80026b2:	4b70      	ldr	r3, [pc, #448]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b6d      	ldr	r3, [pc, #436]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026cc:	4b69      	ldr	r3, [pc, #420]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a68      	ldr	r2, [pc, #416]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a65      	ldr	r2, [pc, #404]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff faec 	bl	8001cc8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7ff fae8 	bl	8001cc8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e207      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b5b      	ldr	r3, [pc, #364]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0xc0>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fad8 	bl	8001cc8 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff fad4 	bl	8001cc8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1f3      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	4b51      	ldr	r3, [pc, #324]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0xe8>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d063      	beq.n	8002812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800274a:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11c      	bne.n	800279c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b44      	ldr	r3, [pc, #272]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d116      	bne.n	800279c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x152>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e1c7      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4937      	ldr	r1, [pc, #220]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	e03a      	b.n	8002812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <HAL_RCC_OscConfig+0x244>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff fa8d 	bl	8001cc8 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b2:	f7ff fa89 	bl	8001cc8 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1a8      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4925      	ldr	r1, [pc, #148]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e015      	b.n	8002812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_RCC_OscConfig+0x244>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7ff fa6c 	bl	8001cc8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f4:	f7ff fa68 	bl	8001cc8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e187      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <HAL_RCC_OscConfig+0x248>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7ff fa4c 	bl	8001cc8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7ff fa48 	bl	8001cc8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e167      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x200>
 8002852:	e01b      	b.n	800288c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_RCC_OscConfig+0x248>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7ff fa35 	bl	8001cc8 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	e00e      	b.n	8002880 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7ff fa31 	bl	8001cc8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d907      	bls.n	8002880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e150      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
 8002874:	40023800 	.word	0x40023800
 8002878:	42470000 	.word	0x42470000
 800287c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b88      	ldr	r3, [pc, #544]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ea      	bne.n	8002862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8097 	beq.w	80029c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ba:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b77      	ldr	r3, [pc, #476]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b74      	ldr	r3, [pc, #464]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a73      	ldr	r2, [pc, #460]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7ff f9f1 	bl	8001cc8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7ff f9ed 	bl	8001cc8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e10c      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x2ea>
 8002910:	4b64      	ldr	r3, [pc, #400]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x324>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x30c>
 8002926:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	@ 0x70
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x324>
 8002940:	4b58      	ldr	r3, [pc, #352]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a57      	ldr	r2, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
 800294c:	4b55      	ldr	r3, [pc, #340]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a54      	ldr	r2, [pc, #336]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff f9b2 	bl	8001cc8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7ff f9ae 	bl	8001cc8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0cb      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0ee      	beq.n	8002968 <HAL_RCC_OscConfig+0x334>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7ff f99c 	bl	8001cc8 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7ff f998 	bl	8001cc8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0b5      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029aa:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1ee      	bne.n	8002994 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4a38      	ldr	r2, [pc, #224]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a1 	beq.w	8002b14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029d2:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d05c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d141      	bne.n	8002a6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_OscConfig+0x478>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff f96c 	bl	8001cc8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff f968 	bl	8001cc8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e087      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	491b      	ldr	r1, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x478>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff f941 	bl	8001cc8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff f93d 	bl	8001cc8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e05c      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x416>
 8002a68:	e054      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f92a 	bl	8001cc8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f926 	bl	8001cc8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e045      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x444>
 8002a96:	e03d      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e038      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x4ec>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d028      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d121      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d11a      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d111      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0cc      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b68      	ldr	r3, [pc, #416]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d90c      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b65      	ldr	r3, [pc, #404]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a52      	ldr	r2, [pc, #328]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d044      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e067      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4934      	ldr	r1, [pc, #208]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7ff f858 	bl	8001cc8 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7ff f854 	bl	8001cc8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b25      	ldr	r3, [pc, #148]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20c      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c96:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	@ (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe ffb8 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08005850 	.word	0x08005850
 8002ce8:	20000024 	.word	0x20000024
 8002cec:	20000028 	.word	0x20000028

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b090      	sub	sp, #64	@ 0x40
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d08:	4b59      	ldr	r3, [pc, #356]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d00d      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	f200 80a1 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d22:	e09b      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d28:	e09b      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2a:	4b53      	ldr	r3, [pc, #332]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d2e:	e098      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4b4f      	ldr	r3, [pc, #316]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b4a      	ldr	r3, [pc, #296]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d5c:	fb03 f201 	mul.w	r2, r3, r1
 8002d60:	2300      	movs	r3, #0
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	4a43      	ldr	r2, [pc, #268]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d70:	460a      	mov	r2, r1
 8002d72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d76:	4413      	add	r3, r2
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	61fa      	str	r2, [r7, #28]
 8002d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d8a:	f7fd fa81 	bl	8000290 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4613      	mov	r3, r2
 8002d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d96:	e053      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4b35      	ldr	r3, [pc, #212]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	617a      	str	r2, [r7, #20]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002daa:	f04f 0b00 	mov.w	fp, #0
 8002dae:	4652      	mov	r2, sl
 8002db0:	465b      	mov	r3, fp
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	ebb2 080a 	subs.w	r8, r2, sl
 8002dca:	eb63 090b 	sbc.w	r9, r3, fp
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002de2:	ebb2 0408 	subs.w	r4, r2, r8
 8002de6:	eb63 0509 	sbc.w	r5, r3, r9
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	00eb      	lsls	r3, r5, #3
 8002df4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df8:	00e2      	lsls	r2, r4, #3
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	eb14 030a 	adds.w	r3, r4, sl
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	eb45 030b 	adc.w	r3, r5, fp
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e16:	4629      	mov	r1, r5
 8002e18:	028b      	lsls	r3, r1, #10
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e20:	4621      	mov	r1, r4
 8002e22:	028a      	lsls	r2, r1, #10
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	60fa      	str	r2, [r7, #12]
 8002e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e34:	f7fd fa2c 	bl	8000290 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3740      	adds	r7, #64	@ 0x40
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	017d7840 	.word	0x017d7840

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000024 	.word	0x20000024

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4903      	ldr	r1, [pc, #12]	@ (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08005860 	.word	0x08005860

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ec0:	f7ff ffdc 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0b5b      	lsrs	r3, r3, #13
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	@ (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08005860 	.word	0x08005860

08002ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e041      	b.n	8002f7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fc28 	bl	8001760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f000 fb42 	bl	80035ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_TIM_PWM_Start_IT+0x28>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e022      	b.n	8002ff2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d109      	bne.n	8002fc6 <HAL_TIM_PWM_Start_IT+0x42>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e015      	b.n	8002ff2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d109      	bne.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x5c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e008      	b.n	8002ff2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0b3      	b.n	8003162 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_PWM_Start_IT+0x86>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003008:	e013      	b.n	8003032 <HAL_TIM_PWM_Start_IT+0xae>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b04      	cmp	r3, #4
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start_IT+0x96>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003018:	e00b      	b.n	8003032 <HAL_TIM_PWM_Start_IT+0xae>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start_IT+0xa6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003028:	e003      	b.n	8003032 <HAL_TIM_PWM_Start_IT+0xae>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d841      	bhi.n	80030bc <HAL_TIM_PWM_Start_IT+0x138>
 8003038:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_TIM_PWM_Start_IT+0xbc>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003075 	.word	0x08003075
 8003044:	080030bd 	.word	0x080030bd
 8003048:	080030bd 	.word	0x080030bd
 800304c:	080030bd 	.word	0x080030bd
 8003050:	08003087 	.word	0x08003087
 8003054:	080030bd 	.word	0x080030bd
 8003058:	080030bd 	.word	0x080030bd
 800305c:	080030bd 	.word	0x080030bd
 8003060:	08003099 	.word	0x08003099
 8003064:	080030bd 	.word	0x080030bd
 8003068:	080030bd 	.word	0x080030bd
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030ab 	.word	0x080030ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0202 	orr.w	r2, r2, #2
 8003082:	60da      	str	r2, [r3, #12]
      break;
 8003084:	e01d      	b.n	80030c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0204 	orr.w	r2, r2, #4
 8003094:	60da      	str	r2, [r3, #12]
      break;
 8003096:	e014      	b.n	80030c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	60da      	str	r2, [r3, #12]
      break;
 80030a8:	e00b      	b.n	80030c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0210 	orr.w	r2, r2, #16
 80030b8:	60da      	str	r2, [r3, #12]
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d14b      	bne.n	8003160 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fc83 	bl	80039dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a24      	ldr	r2, [pc, #144]	@ (800316c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_TIM_PWM_Start_IT+0x1a8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003102:	d013      	beq.n	800312c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_TIM_PWM_Start_IT+0x1a8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a15      	ldr	r2, [pc, #84]	@ (800317c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d111      	bne.n	8003150 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b06      	cmp	r3, #6
 800313c:	d010      	beq.n	8003160 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314e:	e007      	b.n	8003160 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000

08003180 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e097      	b.n	80032c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fe fb27 	bl	80017fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031c4:	f023 0307 	bic.w	r3, r3, #7
 80031c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 f9e9 	bl	80035ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	4313      	orrs	r3, r2
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003220:	f023 030c 	bic.w	r3, r3, #12
 8003224:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800322c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4313      	orrs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	011a      	lsls	r2, r3, #4
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	4313      	orrs	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4313      	orrs	r3, r2
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d110      	bne.n	800331e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003302:	7b7b      	ldrb	r3, [r7, #13]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d001      	beq.n	800330c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e089      	b.n	8003420 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800331c:	e031      	b.n	8003382 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d110      	bne.n	8003346 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800332a:	7b3b      	ldrb	r3, [r7, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e075      	b.n	8003420 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003344:	e01d      	b.n	8003382 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d108      	bne.n	800335e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003352:	7b7b      	ldrb	r3, [r7, #13]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d102      	bne.n	800335e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003358:	7b3b      	ldrb	r3, [r7, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e05e      	b.n	8003420 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d010      	beq.n	80033b0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800338e:	e01f      	b.n	80033d0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fb1f 	bl	80039dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0202 	orr.w	r2, r2, #2
 80033ac:	60da      	str	r2, [r3, #12]
      break;
 80033ae:	e02e      	b.n	800340e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	2104      	movs	r1, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fb0f 	bl	80039dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0204 	orr.w	r2, r2, #4
 80033cc:	60da      	str	r2, [r3, #12]
      break;
 80033ce:	e01e      	b.n	800340e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 faff 	bl	80039dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2201      	movs	r2, #1
 80033e4:	2104      	movs	r1, #4
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 faf8 	bl	80039dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0202 	orr.w	r2, r2, #2
 80033fa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0204 	orr.w	r2, r2, #4
 800340a:	60da      	str	r2, [r3, #12]
      break;
 800340c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0ae      	b.n	80035a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	f200 809f 	bhi.w	8003594 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003456:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	08003491 	.word	0x08003491
 8003460:	08003595 	.word	0x08003595
 8003464:	08003595 	.word	0x08003595
 8003468:	08003595 	.word	0x08003595
 800346c:	080034d1 	.word	0x080034d1
 8003470:	08003595 	.word	0x08003595
 8003474:	08003595 	.word	0x08003595
 8003478:	08003595 	.word	0x08003595
 800347c:	08003513 	.word	0x08003513
 8003480:	08003595 	.word	0x08003595
 8003484:	08003595 	.word	0x08003595
 8003488:	08003595 	.word	0x08003595
 800348c:	08003553 	.word	0x08003553
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f914 	bl	80036c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6999      	ldr	r1, [r3, #24]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	619a      	str	r2, [r3, #24]
      break;
 80034ce:	e064      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f95a 	bl	8003790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6999      	ldr	r1, [r3, #24]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	021a      	lsls	r2, r3, #8
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	619a      	str	r2, [r3, #24]
      break;
 8003510:	e043      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f9a5 	bl	8003868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0208 	orr.w	r2, r2, #8
 800352c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0204 	bic.w	r2, r2, #4
 800353c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69d9      	ldr	r1, [r3, #28]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	61da      	str	r2, [r3, #28]
      break;
 8003550:	e023      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f9ef 	bl	800393c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800356c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	61da      	str	r2, [r3, #28]
      break;
 8003592:	e002      	b.n	800359a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
      break;
 8003598:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a3a      	ldr	r2, [pc, #232]	@ (80036a8 <TIM_Base_SetConfig+0xfc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00f      	beq.n	80035e4 <TIM_Base_SetConfig+0x38>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ca:	d00b      	beq.n	80035e4 <TIM_Base_SetConfig+0x38>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a37      	ldr	r2, [pc, #220]	@ (80036ac <TIM_Base_SetConfig+0x100>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <TIM_Base_SetConfig+0x38>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a36      	ldr	r2, [pc, #216]	@ (80036b0 <TIM_Base_SetConfig+0x104>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_Base_SetConfig+0x38>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a35      	ldr	r2, [pc, #212]	@ (80036b4 <TIM_Base_SetConfig+0x108>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d108      	bne.n	80035f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2b      	ldr	r2, [pc, #172]	@ (80036a8 <TIM_Base_SetConfig+0xfc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01b      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003604:	d017      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a28      	ldr	r2, [pc, #160]	@ (80036ac <TIM_Base_SetConfig+0x100>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a27      	ldr	r2, [pc, #156]	@ (80036b0 <TIM_Base_SetConfig+0x104>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00f      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a26      	ldr	r2, [pc, #152]	@ (80036b4 <TIM_Base_SetConfig+0x108>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a25      	ldr	r2, [pc, #148]	@ (80036b8 <TIM_Base_SetConfig+0x10c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a24      	ldr	r2, [pc, #144]	@ (80036bc <TIM_Base_SetConfig+0x110>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a23      	ldr	r2, [pc, #140]	@ (80036c0 <TIM_Base_SetConfig+0x114>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0e      	ldr	r2, [pc, #56]	@ (80036a8 <TIM_Base_SetConfig+0xfc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f023 0201 	bic.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	611a      	str	r2, [r3, #16]
  }
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0201 	bic.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 0302 	bic.w	r3, r3, #2
 800370c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a1c      	ldr	r2, [pc, #112]	@ (800378c <TIM_OC1_SetConfig+0xc8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10c      	bne.n	800373a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0308 	bic.w	r3, r3, #8
 8003726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a13      	ldr	r2, [pc, #76]	@ (800378c <TIM_OC1_SetConfig+0xc8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d111      	bne.n	8003766 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40010000 	.word	0x40010000

08003790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0210 	bic.w	r2, r3, #16
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <TIM_OC2_SetConfig+0xd4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10d      	bne.n	800380c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800380a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a15      	ldr	r2, [pc, #84]	@ (8003864 <TIM_OC2_SetConfig+0xd4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d113      	bne.n	800383c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800381a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000

08003868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0303 	bic.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <TIM_OC3_SetConfig+0xd0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10d      	bne.n	80038e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <TIM_OC3_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d113      	bne.n	8003912 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40010000 	.word	0x40010000

0800393c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <TIM_OC4_SetConfig+0x9c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d109      	bne.n	80039b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000

080039dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e050      	b.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d013      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a16      	ldr	r2, [pc, #88]	@ (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a15      	ldr	r2, [pc, #84]	@ (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800
 8003afc:	40000c00 	.word	0x40000c00
 8003b00:	40014000 	.word	0x40014000

08003b04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e03d      	b.n	8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e042      	b.n	8003c40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd ff18 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	@ 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fdbd 	bl	800476c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d175      	bne.n	8003d54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_UART_Transmit+0x2c>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e06e      	b.n	8003d56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	@ 0x21
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fe f81f 	bl	8001cc8 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x6c>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cbc:	e02e      	b.n	8003d1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	@ 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb1f 	bl	800430c <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e03a      	b.n	8003d56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1cb      	bne.n	8003cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2140      	movs	r1, #64	@ 0x40
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 faeb 	bl	800430c <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e006      	b.n	8003d56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d112      	bne.n	8003d9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_UART_Receive_IT+0x26>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e00b      	b.n	8003da0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	461a      	mov	r2, r3
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fb12 	bl	80043be <UART_Start_Receive_IT>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	e000      	b.n	8003da0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b0ba      	sub	sp, #232	@ 0xe8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_UART_IRQHandler+0x66>
 8003dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fbf2 	bl	80045f0 <UART_Receive_IT>
      return;
 8003e0c:	e25b      	b.n	80042c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80de 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x22c>
 8003e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80d1 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xae>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0xd2>
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f043 0202 	orr.w	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_UART_IRQHandler+0xf6>
 8003e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f043 0204 	orr.w	r2, r3, #4
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d011      	beq.n	8003ece <HAL_UART_IRQHandler+0x126>
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0208 	orr.w	r2, r3, #8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 81f2 	beq.w	80042bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x14e>
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb7d 	bl	80045f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b40      	cmp	r3, #64	@ 0x40
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_UART_IRQHandler+0x17a>
 8003f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04f      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fa85 	bl	8004432 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d141      	bne.n	8003fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1d9      	bne.n	8003f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8004188 <HAL_UART_IRQHandler+0x3e0>)
 8003f90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe f847 	bl	800202a <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00e      	b.n	8003fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f994 	bl	80042e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e00a      	b.n	8003fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f990 	bl	80042e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	e006      	b.n	8003fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f98c 	bl	80042e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fce:	e175      	b.n	80042bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	bf00      	nop
    return;
 8003fd2:	e173      	b.n	80042bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 814f 	bne.w	800427c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8148 	beq.w	800427c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8141 	beq.w	800427c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	f040 80b6 	bne.w	800418c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800402c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8145 	beq.w	80042c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800403a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800403e:	429a      	cmp	r2, r3
 8004040:	f080 813e 	bcs.w	80042c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800404a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004056:	f000 8088 	beq.w	800416a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004070:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800408a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800409e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d9      	bne.n	800405a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3314      	adds	r3, #20
 80040ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e1      	bne.n	80040a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3314      	adds	r3, #20
 80040e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800410c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e3      	bne.n	80040e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800414c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800414e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800415a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e3      	bne.n	8004128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	4618      	mov	r0, r3
 8004166:	f7fd fef0 	bl	8001f4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004178:	b29b      	uxth	r3, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	b29b      	uxth	r3, r3
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8b7 	bl	80042f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004186:	e09b      	b.n	80042c0 <HAL_UART_IRQHandler+0x518>
 8004188:	080044f9 	.word	0x080044f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004194:	b29b      	uxth	r3, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 808e 	beq.w	80042c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8089 	beq.w	80042c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e3      	bne.n	80041b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	623b      	str	r3, [r7, #32]
   return(result);
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800420e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e3      	bne.n	80041ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004254:	61fa      	str	r2, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e3      	bne.n	8004230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800426e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004272:	4619      	mov	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f83d 	bl	80042f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800427a:	e023      	b.n	80042c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_UART_IRQHandler+0x4f4>
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f943 	bl	8004520 <UART_Transmit_IT>
    return;
 800429a:	e014      	b.n	80042c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00e      	beq.n	80042c6 <HAL_UART_IRQHandler+0x51e>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f983 	bl	80045c0 <UART_EndTransmit_IT>
    return;
 80042ba:	e004      	b.n	80042c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042c4:	bf00      	nop
  }
}
 80042c6:	37e8      	adds	r7, #232	@ 0xe8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431c:	e03b      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d037      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fd fccf 	bl	8001cc8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <UART_WaitOnFlagUntilTimeout+0x30>
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e03a      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d023      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x8a>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b80      	cmp	r3, #128	@ 0x80
 8004352:	d020      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d01d      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d116      	bne.n	8004396 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f857 	bl	8004432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2208      	movs	r2, #8
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e00f      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d0b4      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2222      	movs	r2, #34	@ 0x22
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004402:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0220 	orr.w	r2, r2, #32
 8004422:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004432:	b480      	push	{r7}
 8004434:	b095      	sub	sp, #84	@ 0x54
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800445a:	643a      	str	r2, [r7, #64]	@ 0x40
 800445c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	61fb      	str	r3, [r7, #28]
   return(result);
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800448e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d119      	bne.n	80044de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f023 0310 	bic.w	r3, r3, #16
 80044c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ca:	61ba      	str	r2, [r7, #24]
 80044cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	613b      	str	r3, [r7, #16]
   return(result);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044ec:	bf00      	nop
 80044ee:	3754      	adds	r7, #84	@ 0x54
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff fee4 	bl	80042e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b21      	cmp	r3, #33	@ 0x21
 8004532:	d13e      	bne.n	80045b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453c:	d114      	bne.n	8004568 <UART_Transmit_IT+0x48>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d110      	bne.n	8004568 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800455a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	1c9a      	adds	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]
 8004566:	e008      	b.n	800457a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	1c59      	adds	r1, r3, #1
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6211      	str	r1, [r2, #32]
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	4619      	mov	r1, r3
 8004588:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800459c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fe73 	bl	80042cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	@ 0x30
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b22      	cmp	r3, #34	@ 0x22
 8004602:	f040 80ae 	bne.w	8004762 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460e:	d117      	bne.n	8004640 <UART_Receive_IT+0x50>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d113      	bne.n	8004640 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	b29a      	uxth	r2, r3
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	629a      	str	r2, [r3, #40]	@ 0x28
 800463e:	e026      	b.n	800468e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004652:	d007      	beq.n	8004664 <UART_Receive_IT+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <UART_Receive_IT+0x82>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	b2da      	uxtb	r2, r3
 800466c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e008      	b.n	8004684 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467e:	b2da      	uxtb	r2, r3
 8004680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004682:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4619      	mov	r1, r3
 800469c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d15d      	bne.n	800475e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0220 	bic.w	r2, r2, #32
 80046b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d135      	bne.n	8004754 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	613b      	str	r3, [r7, #16]
   return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f023 0310 	bic.w	r3, r3, #16
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470e:	623a      	str	r2, [r7, #32]
 8004710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	69f9      	ldr	r1, [r7, #28]
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	61bb      	str	r3, [r7, #24]
   return(result);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e5      	bne.n	80046ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b10      	cmp	r3, #16
 800472e:	d10a      	bne.n	8004746 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fdd1 	bl	80042f4 <HAL_UARTEx_RxEventCallback>
 8004752:	e002      	b.n	800475a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fc fbdf 	bl	8000f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e002      	b.n	8004764 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3730      	adds	r7, #48	@ 0x30
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004770:	b0c0      	sub	sp, #256	@ 0x100
 8004772:	af00      	add	r7, sp, #0
 8004774:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	68d9      	ldr	r1, [r3, #12]
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	ea40 0301 	orr.w	r3, r0, r1
 8004794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047c4:	f021 010c 	bic.w	r1, r1, #12
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047d2:	430b      	orrs	r3, r1
 80047d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e6:	6999      	ldr	r1, [r3, #24]
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	ea40 0301 	orr.w	r3, r0, r1
 80047f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004a38 <UART_SetConfig+0x2cc>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d005      	beq.n	800480c <UART_SetConfig+0xa0>
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b8d      	ldr	r3, [pc, #564]	@ (8004a3c <UART_SetConfig+0x2d0>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d104      	bne.n	8004816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe fb56 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8004810:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004814:	e003      	b.n	800481e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004816:	f7fe fb3d 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 800481a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004828:	f040 810c 	bne.w	8004a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800482c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004836:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800483a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800483e:	4622      	mov	r2, r4
 8004840:	462b      	mov	r3, r5
 8004842:	1891      	adds	r1, r2, r2
 8004844:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004846:	415b      	adcs	r3, r3
 8004848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800484a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800484e:	4621      	mov	r1, r4
 8004850:	eb12 0801 	adds.w	r8, r2, r1
 8004854:	4629      	mov	r1, r5
 8004856:	eb43 0901 	adc.w	r9, r3, r1
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800486a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486e:	4690      	mov	r8, r2
 8004870:	4699      	mov	r9, r3
 8004872:	4623      	mov	r3, r4
 8004874:	eb18 0303 	adds.w	r3, r8, r3
 8004878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800487c:	462b      	mov	r3, r5
 800487e:	eb49 0303 	adc.w	r3, r9, r3
 8004882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004892:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800489a:	460b      	mov	r3, r1
 800489c:	18db      	adds	r3, r3, r3
 800489e:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a0:	4613      	mov	r3, r2
 80048a2:	eb42 0303 	adc.w	r3, r2, r3
 80048a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048b0:	f7fb fcee 	bl	8000290 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4b61      	ldr	r3, [pc, #388]	@ (8004a40 <UART_SetConfig+0x2d4>)
 80048ba:	fba3 2302 	umull	r2, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	011c      	lsls	r4, r3, #4
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048dc:	415b      	adcs	r3, r3
 80048de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048e4:	4641      	mov	r1, r8
 80048e6:	eb12 0a01 	adds.w	sl, r2, r1
 80048ea:	4649      	mov	r1, r9
 80048ec:	eb43 0b01 	adc.w	fp, r3, r1
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004904:	4692      	mov	sl, r2
 8004906:	469b      	mov	fp, r3
 8004908:	4643      	mov	r3, r8
 800490a:	eb1a 0303 	adds.w	r3, sl, r3
 800490e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004912:	464b      	mov	r3, r9
 8004914:	eb4b 0303 	adc.w	r3, fp, r3
 8004918:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004928:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800492c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004930:	460b      	mov	r3, r1
 8004932:	18db      	adds	r3, r3, r3
 8004934:	643b      	str	r3, [r7, #64]	@ 0x40
 8004936:	4613      	mov	r3, r2
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	647b      	str	r3, [r7, #68]	@ 0x44
 800493e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004946:	f7fb fca3 	bl	8000290 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4611      	mov	r1, r2
 8004950:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004952:	fba3 2301 	umull	r2, r3, r3, r1
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2264      	movs	r2, #100	@ 0x64
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	1acb      	subs	r3, r1, r3
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004966:	4b36      	ldr	r3, [pc, #216]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004968:	fba3 2302 	umull	r2, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004974:	441c      	add	r4, r3
 8004976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004980:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004990:	415b      	adcs	r3, r3
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004998:	4641      	mov	r1, r8
 800499a:	1851      	adds	r1, r2, r1
 800499c:	6339      	str	r1, [r7, #48]	@ 0x30
 800499e:	4649      	mov	r1, r9
 80049a0:	414b      	adcs	r3, r1
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049b0:	4659      	mov	r1, fp
 80049b2:	00cb      	lsls	r3, r1, #3
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ba:	4651      	mov	r1, sl
 80049bc:	00ca      	lsls	r2, r1, #3
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	4642      	mov	r2, r8
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049cc:	464b      	mov	r3, r9
 80049ce:	460a      	mov	r2, r1
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049ec:	460b      	mov	r3, r1
 80049ee:	18db      	adds	r3, r3, r3
 80049f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049f2:	4613      	mov	r3, r2
 80049f4:	eb42 0303 	adc.w	r3, r2, r3
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a02:	f7fb fc45 	bl	8000290 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	@ 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	3332      	adds	r3, #50	@ 0x32
 8004a1e:	4a08      	ldr	r2, [pc, #32]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 0207 	and.w	r2, r3, #7
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4422      	add	r2, r4
 8004a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a34:	e106      	b.n	8004c44 <UART_SetConfig+0x4d8>
 8004a36:	bf00      	nop
 8004a38:	40011000 	.word	0x40011000
 8004a3c:	40011400 	.word	0x40011400
 8004a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a56:	4642      	mov	r2, r8
 8004a58:	464b      	mov	r3, r9
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	6239      	str	r1, [r7, #32]
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a66:	4641      	mov	r1, r8
 8004a68:	1854      	adds	r4, r2, r1
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	eb43 0501 	adc.w	r5, r3, r1
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	00eb      	lsls	r3, r5, #3
 8004a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7e:	00e2      	lsls	r2, r4, #3
 8004a80:	4614      	mov	r4, r2
 8004a82:	461d      	mov	r5, r3
 8004a84:	4643      	mov	r3, r8
 8004a86:	18e3      	adds	r3, r4, r3
 8004a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	eb45 0303 	adc.w	r3, r5, r3
 8004a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	008b      	lsls	r3, r1, #2
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abc:	4621      	mov	r1, r4
 8004abe:	008a      	lsls	r2, r1, #2
 8004ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ac4:	f7fb fbe4 	bl	8000290 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004ace:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	011c      	lsls	r4, r3, #4
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ae0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	61b9      	str	r1, [r7, #24]
 8004af0:	415b      	adcs	r3, r3
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af8:	4641      	mov	r1, r8
 8004afa:	1851      	adds	r1, r2, r1
 8004afc:	6139      	str	r1, [r7, #16]
 8004afe:	4649      	mov	r1, r9
 8004b00:	414b      	adcs	r3, r1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b10:	4659      	mov	r1, fp
 8004b12:	00cb      	lsls	r3, r1, #3
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	00ca      	lsls	r2, r1, #3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4642      	mov	r2, r8
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	460a      	mov	r2, r1
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b50:	4649      	mov	r1, r9
 8004b52:	008b      	lsls	r3, r1, #2
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	008a      	lsls	r2, r1, #2
 8004b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b62:	f7fb fb95 	bl	8000290 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4b38      	ldr	r3, [pc, #224]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2264      	movs	r2, #100	@ 0x64
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	1acb      	subs	r3, r1, r3
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	3332      	adds	r3, #50	@ 0x32
 8004b80:	4a33      	ldr	r2, [pc, #204]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b8c:	441c      	add	r4, r3
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b96:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bac:	4641      	mov	r1, r8
 8004bae:	1851      	adds	r1, r2, r1
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	414b      	adcs	r3, r1
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	00cb      	lsls	r3, r1, #3
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bce:	4651      	mov	r1, sl
 8004bd0:	00ca      	lsls	r2, r1, #3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4642      	mov	r2, r8
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bde:	464b      	mov	r3, r9
 8004be0:	460a      	mov	r2, r1
 8004be2:	eb42 0303 	adc.w	r3, r2, r3
 8004be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c00:	4649      	mov	r1, r9
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	008a      	lsls	r2, r1, #2
 8004c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c12:	f7fb fb3d 	bl	8000290 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	@ 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	3332      	adds	r3, #50	@ 0x32
 8004c2e:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 020f 	and.w	r2, r3, #15
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4422      	add	r2, r4
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c50:	51eb851f 	.word	0x51eb851f

08004c54 <_strtol_l.isra.0>:
 8004c54:	2b24      	cmp	r3, #36	@ 0x24
 8004c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5a:	4686      	mov	lr, r0
 8004c5c:	4690      	mov	r8, r2
 8004c5e:	d801      	bhi.n	8004c64 <_strtol_l.isra.0+0x10>
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <_strtol_l.isra.0+0x1e>
 8004c64:	f000 f8c0 	bl	8004de8 <__errno>
 8004c68:	2316      	movs	r3, #22
 8004c6a:	6003      	str	r3, [r0, #0]
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	4834      	ldr	r0, [pc, #208]	@ (8004d44 <_strtol_l.isra.0+0xf0>)
 8004c74:	460d      	mov	r5, r1
 8004c76:	462a      	mov	r2, r5
 8004c78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c7c:	5d06      	ldrb	r6, [r0, r4]
 8004c7e:	f016 0608 	ands.w	r6, r6, #8
 8004c82:	d1f8      	bne.n	8004c76 <_strtol_l.isra.0+0x22>
 8004c84:	2c2d      	cmp	r4, #45	@ 0x2d
 8004c86:	d110      	bne.n	8004caa <_strtol_l.isra.0+0x56>
 8004c88:	782c      	ldrb	r4, [r5, #0]
 8004c8a:	2601      	movs	r6, #1
 8004c8c:	1c95      	adds	r5, r2, #2
 8004c8e:	f033 0210 	bics.w	r2, r3, #16
 8004c92:	d115      	bne.n	8004cc0 <_strtol_l.isra.0+0x6c>
 8004c94:	2c30      	cmp	r4, #48	@ 0x30
 8004c96:	d10d      	bne.n	8004cb4 <_strtol_l.isra.0+0x60>
 8004c98:	782a      	ldrb	r2, [r5, #0]
 8004c9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c9e:	2a58      	cmp	r2, #88	@ 0x58
 8004ca0:	d108      	bne.n	8004cb4 <_strtol_l.isra.0+0x60>
 8004ca2:	786c      	ldrb	r4, [r5, #1]
 8004ca4:	3502      	adds	r5, #2
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	e00a      	b.n	8004cc0 <_strtol_l.isra.0+0x6c>
 8004caa:	2c2b      	cmp	r4, #43	@ 0x2b
 8004cac:	bf04      	itt	eq
 8004cae:	782c      	ldrbeq	r4, [r5, #0]
 8004cb0:	1c95      	addeq	r5, r2, #2
 8004cb2:	e7ec      	b.n	8004c8e <_strtol_l.isra.0+0x3a>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f6      	bne.n	8004ca6 <_strtol_l.isra.0+0x52>
 8004cb8:	2c30      	cmp	r4, #48	@ 0x30
 8004cba:	bf14      	ite	ne
 8004cbc:	230a      	movne	r3, #10
 8004cbe:	2308      	moveq	r3, #8
 8004cc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004cc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004cc8:	2200      	movs	r2, #0
 8004cca:	fbbc f9f3 	udiv	r9, ip, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8004cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004cd8:	2f09      	cmp	r7, #9
 8004cda:	d80f      	bhi.n	8004cfc <_strtol_l.isra.0+0xa8>
 8004cdc:	463c      	mov	r4, r7
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	dd1b      	ble.n	8004d1a <_strtol_l.isra.0+0xc6>
 8004ce2:	1c57      	adds	r7, r2, #1
 8004ce4:	d007      	beq.n	8004cf6 <_strtol_l.isra.0+0xa2>
 8004ce6:	4581      	cmp	r9, r0
 8004ce8:	d314      	bcc.n	8004d14 <_strtol_l.isra.0+0xc0>
 8004cea:	d101      	bne.n	8004cf0 <_strtol_l.isra.0+0x9c>
 8004cec:	45a2      	cmp	sl, r4
 8004cee:	db11      	blt.n	8004d14 <_strtol_l.isra.0+0xc0>
 8004cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cfa:	e7eb      	b.n	8004cd4 <_strtol_l.isra.0+0x80>
 8004cfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004d00:	2f19      	cmp	r7, #25
 8004d02:	d801      	bhi.n	8004d08 <_strtol_l.isra.0+0xb4>
 8004d04:	3c37      	subs	r4, #55	@ 0x37
 8004d06:	e7ea      	b.n	8004cde <_strtol_l.isra.0+0x8a>
 8004d08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004d0c:	2f19      	cmp	r7, #25
 8004d0e:	d804      	bhi.n	8004d1a <_strtol_l.isra.0+0xc6>
 8004d10:	3c57      	subs	r4, #87	@ 0x57
 8004d12:	e7e4      	b.n	8004cde <_strtol_l.isra.0+0x8a>
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	e7ed      	b.n	8004cf6 <_strtol_l.isra.0+0xa2>
 8004d1a:	1c53      	adds	r3, r2, #1
 8004d1c:	d108      	bne.n	8004d30 <_strtol_l.isra.0+0xdc>
 8004d1e:	2322      	movs	r3, #34	@ 0x22
 8004d20:	f8ce 3000 	str.w	r3, [lr]
 8004d24:	4660      	mov	r0, ip
 8004d26:	f1b8 0f00 	cmp.w	r8, #0
 8004d2a:	d0a0      	beq.n	8004c6e <_strtol_l.isra.0+0x1a>
 8004d2c:	1e69      	subs	r1, r5, #1
 8004d2e:	e006      	b.n	8004d3e <_strtol_l.isra.0+0xea>
 8004d30:	b106      	cbz	r6, 8004d34 <_strtol_l.isra.0+0xe0>
 8004d32:	4240      	negs	r0, r0
 8004d34:	f1b8 0f00 	cmp.w	r8, #0
 8004d38:	d099      	beq.n	8004c6e <_strtol_l.isra.0+0x1a>
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	d1f6      	bne.n	8004d2c <_strtol_l.isra.0+0xd8>
 8004d3e:	f8c8 1000 	str.w	r1, [r8]
 8004d42:	e794      	b.n	8004c6e <_strtol_l.isra.0+0x1a>
 8004d44:	08005869 	.word	0x08005869

08004d48 <strtol>:
 8004d48:	4613      	mov	r3, r2
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	4601      	mov	r1, r0
 8004d4e:	4802      	ldr	r0, [pc, #8]	@ (8004d58 <strtol+0x10>)
 8004d50:	6800      	ldr	r0, [r0, #0]
 8004d52:	f7ff bf7f 	b.w	8004c54 <_strtol_l.isra.0>
 8004d56:	bf00      	nop
 8004d58:	20000030 	.word	0x20000030

08004d5c <toupper>:
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <toupper+0x10>)
 8004d5e:	5c1b      	ldrb	r3, [r3, r0]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	bf08      	it	eq
 8004d68:	3820      	subeq	r0, #32
 8004d6a:	4770      	bx	lr
 8004d6c:	08005869 	.word	0x08005869

08004d70 <siprintf>:
 8004d70:	b40e      	push	{r1, r2, r3}
 8004d72:	b510      	push	{r4, lr}
 8004d74:	b09d      	sub	sp, #116	@ 0x74
 8004d76:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004d78:	9002      	str	r0, [sp, #8]
 8004d7a:	9006      	str	r0, [sp, #24]
 8004d7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d80:	480a      	ldr	r0, [pc, #40]	@ (8004dac <siprintf+0x3c>)
 8004d82:	9107      	str	r1, [sp, #28]
 8004d84:	9104      	str	r1, [sp, #16]
 8004d86:	490a      	ldr	r1, [pc, #40]	@ (8004db0 <siprintf+0x40>)
 8004d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8c:	9105      	str	r1, [sp, #20]
 8004d8e:	2400      	movs	r4, #0
 8004d90:	a902      	add	r1, sp, #8
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004d98:	f000 f9b4 	bl	8005104 <_svfiprintf_r>
 8004d9c:	9b02      	ldr	r3, [sp, #8]
 8004d9e:	701c      	strb	r4, [r3, #0]
 8004da0:	b01d      	add	sp, #116	@ 0x74
 8004da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da6:	b003      	add	sp, #12
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000030 	.word	0x20000030
 8004db0:	ffff0208 	.word	0xffff0208

08004db4 <memset>:
 8004db4:	4402      	add	r2, r0
 8004db6:	4603      	mov	r3, r0
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d100      	bne.n	8004dbe <memset+0xa>
 8004dbc:	4770      	bx	lr
 8004dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc2:	e7f9      	b.n	8004db8 <memset+0x4>

08004dc4 <strncmp>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	b16a      	cbz	r2, 8004de4 <strncmp+0x20>
 8004dc8:	3901      	subs	r1, #1
 8004dca:	1884      	adds	r4, r0, r2
 8004dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d103      	bne.n	8004de0 <strncmp+0x1c>
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d001      	beq.n	8004de0 <strncmp+0x1c>
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d1f5      	bne.n	8004dcc <strncmp+0x8>
 8004de0:	1ad0      	subs	r0, r2, r3
 8004de2:	bd10      	pop	{r4, pc}
 8004de4:	4610      	mov	r0, r2
 8004de6:	e7fc      	b.n	8004de2 <strncmp+0x1e>

08004de8 <__errno>:
 8004de8:	4b01      	ldr	r3, [pc, #4]	@ (8004df0 <__errno+0x8>)
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000030 	.word	0x20000030

08004df4 <__libc_init_array>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4d0d      	ldr	r5, [pc, #52]	@ (8004e2c <__libc_init_array+0x38>)
 8004df8:	4c0d      	ldr	r4, [pc, #52]	@ (8004e30 <__libc_init_array+0x3c>)
 8004dfa:	1b64      	subs	r4, r4, r5
 8004dfc:	10a4      	asrs	r4, r4, #2
 8004dfe:	2600      	movs	r6, #0
 8004e00:	42a6      	cmp	r6, r4
 8004e02:	d109      	bne.n	8004e18 <__libc_init_array+0x24>
 8004e04:	4d0b      	ldr	r5, [pc, #44]	@ (8004e34 <__libc_init_array+0x40>)
 8004e06:	4c0c      	ldr	r4, [pc, #48]	@ (8004e38 <__libc_init_array+0x44>)
 8004e08:	f000 fc64 	bl	80056d4 <_init>
 8004e0c:	1b64      	subs	r4, r4, r5
 8004e0e:	10a4      	asrs	r4, r4, #2
 8004e10:	2600      	movs	r6, #0
 8004e12:	42a6      	cmp	r6, r4
 8004e14:	d105      	bne.n	8004e22 <__libc_init_array+0x2e>
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1c:	4798      	blx	r3
 8004e1e:	3601      	adds	r6, #1
 8004e20:	e7ee      	b.n	8004e00 <__libc_init_array+0xc>
 8004e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e26:	4798      	blx	r3
 8004e28:	3601      	adds	r6, #1
 8004e2a:	e7f2      	b.n	8004e12 <__libc_init_array+0x1e>
 8004e2c:	080059a4 	.word	0x080059a4
 8004e30:	080059a4 	.word	0x080059a4
 8004e34:	080059a4 	.word	0x080059a4
 8004e38:	080059ac 	.word	0x080059ac

08004e3c <__retarget_lock_acquire_recursive>:
 8004e3c:	4770      	bx	lr

08004e3e <__retarget_lock_release_recursive>:
 8004e3e:	4770      	bx	lr

08004e40 <memcpy>:
 8004e40:	440a      	add	r2, r1
 8004e42:	4291      	cmp	r1, r2
 8004e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e48:	d100      	bne.n	8004e4c <memcpy+0xc>
 8004e4a:	4770      	bx	lr
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e56:	4291      	cmp	r1, r2
 8004e58:	d1f9      	bne.n	8004e4e <memcpy+0xe>
 8004e5a:	bd10      	pop	{r4, pc}

08004e5c <_free_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d041      	beq.n	8004ee8 <_free_r+0x8c>
 8004e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e68:	1f0c      	subs	r4, r1, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfb8      	it	lt
 8004e6e:	18e4      	addlt	r4, r4, r3
 8004e70:	f000 f8e0 	bl	8005034 <__malloc_lock>
 8004e74:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <_free_r+0x90>)
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	b933      	cbnz	r3, 8004e88 <_free_r+0x2c>
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	6014      	str	r4, [r2, #0]
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e84:	f000 b8dc 	b.w	8005040 <__malloc_unlock>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d908      	bls.n	8004e9e <_free_r+0x42>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	1821      	adds	r1, r4, r0
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf01      	itttt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	1809      	addeq	r1, r1, r0
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	e7ed      	b.n	8004e7a <_free_r+0x1e>
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b10b      	cbz	r3, 8004ea8 <_free_r+0x4c>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d9fa      	bls.n	8004e9e <_free_r+0x42>
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	1850      	adds	r0, r2, r1
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d10b      	bne.n	8004ec8 <_free_r+0x6c>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	1850      	adds	r0, r2, r1
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	d1e0      	bne.n	8004e7e <_free_r+0x22>
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	4408      	add	r0, r1
 8004ec4:	6010      	str	r0, [r2, #0]
 8004ec6:	e7da      	b.n	8004e7e <_free_r+0x22>
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x74>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	e7d6      	b.n	8004e7e <_free_r+0x22>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	1821      	adds	r1, r4, r0
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf04      	itt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	bf04      	itt	eq
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6054      	str	r4, [r2, #4]
 8004ee6:	e7ca      	b.n	8004e7e <_free_r+0x22>
 8004ee8:	bd38      	pop	{r3, r4, r5, pc}
 8004eea:	bf00      	nop
 8004eec:	20000508 	.word	0x20000508

08004ef0 <sbrk_aligned>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8004f30 <sbrk_aligned+0x40>)
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	6831      	ldr	r1, [r6, #0]
 8004ef8:	4605      	mov	r5, r0
 8004efa:	b911      	cbnz	r1, 8004f02 <sbrk_aligned+0x12>
 8004efc:	f000 fba4 	bl	8005648 <_sbrk_r>
 8004f00:	6030      	str	r0, [r6, #0]
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 fb9f 	bl	8005648 <_sbrk_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	d103      	bne.n	8004f16 <sbrk_aligned+0x26>
 8004f0e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f12:	4620      	mov	r0, r4
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d0f8      	beq.n	8004f12 <sbrk_aligned+0x22>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 fb90 	bl	8005648 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d1f2      	bne.n	8004f12 <sbrk_aligned+0x22>
 8004f2c:	e7ef      	b.n	8004f0e <sbrk_aligned+0x1e>
 8004f2e:	bf00      	nop
 8004f30:	20000504 	.word	0x20000504

08004f34 <_malloc_r>:
 8004f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f38:	1ccd      	adds	r5, r1, #3
 8004f3a:	f025 0503 	bic.w	r5, r5, #3
 8004f3e:	3508      	adds	r5, #8
 8004f40:	2d0c      	cmp	r5, #12
 8004f42:	bf38      	it	cc
 8004f44:	250c      	movcc	r5, #12
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	4606      	mov	r6, r0
 8004f4a:	db01      	blt.n	8004f50 <_malloc_r+0x1c>
 8004f4c:	42a9      	cmp	r1, r5
 8004f4e:	d904      	bls.n	8004f5a <_malloc_r+0x26>
 8004f50:	230c      	movs	r3, #12
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	2000      	movs	r0, #0
 8004f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005030 <_malloc_r+0xfc>
 8004f5e:	f000 f869 	bl	8005034 <__malloc_lock>
 8004f62:	f8d8 3000 	ldr.w	r3, [r8]
 8004f66:	461c      	mov	r4, r3
 8004f68:	bb44      	cbnz	r4, 8004fbc <_malloc_r+0x88>
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ffbf 	bl	8004ef0 <sbrk_aligned>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	4604      	mov	r4, r0
 8004f76:	d158      	bne.n	800502a <_malloc_r+0xf6>
 8004f78:	f8d8 4000 	ldr.w	r4, [r8]
 8004f7c:	4627      	mov	r7, r4
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	d143      	bne.n	800500a <_malloc_r+0xd6>
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	d04b      	beq.n	800501e <_malloc_r+0xea>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	4639      	mov	r1, r7
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	eb04 0903 	add.w	r9, r4, r3
 8004f90:	f000 fb5a 	bl	8005648 <_sbrk_r>
 8004f94:	4581      	cmp	r9, r0
 8004f96:	d142      	bne.n	800501e <_malloc_r+0xea>
 8004f98:	6821      	ldr	r1, [r4, #0]
 8004f9a:	1a6d      	subs	r5, r5, r1
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f7ff ffa6 	bl	8004ef0 <sbrk_aligned>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d03a      	beq.n	800501e <_malloc_r+0xea>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	442b      	add	r3, r5
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	bb62      	cbnz	r2, 8005010 <_malloc_r+0xdc>
 8004fb6:	f8c8 7000 	str.w	r7, [r8]
 8004fba:	e00f      	b.n	8004fdc <_malloc_r+0xa8>
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	1b52      	subs	r2, r2, r5
 8004fc0:	d420      	bmi.n	8005004 <_malloc_r+0xd0>
 8004fc2:	2a0b      	cmp	r2, #11
 8004fc4:	d917      	bls.n	8004ff6 <_malloc_r+0xc2>
 8004fc6:	1961      	adds	r1, r4, r5
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	6025      	str	r5, [r4, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	6059      	strne	r1, [r3, #4]
 8004fd0:	6863      	ldr	r3, [r4, #4]
 8004fd2:	bf08      	it	eq
 8004fd4:	f8c8 1000 	streq.w	r1, [r8]
 8004fd8:	5162      	str	r2, [r4, r5]
 8004fda:	604b      	str	r3, [r1, #4]
 8004fdc:	4630      	mov	r0, r6
 8004fde:	f000 f82f 	bl	8005040 <__malloc_unlock>
 8004fe2:	f104 000b 	add.w	r0, r4, #11
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	f020 0007 	bic.w	r0, r0, #7
 8004fec:	1ac2      	subs	r2, r0, r3
 8004fee:	bf1c      	itt	ne
 8004ff0:	1a1b      	subne	r3, r3, r0
 8004ff2:	50a3      	strne	r3, [r4, r2]
 8004ff4:	e7af      	b.n	8004f56 <_malloc_r+0x22>
 8004ff6:	6862      	ldr	r2, [r4, #4]
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	bf0c      	ite	eq
 8004ffc:	f8c8 2000 	streq.w	r2, [r8]
 8005000:	605a      	strne	r2, [r3, #4]
 8005002:	e7eb      	b.n	8004fdc <_malloc_r+0xa8>
 8005004:	4623      	mov	r3, r4
 8005006:	6864      	ldr	r4, [r4, #4]
 8005008:	e7ae      	b.n	8004f68 <_malloc_r+0x34>
 800500a:	463c      	mov	r4, r7
 800500c:	687f      	ldr	r7, [r7, #4]
 800500e:	e7b6      	b.n	8004f7e <_malloc_r+0x4a>
 8005010:	461a      	mov	r2, r3
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	42a3      	cmp	r3, r4
 8005016:	d1fb      	bne.n	8005010 <_malloc_r+0xdc>
 8005018:	2300      	movs	r3, #0
 800501a:	6053      	str	r3, [r2, #4]
 800501c:	e7de      	b.n	8004fdc <_malloc_r+0xa8>
 800501e:	230c      	movs	r3, #12
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	4630      	mov	r0, r6
 8005024:	f000 f80c 	bl	8005040 <__malloc_unlock>
 8005028:	e794      	b.n	8004f54 <_malloc_r+0x20>
 800502a:	6005      	str	r5, [r0, #0]
 800502c:	e7d6      	b.n	8004fdc <_malloc_r+0xa8>
 800502e:	bf00      	nop
 8005030:	20000508 	.word	0x20000508

08005034 <__malloc_lock>:
 8005034:	4801      	ldr	r0, [pc, #4]	@ (800503c <__malloc_lock+0x8>)
 8005036:	f7ff bf01 	b.w	8004e3c <__retarget_lock_acquire_recursive>
 800503a:	bf00      	nop
 800503c:	20000500 	.word	0x20000500

08005040 <__malloc_unlock>:
 8005040:	4801      	ldr	r0, [pc, #4]	@ (8005048 <__malloc_unlock+0x8>)
 8005042:	f7ff befc 	b.w	8004e3e <__retarget_lock_release_recursive>
 8005046:	bf00      	nop
 8005048:	20000500 	.word	0x20000500

0800504c <__ssputs_r>:
 800504c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	688e      	ldr	r6, [r1, #8]
 8005052:	461f      	mov	r7, r3
 8005054:	42be      	cmp	r6, r7
 8005056:	680b      	ldr	r3, [r1, #0]
 8005058:	4682      	mov	sl, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4690      	mov	r8, r2
 800505e:	d82d      	bhi.n	80050bc <__ssputs_r+0x70>
 8005060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005068:	d026      	beq.n	80050b8 <__ssputs_r+0x6c>
 800506a:	6965      	ldr	r5, [r4, #20]
 800506c:	6909      	ldr	r1, [r1, #16]
 800506e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005072:	eba3 0901 	sub.w	r9, r3, r1
 8005076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800507a:	1c7b      	adds	r3, r7, #1
 800507c:	444b      	add	r3, r9
 800507e:	106d      	asrs	r5, r5, #1
 8005080:	429d      	cmp	r5, r3
 8005082:	bf38      	it	cc
 8005084:	461d      	movcc	r5, r3
 8005086:	0553      	lsls	r3, r2, #21
 8005088:	d527      	bpl.n	80050da <__ssputs_r+0x8e>
 800508a:	4629      	mov	r1, r5
 800508c:	f7ff ff52 	bl	8004f34 <_malloc_r>
 8005090:	4606      	mov	r6, r0
 8005092:	b360      	cbz	r0, 80050ee <__ssputs_r+0xa2>
 8005094:	6921      	ldr	r1, [r4, #16]
 8005096:	464a      	mov	r2, r9
 8005098:	f7ff fed2 	bl	8004e40 <memcpy>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	6126      	str	r6, [r4, #16]
 80050aa:	6165      	str	r5, [r4, #20]
 80050ac:	444e      	add	r6, r9
 80050ae:	eba5 0509 	sub.w	r5, r5, r9
 80050b2:	6026      	str	r6, [r4, #0]
 80050b4:	60a5      	str	r5, [r4, #8]
 80050b6:	463e      	mov	r6, r7
 80050b8:	42be      	cmp	r6, r7
 80050ba:	d900      	bls.n	80050be <__ssputs_r+0x72>
 80050bc:	463e      	mov	r6, r7
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	4632      	mov	r2, r6
 80050c2:	4641      	mov	r1, r8
 80050c4:	f000 faa6 	bl	8005614 <memmove>
 80050c8:	68a3      	ldr	r3, [r4, #8]
 80050ca:	1b9b      	subs	r3, r3, r6
 80050cc:	60a3      	str	r3, [r4, #8]
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	4433      	add	r3, r6
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	2000      	movs	r0, #0
 80050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050da:	462a      	mov	r2, r5
 80050dc:	f000 fac4 	bl	8005668 <_realloc_r>
 80050e0:	4606      	mov	r6, r0
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d1e0      	bne.n	80050a8 <__ssputs_r+0x5c>
 80050e6:	6921      	ldr	r1, [r4, #16]
 80050e8:	4650      	mov	r0, sl
 80050ea:	f7ff feb7 	bl	8004e5c <_free_r>
 80050ee:	230c      	movs	r3, #12
 80050f0:	f8ca 3000 	str.w	r3, [sl]
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	e7e9      	b.n	80050d6 <__ssputs_r+0x8a>
	...

08005104 <_svfiprintf_r>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	4698      	mov	r8, r3
 800510a:	898b      	ldrh	r3, [r1, #12]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	b09d      	sub	sp, #116	@ 0x74
 8005110:	4607      	mov	r7, r0
 8005112:	460d      	mov	r5, r1
 8005114:	4614      	mov	r4, r2
 8005116:	d510      	bpl.n	800513a <_svfiprintf_r+0x36>
 8005118:	690b      	ldr	r3, [r1, #16]
 800511a:	b973      	cbnz	r3, 800513a <_svfiprintf_r+0x36>
 800511c:	2140      	movs	r1, #64	@ 0x40
 800511e:	f7ff ff09 	bl	8004f34 <_malloc_r>
 8005122:	6028      	str	r0, [r5, #0]
 8005124:	6128      	str	r0, [r5, #16]
 8005126:	b930      	cbnz	r0, 8005136 <_svfiprintf_r+0x32>
 8005128:	230c      	movs	r3, #12
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	b01d      	add	sp, #116	@ 0x74
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005136:	2340      	movs	r3, #64	@ 0x40
 8005138:	616b      	str	r3, [r5, #20]
 800513a:	2300      	movs	r3, #0
 800513c:	9309      	str	r3, [sp, #36]	@ 0x24
 800513e:	2320      	movs	r3, #32
 8005140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005144:	f8cd 800c 	str.w	r8, [sp, #12]
 8005148:	2330      	movs	r3, #48	@ 0x30
 800514a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052e8 <_svfiprintf_r+0x1e4>
 800514e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005152:	f04f 0901 	mov.w	r9, #1
 8005156:	4623      	mov	r3, r4
 8005158:	469a      	mov	sl, r3
 800515a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800515e:	b10a      	cbz	r2, 8005164 <_svfiprintf_r+0x60>
 8005160:	2a25      	cmp	r2, #37	@ 0x25
 8005162:	d1f9      	bne.n	8005158 <_svfiprintf_r+0x54>
 8005164:	ebba 0b04 	subs.w	fp, sl, r4
 8005168:	d00b      	beq.n	8005182 <_svfiprintf_r+0x7e>
 800516a:	465b      	mov	r3, fp
 800516c:	4622      	mov	r2, r4
 800516e:	4629      	mov	r1, r5
 8005170:	4638      	mov	r0, r7
 8005172:	f7ff ff6b 	bl	800504c <__ssputs_r>
 8005176:	3001      	adds	r0, #1
 8005178:	f000 80a7 	beq.w	80052ca <_svfiprintf_r+0x1c6>
 800517c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800517e:	445a      	add	r2, fp
 8005180:	9209      	str	r2, [sp, #36]	@ 0x24
 8005182:	f89a 3000 	ldrb.w	r3, [sl]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 809f 	beq.w	80052ca <_svfiprintf_r+0x1c6>
 800518c:	2300      	movs	r3, #0
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005196:	f10a 0a01 	add.w	sl, sl, #1
 800519a:	9304      	str	r3, [sp, #16]
 800519c:	9307      	str	r3, [sp, #28]
 800519e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051a4:	4654      	mov	r4, sl
 80051a6:	2205      	movs	r2, #5
 80051a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ac:	484e      	ldr	r0, [pc, #312]	@ (80052e8 <_svfiprintf_r+0x1e4>)
 80051ae:	f7fb f81f 	bl	80001f0 <memchr>
 80051b2:	9a04      	ldr	r2, [sp, #16]
 80051b4:	b9d8      	cbnz	r0, 80051ee <_svfiprintf_r+0xea>
 80051b6:	06d0      	lsls	r0, r2, #27
 80051b8:	bf44      	itt	mi
 80051ba:	2320      	movmi	r3, #32
 80051bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051c0:	0711      	lsls	r1, r2, #28
 80051c2:	bf44      	itt	mi
 80051c4:	232b      	movmi	r3, #43	@ 0x2b
 80051c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051ca:	f89a 3000 	ldrb.w	r3, [sl]
 80051ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d0:	d015      	beq.n	80051fe <_svfiprintf_r+0xfa>
 80051d2:	9a07      	ldr	r2, [sp, #28]
 80051d4:	4654      	mov	r4, sl
 80051d6:	2000      	movs	r0, #0
 80051d8:	f04f 0c0a 	mov.w	ip, #10
 80051dc:	4621      	mov	r1, r4
 80051de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051e2:	3b30      	subs	r3, #48	@ 0x30
 80051e4:	2b09      	cmp	r3, #9
 80051e6:	d94b      	bls.n	8005280 <_svfiprintf_r+0x17c>
 80051e8:	b1b0      	cbz	r0, 8005218 <_svfiprintf_r+0x114>
 80051ea:	9207      	str	r2, [sp, #28]
 80051ec:	e014      	b.n	8005218 <_svfiprintf_r+0x114>
 80051ee:	eba0 0308 	sub.w	r3, r0, r8
 80051f2:	fa09 f303 	lsl.w	r3, r9, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	46a2      	mov	sl, r4
 80051fc:	e7d2      	b.n	80051a4 <_svfiprintf_r+0xa0>
 80051fe:	9b03      	ldr	r3, [sp, #12]
 8005200:	1d19      	adds	r1, r3, #4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	9103      	str	r1, [sp, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	bfbb      	ittet	lt
 800520a:	425b      	neglt	r3, r3
 800520c:	f042 0202 	orrlt.w	r2, r2, #2
 8005210:	9307      	strge	r3, [sp, #28]
 8005212:	9307      	strlt	r3, [sp, #28]
 8005214:	bfb8      	it	lt
 8005216:	9204      	strlt	r2, [sp, #16]
 8005218:	7823      	ldrb	r3, [r4, #0]
 800521a:	2b2e      	cmp	r3, #46	@ 0x2e
 800521c:	d10a      	bne.n	8005234 <_svfiprintf_r+0x130>
 800521e:	7863      	ldrb	r3, [r4, #1]
 8005220:	2b2a      	cmp	r3, #42	@ 0x2a
 8005222:	d132      	bne.n	800528a <_svfiprintf_r+0x186>
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	1d1a      	adds	r2, r3, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	9203      	str	r2, [sp, #12]
 800522c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005230:	3402      	adds	r4, #2
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80052f8 <_svfiprintf_r+0x1f4>
 8005238:	7821      	ldrb	r1, [r4, #0]
 800523a:	2203      	movs	r2, #3
 800523c:	4650      	mov	r0, sl
 800523e:	f7fa ffd7 	bl	80001f0 <memchr>
 8005242:	b138      	cbz	r0, 8005254 <_svfiprintf_r+0x150>
 8005244:	9b04      	ldr	r3, [sp, #16]
 8005246:	eba0 000a 	sub.w	r0, r0, sl
 800524a:	2240      	movs	r2, #64	@ 0x40
 800524c:	4082      	lsls	r2, r0
 800524e:	4313      	orrs	r3, r2
 8005250:	3401      	adds	r4, #1
 8005252:	9304      	str	r3, [sp, #16]
 8005254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005258:	4824      	ldr	r0, [pc, #144]	@ (80052ec <_svfiprintf_r+0x1e8>)
 800525a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800525e:	2206      	movs	r2, #6
 8005260:	f7fa ffc6 	bl	80001f0 <memchr>
 8005264:	2800      	cmp	r0, #0
 8005266:	d036      	beq.n	80052d6 <_svfiprintf_r+0x1d2>
 8005268:	4b21      	ldr	r3, [pc, #132]	@ (80052f0 <_svfiprintf_r+0x1ec>)
 800526a:	bb1b      	cbnz	r3, 80052b4 <_svfiprintf_r+0x1b0>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	3307      	adds	r3, #7
 8005270:	f023 0307 	bic.w	r3, r3, #7
 8005274:	3308      	adds	r3, #8
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800527a:	4433      	add	r3, r6
 800527c:	9309      	str	r3, [sp, #36]	@ 0x24
 800527e:	e76a      	b.n	8005156 <_svfiprintf_r+0x52>
 8005280:	fb0c 3202 	mla	r2, ip, r2, r3
 8005284:	460c      	mov	r4, r1
 8005286:	2001      	movs	r0, #1
 8005288:	e7a8      	b.n	80051dc <_svfiprintf_r+0xd8>
 800528a:	2300      	movs	r3, #0
 800528c:	3401      	adds	r4, #1
 800528e:	9305      	str	r3, [sp, #20]
 8005290:	4619      	mov	r1, r3
 8005292:	f04f 0c0a 	mov.w	ip, #10
 8005296:	4620      	mov	r0, r4
 8005298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800529c:	3a30      	subs	r2, #48	@ 0x30
 800529e:	2a09      	cmp	r2, #9
 80052a0:	d903      	bls.n	80052aa <_svfiprintf_r+0x1a6>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0c6      	beq.n	8005234 <_svfiprintf_r+0x130>
 80052a6:	9105      	str	r1, [sp, #20]
 80052a8:	e7c4      	b.n	8005234 <_svfiprintf_r+0x130>
 80052aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ae:	4604      	mov	r4, r0
 80052b0:	2301      	movs	r3, #1
 80052b2:	e7f0      	b.n	8005296 <_svfiprintf_r+0x192>
 80052b4:	ab03      	add	r3, sp, #12
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	462a      	mov	r2, r5
 80052ba:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <_svfiprintf_r+0x1f0>)
 80052bc:	a904      	add	r1, sp, #16
 80052be:	4638      	mov	r0, r7
 80052c0:	f3af 8000 	nop.w
 80052c4:	1c42      	adds	r2, r0, #1
 80052c6:	4606      	mov	r6, r0
 80052c8:	d1d6      	bne.n	8005278 <_svfiprintf_r+0x174>
 80052ca:	89ab      	ldrh	r3, [r5, #12]
 80052cc:	065b      	lsls	r3, r3, #25
 80052ce:	f53f af2d 	bmi.w	800512c <_svfiprintf_r+0x28>
 80052d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052d4:	e72c      	b.n	8005130 <_svfiprintf_r+0x2c>
 80052d6:	ab03      	add	r3, sp, #12
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	462a      	mov	r2, r5
 80052dc:	4b05      	ldr	r3, [pc, #20]	@ (80052f4 <_svfiprintf_r+0x1f0>)
 80052de:	a904      	add	r1, sp, #16
 80052e0:	4638      	mov	r0, r7
 80052e2:	f000 f879 	bl	80053d8 <_printf_i>
 80052e6:	e7ed      	b.n	80052c4 <_svfiprintf_r+0x1c0>
 80052e8:	08005969 	.word	0x08005969
 80052ec:	08005973 	.word	0x08005973
 80052f0:	00000000 	.word	0x00000000
 80052f4:	0800504d 	.word	0x0800504d
 80052f8:	0800596f 	.word	0x0800596f

080052fc <_printf_common>:
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	4616      	mov	r6, r2
 8005302:	4698      	mov	r8, r3
 8005304:	688a      	ldr	r2, [r1, #8]
 8005306:	690b      	ldr	r3, [r1, #16]
 8005308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800530c:	4293      	cmp	r3, r2
 800530e:	bfb8      	it	lt
 8005310:	4613      	movlt	r3, r2
 8005312:	6033      	str	r3, [r6, #0]
 8005314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005318:	4607      	mov	r7, r0
 800531a:	460c      	mov	r4, r1
 800531c:	b10a      	cbz	r2, 8005322 <_printf_common+0x26>
 800531e:	3301      	adds	r3, #1
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	0699      	lsls	r1, r3, #26
 8005326:	bf42      	ittt	mi
 8005328:	6833      	ldrmi	r3, [r6, #0]
 800532a:	3302      	addmi	r3, #2
 800532c:	6033      	strmi	r3, [r6, #0]
 800532e:	6825      	ldr	r5, [r4, #0]
 8005330:	f015 0506 	ands.w	r5, r5, #6
 8005334:	d106      	bne.n	8005344 <_printf_common+0x48>
 8005336:	f104 0a19 	add.w	sl, r4, #25
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	6832      	ldr	r2, [r6, #0]
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	42ab      	cmp	r3, r5
 8005342:	dc26      	bgt.n	8005392 <_printf_common+0x96>
 8005344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	3b00      	subs	r3, #0
 800534c:	bf18      	it	ne
 800534e:	2301      	movne	r3, #1
 8005350:	0692      	lsls	r2, r2, #26
 8005352:	d42b      	bmi.n	80053ac <_printf_common+0xb0>
 8005354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005358:	4641      	mov	r1, r8
 800535a:	4638      	mov	r0, r7
 800535c:	47c8      	blx	r9
 800535e:	3001      	adds	r0, #1
 8005360:	d01e      	beq.n	80053a0 <_printf_common+0xa4>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	6922      	ldr	r2, [r4, #16]
 8005366:	f003 0306 	and.w	r3, r3, #6
 800536a:	2b04      	cmp	r3, #4
 800536c:	bf02      	ittt	eq
 800536e:	68e5      	ldreq	r5, [r4, #12]
 8005370:	6833      	ldreq	r3, [r6, #0]
 8005372:	1aed      	subeq	r5, r5, r3
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	bf0c      	ite	eq
 8005378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800537c:	2500      	movne	r5, #0
 800537e:	4293      	cmp	r3, r2
 8005380:	bfc4      	itt	gt
 8005382:	1a9b      	subgt	r3, r3, r2
 8005384:	18ed      	addgt	r5, r5, r3
 8005386:	2600      	movs	r6, #0
 8005388:	341a      	adds	r4, #26
 800538a:	42b5      	cmp	r5, r6
 800538c:	d11a      	bne.n	80053c4 <_printf_common+0xc8>
 800538e:	2000      	movs	r0, #0
 8005390:	e008      	b.n	80053a4 <_printf_common+0xa8>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4641      	mov	r1, r8
 8005398:	4638      	mov	r0, r7
 800539a:	47c8      	blx	r9
 800539c:	3001      	adds	r0, #1
 800539e:	d103      	bne.n	80053a8 <_printf_common+0xac>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a8:	3501      	adds	r5, #1
 80053aa:	e7c6      	b.n	800533a <_printf_common+0x3e>
 80053ac:	18e1      	adds	r1, r4, r3
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	2030      	movs	r0, #48	@ 0x30
 80053b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053b6:	4422      	add	r2, r4
 80053b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053c0:	3302      	adds	r3, #2
 80053c2:	e7c7      	b.n	8005354 <_printf_common+0x58>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4622      	mov	r2, r4
 80053c8:	4641      	mov	r1, r8
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c8      	blx	r9
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0e6      	beq.n	80053a0 <_printf_common+0xa4>
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7d9      	b.n	800538a <_printf_common+0x8e>
	...

080053d8 <_printf_i>:
 80053d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	7e0f      	ldrb	r7, [r1, #24]
 80053de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053e0:	2f78      	cmp	r7, #120	@ 0x78
 80053e2:	4691      	mov	r9, r2
 80053e4:	4680      	mov	r8, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	469a      	mov	sl, r3
 80053ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053ee:	d807      	bhi.n	8005400 <_printf_i+0x28>
 80053f0:	2f62      	cmp	r7, #98	@ 0x62
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x32>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	f000 80d1 	beq.w	800559c <_printf_i+0x1c4>
 80053fa:	2f58      	cmp	r7, #88	@ 0x58
 80053fc:	f000 80b8 	beq.w	8005570 <_printf_i+0x198>
 8005400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005408:	e03a      	b.n	8005480 <_printf_i+0xa8>
 800540a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800540e:	2b15      	cmp	r3, #21
 8005410:	d8f6      	bhi.n	8005400 <_printf_i+0x28>
 8005412:	a101      	add	r1, pc, #4	@ (adr r1, 8005418 <_printf_i+0x40>)
 8005414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005418:	08005471 	.word	0x08005471
 800541c:	08005485 	.word	0x08005485
 8005420:	08005401 	.word	0x08005401
 8005424:	08005401 	.word	0x08005401
 8005428:	08005401 	.word	0x08005401
 800542c:	08005401 	.word	0x08005401
 8005430:	08005485 	.word	0x08005485
 8005434:	08005401 	.word	0x08005401
 8005438:	08005401 	.word	0x08005401
 800543c:	08005401 	.word	0x08005401
 8005440:	08005401 	.word	0x08005401
 8005444:	08005583 	.word	0x08005583
 8005448:	080054af 	.word	0x080054af
 800544c:	0800553d 	.word	0x0800553d
 8005450:	08005401 	.word	0x08005401
 8005454:	08005401 	.word	0x08005401
 8005458:	080055a5 	.word	0x080055a5
 800545c:	08005401 	.word	0x08005401
 8005460:	080054af 	.word	0x080054af
 8005464:	08005401 	.word	0x08005401
 8005468:	08005401 	.word	0x08005401
 800546c:	08005545 	.word	0x08005545
 8005470:	6833      	ldr	r3, [r6, #0]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6032      	str	r2, [r6, #0]
 8005478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800547c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005480:	2301      	movs	r3, #1
 8005482:	e09c      	b.n	80055be <_printf_i+0x1e6>
 8005484:	6833      	ldr	r3, [r6, #0]
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	6031      	str	r1, [r6, #0]
 800548c:	0606      	lsls	r6, r0, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xbc>
 8005490:	681d      	ldr	r5, [r3, #0]
 8005492:	e003      	b.n	800549c <_printf_i+0xc4>
 8005494:	0645      	lsls	r5, r0, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xb8>
 8005498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800549c:	2d00      	cmp	r5, #0
 800549e:	da03      	bge.n	80054a8 <_printf_i+0xd0>
 80054a0:	232d      	movs	r3, #45	@ 0x2d
 80054a2:	426d      	negs	r5, r5
 80054a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a8:	4858      	ldr	r0, [pc, #352]	@ (800560c <_printf_i+0x234>)
 80054aa:	230a      	movs	r3, #10
 80054ac:	e011      	b.n	80054d2 <_printf_i+0xfa>
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	6833      	ldr	r3, [r6, #0]
 80054b2:	0608      	lsls	r0, r1, #24
 80054b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054b8:	d402      	bmi.n	80054c0 <_printf_i+0xe8>
 80054ba:	0649      	lsls	r1, r1, #25
 80054bc:	bf48      	it	mi
 80054be:	b2ad      	uxthmi	r5, r5
 80054c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054c2:	4852      	ldr	r0, [pc, #328]	@ (800560c <_printf_i+0x234>)
 80054c4:	6033      	str	r3, [r6, #0]
 80054c6:	bf14      	ite	ne
 80054c8:	230a      	movne	r3, #10
 80054ca:	2308      	moveq	r3, #8
 80054cc:	2100      	movs	r1, #0
 80054ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054d2:	6866      	ldr	r6, [r4, #4]
 80054d4:	60a6      	str	r6, [r4, #8]
 80054d6:	2e00      	cmp	r6, #0
 80054d8:	db05      	blt.n	80054e6 <_printf_i+0x10e>
 80054da:	6821      	ldr	r1, [r4, #0]
 80054dc:	432e      	orrs	r6, r5
 80054de:	f021 0104 	bic.w	r1, r1, #4
 80054e2:	6021      	str	r1, [r4, #0]
 80054e4:	d04b      	beq.n	800557e <_printf_i+0x1a6>
 80054e6:	4616      	mov	r6, r2
 80054e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054ec:	fb03 5711 	mls	r7, r3, r1, r5
 80054f0:	5dc7      	ldrb	r7, [r0, r7]
 80054f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054f6:	462f      	mov	r7, r5
 80054f8:	42bb      	cmp	r3, r7
 80054fa:	460d      	mov	r5, r1
 80054fc:	d9f4      	bls.n	80054e8 <_printf_i+0x110>
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d10b      	bne.n	800551a <_printf_i+0x142>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	07df      	lsls	r7, r3, #31
 8005506:	d508      	bpl.n	800551a <_printf_i+0x142>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	6861      	ldr	r1, [r4, #4]
 800550c:	4299      	cmp	r1, r3
 800550e:	bfde      	ittt	le
 8005510:	2330      	movle	r3, #48	@ 0x30
 8005512:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005516:	f106 36ff 	addle.w	r6, r6, #4294967295
 800551a:	1b92      	subs	r2, r2, r6
 800551c:	6122      	str	r2, [r4, #16]
 800551e:	f8cd a000 	str.w	sl, [sp]
 8005522:	464b      	mov	r3, r9
 8005524:	aa03      	add	r2, sp, #12
 8005526:	4621      	mov	r1, r4
 8005528:	4640      	mov	r0, r8
 800552a:	f7ff fee7 	bl	80052fc <_printf_common>
 800552e:	3001      	adds	r0, #1
 8005530:	d14a      	bne.n	80055c8 <_printf_i+0x1f0>
 8005532:	f04f 30ff 	mov.w	r0, #4294967295
 8005536:	b004      	add	sp, #16
 8005538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	f043 0320 	orr.w	r3, r3, #32
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	4832      	ldr	r0, [pc, #200]	@ (8005610 <_printf_i+0x238>)
 8005546:	2778      	movs	r7, #120	@ 0x78
 8005548:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	6831      	ldr	r1, [r6, #0]
 8005550:	061f      	lsls	r7, r3, #24
 8005552:	f851 5b04 	ldr.w	r5, [r1], #4
 8005556:	d402      	bmi.n	800555e <_printf_i+0x186>
 8005558:	065f      	lsls	r7, r3, #25
 800555a:	bf48      	it	mi
 800555c:	b2ad      	uxthmi	r5, r5
 800555e:	6031      	str	r1, [r6, #0]
 8005560:	07d9      	lsls	r1, r3, #31
 8005562:	bf44      	itt	mi
 8005564:	f043 0320 	orrmi.w	r3, r3, #32
 8005568:	6023      	strmi	r3, [r4, #0]
 800556a:	b11d      	cbz	r5, 8005574 <_printf_i+0x19c>
 800556c:	2310      	movs	r3, #16
 800556e:	e7ad      	b.n	80054cc <_printf_i+0xf4>
 8005570:	4826      	ldr	r0, [pc, #152]	@ (800560c <_printf_i+0x234>)
 8005572:	e7e9      	b.n	8005548 <_printf_i+0x170>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f023 0320 	bic.w	r3, r3, #32
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	e7f6      	b.n	800556c <_printf_i+0x194>
 800557e:	4616      	mov	r6, r2
 8005580:	e7bd      	b.n	80054fe <_printf_i+0x126>
 8005582:	6833      	ldr	r3, [r6, #0]
 8005584:	6825      	ldr	r5, [r4, #0]
 8005586:	6961      	ldr	r1, [r4, #20]
 8005588:	1d18      	adds	r0, r3, #4
 800558a:	6030      	str	r0, [r6, #0]
 800558c:	062e      	lsls	r6, r5, #24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	d501      	bpl.n	8005596 <_printf_i+0x1be>
 8005592:	6019      	str	r1, [r3, #0]
 8005594:	e002      	b.n	800559c <_printf_i+0x1c4>
 8005596:	0668      	lsls	r0, r5, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0x1ba>
 800559a:	8019      	strh	r1, [r3, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	4616      	mov	r6, r2
 80055a2:	e7bc      	b.n	800551e <_printf_i+0x146>
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	6032      	str	r2, [r6, #0]
 80055aa:	681e      	ldr	r6, [r3, #0]
 80055ac:	6862      	ldr	r2, [r4, #4]
 80055ae:	2100      	movs	r1, #0
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7fa fe1d 	bl	80001f0 <memchr>
 80055b6:	b108      	cbz	r0, 80055bc <_printf_i+0x1e4>
 80055b8:	1b80      	subs	r0, r0, r6
 80055ba:	6060      	str	r0, [r4, #4]
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055c6:	e7aa      	b.n	800551e <_printf_i+0x146>
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	4632      	mov	r2, r6
 80055cc:	4649      	mov	r1, r9
 80055ce:	4640      	mov	r0, r8
 80055d0:	47d0      	blx	sl
 80055d2:	3001      	adds	r0, #1
 80055d4:	d0ad      	beq.n	8005532 <_printf_i+0x15a>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	079b      	lsls	r3, r3, #30
 80055da:	d413      	bmi.n	8005604 <_printf_i+0x22c>
 80055dc:	68e0      	ldr	r0, [r4, #12]
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	4298      	cmp	r0, r3
 80055e2:	bfb8      	it	lt
 80055e4:	4618      	movlt	r0, r3
 80055e6:	e7a6      	b.n	8005536 <_printf_i+0x15e>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4632      	mov	r2, r6
 80055ec:	4649      	mov	r1, r9
 80055ee:	4640      	mov	r0, r8
 80055f0:	47d0      	blx	sl
 80055f2:	3001      	adds	r0, #1
 80055f4:	d09d      	beq.n	8005532 <_printf_i+0x15a>
 80055f6:	3501      	adds	r5, #1
 80055f8:	68e3      	ldr	r3, [r4, #12]
 80055fa:	9903      	ldr	r1, [sp, #12]
 80055fc:	1a5b      	subs	r3, r3, r1
 80055fe:	42ab      	cmp	r3, r5
 8005600:	dcf2      	bgt.n	80055e8 <_printf_i+0x210>
 8005602:	e7eb      	b.n	80055dc <_printf_i+0x204>
 8005604:	2500      	movs	r5, #0
 8005606:	f104 0619 	add.w	r6, r4, #25
 800560a:	e7f5      	b.n	80055f8 <_printf_i+0x220>
 800560c:	0800597a 	.word	0x0800597a
 8005610:	0800598b 	.word	0x0800598b

08005614 <memmove>:
 8005614:	4288      	cmp	r0, r1
 8005616:	b510      	push	{r4, lr}
 8005618:	eb01 0402 	add.w	r4, r1, r2
 800561c:	d902      	bls.n	8005624 <memmove+0x10>
 800561e:	4284      	cmp	r4, r0
 8005620:	4623      	mov	r3, r4
 8005622:	d807      	bhi.n	8005634 <memmove+0x20>
 8005624:	1e43      	subs	r3, r0, #1
 8005626:	42a1      	cmp	r1, r4
 8005628:	d008      	beq.n	800563c <memmove+0x28>
 800562a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800562e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005632:	e7f8      	b.n	8005626 <memmove+0x12>
 8005634:	4402      	add	r2, r0
 8005636:	4601      	mov	r1, r0
 8005638:	428a      	cmp	r2, r1
 800563a:	d100      	bne.n	800563e <memmove+0x2a>
 800563c:	bd10      	pop	{r4, pc}
 800563e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005646:	e7f7      	b.n	8005638 <memmove+0x24>

08005648 <_sbrk_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d06      	ldr	r5, [pc, #24]	@ (8005664 <_sbrk_r+0x1c>)
 800564c:	2300      	movs	r3, #0
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	f7fc fa60 	bl	8001b18 <_sbrk>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_sbrk_r+0x1a>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_sbrk_r+0x1a>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	200004fc 	.word	0x200004fc

08005668 <_realloc_r>:
 8005668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566c:	4607      	mov	r7, r0
 800566e:	4614      	mov	r4, r2
 8005670:	460d      	mov	r5, r1
 8005672:	b921      	cbnz	r1, 800567e <_realloc_r+0x16>
 8005674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005678:	4611      	mov	r1, r2
 800567a:	f7ff bc5b 	b.w	8004f34 <_malloc_r>
 800567e:	b92a      	cbnz	r2, 800568c <_realloc_r+0x24>
 8005680:	f7ff fbec 	bl	8004e5c <_free_r>
 8005684:	4625      	mov	r5, r4
 8005686:	4628      	mov	r0, r5
 8005688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800568c:	f000 f81a 	bl	80056c4 <_malloc_usable_size_r>
 8005690:	4284      	cmp	r4, r0
 8005692:	4606      	mov	r6, r0
 8005694:	d802      	bhi.n	800569c <_realloc_r+0x34>
 8005696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800569a:	d8f4      	bhi.n	8005686 <_realloc_r+0x1e>
 800569c:	4621      	mov	r1, r4
 800569e:	4638      	mov	r0, r7
 80056a0:	f7ff fc48 	bl	8004f34 <_malloc_r>
 80056a4:	4680      	mov	r8, r0
 80056a6:	b908      	cbnz	r0, 80056ac <_realloc_r+0x44>
 80056a8:	4645      	mov	r5, r8
 80056aa:	e7ec      	b.n	8005686 <_realloc_r+0x1e>
 80056ac:	42b4      	cmp	r4, r6
 80056ae:	4622      	mov	r2, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	bf28      	it	cs
 80056b4:	4632      	movcs	r2, r6
 80056b6:	f7ff fbc3 	bl	8004e40 <memcpy>
 80056ba:	4629      	mov	r1, r5
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff fbcd 	bl	8004e5c <_free_r>
 80056c2:	e7f1      	b.n	80056a8 <_realloc_r+0x40>

080056c4 <_malloc_usable_size_r>:
 80056c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c8:	1f18      	subs	r0, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bfbc      	itt	lt
 80056ce:	580b      	ldrlt	r3, [r1, r0]
 80056d0:	18c0      	addlt	r0, r0, r3
 80056d2:	4770      	bx	lr

080056d4 <_init>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	bf00      	nop
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr

080056e0 <_fini>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr
