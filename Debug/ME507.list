
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007148  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  080072e8  080072e8  000082e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007688  08007688  00008688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007690  08007690  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007690  08007690  00008690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007698  08007698  00008698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800769c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000080  0800771c  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800771c  00009578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001964b  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac4  00000000  00000000  000226fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  000251c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001457  00000000  00000000  00026ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d703  00000000  00000000  00027f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf32  00000000  00000000  00045612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b23  00000000  00000000  00062544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074b0  00000000  00000000  001030ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010a55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072d0 	.word	0x080072d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080072d0 	.word	0x080072d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80005c4:	23ff      	movs	r3, #255	@ 0xff
 80005c6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80005cc:	2300      	movs	r3, #0
 80005ce:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80005d0:	2300      	movs	r3, #0
 80005d2:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80005d4:	4a58      	ldr	r2, [pc, #352]	@ (8000738 <bno055_init+0x17c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80005da:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <bno055_init+0x17c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68dc      	ldr	r4, [r3, #12]
 80005e0:	4b55      	ldr	r3, [pc, #340]	@ (8000738 <bno055_init+0x17c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	7a58      	ldrb	r0, [r3, #9]
 80005e6:	f107 020d 	add.w	r2, r7, #13
 80005ea:	2301      	movs	r3, #1
 80005ec:	2107      	movs	r1, #7
 80005ee:	47a0      	blx	r4
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80005f4:	4b50      	ldr	r3, [pc, #320]	@ (8000738 <bno055_init+0x17c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	691c      	ldr	r4, [r3, #16]
 80005fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000738 <bno055_init+0x17c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	7a58      	ldrb	r0, [r3, #9]
 8000600:	f107 020e 	add.w	r2, r7, #14
 8000604:	2301      	movs	r3, #1
 8000606:	2100      	movs	r1, #0
 8000608:	47a0      	blx	r4
 800060a:	4603      	mov	r3, r0
 800060c:	b2da      	uxtb	r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4413      	add	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000616:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <bno055_init+0x17c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	7bba      	ldrb	r2, [r7, #14]
 800061c:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800061e:	4b46      	ldr	r3, [pc, #280]	@ (8000738 <bno055_init+0x17c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	691c      	ldr	r4, [r3, #16]
 8000624:	4b44      	ldr	r3, [pc, #272]	@ (8000738 <bno055_init+0x17c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	7a58      	ldrb	r0, [r3, #9]
 800062a:	f107 020e 	add.w	r2, r7, #14
 800062e:	2301      	movs	r3, #1
 8000630:	2101      	movs	r1, #1
 8000632:	47a0      	blx	r4
 8000634:	4603      	mov	r3, r0
 8000636:	b2da      	uxtb	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4413      	add	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <bno055_init+0x17c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	7bba      	ldrb	r2, [r7, #14]
 8000646:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000648:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <bno055_init+0x17c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	691c      	ldr	r4, [r3, #16]
 800064e:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <bno055_init+0x17c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	7a58      	ldrb	r0, [r3, #9]
 8000654:	f107 020e 	add.w	r2, r7, #14
 8000658:	2301      	movs	r3, #1
 800065a:	2102      	movs	r1, #2
 800065c:	47a0      	blx	r4
 800065e:	4603      	mov	r3, r0
 8000660:	b2da      	uxtb	r2, r3
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4413      	add	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800066a:	4b33      	ldr	r3, [pc, #204]	@ (8000738 <bno055_init+0x17c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7bba      	ldrb	r2, [r7, #14]
 8000670:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000672:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <bno055_init+0x17c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	691c      	ldr	r4, [r3, #16]
 8000678:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <bno055_init+0x17c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	7a58      	ldrb	r0, [r3, #9]
 800067e:	f107 020e 	add.w	r2, r7, #14
 8000682:	2301      	movs	r3, #1
 8000684:	2103      	movs	r1, #3
 8000686:	47a0      	blx	r4
 8000688:	4603      	mov	r3, r0
 800068a:	b2da      	uxtb	r2, r3
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4413      	add	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <bno055_init+0x17c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	7bba      	ldrb	r2, [r7, #14]
 800069a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <bno055_init+0x17c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	691c      	ldr	r4, [r3, #16]
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <bno055_init+0x17c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	7a58      	ldrb	r0, [r3, #9]
 80006a8:	f107 020e 	add.w	r2, r7, #14
 80006ac:	2301      	movs	r3, #1
 80006ae:	2106      	movs	r1, #6
 80006b0:	47a0      	blx	r4
 80006b2:	4603      	mov	r3, r0
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80006be:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <bno055_init+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <bno055_init+0x17c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	691c      	ldr	r4, [r3, #16]
 80006cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <bno055_init+0x17c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	7a58      	ldrb	r0, [r3, #9]
 80006d2:	f107 0208 	add.w	r2, r7, #8
 80006d6:	2302      	movs	r3, #2
 80006d8:	2104      	movs	r1, #4
 80006da:	47a0      	blx	r4
 80006dc:	4603      	mov	r3, r0
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80006e8:	7a3b      	ldrb	r3, [r7, #8]
 80006ea:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80006ec:	7a7b      	ldrb	r3, [r7, #9]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	7a3b      	ldrb	r3, [r7, #8]
 80006f4:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <bno055_init+0x17c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80006fa:	430a      	orrs	r2, r1
 80006fc:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80006fe:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <bno055_init+0x17c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	691c      	ldr	r4, [r3, #16]
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <bno055_init+0x17c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7a58      	ldrb	r0, [r3, #9]
 800070c:	f107 020e 	add.w	r2, r7, #14
 8000710:	2301      	movs	r3, #1
 8000712:	2107      	movs	r1, #7
 8000714:	47a0      	blx	r4
 8000716:	4603      	mov	r3, r0
 8000718:	b2da      	uxtb	r2, r3
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	4413      	add	r3, r2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <bno055_init+0x17c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	7bba      	ldrb	r2, [r7, #14]
 8000728:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 800072a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	2000009c 	.word	0x2000009c

0800073c <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800074c:	23ff      	movs	r3, #255	@ 0xff
 800074e:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <bno055_write_register+0x48>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000758:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800075c:	e00d      	b.n	800077a <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <bno055_write_register+0x48>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68dc      	ldr	r4, [r3, #12]
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <bno055_write_register+0x48>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	7a58      	ldrb	r0, [r3, #9]
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	79f9      	ldrb	r1, [r7, #7]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	47a0      	blx	r4
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	2000009c 	.word	0x2000009c

08000788 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000792:	23ff      	movs	r3, #255	@ 0xff
 8000794:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000796:	2300      	movs	r3, #0
 8000798:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800079a:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <bno055_write_page_id+0x8c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 80007a2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80007a6:	e030      	b.n	800080a <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	691c      	ldr	r4, [r3, #16]
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7a58      	ldrb	r0, [r3, #9]
 80007b4:	f107 020e 	add.w	r2, r7, #14
 80007b8:	2301      	movs	r3, #1
 80007ba:	2107      	movs	r1, #7
 80007bc:	47a0      	blx	r4
 80007be:	4603      	mov	r3, r0
 80007c0:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d11b      	bne.n	8000802 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68dc      	ldr	r4, [r3, #12]
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7a58      	ldrb	r0, [r3, #9]
 80007da:	f107 020e 	add.w	r2, r7, #14
 80007de:	2301      	movs	r3, #1
 80007e0:	2107      	movs	r1, #7
 80007e2:	47a0      	blx	r4
 80007e4:	4603      	mov	r3, r0
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4413      	add	r3, r2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d106      	bne.n	8000806 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <bno055_write_page_id+0x8c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	711a      	strb	r2, [r3, #4]
 8000800:	e001      	b.n	8000806 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000802:	23ff      	movs	r3, #255	@ 0xff
 8000804:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	bf00      	nop
 8000814:	2000009c 	.word	0x2000009c

08000818 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000820:	23ff      	movs	r3, #255	@ 0xff
 8000822:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 800082e:	23ff      	movs	r3, #255	@ 0xff
 8000830:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000832:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d102      	bne.n	8000840 <bno055_read_accel_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 800083a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800083e:	e04e      	b.n	80008de <bno055_read_accel_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <bno055_read_accel_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff9c 	bl	8000788 <bno055_write_page_id>
 8000850:	4603      	mov	r3, r0
 8000852:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <bno055_read_accel_xyz+0x4e>
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d137      	bne.n	80008d6 <bno055_read_accel_xyz+0xbe>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	691c      	ldr	r4, [r3, #16]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <bno055_read_accel_xyz+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	7a58      	ldrb	r0, [r3, #9]
 8000872:	f107 0208 	add.w	r2, r7, #8
 8000876:	2306      	movs	r3, #6
 8000878:	2108      	movs	r1, #8
 800087a:	47a0      	blx	r4
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000880:	7a3b      	ldrb	r3, [r7, #8]
 8000882:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000884:	7a7b      	ldrb	r3, [r7, #9]
 8000886:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000890:	7a3b      	ldrb	r3, [r7, #8]
 8000892:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000894:	4313      	orrs	r3, r2
 8000896:	b21a      	sxth	r2, r3
            accel->x =
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 800089c:	7abb      	ldrb	r3, [r7, #10]
 800089e:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008a4:	7afb      	ldrb	r3, [r7, #11]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 80008ac:	7abb      	ldrb	r3, [r7, #10]
 80008ae:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
            accel->y =
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 80008b8:	7b3b      	ldrb	r3, [r7, #12]
 80008ba:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008c0:	7b7b      	ldrb	r3, [r7, #13]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 80008c8:	7b3b      	ldrb	r3, [r7, #12]
 80008ca:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21a      	sxth	r2, r3
            accel->z =
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	809a      	strh	r2, [r3, #4]
 80008d4:	e001      	b.n	80008da <bno055_read_accel_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80008d6:	23ff      	movs	r3, #255	@ 0xff
 80008d8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000009c 	.word	0x2000009c

080008ec <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008f4:	23ff      	movs	r3, #255	@ 0xff
 80008f6:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000902:	23ff      	movs	r3, #255	@ 0xff
 8000904:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000906:	4b2d      	ldr	r3, [pc, #180]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 800090e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000912:	e04e      	b.n	80009b2 <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000914:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d004      	beq.n	8000928 <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff32 	bl	8000788 <bno055_write_page_id>
 8000924:	4603      	mov	r3, r0
 8000926:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d004      	beq.n	800093a <bno055_read_euler_hrp+0x4e>
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d137      	bne.n	80009aa <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	691c      	ldr	r4, [r3, #16]
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <bno055_read_euler_hrp+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	7a58      	ldrb	r0, [r3, #9]
 8000946:	f107 0208 	add.w	r2, r7, #8
 800094a:	2306      	movs	r3, #6
 800094c:	211a      	movs	r1, #26
 800094e:	47a0      	blx	r4
 8000950:	4603      	mov	r3, r0
 8000952:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 8000954:	7a3b      	ldrb	r3, [r7, #8]
 8000956:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8000958:	7a7b      	ldrb	r3, [r7, #9]
 800095a:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800095c:	7a7b      	ldrb	r3, [r7, #9]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8000964:	7a3b      	ldrb	r3, [r7, #8]
 8000966:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000968:	4313      	orrs	r3, r2
 800096a:	b21a      	sxth	r2, r3
            euler->h =
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000978:	7afb      	ldrb	r3, [r7, #11]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8000980:	7abb      	ldrb	r3, [r7, #10]
 8000982:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
            euler->r =
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000994:	7b7b      	ldrb	r3, [r7, #13]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 800099c:	7b3b      	ldrb	r3, [r7, #12]
 800099e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
            euler->p =
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	809a      	strh	r2, [r3, #4]
 80009a8:	e001      	b.n	80009ae <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80009aa:	23ff      	movs	r3, #255	@ 0xff
 80009ac:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000009c 	.word	0x2000009c

080009c0 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009c8:	23ff      	movs	r3, #255	@ 0xff
 80009ca:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80009d0:	23ff      	movs	r3, #255	@ 0xff
 80009d2:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80009dc:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80009e0:	e02a      	b.n	8000a38 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fecb 	bl	8000788 <bno055_write_page_id>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80009f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d004      	beq.n	8000a08 <bno055_get_operation_mode+0x48>
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	791b      	ldrb	r3, [r3, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d113      	bne.n	8000a30 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691c      	ldr	r4, [r3, #16]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <bno055_get_operation_mode+0x80>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a58      	ldrb	r0, [r3, #9]
 8000a14:	f107 020d 	add.w	r2, r7, #13
 8000a18:	2301      	movs	r3, #1
 8000a1a:	213d      	movs	r1, #61	@ 0x3d
 8000a1c:	47a0      	blx	r4
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000a22:	7b7b      	ldrb	r3, [r7, #13]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e001      	b.n	8000a34 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a30:	23ff      	movs	r3, #255	@ 0xff
 8000a32:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	2000009c 	.word	0x2000009c

08000a44 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a4e:	23ff      	movs	r3, #255	@ 0xff
 8000a50:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000a56:	2300      	movs	r3, #0
 8000a58:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000a5a:	23ff      	movs	r3, #255	@ 0xff
 8000a5c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000a66:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a6a:	e0ac      	b.n	8000bc6 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffa5 	bl	80009c0 <bno055_get_operation_mode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 809d 	bne.w	8000bbe <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000a84:	7b3b      	ldrb	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d137      	bne.n	8000afa <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a8a:	4b51      	ldr	r3, [pc, #324]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	691c      	ldr	r4, [r3, #16]
 8000a90:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	7a58      	ldrb	r0, [r3, #9]
 8000a96:	f107 020d 	add.w	r2, r7, #13
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	213d      	movs	r1, #61	@ 0x3d
 8000a9e:	47a0      	blx	r4
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f040 808a 	bne.w	8000bc2 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000aca:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68dc      	ldr	r4, [r3, #12]
 8000ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	7a58      	ldrb	r0, [r3, #9]
 8000ad6:	f107 020d 	add.w	r2, r7, #13
 8000ada:	2301      	movs	r3, #1
 8000adc:	213d      	movs	r1, #61	@ 0x3d
 8000ade:	47a0      	blx	r4
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000aec:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000af6:	4798      	blx	r3
 8000af8:	e063      	b.n	8000bc2 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000afa:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691c      	ldr	r4, [r3, #16]
 8000b00:	4b33      	ldr	r3, [pc, #204]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	7a58      	ldrb	r0, [r3, #9]
 8000b06:	f107 020d 	add.w	r2, r7, #13
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	213d      	movs	r1, #61	@ 0x3d
 8000b0e:	47a0      	blx	r4
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d116      	bne.n	8000b4a <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	f023 030f 	bic.w	r3, r3, #15
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000b26:	f107 030d 	add.w	r3, r7, #13
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	203d      	movs	r0, #61	@ 0x3d
 8000b30:	f7ff fe04 	bl	800073c <bno055_write_register>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	2014      	movs	r0, #20
 8000b48:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d038      	beq.n	8000bc2 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	691c      	ldr	r4, [r3, #16]
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	7a58      	ldrb	r0, [r3, #9]
 8000b5c:	f107 020d 	add.w	r2, r7, #13
 8000b60:	2301      	movs	r3, #1
 8000b62:	213d      	movs	r1, #61	@ 0x3d
 8000b64:	47a0      	blx	r4
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d127      	bne.n	8000bc2 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	f023 030f 	bic.w	r3, r3, #15
 8000b7a:	b25a      	sxtb	r2, r3
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68dc      	ldr	r4, [r3, #12]
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	7a58      	ldrb	r0, [r3, #9]
 8000b9a:	f107 020d 	add.w	r2, r7, #13
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	213d      	movs	r1, #61	@ 0x3d
 8000ba2:	47a0      	blx	r4
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4413      	add	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <bno055_set_operation_mode+0x18c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000bba:	4798      	blx	r3
 8000bbc:	e001      	b.n	8000bc2 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000bbe:	23ff      	movs	r3, #255	@ 0xff
 8000bc0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000009c 	.word	0x2000009c

08000bd4 <bno055_get_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_power_mode(u8 *power_mode_u8)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000bdc:	23ff      	movs	r3, #255	@ 0xff
 8000bde:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000be4:	23ff      	movs	r3, #255	@ 0xff
 8000be6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <bno055_get_power_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000bf0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000bf4:	e02a      	b.n	8000c4c <bno055_get_power_mode+0x78>
    }
    else
    {
        /*condition check for page, power mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <bno055_get_power_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fdc1 	bl	8000788 <bno055_write_page_id>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <bno055_get_power_mode+0x48>
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d113      	bne.n	8000c44 <bno055_get_power_mode+0x70>
        {
            /* Read the value of power mode */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	691c      	ldr	r4, [r3, #16]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <bno055_get_power_mode+0x80>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	7a58      	ldrb	r0, [r3, #9]
 8000c28:	f107 020d 	add.w	r2, r7, #13
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	213e      	movs	r1, #62	@ 0x3e
 8000c30:	47a0      	blx	r4
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_POWER_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *power_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_POWER_MODE);
 8000c36:	7b7b      	ldrb	r3, [r7, #13]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e001      	b.n	8000c48 <bno055_get_power_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c44:	23ff      	movs	r3, #255	@ 0xff
 8000c46:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	2000009c 	.word	0x2000009c

08000c58 <BNO055_I2C_bus_write>:
#include "bno055_hal.h"

extern I2C_HandleTypeDef hi2c3;

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 wr_len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	603a      	str	r2, [r7, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	460b      	mov	r3, r1
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Write(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, wr_len, HAL_MAX_DELAY) == HAL_OK)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	b299      	uxth	r1, r3
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c82:	9002      	str	r0, [sp, #8]
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <BNO055_I2C_bus_write+0x50>)
 8000c8e:	f002 faa7 	bl	80031e0 <HAL_I2C_Mem_Write>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <BNO055_I2C_bus_write+0x44>
        return 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e000      	b.n	8000c9e <BNO055_I2C_bus_write+0x46>
    else
        return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000f8 	.word	0x200000f8

08000cac <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 r_len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	603a      	str	r2, [r7, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Read(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, r_len, HAL_MAX_DELAY) == HAL_OK){
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd6:	9002      	str	r0, [sp, #8]
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <BNO055_I2C_bus_read+0x50>)
 8000ce2:	f002 fb77 	bl	80033d4 <HAL_I2C_Mem_Read>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <BNO055_I2C_bus_read+0x44>
        return 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <BNO055_I2C_bus_read+0x46>
    }
    return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000f8 	.word	0x200000f8

08000d00 <BNO055_delay_msec>:

void BNO055_delay_msec(u32 msec)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    HAL_Delay(msec);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f001 fdbf 	bl	800288c <HAL_Delay>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <BNO055_setup>:


void BNO055_setup(struct bno055_t* bno055_device)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    bno055_device ->dev_addr = BNO055_I2C_ADDR1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2228      	movs	r2, #40	@ 0x28
 8000d24:	725a      	strb	r2, [r3, #9]
    bno055_device->bus_write = BNO055_I2C_bus_write;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <BNO055_setup+0x30>)
 8000d2a:	60da      	str	r2, [r3, #12]
    bno055_device->bus_read = BNO055_I2C_bus_read;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <BNO055_setup+0x34>)
 8000d30:	611a      	str	r2, [r3, #16]
    bno055_device->delay_msec = BNO055_delay_msec;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <BNO055_setup+0x38>)
 8000d36:	615a      	str	r2, [r3, #20]

    if (bno055_init(bno055_device) == 0)
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fc3f 	bl	80005bc <bno055_init>
    {
        // Initialization successful
    }
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	08000c59 	.word	0x08000c59
 8000d4c:	08000cad 	.word	0x08000cad
 8000d50:	08000d01 	.word	0x08000d01

08000d54 <_ZN3FSMC1Ev>:
extern UART_HandleTypeDef huart1;




FSM::FSM():state(S0_INIT){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]


}
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_ZN3FSM3runEv>:


void FSM::run(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    // Switch case is a bit tidier than a bunch of if / else if statements
    // but you must remember to use break or fall through into later states
    switch(state)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d811      	bhi.n	8000da4 <_ZN3FSM3runEv+0x34>
 8000d80:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <_ZN3FSM3runEv+0x18>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000d9d 	.word	0x08000d9d
 8000d8c:	08000db5 	.word	0x08000db5
 8000d90:	08000db5 	.word	0x08000db5
 8000d94:	08000db5 	.word	0x08000db5
 8000d98:	08000db5 	.word	0x08000db5
    {
        case S0_INIT:

        	//HAL_UART_Transmit(&huart1, (uint8_t*)"In State 0\r\n", 13, HAL_MAX_DELAY);
            state = S1_IDLE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
            break;
 8000da2:	e008      	b.n	8000db6 <_ZN3FSM3runEv+0x46>




        default:
        	HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid State\r\n", 16, HAL_MAX_DELAY);
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	2210      	movs	r2, #16
 8000daa:	4905      	ldr	r1, [pc, #20]	@ (8000dc0 <_ZN3FSM3runEv+0x50>)
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <_ZN3FSM3runEv+0x54>)
 8000dae:	f004 fd49 	bl	8005844 <HAL_UART_Transmit>
        	break;
 8000db2:	e000      	b.n	8000db6 <_ZN3FSM3runEv+0x46>
            break;
 8000db4:	bf00      	nop
    }


}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	080072e8 	.word	0x080072e8
 8000dc4:	200002b4 	.word	0x200002b4

08000dc8 <_ZN3FSM9set_stateENS_5stateE>:


void FSM::set_state(system_state_t new_state) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
    state = new_state;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	701a      	strb	r2, [r3, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_ZNK3FSM9get_stateEv>:

	  void run(void);

	  void set_state(system_state_t new_state);

	  system_state_t get_state() const { return this->state; }
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f001 fccf 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f873 	bl	8000ef4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 fbff 	bl	8001610 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000e12:	f000 fbcf 	bl	80015b4 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 8000e16:	f000 fa01 	bl	800121c <_ZL12MX_TIM2_Initv>
  MX_I2C3_Init();
 8000e1a:	f000 f911 	bl	8001040 <_ZL12MX_I2C3_Initv>
  MX_TIM1_Init();
 8000e1e:	f000 f943 	bl	80010a8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000e22:	f000 fa59 	bl	80012d8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000e26:	f000 faef 	bl	8001408 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000e2a:	f000 fb4b 	bl	80014c4 <_ZL12MX_TIM5_Initv>
  MX_I2C2_Init();
 8000e2e:	f000 f8d3 	bl	8000fd8 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */


  // SERVO MOTOR
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 8000e32:	210c      	movs	r1, #12
 8000e34:	4824      	ldr	r0, [pc, #144]	@ (8000ec8 <main+0xc8>)
 8000e36:	f003 fea3 	bl	8004b80 <HAL_TIM_PWM_Start_IT>


  // BASE MOTOR
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8000e3a:	213c      	movs	r1, #60	@ 0x3c
 8000e3c:	4823      	ldr	r0, [pc, #140]	@ (8000ecc <main+0xcc>)
 8000e3e:	f004 f843 	bl	8004ec8 <HAL_TIM_Encoder_Start_IT>

  // POLOLU 2
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4822      	ldr	r0, [pc, #136]	@ (8000ed0 <main+0xd0>)
 8000e46:	f003 fe9b 	bl	8004b80 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4820      	ldr	r0, [pc, #128]	@ (8000ed0 <main+0xd0>)
 8000e4e:	f003 fe97 	bl	8004b80 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000e52:	2108      	movs	r1, #8
 8000e54:	481e      	ldr	r0, [pc, #120]	@ (8000ed0 <main+0xd0>)
 8000e56:	f003 fe93 	bl	8004b80 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8000e5a:	210c      	movs	r1, #12
 8000e5c:	481c      	ldr	r0, [pc, #112]	@ (8000ed0 <main+0xd0>)
 8000e5e:	f003 fe8f 	bl	8004b80 <HAL_TIM_PWM_Start_IT>


  // LAUNCHER MOTOR
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8000e62:	213c      	movs	r1, #60	@ 0x3c
 8000e64:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <main+0xd4>)
 8000e66:	f004 f82f 	bl	8004ec8 <HAL_TIM_Encoder_Start_IT>


  // POLOLU 1
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
 8000e6a:	2108      	movs	r1, #8
 8000e6c:	481a      	ldr	r0, [pc, #104]	@ (8000ed8 <main+0xd8>)
 8000e6e:	f003 fe87 	bl	8004b80 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);
 8000e72:	210c      	movs	r1, #12
 8000e74:	4818      	ldr	r0, [pc, #96]	@ (8000ed8 <main+0xd8>)
 8000e76:	f003 fe83 	bl	8004b80 <HAL_TIM_PWM_Start_IT>
  //set BNO055 reset to low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e80:	4816      	ldr	r0, [pc, #88]	@ (8000edc <main+0xdc>)
 8000e82:	f002 f84f 	bl	8002f24 <HAL_GPIO_WritePin>
  //initialize BNO055
  BNO055_setup(&IMU);
 8000e86:	4816      	ldr	r0, [pc, #88]	@ (8000ee0 <main+0xe0>)
 8000e88:	f7ff ff46 	bl	8000d18 <BNO055_setup>

  initialize_IMU();
 8000e8c:	f000 fece 	bl	8001c2c <_ZL14initialize_IMUv>
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	4914      	ldr	r1, [pc, #80]	@ (8000ee4 <main+0xe4>)
 8000e94:	4814      	ldr	r0, [pc, #80]	@ (8000ee8 <main+0xe8>)
 8000e96:	f004 fd60 	bl	800595a <HAL_UART_Receive_IT>

  int16_t last_count1 = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	80fb      	strh	r3, [r7, #6]
  int16_t last_count2 = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	80bb      	strh	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  HAL_Delay(500);
 8000ea2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ea6:	f001 fcf1 	bl	800288c <HAL_Delay>
	  log_IMU();
 8000eaa:	f000 ffb1 	bl	8001e10 <_ZL7log_IMUv>
	  log_LIDAR();
 8000eae:	f001 f833 	bl	8001f18 <_ZL9log_LIDARv>
	  set_duty_dual(&Pololu_1, 0, 4999);
 8000eb2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <main+0xec>)
 8000eba:	f001 f8ce 	bl	800205a <set_duty_dual>
	  fsm.run();
 8000ebe:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <main+0xf0>)
 8000ec0:	f7ff ff56 	bl	8000d70 <_ZN3FSM3runEv>
	  HAL_Delay(500);
 8000ec4:	bf00      	nop
 8000ec6:	e7ec      	b.n	8000ea2 <main+0xa2>
 8000ec8:	2000014c 	.word	0x2000014c
 8000ecc:	20000194 	.word	0x20000194
 8000ed0:	200001dc 	.word	0x200001dc
 8000ed4:	20000224 	.word	0x20000224
 8000ed8:	2000026c 	.word	0x2000026c
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	200003b0 	.word	0x200003b0
 8000ee4:	2000033c 	.word	0x2000033c
 8000ee8:	200002b4 	.word	0x200002b4
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	200000a0 	.word	0x200000a0

08000ef4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	@ 0x50
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2230      	movs	r2, #48	@ 0x30
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 fd54 	bl	80069b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <_Z18SystemClock_Configv+0xdc>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd0 <_Z18SystemClock_Configv+0xdc>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <_Z18SystemClock_Configv+0xdc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <_Z18SystemClock_Configv+0xe0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a25      	ldr	r2, [pc, #148]	@ (8000fd4 <_Z18SystemClock_Configv+0xe0>)
 8000f3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <_Z18SystemClock_Configv+0xe0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f64:	2308      	movs	r3, #8
 8000f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f70:	2304      	movs	r3, #4
 8000f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 f959 	bl	8004230 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000f8e:	f001 f821 	bl	8001fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2103      	movs	r1, #3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fbb6 	bl	8004720 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000fc4:	f001 f806 	bl	8001fd4 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	@ 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8000fde:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <_ZL12MX_I2C2_Initv+0x60>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8000fe4:	4a15      	ldr	r2, [pc, #84]	@ (800103c <_ZL12MX_I2C2_Initv+0x64>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <_ZL12MX_I2C2_Initv+0x5c>)
 8001016:	f001 ff9f 	bl	8002f58 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 800102a:	f000 ffd3 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000a4 	.word	0x200000a4
 8001038:	40005800 	.word	0x40005800
 800103c:	000186a0 	.word	0x000186a0

08001040 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 8001046:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <_ZL12MX_I2C3_Initv+0x60>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 800104c:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <_ZL12MX_I2C3_Initv+0x64>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 800105e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001062:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001064:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <_ZL12MX_I2C3_Initv+0x5c>)
 800107e:	f001 ff6b 	bl	8002f58 <HAL_I2C_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf14      	ite	ne
 8001088:	2301      	movne	r3, #1
 800108a:	2300      	moveq	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8001092:	f000 ff9f 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000f8 	.word	0x200000f8
 80010a0:	40005c00 	.word	0x40005c00
 80010a4:	000186a0 	.word	0x000186a0

080010a8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b092      	sub	sp, #72	@ 0x48
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2220      	movs	r2, #32
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fc6c 	bl	80069b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80010da:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <_ZL12MX_TIM1_Initv+0x170>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010de:	4b4d      	ldr	r3, [pc, #308]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80010ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b48      	ldr	r3, [pc, #288]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f8:	4b46      	ldr	r3, [pc, #280]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001104:	4843      	ldr	r0, [pc, #268]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 8001106:	f003 fceb 	bl	8004ae0 <HAL_TIM_PWM_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800111a:	f000 ff5b 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001126:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800112a:	4619      	mov	r1, r3
 800112c:	4839      	ldr	r0, [pc, #228]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 800112e:	f004 fa79 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001142:	f000 ff47 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001146:	2360      	movs	r3, #96	@ 0x60
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	2200      	movs	r2, #0
 8001168:	4619      	mov	r1, r3
 800116a:	482a      	ldr	r0, [pc, #168]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 800116c:	f003 ff5a 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf14      	ite	ne
 8001176:	2301      	movne	r3, #1
 8001178:	2300      	moveq	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001180:	f000 ff28 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001188:	2204      	movs	r2, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4821      	ldr	r0, [pc, #132]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 800118e:	f003 ff49 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80011a2:	f000 ff17 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	220c      	movs	r2, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	4819      	ldr	r0, [pc, #100]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80011b0:	f003 ff38 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80011c4:	f000 ff06 	bl	8001fd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 80011ec:	f004 fa88 	bl	8005700 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8001200:	f000 fee8 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001204:	4803      	ldr	r0, [pc, #12]	@ (8001214 <_ZL12MX_TIM1_Initv+0x16c>)
 8001206:	f001 f94b 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3748      	adds	r7, #72	@ 0x48
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000014c 	.word	0x2000014c
 8001218:	40010000 	.word	0x40010000

0800121c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2224      	movs	r2, #36	@ 0x24
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fbc0 	bl	80069b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800123a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800123e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001240:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 800128c:	f003 fd76 	bl	8004d7c <HAL_TIM_Encoder_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf14      	ite	ne
 8001296:	2301      	movne	r3, #1
 8001298:	2300      	moveq	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80012a0:	f000 fe98 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4808      	ldr	r0, [pc, #32]	@ (80012d4 <_ZL12MX_TIM2_Initv+0xb8>)
 80012b2:	f004 f9b7 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80012c6:	f000 fe85 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000194 	.word	0x20000194

080012d8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fa:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 80012fc:	4a41      	ldr	r2, [pc, #260]	@ (8001404 <_ZL12MX_TIM3_Initv+0x12c>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b3e      	ldr	r3, [pc, #248]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800130c:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 800130e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001320:	4837      	ldr	r0, [pc, #220]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 8001322:	f003 fbdd 	bl	8004ae0 <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001336:	f000 fe4d 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4619      	mov	r1, r3
 8001348:	482d      	ldr	r0, [pc, #180]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 800134a:	f004 f96b 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800135e:	f000 fe39 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	@ 0x60
 8001364:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4821      	ldr	r0, [pc, #132]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 800137a:	f003 fe53 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800138e:	f000 fe21 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2204      	movs	r2, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4819      	ldr	r0, [pc, #100]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 800139a:	f003 fe43 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80013ae:	f000 fe11 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2208      	movs	r2, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	4811      	ldr	r0, [pc, #68]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 80013ba:	f003 fe33 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 80013ce:	f000 fe01 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	220c      	movs	r2, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 80013da:	f003 fe23 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 80013ee:	f000 fdf1 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <_ZL12MX_TIM3_Initv+0x128>)
 80013f4:	f001 f854 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200001dc 	.word	0x200001dc
 8001404:	40000400 	.word	0x40000400

08001408 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f005 faca 	bl	80069b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001424:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001426:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <_ZL12MX_TIM4_Initv+0xb8>)
 8001428:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001452:	2301      	movs	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	4811      	ldr	r0, [pc, #68]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 8001476:	f003 fc81 	bl	8004d7c <HAL_TIM_Encoder_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf14      	ite	ne
 8001480:	2301      	movne	r3, #1
 8001482:	2300      	moveq	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800148a:	f000 fda3 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <_ZL12MX_TIM4_Initv+0xb4>)
 800149c:	f004 f8c2 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80014b0:	f000 fd90 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	@ 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000224 	.word	0x20000224
 80014c0:	40000800 	.word	0x40000800

080014c4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 80014e8:	4a31      	ldr	r2, [pc, #196]	@ (80015b0 <_ZL12MX_TIM5_Initv+0xec>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 80014f8:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 80014fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800150c:	4827      	ldr	r0, [pc, #156]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 800150e:	f003 fae7 	bl	8004ae0 <HAL_TIM_PWM_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8001522:	f000 fd57 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	4619      	mov	r1, r3
 8001534:	481d      	ldr	r0, [pc, #116]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001536:	f004 f875 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf14      	ite	ne
 8001540:	2301      	movne	r3, #1
 8001542:	2300      	moveq	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 800154a:	f000 fd43 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	@ 0x60
 8001550:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2208      	movs	r2, #8
 8001562:	4619      	mov	r1, r3
 8001564:	4811      	ldr	r0, [pc, #68]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001566:	f003 fd5d 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 800157a:	f000 fd2b 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	220c      	movs	r2, #12
 8001582:	4619      	mov	r1, r3
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 8001586:	f003 fd4d 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800159a:	f000 fd1b 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800159e:	4803      	ldr	r0, [pc, #12]	@ (80015ac <_ZL12MX_TIM5_Initv+0xe8>)
 80015a0:	f000 ff7e 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	@ 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000026c 	.word	0x2000026c
 80015b0:	40000c00 	.word	0x40000c00

080015b4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_ZL19MX_USART1_UART_Initv+0x58>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ea:	4807      	ldr	r0, [pc, #28]	@ (8001608 <_ZL19MX_USART1_UART_Initv+0x54>)
 80015ec:	f004 f8da 	bl	80057a4 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001600:	f000 fce8 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200002b4 	.word	0x200002b4
 800160c:	40011000 	.word	0x40011000

08001610 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b38      	ldr	r3, [pc, #224]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a37      	ldr	r2, [pc, #220]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b35      	ldr	r3, [pc, #212]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a30      	ldr	r2, [pc, #192]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a29      	ldr	r2, [pc, #164]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b23      	ldr	r3, [pc, #140]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a22      	ldr	r2, [pc, #136]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <_ZL12MX_GPIO_Initv+0xfc>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800169c:	481c      	ldr	r0, [pc, #112]	@ (8001710 <_ZL12MX_GPIO_Initv+0x100>)
 800169e:	f001 fc41 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a8:	481a      	ldr	r0, [pc, #104]	@ (8001714 <_ZL12MX_GPIO_Initv+0x104>)
 80016aa:	f001 fc3b 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4815      	ldr	r0, [pc, #84]	@ (8001718 <_ZL12MX_GPIO_Initv+0x108>)
 80016c4:	f001 faaa 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80016c8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	@ (8001710 <_ZL12MX_GPIO_Initv+0x100>)
 80016e2:	f001 fa9b 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <_ZL12MX_GPIO_Initv+0x104>)
 8001700:	f001 fa8c 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	@ 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020800 	.word	0x40020800

0800171c <HAL_UART_RxCpltCallback>:


#include <ctype.h>  // for toupper()

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a9e      	ldr	r2, [pc, #632]	@ (80019a4 <HAL_UART_RxCpltCallback+0x288>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f040 825a 	bne.w	8001be4 <HAL_UART_RxCpltCallback+0x4c8>
    {
        char c = rx_buf[0];
 8001730:	4b9d      	ldr	r3, [pc, #628]	@ (80019a8 <HAL_UART_RxCpltCallback+0x28c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	76bb      	strb	r3, [r7, #26]
        static char cmd_buffer[64];
        static uint8_t cmd_index = 0;

        if (c == '\r' || c == '\n')  // End of command
 8001736:	7ebb      	ldrb	r3, [r7, #26]
 8001738:	2b0d      	cmp	r3, #13
 800173a:	d003      	beq.n	8001744 <HAL_UART_RxCpltCallback+0x28>
 800173c:	7ebb      	ldrb	r3, [r7, #26]
 800173e:	2b0a      	cmp	r3, #10
 8001740:	f040 823d 	bne.w	8001bbe <HAL_UART_RxCpltCallback+0x4a2>
        {
            cmd_buffer[cmd_index] = '\0';
 8001744:	4b99      	ldr	r3, [pc, #612]	@ (80019ac <HAL_UART_RxCpltCallback+0x290>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b99      	ldr	r3, [pc, #612]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800174c:	2100      	movs	r1, #0
 800174e:	5499      	strb	r1, [r3, r2]

            // Convert to uppercase for consistent parsing
            for (uint8_t i = 0; i < cmd_index; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
 8001754:	e00d      	b.n	8001772 <HAL_UART_RxCpltCallback+0x56>
                cmd_buffer[i] = toupper((unsigned char)cmd_buffer[i]);
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	4a95      	ldr	r2, [pc, #596]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	4618      	mov	r0, r3
 800175e:	f005 f8fb 	bl	8006958 <toupper>
 8001762:	4602      	mov	r2, r0
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	b2d1      	uxtb	r1, r2
 8001768:	4a91      	ldr	r2, [pc, #580]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800176a:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < cmd_index; i++) {
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	3301      	adds	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	4b8e      	ldr	r3, [pc, #568]	@ (80019ac <HAL_UART_RxCpltCallback+0x290>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	7ffa      	ldrb	r2, [r7, #31]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3ec      	bcc.n	8001756 <HAL_UART_RxCpltCallback+0x3a>
            }

            // Process full command
            if (cmd_index >= 4)
 800177c:	4b8b      	ldr	r3, [pc, #556]	@ (80019ac <HAL_UART_RxCpltCallback+0x290>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b03      	cmp	r3, #3
 8001782:	f240 8211 	bls.w	8001ba8 <HAL_UART_RxCpltCallback+0x48c>
            {
                // === FSM STATE TRANSITION ===
                if (strncmp(cmd_buffer, "MODE", 4) == 0)
 8001786:	2204      	movs	r2, #4
 8001788:	498a      	ldr	r1, [pc, #552]	@ (80019b4 <HAL_UART_RxCpltCallback+0x298>)
 800178a:	4889      	ldr	r0, [pc, #548]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800178c:	f005 f918 	bl	80069c0 <strncmp>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d14a      	bne.n	800182c <HAL_UART_RxCpltCallback+0x110>
                {
                    uint8_t mode = cmd_buffer[4] - '0';
 8001796:	4b86      	ldr	r3, [pc, #536]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	3b30      	subs	r3, #48	@ 0x30
 800179c:	753b      	strb	r3, [r7, #20]
                    switch (mode) {
 800179e:	7d3b      	ldrb	r3, [r7, #20]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d826      	bhi.n	80017f2 <HAL_UART_RxCpltCallback+0xd6>
 80017a4:	a201      	add	r2, pc, #4	@ (adr r2, 80017ac <HAL_UART_RxCpltCallback+0x90>)
 80017a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017aa:	bf00      	nop
 80017ac:	080017c1 	.word	0x080017c1
 80017b0:	080017cb 	.word	0x080017cb
 80017b4:	080017d5 	.word	0x080017d5
 80017b8:	080017df 	.word	0x080017df
 80017bc:	080017e9 	.word	0x080017e9
                        case 0: fsm.set_state(FSM::S0_INIT); break;
 80017c0:	2100      	movs	r1, #0
 80017c2:	487d      	ldr	r0, [pc, #500]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 80017c4:	f7ff fb00 	bl	8000dc8 <_ZN3FSM9set_stateENS_5stateE>
 80017c8:	e01b      	b.n	8001802 <HAL_UART_RxCpltCallback+0xe6>
                        case 1: fsm.set_state(FSM::S1_IDLE); break;
 80017ca:	2101      	movs	r1, #1
 80017cc:	487a      	ldr	r0, [pc, #488]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 80017ce:	f7ff fafb 	bl	8000dc8 <_ZN3FSM9set_stateENS_5stateE>
 80017d2:	e016      	b.n	8001802 <HAL_UART_RxCpltCallback+0xe6>
                        case 2: fsm.set_state(FSM::S2_MANUAL_STEP_INPUT); break;
 80017d4:	2102      	movs	r1, #2
 80017d6:	4878      	ldr	r0, [pc, #480]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 80017d8:	f7ff faf6 	bl	8000dc8 <_ZN3FSM9set_stateENS_5stateE>
 80017dc:	e011      	b.n	8001802 <HAL_UART_RxCpltCallback+0xe6>
                        case 3: fsm.set_state(FSM::S3_MANUAL_TARGET); break;
 80017de:	2103      	movs	r1, #3
 80017e0:	4875      	ldr	r0, [pc, #468]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 80017e2:	f7ff faf1 	bl	8000dc8 <_ZN3FSM9set_stateENS_5stateE>
 80017e6:	e00c      	b.n	8001802 <HAL_UART_RxCpltCallback+0xe6>
                        case 4: fsm.set_state(FSM::S4_AUTOMATIC); break;
 80017e8:	2104      	movs	r1, #4
 80017ea:	4873      	ldr	r0, [pc, #460]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 80017ec:	f7ff faec 	bl	8000dc8 <_ZN3FSM9set_stateENS_5stateE>
 80017f0:	e007      	b.n	8001802 <HAL_UART_RxCpltCallback+0xe6>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Mode\r\n", 15, 1000);
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	220f      	movs	r2, #15
 80017f8:	4970      	ldr	r1, [pc, #448]	@ (80019bc <HAL_UART_RxCpltCallback+0x2a0>)
 80017fa:	4871      	ldr	r0, [pc, #452]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 80017fc:	f004 f822 	bl	8005844 <HAL_UART_Transmit>
                            break;
 8001800:	bf00      	nop
                    }

                    sprintf((char*)tx_buf, "FSM state: %d\r\n", fsm.get_state());
 8001802:	486d      	ldr	r0, [pc, #436]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 8001804:	f7ff faef 	bl	8000de6 <_ZNK3FSM9get_stateEv>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	496d      	ldr	r1, [pc, #436]	@ (80019c4 <HAL_UART_RxCpltCallback+0x2a8>)
 800180e:	486e      	ldr	r0, [pc, #440]	@ (80019c8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001810:	f005 f8ac 	bl	800696c <siprintf>
                    HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001814:	486c      	ldr	r0, [pc, #432]	@ (80019c8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001816:	f7fe fce3 	bl	80001e0 <strlen>
 800181a:	4603      	mov	r3, r0
 800181c:	b29a      	uxth	r2, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	4969      	ldr	r1, [pc, #420]	@ (80019c8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001824:	4866      	ldr	r0, [pc, #408]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001826:	f004 f80d 	bl	8005844 <HAL_UART_Transmit>
 800182a:	e1c4      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                }

                // === MOTOR COMMAND: M1FF / M2FF ===
                else if (cmd_buffer[0] == 'M')
 800182c:	4b60      	ldr	r3, [pc, #384]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b4d      	cmp	r3, #77	@ 0x4d
 8001832:	f040 808e 	bne.w	8001952 <HAL_UART_RxCpltCallback+0x236>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8001836:	4860      	ldr	r0, [pc, #384]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 8001838:	f7ff fad5 	bl	8000de6 <_ZNK3FSM9get_stateEv>
 800183c:	4603      	mov	r3, r0
 800183e:	2b02      	cmp	r3, #2
 8001840:	bf14      	ite	ne
 8001842:	2301      	movne	r3, #1
 8001844:	2300      	moveq	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_UART_RxCpltCallback+0x140>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Motor command not allowed in this state\r\n", 41, 1000);
 800184c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001850:	2229      	movs	r2, #41	@ 0x29
 8001852:	495e      	ldr	r1, [pc, #376]	@ (80019cc <HAL_UART_RxCpltCallback+0x2b0>)
 8001854:	485a      	ldr	r0, [pc, #360]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001856:	f003 fff5 	bl	8005844 <HAL_UART_Transmit>
 800185a:	e1ac      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 800185c:	4b54      	ldr	r3, [pc, #336]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	2b30      	cmp	r3, #48	@ 0x30
 8001862:	d903      	bls.n	800186c <HAL_UART_RxCpltCallback+0x150>
 8001864:	4b52      	ldr	r3, [pc, #328]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	2b32      	cmp	r3, #50	@ 0x32
 800186a:	d907      	bls.n	800187c <HAL_UART_RxCpltCallback+0x160>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Motor Number\r\n", 23, 1000);
 800186c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001870:	2217      	movs	r2, #23
 8001872:	4957      	ldr	r1, [pc, #348]	@ (80019d0 <HAL_UART_RxCpltCallback+0x2b4>)
 8001874:	4852      	ldr	r0, [pc, #328]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001876:	f003 ffe5 	bl	8005844 <HAL_UART_Transmit>
 800187a:	e19c      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                    } else {
                        uint8_t motor_num = cmd_buffer[1] - '0';
 800187c:	4b4c      	ldr	r3, [pc, #304]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	3b30      	subs	r3, #48	@ 0x30
 8001882:	757b      	strb	r3, [r7, #21]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2100      	movs	r1, #0
 800188a:	460a      	mov	r2, r1
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	460a      	mov	r2, r1
 8001890:	709a      	strb	r2, [r3, #2]
 8001892:	4b47      	ldr	r3, [pc, #284]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	743b      	strb	r3, [r7, #16]
 8001898:	4b45      	ldr	r3, [pc, #276]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800189a:	78db      	ldrb	r3, [r3, #3]
 800189c:	747b      	strb	r3, [r7, #17]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	2210      	movs	r2, #16
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 f84c 	bl	8006944 <strtol>
 80018ac:	4603      	mov	r3, r0
 80018ae:	77bb      	strb	r3, [r7, #30]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 80018b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018b4:	2b64      	cmp	r3, #100	@ 0x64
 80018b6:	dd01      	ble.n	80018bc <HAL_UART_RxCpltCallback+0x1a0>
 80018b8:	2364      	movs	r3, #100	@ 0x64
 80018ba:	77bb      	strb	r3, [r7, #30]
                        if (duty < -100) duty = -100;
 80018bc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018c0:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80018c4:	da01      	bge.n	80018ca <HAL_UART_RxCpltCallback+0x1ae>
 80018c6:	239c      	movs	r3, #156	@ 0x9c
 80018c8:	77bb      	strb	r3, [r7, #30]
                        int16_t pulse = (duty * 4799) / 100;
 80018ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018ce:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	4a3f      	ldr	r2, [pc, #252]	@ (80019d4 <HAL_UART_RxCpltCallback+0x2b8>)
 80018d8:	fb82 1203 	smull	r1, r2, r2, r3
 80018dc:	1152      	asrs	r2, r2, #5
 80018de:	17db      	asrs	r3, r3, #31
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	83bb      	strh	r3, [r7, #28]
                        if (pulse < 0) pulse = -pulse;
 80018e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da03      	bge.n	80018f4 <HAL_UART_RxCpltCallback+0x1d8>
 80018ec:	8bbb      	ldrh	r3, [r7, #28]
 80018ee:	425b      	negs	r3, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	83bb      	strh	r3, [r7, #28]

                        if (motor_num == 1)
 80018f4:	7d7b      	ldrb	r3, [r7, #21]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10c      	bne.n	8001914 <HAL_UART_RxCpltCallback+0x1f8>
                            set_duty(&motor_1, (duty >= 0) ? pulse : 0);
 80018fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db02      	blt.n	8001908 <HAL_UART_RxCpltCallback+0x1ec>
 8001902:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001906:	e000      	b.n	800190a <HAL_UART_RxCpltCallback+0x1ee>
 8001908:	2300      	movs	r3, #0
 800190a:	4619      	mov	r1, r3
 800190c:	4832      	ldr	r0, [pc, #200]	@ (80019d8 <HAL_UART_RxCpltCallback+0x2bc>)
 800190e:	f000 fb76 	bl	8001ffe <set_duty>
 8001912:	e00b      	b.n	800192c <HAL_UART_RxCpltCallback+0x210>
                        else
                            set_duty(&motor_2, (duty >= 0) ? pulse : 0);
 8001914:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db02      	blt.n	8001922 <HAL_UART_RxCpltCallback+0x206>
 800191c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001920:	e000      	b.n	8001924 <HAL_UART_RxCpltCallback+0x208>
 8001922:	2300      	movs	r3, #0
 8001924:	4619      	mov	r1, r3
 8001926:	482d      	ldr	r0, [pc, #180]	@ (80019dc <HAL_UART_RxCpltCallback+0x2c0>)
 8001928:	f000 fb69 	bl	8001ffe <set_duty>

                        sprintf((char*)tx_buf, "Motor %d set to duty %d\r\n", motor_num, duty);
 800192c:	7d7a      	ldrb	r2, [r7, #21]
 800192e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001932:	492b      	ldr	r1, [pc, #172]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001934:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001936:	f005 f819 	bl	800696c <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 800193a:	4823      	ldr	r0, [pc, #140]	@ (80019c8 <HAL_UART_RxCpltCallback+0x2ac>)
 800193c:	f7fe fc50 	bl	80001e0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001948:	491f      	ldr	r1, [pc, #124]	@ (80019c8 <HAL_UART_RxCpltCallback+0x2ac>)
 800194a:	481d      	ldr	r0, [pc, #116]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 800194c:	f003 ff7a 	bl	8005844 <HAL_UART_Transmit>
 8001950:	e131      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === SERVO COMMAND: S1XX / S2XX ===
                else if (cmd_buffer[0] == 'S')
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b53      	cmp	r3, #83	@ 0x53
 8001958:	f040 80ad 	bne.w	8001ab6 <HAL_UART_RxCpltCallback+0x39a>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 800195c:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <HAL_UART_RxCpltCallback+0x29c>)
 800195e:	f7ff fa42 	bl	8000de6 <_ZNK3FSM9get_stateEv>
 8001962:	4603      	mov	r3, r0
 8001964:	2b02      	cmp	r3, #2
 8001966:	bf14      	ite	ne
 8001968:	2301      	movne	r3, #1
 800196a:	2300      	moveq	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_UART_RxCpltCallback+0x266>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Servo command not allowed in this state\r\n", 41, 1000);
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	2229      	movs	r2, #41	@ 0x29
 8001978:	491a      	ldr	r1, [pc, #104]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2c8>)
 800197a:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 800197c:	f003 ff62 	bl	8005844 <HAL_UART_Transmit>
 8001980:	e119      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	2b30      	cmp	r3, #48	@ 0x30
 8001988:	d903      	bls.n	8001992 <HAL_UART_RxCpltCallback+0x276>
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_UART_RxCpltCallback+0x294>)
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	2b32      	cmp	r3, #50	@ 0x32
 8001990:	d92c      	bls.n	80019ec <HAL_UART_RxCpltCallback+0x2d0>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Servo Number\r\n", 23, 1000);
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	2217      	movs	r2, #23
 8001998:	4913      	ldr	r1, [pc, #76]	@ (80019e8 <HAL_UART_RxCpltCallback+0x2cc>)
 800199a:	4809      	ldr	r0, [pc, #36]	@ (80019c0 <HAL_UART_RxCpltCallback+0x2a4>)
 800199c:	f003 ff52 	bl	8005844 <HAL_UART_Transmit>
 80019a0:	e109      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
 80019a2:	bf00      	nop
 80019a4:	40011000 	.word	0x40011000
 80019a8:	2000033c 	.word	0x2000033c
 80019ac:	20000424 	.word	0x20000424
 80019b0:	200003e4 	.word	0x200003e4
 80019b4:	080072f8 	.word	0x080072f8
 80019b8:	200000a0 	.word	0x200000a0
 80019bc:	08007300 	.word	0x08007300
 80019c0:	200002b4 	.word	0x200002b4
 80019c4:	08007310 	.word	0x08007310
 80019c8:	200002fc 	.word	0x200002fc
 80019cc:	08007320 	.word	0x08007320
 80019d0:	0800734c 	.word	0x0800734c
 80019d4:	51eb851f 	.word	0x51eb851f
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000008 	.word	0x20000008
 80019e0:	08007364 	.word	0x08007364
 80019e4:	08007380 	.word	0x08007380
 80019e8:	080073ac 	.word	0x080073ac
                    } else {
                        uint8_t servo_num = cmd_buffer[1] - '0';
 80019ec:	4b7f      	ldr	r3, [pc, #508]	@ (8001bec <HAL_UART_RxCpltCallback+0x4d0>)
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	3b30      	subs	r3, #48	@ 0x30
 80019f2:	763b      	strb	r3, [r7, #24]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2100      	movs	r1, #0
 80019fa:	460a      	mov	r2, r1
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	460a      	mov	r2, r1
 8001a00:	709a      	strb	r2, [r3, #2]
 8001a02:	4b7a      	ldr	r3, [pc, #488]	@ (8001bec <HAL_UART_RxCpltCallback+0x4d0>)
 8001a04:	789b      	ldrb	r3, [r3, #2]
 8001a06:	733b      	strb	r3, [r7, #12]
 8001a08:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_UART_RxCpltCallback+0x4d0>)
 8001a0a:	78db      	ldrb	r3, [r3, #3]
 8001a0c:	737b      	strb	r3, [r7, #13]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2210      	movs	r2, #16
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ff94 	bl	8006944 <strtol>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	76fb      	strb	r3, [r7, #27]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 8001a20:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a24:	2b64      	cmp	r3, #100	@ 0x64
 8001a26:	dd01      	ble.n	8001a2c <HAL_UART_RxCpltCallback+0x310>
 8001a28:	2364      	movs	r3, #100	@ 0x64
 8001a2a:	76fb      	strb	r3, [r7, #27]
                        if (duty < -100) duty = -100;
 8001a2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a30:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001a34:	da01      	bge.n	8001a3a <HAL_UART_RxCpltCallback+0x31e>
 8001a36:	239c      	movs	r3, #156	@ 0x9c
 8001a38:	76fb      	strb	r3, [r7, #27]

                        int16_t pulse = duty * (8275 - 1655) / 100 + 1655;
 8001a3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a3e:	f641 12dc 	movw	r2, #6620	@ 0x19dc
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf0 <HAL_UART_RxCpltCallback+0x4d4>)
 8001a48:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4c:	1152      	asrs	r2, r2, #5
 8001a4e:	17db      	asrs	r3, r3, #31
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f203 6377 	addw	r3, r3, #1655	@ 0x677
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	82fb      	strh	r3, [r7, #22]
                        if (pulse < 0) {
 8001a5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da06      	bge.n	8001a72 <HAL_UART_RxCpltCallback+0x356>
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Duty\r\n", 15, 1000);
 8001a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a68:	220f      	movs	r2, #15
 8001a6a:	4962      	ldr	r1, [pc, #392]	@ (8001bf4 <HAL_UART_RxCpltCallback+0x4d8>)
 8001a6c:	4862      	ldr	r0, [pc, #392]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001a6e:	f003 fee9 	bl	8005844 <HAL_UART_Transmit>
                        }

                        if (servo_num == 1)
 8001a72:	7e3b      	ldrb	r3, [r7, #24]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d10b      	bne.n	8001a90 <HAL_UART_RxCpltCallback+0x374>
                            servo_duty(&servo_1, (duty >= 0) ? pulse : 0);
 8001a78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db02      	blt.n	8001a86 <HAL_UART_RxCpltCallback+0x36a>
 8001a80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a84:	e000      	b.n	8001a88 <HAL_UART_RxCpltCallback+0x36c>
 8001a86:	2300      	movs	r3, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	485c      	ldr	r0, [pc, #368]	@ (8001bfc <HAL_UART_RxCpltCallback+0x4e0>)
 8001a8c:	f000 fb37 	bl	80020fe <servo_duty>
                        else
                            ; // placeholder for servo_2

                        sprintf((char*)tx_buf, "Servo %d set to duty %d\r\n", servo_num, duty);
 8001a90:	7e3a      	ldrb	r2, [r7, #24]
 8001a92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001a96:	495a      	ldr	r1, [pc, #360]	@ (8001c00 <HAL_UART_RxCpltCallback+0x4e4>)
 8001a98:	485a      	ldr	r0, [pc, #360]	@ (8001c04 <HAL_UART_RxCpltCallback+0x4e8>)
 8001a9a:	f004 ff67 	bl	800696c <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001a9e:	4859      	ldr	r0, [pc, #356]	@ (8001c04 <HAL_UART_RxCpltCallback+0x4e8>)
 8001aa0:	f7fe fb9e 	bl	80001e0 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aac:	4955      	ldr	r1, [pc, #340]	@ (8001c04 <HAL_UART_RxCpltCallback+0x4e8>)
 8001aae:	4852      	ldr	r0, [pc, #328]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ab0:	f003 fec8 	bl	8005844 <HAL_UART_Transmit>
 8001ab4:	e07f      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === MOVEMENT COMMANDS (W/A/S/D) ===
                else if (fsm.get_state() == FSM::S2_MANUAL_STEP_INPUT || fsm.get_state() == FSM::S3_MANUAL_TARGET)
 8001ab6:	4854      	ldr	r0, [pc, #336]	@ (8001c08 <HAL_UART_RxCpltCallback+0x4ec>)
 8001ab8:	f7ff f995 	bl	8000de6 <_ZNK3FSM9get_stateEv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d005      	beq.n	8001ace <HAL_UART_RxCpltCallback+0x3b2>
 8001ac2:	4851      	ldr	r0, [pc, #324]	@ (8001c08 <HAL_UART_RxCpltCallback+0x4ec>)
 8001ac4:	f7ff f98f 	bl	8000de6 <_ZNK3FSM9get_stateEv>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_RxCpltCallback+0x3b6>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_UART_RxCpltCallback+0x3b8>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d05f      	beq.n	8001b98 <HAL_UART_RxCpltCallback+0x47c>
                {
                    char dir = cmd_buffer[0];
 8001ad8:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <HAL_UART_RxCpltCallback+0x4d0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	767b      	strb	r3, [r7, #25]
                    switch (dir) {
 8001ade:	7e7b      	ldrb	r3, [r7, #25]
 8001ae0:	3b41      	subs	r3, #65	@ 0x41
 8001ae2:	2b16      	cmp	r3, #22
 8001ae4:	d850      	bhi.n	8001b88 <HAL_UART_RxCpltCallback+0x46c>
 8001ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aec <HAL_UART_RxCpltCallback+0x3d0>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b59 	.word	0x08001b59
 8001af0:	08001b89 	.word	0x08001b89
 8001af4:	08001b89 	.word	0x08001b89
 8001af8:	08001b79 	.word	0x08001b79
 8001afc:	08001b89 	.word	0x08001b89
 8001b00:	08001b89 	.word	0x08001b89
 8001b04:	08001b89 	.word	0x08001b89
 8001b08:	08001b89 	.word	0x08001b89
 8001b0c:	08001b89 	.word	0x08001b89
 8001b10:	08001b89 	.word	0x08001b89
 8001b14:	08001b89 	.word	0x08001b89
 8001b18:	08001b89 	.word	0x08001b89
 8001b1c:	08001b89 	.word	0x08001b89
 8001b20:	08001b89 	.word	0x08001b89
 8001b24:	08001b89 	.word	0x08001b89
 8001b28:	08001b89 	.word	0x08001b89
 8001b2c:	08001b89 	.word	0x08001b89
 8001b30:	08001b89 	.word	0x08001b89
 8001b34:	08001b69 	.word	0x08001b69
 8001b38:	08001b89 	.word	0x08001b89
 8001b3c:	08001b89 	.word	0x08001b89
 8001b40:	08001b89 	.word	0x08001b89
 8001b44:	08001b49 	.word	0x08001b49
                        case 'W': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Up\r\n", 9, 1000); break;
 8001b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4c:	2209      	movs	r2, #9
 8001b4e:	492f      	ldr	r1, [pc, #188]	@ (8001c0c <HAL_UART_RxCpltCallback+0x4f0>)
 8001b50:	4829      	ldr	r0, [pc, #164]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001b52:	f003 fe77 	bl	8005844 <HAL_UART_Transmit>
 8001b56:	e02e      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                        case 'A': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Left\r\n", 11, 1000); break;
 8001b58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5c:	220b      	movs	r2, #11
 8001b5e:	492c      	ldr	r1, [pc, #176]	@ (8001c10 <HAL_UART_RxCpltCallback+0x4f4>)
 8001b60:	4825      	ldr	r0, [pc, #148]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001b62:	f003 fe6f 	bl	8005844 <HAL_UART_Transmit>
 8001b66:	e026      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                        case 'S': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Down\r\n", 11, 1000); break;
 8001b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6c:	220b      	movs	r2, #11
 8001b6e:	4929      	ldr	r1, [pc, #164]	@ (8001c14 <HAL_UART_RxCpltCallback+0x4f8>)
 8001b70:	4821      	ldr	r0, [pc, #132]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001b72:	f003 fe67 	bl	8005844 <HAL_UART_Transmit>
 8001b76:	e01e      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                        case 'D': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Right\r\n", 12, 1000); break;
 8001b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	4926      	ldr	r1, [pc, #152]	@ (8001c18 <HAL_UART_RxCpltCallback+0x4fc>)
 8001b80:	481d      	ldr	r0, [pc, #116]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001b82:	f003 fe5f 	bl	8005844 <HAL_UART_Transmit>
 8001b86:	e016      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Unknown Direction\r\n", 20, 1000);
 8001b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8c:	2214      	movs	r2, #20
 8001b8e:	4923      	ldr	r1, [pc, #140]	@ (8001c1c <HAL_UART_RxCpltCallback+0x500>)
 8001b90:	4819      	ldr	r0, [pc, #100]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001b92:	f003 fe57 	bl	8005844 <HAL_UART_Transmit>
                            break;
 8001b96:	e00e      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === INVALID COMMAND ===
                else {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8001b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9c:	2212      	movs	r2, #18
 8001b9e:	4920      	ldr	r1, [pc, #128]	@ (8001c20 <HAL_UART_RxCpltCallback+0x504>)
 8001ba0:	4815      	ldr	r0, [pc, #84]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ba2:	f003 fe4f 	bl	8005844 <HAL_UART_Transmit>
 8001ba6:	e006      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x49a>
                }
            }
            else {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8001ba8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bac:	2212      	movs	r2, #18
 8001bae:	491c      	ldr	r1, [pc, #112]	@ (8001c20 <HAL_UART_RxCpltCallback+0x504>)
 8001bb0:	4811      	ldr	r0, [pc, #68]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001bb2:	f003 fe47 	bl	8005844 <HAL_UART_Transmit>
            }

            cmd_index = 0; // reset buffer
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_UART_RxCpltCallback+0x508>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
        }
 8001bbc:	e00d      	b.n	8001bda <HAL_UART_RxCpltCallback+0x4be>
        else
        {
            if (cmd_index < sizeof(cmd_buffer) - 1)
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_UART_RxCpltCallback+0x508>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8001bc4:	d809      	bhi.n	8001bda <HAL_UART_RxCpltCallback+0x4be>
                cmd_buffer[cmd_index++] = c;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <HAL_UART_RxCpltCallback+0x508>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	b2d1      	uxtb	r1, r2
 8001bce:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <HAL_UART_RxCpltCallback+0x508>)
 8001bd0:	7011      	strb	r1, [r2, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4a05      	ldr	r2, [pc, #20]	@ (8001bec <HAL_UART_RxCpltCallback+0x4d0>)
 8001bd6:	7ebb      	ldrb	r3, [r7, #26]
 8001bd8:	5453      	strb	r3, [r2, r1]
        }

        // Enable next UART RX interrupt
        HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4912      	ldr	r1, [pc, #72]	@ (8001c28 <HAL_UART_RxCpltCallback+0x50c>)
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x4dc>)
 8001be0:	f003 febb 	bl	800595a <HAL_UART_Receive_IT>
    }
}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200003e4 	.word	0x200003e4
 8001bf0:	51eb851f 	.word	0x51eb851f
 8001bf4:	080073c4 	.word	0x080073c4
 8001bf8:	200002b4 	.word	0x200002b4
 8001bfc:	2000001c 	.word	0x2000001c
 8001c00:	080073d4 	.word	0x080073d4
 8001c04:	200002fc 	.word	0x200002fc
 8001c08:	200000a0 	.word	0x200000a0
 8001c0c:	080073f0 	.word	0x080073f0
 8001c10:	080073fc 	.word	0x080073fc
 8001c14:	08007408 	.word	0x08007408
 8001c18:	08007414 	.word	0x08007414
 8001c1c:	08007424 	.word	0x08007424
 8001c20:	08007438 	.word	0x08007438
 8001c24:	20000424 	.word	0x20000424
 8001c28:	2000033c 	.word	0x2000033c

08001c2c <_ZL14initialize_IMUv>:


void initialize_IMU(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001c32:	2064      	movs	r0, #100	@ 0x64
 8001c34:	f000 fe2a 	bl	800288c <HAL_Delay>
	sprintf((char*)log_buf, "INIT IMU \r\n");
 8001c38:	496a      	ldr	r1, [pc, #424]	@ (8001de4 <_ZL14initialize_IMUv+0x1b8>)
 8001c3a:	486b      	ldr	r0, [pc, #428]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001c3c:	f004 fe96 	bl	800696c <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*) log_buf, strlen((char*)log_buf), 1000);
 8001c40:	4869      	ldr	r0, [pc, #420]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001c42:	f7fe facd 	bl	80001e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	4966      	ldr	r1, [pc, #408]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001c50:	4866      	ldr	r0, [pc, #408]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001c52:	f003 fdf7 	bl	8005844 <HAL_UART_Transmit>
	  if(HAL_I2C_IsDeviceReady (&hi2c3, 0x28 << 1, 10, 500) == HAL_OK) {
 8001c56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c5a:	220a      	movs	r2, #10
 8001c5c:	2150      	movs	r1, #80	@ 0x50
 8001c5e:	4864      	ldr	r0, [pc, #400]	@ (8001df0 <_ZL14initialize_IMUv+0x1c4>)
 8001c60:	f001 fdea 	bl	8003838 <HAL_I2C_IsDeviceReady>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d114      	bne.n	8001c9e <_ZL14initialize_IMUv+0x72>

	  } else {
		  const int error = HAL_I2C_GetError(&hi2c3);
 8001c74:	485e      	ldr	r0, [pc, #376]	@ (8001df0 <_ZL14initialize_IMUv+0x1c4>)
 8001c76:	f001 ff1b 	bl	8003ab0 <HAL_I2C_GetError>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	607b      	str	r3, [r7, #4]
		  sprintf((char*)log_buf, "Device status error: %d\r\n", error);
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	495c      	ldr	r1, [pc, #368]	@ (8001df4 <_ZL14initialize_IMUv+0x1c8>)
 8001c82:	4859      	ldr	r0, [pc, #356]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001c84:	f004 fe72 	bl	800696c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001c88:	4857      	ldr	r0, [pc, #348]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001c8a:	f7fe faa9 	bl	80001e0 <strlen>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	4954      	ldr	r1, [pc, #336]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001c98:	4854      	ldr	r0, [pc, #336]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001c9a:	f003 fdd3 	bl	8005844 <HAL_UART_Transmit>
	  }


	  if(bno055_get_operation_mode(&op_mode) != 0) {
 8001c9e:	4856      	ldr	r0, [pc, #344]	@ (8001df8 <_ZL14initialize_IMUv+0x1cc>)
 8001ca0:	f7fe fe8e 	bl	80009c0 <bno055_get_operation_mode>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00f      	beq.n	8001cd4 <_ZL14initialize_IMUv+0xa8>
		  sprintf((char*)log_buf, "Failed to read op mode\r\n");
 8001cb4:	4951      	ldr	r1, [pc, #324]	@ (8001dfc <_ZL14initialize_IMUv+0x1d0>)
 8001cb6:	484c      	ldr	r0, [pc, #304]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001cb8:	f004 fe58 	bl	800696c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001cbc:	484a      	ldr	r0, [pc, #296]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001cbe:	f7fe fa8f 	bl	80001e0 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cca:	4947      	ldr	r1, [pc, #284]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001ccc:	4847      	ldr	r0, [pc, #284]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001cce:	f003 fdb9 	bl	8005844 <HAL_UART_Transmit>
 8001cd2:	e011      	b.n	8001cf8 <_ZL14initialize_IMUv+0xcc>
	  } else {
		  sprintf((char*)log_buf, "Op mode is: %d \r\n", op_mode);
 8001cd4:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <_ZL14initialize_IMUv+0x1cc>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4949      	ldr	r1, [pc, #292]	@ (8001e00 <_ZL14initialize_IMUv+0x1d4>)
 8001cdc:	4842      	ldr	r0, [pc, #264]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001cde:	f004 fe45 	bl	800696c <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*) log_buf, strlen((char*)log_buf), 1000);
 8001ce2:	4841      	ldr	r0, [pc, #260]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001ce4:	f7fe fa7c 	bl	80001e0 <strlen>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf0:	493d      	ldr	r1, [pc, #244]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001cf2:	483e      	ldr	r0, [pc, #248]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001cf4:	f003 fda6 	bl	8005844 <HAL_UART_Transmit>
	  }


	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG)) {
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe fea3 	bl	8000a44 <bno055_set_operation_mode>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001d04:	d012      	beq.n	8001d2c <_ZL14initialize_IMUv+0x100>
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0a:	d11f      	bne.n	8001d4c <_ZL14initialize_IMUv+0x120>
	    	  case BNO055_ERROR:
	    		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 8001d0c:	493d      	ldr	r1, [pc, #244]	@ (8001e04 <_ZL14initialize_IMUv+0x1d8>)
 8001d0e:	4836      	ldr	r0, [pc, #216]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d10:	f004 fe2c 	bl	800696c <siprintf>
	    		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001d14:	4834      	ldr	r0, [pc, #208]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d16:	f7fe fa63 	bl	80001e0 <strlen>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d22:	4931      	ldr	r1, [pc, #196]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d24:	4831      	ldr	r0, [pc, #196]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001d26:	f003 fd8d 	bl	8005844 <HAL_UART_Transmit>
	    		  break;
 8001d2a:	e010      	b.n	8001d4e <_ZL14initialize_IMUv+0x122>
	    	  case BNO055_E_NULL_PTR:
	    		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 8001d2c:	4936      	ldr	r1, [pc, #216]	@ (8001e08 <_ZL14initialize_IMUv+0x1dc>)
 8001d2e:	482e      	ldr	r0, [pc, #184]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d30:	f004 fe1c 	bl	800696c <siprintf>
	    		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001d34:	482c      	ldr	r0, [pc, #176]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d36:	f7fe fa53 	bl	80001e0 <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	4929      	ldr	r1, [pc, #164]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d44:	4829      	ldr	r0, [pc, #164]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001d46:	f003 fd7d 	bl	8005844 <HAL_UART_Transmit>
	    		  break;
 8001d4a:	e000      	b.n	8001d4e <_ZL14initialize_IMUv+0x122>
	    	  default:
	    		  break;
 8001d4c:	bf00      	nop
	  }
	  HAL_Delay(100);
 8001d4e:	2064      	movs	r0, #100	@ 0x64
 8001d50:	f000 fd9c 	bl	800288c <HAL_Delay>
	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS)) {
 8001d54:	2008      	movs	r0, #8
 8001d56:	f7fe fe75 	bl	8000a44 <bno055_set_operation_mode>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8001d60:	d012      	beq.n	8001d88 <_ZL14initialize_IMUv+0x15c>
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d11f      	bne.n	8001da8 <_ZL14initialize_IMUv+0x17c>
	  	  case BNO055_ERROR:
	  		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 8001d68:	4926      	ldr	r1, [pc, #152]	@ (8001e04 <_ZL14initialize_IMUv+0x1d8>)
 8001d6a:	481f      	ldr	r0, [pc, #124]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d6c:	f004 fdfe 	bl	800696c <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001d70:	481d      	ldr	r0, [pc, #116]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d72:	f7fe fa35 	bl	80001e0 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	491a      	ldr	r1, [pc, #104]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d80:	481a      	ldr	r0, [pc, #104]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001d82:	f003 fd5f 	bl	8005844 <HAL_UART_Transmit>
	  		  break;
 8001d86:	e010      	b.n	8001daa <_ZL14initialize_IMUv+0x17e>
	  	  case BNO055_E_NULL_PTR:
	  		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 8001d88:	491f      	ldr	r1, [pc, #124]	@ (8001e08 <_ZL14initialize_IMUv+0x1dc>)
 8001d8a:	4817      	ldr	r0, [pc, #92]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d8c:	f004 fdee 	bl	800696c <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001d90:	4815      	ldr	r0, [pc, #84]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001d92:	f7fe fa25 	bl	80001e0 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	4912      	ldr	r1, [pc, #72]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001da0:	4812      	ldr	r0, [pc, #72]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001da2:	f003 fd4f 	bl	8005844 <HAL_UART_Transmit>
	  		  break;
 8001da6:	e000      	b.n	8001daa <_ZL14initialize_IMUv+0x17e>
	  	  default:
	  		  break;
 8001da8:	bf00      	nop
	}
	  bno055_get_operation_mode(&op_mode);
 8001daa:	4813      	ldr	r0, [pc, #76]	@ (8001df8 <_ZL14initialize_IMUv+0x1cc>)
 8001dac:	f7fe fe08 	bl	80009c0 <bno055_get_operation_mode>
	  sprintf((char*)log_buf, "Set Op Mode to: %d \r\n", op_mode);
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <_ZL14initialize_IMUv+0x1cc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4915      	ldr	r1, [pc, #84]	@ (8001e0c <_ZL14initialize_IMUv+0x1e0>)
 8001db8:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001dba:	f004 fdd7 	bl	800696c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001dbe:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001dc0:	f7fe fa0e 	bl	80001e0 <strlen>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dcc:	4906      	ldr	r1, [pc, #24]	@ (8001de8 <_ZL14initialize_IMUv+0x1bc>)
 8001dce:	4807      	ldr	r0, [pc, #28]	@ (8001dec <_ZL14initialize_IMUv+0x1c0>)
 8001dd0:	f003 fd38 	bl	8005844 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001dd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dd8:	f000 fd58 	bl	800288c <HAL_Delay>



}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	0800744c 	.word	0x0800744c
 8001de8:	2000037c 	.word	0x2000037c
 8001dec:	200002b4 	.word	0x200002b4
 8001df0:	200000f8 	.word	0x200000f8
 8001df4:	08007458 	.word	0x08007458
 8001df8:	200003d7 	.word	0x200003d7
 8001dfc:	08007474 	.word	0x08007474
 8001e00:	08007490 	.word	0x08007490
 8001e04:	080074a4 	.word	0x080074a4
 8001e08:	080074c0 	.word	0x080074c0
 8001e0c:	080074d4 	.word	0x080074d4

08001e10 <_ZL7log_IMUv>:

void log_IMU(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af02      	add	r7, sp, #8
	if(HAL_I2C_IsDeviceReady (&hi2c3, 0x29 << 1, 10, 500) == HAL_OK) {
 8001e16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e1a:	220a      	movs	r2, #10
 8001e1c:	2152      	movs	r1, #82	@ 0x52
 8001e1e:	4833      	ldr	r0, [pc, #204]	@ (8001eec <_ZL7log_IMUv+0xdc>)
 8001e20:	f001 fd0a 	bl	8003838 <HAL_I2C_IsDeviceReady>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d114      	bne.n	8001e5e <_ZL7log_IMUv+0x4e>

		  } else {
			  const int error = HAL_I2C_GetError(&hi2c3);
 8001e34:	482d      	ldr	r0, [pc, #180]	@ (8001eec <_ZL7log_IMUv+0xdc>)
 8001e36:	f001 fe3b 	bl	8003ab0 <HAL_I2C_GetError>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	607b      	str	r3, [r7, #4]
			  sprintf((char*)log_buf, "Device status error: %d\r\n", error);
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	492b      	ldr	r1, [pc, #172]	@ (8001ef0 <_ZL7log_IMUv+0xe0>)
 8001e42:	482c      	ldr	r0, [pc, #176]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001e44:	f004 fd92 	bl	800696c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001e48:	482a      	ldr	r0, [pc, #168]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001e4a:	f7fe f9c9 	bl	80001e0 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	4927      	ldr	r1, [pc, #156]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001e58:	4827      	ldr	r0, [pc, #156]	@ (8001ef8 <_ZL7log_IMUv+0xe8>)
 8001e5a:	f003 fcf3 	bl	8005844 <HAL_UART_Transmit>
		  }

		//poll the BNO055 for state
		bno055_get_operation_mode(&op_mode);
 8001e5e:	4827      	ldr	r0, [pc, #156]	@ (8001efc <_ZL7log_IMUv+0xec>)
 8001e60:	f7fe fdae 	bl	80009c0 <bno055_get_operation_mode>
		bno055_get_power_mode(&pow_mode);
 8001e64:	4826      	ldr	r0, [pc, #152]	@ (8001f00 <_ZL7log_IMUv+0xf0>)
 8001e66:	f7fe feb5 	bl	8000bd4 <bno055_get_power_mode>
		sprintf((char*)log_buf, "Op Mode: %d Power Mode: %d, \r\n", op_mode, pow_mode);
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <_ZL7log_IMUv+0xec>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <_ZL7log_IMUv+0xf0>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4923      	ldr	r1, [pc, #140]	@ (8001f04 <_ZL7log_IMUv+0xf4>)
 8001e76:	481f      	ldr	r0, [pc, #124]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001e78:	f004 fd78 	bl	800696c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001e7c:	481d      	ldr	r0, [pc, #116]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001e7e:	f7fe f9af 	bl	80001e0 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8a:	491a      	ldr	r1, [pc, #104]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001e8c:	481a      	ldr	r0, [pc, #104]	@ (8001ef8 <_ZL7log_IMUv+0xe8>)
 8001e8e:	f003 fcd9 	bl	8005844 <HAL_UART_Transmit>

		//poll the BNO055 for data
		state = HAL_I2C_GetState(&hi2c3);
 8001e92:	4816      	ldr	r0, [pc, #88]	@ (8001eec <_ZL7log_IMUv+0xdc>)
 8001e94:	f001 fdfe 	bl	8003a94 <HAL_I2C_GetState>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <_ZL7log_IMUv+0xf8>)
 8001e9e:	701a      	strb	r2, [r3, #0]
		bno055_read_accel_xyz(&accel_data);
 8001ea0:	481a      	ldr	r0, [pc, #104]	@ (8001f0c <_ZL7log_IMUv+0xfc>)
 8001ea2:	f7fe fcb9 	bl	8000818 <bno055_read_accel_xyz>
		bno055_read_euler_hrp(&euler_data);
 8001ea6:	481a      	ldr	r0, [pc, #104]	@ (8001f10 <_ZL7log_IMUv+0x100>)
 8001ea8:	f7fe fd20 	bl	80008ec <bno055_read_euler_hrp>
		sprintf((char*)log_buf, "X: %d Y: %d, Z: %d\r\n", euler_data.p, euler_data.h, euler_data.r);
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <_ZL7log_IMUv+0x100>)
 8001eae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <_ZL7log_IMUv+0x100>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <_ZL7log_IMUv+0x100>)
 8001ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4913      	ldr	r1, [pc, #76]	@ (8001f14 <_ZL7log_IMUv+0x104>)
 8001ec8:	480a      	ldr	r0, [pc, #40]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001eca:	f004 fd4f 	bl	800696c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001ece:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001ed0:	f7fe f986 	bl	80001e0 <strlen>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001edc:	4905      	ldr	r1, [pc, #20]	@ (8001ef4 <_ZL7log_IMUv+0xe4>)
 8001ede:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <_ZL7log_IMUv+0xe8>)
 8001ee0:	f003 fcb0 	bl	8005844 <HAL_UART_Transmit>

}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200000f8 	.word	0x200000f8
 8001ef0:	08007458 	.word	0x08007458
 8001ef4:	2000037c 	.word	0x2000037c
 8001ef8:	200002b4 	.word	0x200002b4
 8001efc:	200003d7 	.word	0x200003d7
 8001f00:	200003d8 	.word	0x200003d8
 8001f04:	080074ec 	.word	0x080074ec
 8001f08:	200003d6 	.word	0x200003d6
 8001f0c:	200003c8 	.word	0x200003c8
 8001f10:	200003d0 	.word	0x200003d0
 8001f14:	0800750c 	.word	0x0800750c

08001f18 <_ZL9log_LIDARv>:

void log_LIDAR(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read(&hi2c2, 0x10 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, distance_data, 2, 500);
 8001f1e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <_ZL9log_LIDARv+0x9c>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2120      	movs	r1, #32
 8001f32:	4821      	ldr	r0, [pc, #132]	@ (8001fb8 <_ZL9log_LIDARv+0xa0>)
 8001f34:	f001 fa4e 	bl	80033d4 <HAL_I2C_Mem_Read>
	distance_cm = (uint16_t)(distance_data[1] << 8 | distance_data[0]);
 8001f38:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <_ZL9log_LIDARv+0x9c>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <_ZL9log_LIDARv+0x9c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <_ZL9log_LIDARv+0xa4>)
 8001f50:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c2, 0x10 << 1, 0x02, I2C_MEMADD_SIZE_8BIT, intensity_data, 2, 500);
 8001f52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	2302      	movs	r3, #2
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <_ZL9log_LIDARv+0xa8>)
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	2202      	movs	r2, #2
 8001f64:	2120      	movs	r1, #32
 8001f66:	4814      	ldr	r0, [pc, #80]	@ (8001fb8 <_ZL9log_LIDARv+0xa0>)
 8001f68:	f001 fa34 	bl	80033d4 <HAL_I2C_Mem_Read>
	intensity_value = (uint16_t)(intensity_data[1] << 8 | intensity_data[0]);
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <_ZL9log_LIDARv+0xa8>)
 8001f6e:	785b      	ldrb	r3, [r3, #1]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <_ZL9log_LIDARv+0xa8>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <_ZL9log_LIDARv+0xac>)
 8001f84:	801a      	strh	r2, [r3, #0]

	sprintf((char*)log_buf, "distance: %d amp: %d\r\n", distance_cm, intensity_value);
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <_ZL9log_LIDARv+0xa4>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <_ZL9log_LIDARv+0xac>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	490d      	ldr	r1, [pc, #52]	@ (8001fc8 <_ZL9log_LIDARv+0xb0>)
 8001f92:	480e      	ldr	r0, [pc, #56]	@ (8001fcc <_ZL9log_LIDARv+0xb4>)
 8001f94:	f004 fcea 	bl	800696c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001f98:	480c      	ldr	r0, [pc, #48]	@ (8001fcc <_ZL9log_LIDARv+0xb4>)
 8001f9a:	f7fe f921 	bl	80001e0 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	4909      	ldr	r1, [pc, #36]	@ (8001fcc <_ZL9log_LIDARv+0xb4>)
 8001fa8:	4809      	ldr	r0, [pc, #36]	@ (8001fd0 <_ZL9log_LIDARv+0xb8>)
 8001faa:	f003 fc4b 	bl	8005844 <HAL_UART_Transmit>


}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200003dc 	.word	0x200003dc
 8001fb8:	200000a4 	.word	0x200000a4
 8001fbc:	200003de 	.word	0x200003de
 8001fc0:	200003e0 	.word	0x200003e0
 8001fc4:	200003e2 	.word	0x200003e2
 8001fc8:	08007524 	.word	0x08007524
 8001fcc:	2000037c 	.word	0x2000037c
 8001fd0:	200002b4 	.word	0x200002b4

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <Error_Handler+0x8>

08001fe0 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  FSM fsm;
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8001fe6:	f7fe feb5 	bl	8000d54 <_ZN3FSMC1Ev>
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200000a0 	.word	0x200000a0

08001ff4 <_GLOBAL__sub_I_fsm>:
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	f7ff fff2 	bl	8001fe0 <_Z41__static_initialization_and_destruction_0v>
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <set_duty>:
};




void set_duty(motor_t* motor, uint32_t pulse_1) {
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <set_duty+0x1e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800201a:	e018      	b.n	800204e <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d105      	bne.n	8002030 <set_duty+0x32>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800202e:	e00e      	b.n	800204e <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d105      	bne.n	8002044 <set_duty+0x46>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002042:	e004      	b.n	800204e <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <set_duty_dual>:

void set_duty_dual(motor_dual* motor_d, uint32_t pulse_1, uint32_t pulse_2) {
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, pulse_1);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <set_duty_dual+0x20>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34
 8002078:	e018      	b.n	80020ac <set_duty_dual+0x52>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b04      	cmp	r3, #4
 8002080:	d105      	bne.n	800208e <set_duty_dual+0x34>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6393      	str	r3, [r2, #56]	@ 0x38
 800208c:	e00e      	b.n	80020ac <set_duty_dual+0x52>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d105      	bne.n	80020a2 <set_duty_dual+0x48>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80020a0:	e004      	b.n	80020ac <set_duty_dual+0x52>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <set_duty_dual+0x66>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020be:	e018      	b.n	80020f2 <set_duty_dual+0x98>
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d105      	bne.n	80020d4 <set_duty_dual+0x7a>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020d2:	e00e      	b.n	80020f2 <set_duty_dual+0x98>
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d105      	bne.n	80020e8 <set_duty_dual+0x8e>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80020e6:	e004      	b.n	80020f2 <set_duty_dual+0x98>
	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse_2);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <servo_duty>:
servo_t servo_1 = {
	.PWM_CHANNEL = TIM_CHANNEL_4,
	.htim = &htim1
};

void servo_duty(servo_t* servo, uint32_t pulse_1) {
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <servo_duty+0x1e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800211a:	e018      	b.n	800214e <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d105      	bne.n	8002130 <servo_duty+0x32>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800212e:	e00e      	b.n	800214e <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d105      	bne.n	8002144 <servo_duty+0x46>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002142:	e004      	b.n	800214e <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <HAL_MspInit+0x4c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002170:	6453      	str	r3, [r2, #68]	@ 0x44
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	@ 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	@ (80022f8 <HAL_I2C_MspInit+0x14c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d13e      	bne.n	800224c <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a49      	ldr	r2, [pc, #292]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f0:	2312      	movs	r3, #18
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021fc:	2304      	movs	r3, #4
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4619      	mov	r1, r3
 8002206:	483e      	ldr	r0, [pc, #248]	@ (8002300 <HAL_I2C_MspInit+0x154>)
 8002208:	f000 fd08 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800220c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002212:	2312      	movs	r3, #18
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800221e:	2309      	movs	r3, #9
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4835      	ldr	r0, [pc, #212]	@ (8002300 <HAL_I2C_MspInit+0x154>)
 800222a:	f000 fcf7 	bl	8002c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	4b32      	ldr	r3, [pc, #200]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a31      	ldr	r2, [pc, #196]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
 800223e:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800224a:	e050      	b.n	80022ee <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2c      	ldr	r2, [pc, #176]	@ (8002304 <HAL_I2C_MspInit+0x158>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d14b      	bne.n	80022ee <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a27      	ldr	r2, [pc, #156]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800228e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002294:	2312      	movs	r3, #18
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022a0:	2304      	movs	r3, #4
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4619      	mov	r1, r3
 80022aa:	4817      	ldr	r0, [pc, #92]	@ (8002308 <HAL_I2C_MspInit+0x15c>)
 80022ac:	f000 fcb6 	bl	8002c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b6:	2312      	movs	r3, #18
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80022c2:	2309      	movs	r3, #9
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 031c 	add.w	r3, r7, #28
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <HAL_I2C_MspInit+0x154>)
 80022ce:	f000 fca5 	bl	8002c1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a08      	ldr	r2, [pc, #32]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 80022dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_I2C_MspInit+0x150>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	@ 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40005800 	.word	0x40005800
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020400 	.word	0x40020400
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1f      	ldr	r2, [pc, #124]	@ (8002398 <HAL_TIM_PWM_MspInit+0x8c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10e      	bne.n	800233c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4a1d      	ldr	r2, [pc, #116]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800233a:	e026      	b.n	800238a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <HAL_TIM_PWM_MspInit+0x94>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	4a13      	ldr	r2, [pc, #76]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6413      	str	r3, [r2, #64]	@ 0x40
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
}
 8002362:	e012      	b.n	800238a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_TIM_PWM_MspInit+0x98>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10d      	bne.n	800238a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a09      	ldr	r2, [pc, #36]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <HAL_TIM_PWM_MspInit+0x90>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000c00 	.word	0x40000c00

080023a8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	@ 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c8:	d12c      	bne.n	8002424 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023da:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4b29      	ldr	r3, [pc, #164]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a28      	ldr	r2, [pc, #160]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002402:	2322      	movs	r3, #34	@ 0x22
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002412:	2301      	movs	r3, #1
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	481d      	ldr	r0, [pc, #116]	@ (8002494 <HAL_TIM_Encoder_MspInit+0xec>)
 800241e:	f000 fbfd 	bl	8002c1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002422:	e030      	b.n	8002486 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_TIM_Encoder_MspInit+0xf0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12b      	bne.n	8002486 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a16      	ldr	r2, [pc, #88]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a0f      	ldr	r2, [pc, #60]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <HAL_TIM_Encoder_MspInit+0xe8>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	23c0      	movs	r3, #192	@ 0xc0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002476:	2302      	movs	r3, #2
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4806      	ldr	r0, [pc, #24]	@ (800249c <HAL_TIM_Encoder_MspInit+0xf4>)
 8002482:	f000 fbcb 	bl	8002c1c <HAL_GPIO_Init>
}
 8002486:	bf00      	nop
 8002488:	3730      	adds	r7, #48	@ 0x30
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000
 8002498:	40000800 	.word	0x40000800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <HAL_TIM_MspPostInit+0xf8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11f      	bne.n	8002502 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b35      	ldr	r3, [pc, #212]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a34      	ldr	r2, [pc, #208]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b32      	ldr	r3, [pc, #200]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f0:	2301      	movs	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	4829      	ldr	r0, [pc, #164]	@ (80025a0 <HAL_TIM_MspPostInit+0x100>)
 80024fc:	f000 fb8e 	bl	8002c1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002500:	e046      	b.n	8002590 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	@ (80025a4 <HAL_TIM_MspPostInit+0x104>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d11e      	bne.n	800254a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	4a21      	ldr	r2, [pc, #132]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	6313      	str	r3, [r2, #48]	@ 0x30
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002528:	2333      	movs	r3, #51	@ 0x33
 800252a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002538:	2302      	movs	r3, #2
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	4819      	ldr	r0, [pc, #100]	@ (80025a8 <HAL_TIM_MspPostInit+0x108>)
 8002544:	f000 fb6a 	bl	8002c1c <HAL_GPIO_Init>
}
 8002548:	e022      	b.n	8002590 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_TIM_MspPostInit+0x10c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d11d      	bne.n	8002590 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6313      	str	r3, [r2, #48]	@ 0x30
 8002564:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_TIM_MspPostInit+0xfc>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002570:	230c      	movs	r3, #12
 8002572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002580:	2302      	movs	r3, #2
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <HAL_TIM_MspPostInit+0x100>)
 800258c:	f000 fb46 	bl	8002c1c <HAL_GPIO_Init>
}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40010000 	.word	0x40010000
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40000c00 	.word	0x40000c00

080025b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002644 <HAL_UART_MspInit+0x94>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d134      	bne.n	800263c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <HAL_UART_MspInit+0x98>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	4a1b      	ldr	r2, [pc, #108]	@ (8002648 <HAL_UART_MspInit+0x98>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e2:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_UART_MspInit+0x98>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_UART_MspInit+0x98>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <HAL_UART_MspInit+0x98>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_UART_MspInit+0x98>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800260a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800261c:	2307      	movs	r3, #7
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4809      	ldr	r0, [pc, #36]	@ (800264c <HAL_UART_MspInit+0x9c>)
 8002628:	f000 faf8 	bl	8002c1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	2025      	movs	r0, #37	@ 0x25
 8002632:	f000 fa2a 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002636:	2025      	movs	r0, #37	@ 0x25
 8002638:	f000 fa43 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	@ 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40011000 	.word	0x40011000
 8002648:	40023800 	.word	0x40023800
 800264c:	40020000 	.word	0x40020000

08002650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <NMI_Handler+0x4>

08002658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <MemManage_Handler+0x4>

08002668 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <BusFault_Handler+0x4>

08002670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <UsageFault_Handler+0x4>

08002678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a6:	f000 f8d1 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <USART1_IRQHandler+0x10>)
 80026b6:	f003 f975 	bl	80059a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200002b4 	.word	0x200002b4

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f004 f976 	bl	80069e4 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20020000 	.word	0x20020000
 8002724:	00000400 	.word	0x00000400
 8002728:	20000428 	.word	0x20000428
 800272c:	20000578 	.word	0x20000578

08002730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800278c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002758:	f7ff ffea 	bl	8002730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480c      	ldr	r0, [pc, #48]	@ (8002790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800275e:	490d      	ldr	r1, [pc, #52]	@ (8002794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002760:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002774:	4c0a      	ldr	r4, [pc, #40]	@ (80027a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002782:	f004 f935 	bl	80069f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7fe fb3b 	bl	8000e00 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800278c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002798:	0800769c 	.word	0x0800769c
  ldr r2, =_sbss
 800279c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80027a0:	20000578 	.word	0x20000578

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <HAL_Init+0x40>)
 80027b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <HAL_Init+0x40>)
 80027be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a07      	ldr	r2, [pc, #28]	@ (80027e8 <HAL_Init+0x40>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 f94f 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	200f      	movs	r0, #15
 80027d8:	f000 f808 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027dc:	f7ff fcbe 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_InitTick+0x54>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_InitTick+0x58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002802:	fbb3 f3f1 	udiv	r3, r3, r1
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f967 	bl	8002ade <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00e      	b.n	8002838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d80a      	bhi.n	8002836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 f92f 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282c:	4a06      	ldr	r2, [pc, #24]	@ (8002848 <HAL_InitTick+0x5c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000024 	.word	0x20000024
 8002844:	2000002c 	.word	0x2000002c
 8002848:	20000028 	.word	0x20000028

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000002c 	.word	0x2000002c
 8002870:	2000042c 	.word	0x2000042c

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	2000042c 	.word	0x2000042c

0800288c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff ffee 	bl	8002874 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d005      	beq.n	80028b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_Delay+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b2:	bf00      	nop
 80028b4:	f7ff ffde 	bl	8002874 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d8f7      	bhi.n	80028b4 <HAL_Delay+0x28>
  {
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000002c 	.word	0x2000002c

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	@ (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	@ (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	@ 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff8e 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff29 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff3e 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff8e 	bl	80029c8 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5d 	bl	8002974 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff31 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff feb6 	bl	8002874 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d008      	beq.n	8002b28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2280      	movs	r2, #128	@ 0x80
 8002b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e052      	b.n	8002bce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0216 	bic.w	r2, r2, #22
 8002b36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <HAL_DMA_Abort+0x62>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0208 	bic.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b78:	e013      	b.n	8002ba2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7a:	f7ff fe7b 	bl	8002874 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d90c      	bls.n	8002ba2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e015      	b.n	8002bce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e4      	bne.n	8002b7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	223f      	movs	r2, #63	@ 0x3f
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d004      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2280      	movs	r2, #128	@ 0x80
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e00c      	b.n	8002c0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	@ 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e159      	b.n	8002eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8148 	bne.w	8002ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d130      	bne.n	8002cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a2 	beq.w	8002ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b57      	ldr	r3, [pc, #348]	@ (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	4a56      	ldr	r2, [pc, #344]	@ (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db2:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a52      	ldr	r2, [pc, #328]	@ (8002f08 <HAL_GPIO_Init+0x2ec>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a49      	ldr	r2, [pc, #292]	@ (8002f0c <HAL_GPIO_Init+0x2f0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x202>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a48      	ldr	r2, [pc, #288]	@ (8002f10 <HAL_GPIO_Init+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x1fe>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a47      	ldr	r2, [pc, #284]	@ (8002f14 <HAL_GPIO_Init+0x2f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x1fa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a46      	ldr	r2, [pc, #280]	@ (8002f18 <HAL_GPIO_Init+0x2fc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x1f6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a45      	ldr	r2, [pc, #276]	@ (8002f1c <HAL_GPIO_Init+0x300>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x1f2>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e30:	4935      	ldr	r1, [pc, #212]	@ (8002f08 <HAL_GPIO_Init+0x2ec>)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3e:	4b38      	ldr	r3, [pc, #224]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e62:	4a2f      	ldr	r2, [pc, #188]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e68:	4b2d      	ldr	r3, [pc, #180]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e8c:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ebc:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f20 <HAL_GPIO_Init+0x304>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	f67f aea2 	bls.w	8002c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3724      	adds	r7, #36	@ 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40013c00 	.word	0x40013c00

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f40:	e003      	b.n	8002f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e12b      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff f914 	bl	80021ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	@ 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f001 fd68 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a81      	ldr	r2, [pc, #516]	@ (80031cc <HAL_I2C_Init+0x274>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d807      	bhi.n	8002fdc <HAL_I2C_Init+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a80      	ldr	r2, [pc, #512]	@ (80031d0 <HAL_I2C_Init+0x278>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e006      	b.n	8002fea <HAL_I2C_Init+0x92>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a7d      	ldr	r2, [pc, #500]	@ (80031d4 <HAL_I2C_Init+0x27c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0e7      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a78      	ldr	r2, [pc, #480]	@ (80031d8 <HAL_I2C_Init+0x280>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a6a      	ldr	r2, [pc, #424]	@ (80031cc <HAL_I2C_Init+0x274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <HAL_I2C_Init+0xd4>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_I2C_Init+0xe8>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	4a69      	ldr	r2, [pc, #420]	@ (80031dc <HAL_I2C_Init+0x284>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003052:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	495c      	ldr	r1, [pc, #368]	@ (80031cc <HAL_I2C_Init+0x274>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d819      	bhi.n	8003094 <HAL_I2C_Init+0x13c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e59      	subs	r1, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb1 f3f3 	udiv	r3, r1, r3
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003074:	400b      	ands	r3, r1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_I2C_Init+0x138>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e59      	subs	r1, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fbb1 f3f3 	udiv	r3, r1, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	e051      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003090:	2304      	movs	r3, #4
 8003092:	e04f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <HAL_I2C_Init+0x168>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e012      	b.n	80030e6 <HAL_I2C_Init+0x18e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Init+0x196>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10e      	bne.n	8003114 <HAL_I2C_Init+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e58      	subs	r0, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	fbb0 f3f3 	udiv	r3, r0, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003112:	e00f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	6809      	ldr	r1, [r1, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003162:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6911      	ldr	r1, [r2, #16]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	000186a0 	.word	0x000186a0
 80031d0:	001e847f 	.word	0x001e847f
 80031d4:	003d08ff 	.word	0x003d08ff
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7ff fb3b 	bl	8002874 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	f040 80d9 	bne.w	80033c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	496d      	ldr	r1, [pc, #436]	@ (80033cc <HAL_I2C_Mem_Write+0x1ec>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fdd3 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e0cc      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Write+0x56>
 8003232:	2302      	movs	r3, #2
 8003234:	e0c5      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d007      	beq.n	800325c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2221      	movs	r2, #33	@ 0x21
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a3a      	ldr	r2, [r7, #32]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a4d      	ldr	r2, [pc, #308]	@ (80033d0 <HAL_I2C_Mem_Write+0x1f0>)
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	88f8      	ldrh	r0, [r7, #6]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fc0a 	bl	8003ac8 <I2C_RequestMemoryWrite>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d052      	beq.n	8003360 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e081      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fe98 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d107      	bne.n	80032e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06b      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b04      	cmp	r3, #4
 8003326:	d11b      	bne.n	8003360 <HAL_I2C_Mem_Write+0x180>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1aa      	bne.n	80032be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fe8b 	bl	8004088 <I2C_WaitOnBTFFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800338e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e016      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	00100002 	.word	0x00100002
 80033d0:	ffff0000 	.word	0xffff0000

080033d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	@ 0x30
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ee:	f7ff fa41 	bl	8002874 <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	f040 8214 	bne.w	800382a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2319      	movs	r3, #25
 8003408:	2201      	movs	r2, #1
 800340a:	497b      	ldr	r1, [pc, #492]	@ (80035f8 <HAL_I2C_Mem_Read+0x224>)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fcd9 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
 800341a:	e207      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_I2C_Mem_Read+0x56>
 8003426:	2302      	movs	r3, #2
 8003428:	e200      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d007      	beq.n	8003450 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800345e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2222      	movs	r2, #34	@ 0x22
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	@ 0x40
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a5b      	ldr	r2, [pc, #364]	@ (80035fc <HAL_I2C_Mem_Read+0x228>)
 8003490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003492:	88f8      	ldrh	r0, [r7, #6]
 8003494:	893a      	ldrh	r2, [r7, #8]
 8003496:	8979      	ldrh	r1, [r7, #10]
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	4603      	mov	r3, r0
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fba6 	bl	8003bf4 <I2C_RequestMemoryRead>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e1bc      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d113      	bne.n	80034e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	623b      	str	r3, [r7, #32]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e190      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d11b      	bne.n	8003522 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e170      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	2b02      	cmp	r3, #2
 8003528:	d11b      	bne.n	8003562 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003538:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003548:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	e150      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003578:	e144      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	2b03      	cmp	r3, #3
 8003580:	f200 80f1 	bhi.w	8003766 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	2b01      	cmp	r3, #1
 800358a:	d123      	bne.n	80035d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fdc1 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e145      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035d2:	e117      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d14e      	bne.n	800367a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e2:	2200      	movs	r2, #0
 80035e4:	4906      	ldr	r1, [pc, #24]	@ (8003600 <HAL_I2C_Mem_Read+0x22c>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fbec 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e11a      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
 80035f6:	bf00      	nop
 80035f8:	00100002 	.word	0x00100002
 80035fc:	ffff0000 	.word	0xffff0000
 8003600:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003678:	e0c4      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	2200      	movs	r2, #0
 8003682:	496c      	ldr	r1, [pc, #432]	@ (8003834 <HAL_I2C_Mem_Read+0x460>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fb9d 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0cb      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036dc:	2200      	movs	r2, #0
 80036de:	4955      	ldr	r1, [pc, #340]	@ (8003834 <HAL_I2C_Mem_Read+0x460>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fb6f 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e09d      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003764:	e04e      	b.n	8003804 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003768:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fcd4 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e058      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d124      	bne.n	8003804 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f aeb6 	bne.w	800357a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3728      	adds	r7, #40	@ 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	00010004 	.word	0x00010004

08003838 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	460b      	mov	r3, r1
 8003846:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff f814 	bl	8002874 <HAL_GetTick>
 800384c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	f040 8111 	bne.w	8003a82 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	4988      	ldr	r1, [pc, #544]	@ (8003a8c <HAL_I2C_IsDeviceReady+0x254>)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 faaa 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	e104      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_I2C_IsDeviceReady+0x50>
 8003884:	2302      	movs	r3, #2
 8003886:	e0fd      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d007      	beq.n	80038ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2224      	movs	r2, #36	@ 0x24
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a70      	ldr	r2, [pc, #448]	@ (8003a90 <HAL_I2C_IsDeviceReady+0x258>)
 80038d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fa68 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003908:	d103      	bne.n	8003912 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0b6      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003924:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003926:	f7fe ffa5 	bl	8002874 <HAL_GetTick>
 800392a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800395a:	e025      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800395c:	f7fe ff8a 	bl	8002874 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d302      	bcc.n	8003972 <HAL_I2C_IsDeviceReady+0x13a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	22a0      	movs	r2, #160	@ 0xa0
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80039b2:	d005      	beq.n	80039c0 <HAL_I2C_IsDeviceReady+0x188>
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <HAL_I2C_IsDeviceReady+0x188>
 80039ba:	7dbb      	ldrb	r3, [r7, #22]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0cd      	beq.n	800395c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d129      	bne.n	8003a2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	4921      	ldr	r1, [pc, #132]	@ (8003a8c <HAL_I2C_IsDeviceReady+0x254>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f9dc 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e036      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e02c      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a38:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a42:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	490f      	ldr	r1, [pc, #60]	@ (8003a8c <HAL_I2C_IsDeviceReady+0x254>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f9b8 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e012      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3301      	adds	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	f4ff af32 	bcc.w	80038d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	00100002 	.word	0x00100002
 8003a90:	ffff0000 	.word	0xffff0000

08003a94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	817b      	strh	r3, [r7, #10]
 8003ada:	460b      	mov	r3, r1
 8003adc:	813b      	strh	r3, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f960 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b18:	d103      	bne.n	8003b22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e05f      	b.n	8003be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	492d      	ldr	r1, [pc, #180]	@ (8003bf0 <I2C_RequestMemoryWrite+0x128>)
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f9bb 	bl	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e04c      	b.n	8003be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b64:	6a39      	ldr	r1, [r7, #32]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa46 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d107      	bne.n	8003b8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e02b      	b.n	8003be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b94:	893b      	ldrh	r3, [r7, #8]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]
 8003b9e:	e021      	b.n	8003be4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb0:	6a39      	ldr	r1, [r7, #32]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fa20 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d107      	bne.n	8003bd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e005      	b.n	8003be6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	00010002 	.word	0x00010002

08003bf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8c2 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c54:	d103      	bne.n	8003c5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0aa      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	4952      	ldr	r1, [pc, #328]	@ (8003dc0 <I2C_RequestMemoryRead+0x1cc>)
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f91d 	bl	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e097      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca0:	6a39      	ldr	r1, [r7, #32]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f9a8 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d107      	bne.n	8003cc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e076      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]
 8003cda:	e021      	b.n	8003d20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f982 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e050      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d22:	6a39      	ldr	r1, [r7, #32]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f967 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d107      	bne.n	8003d48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e035      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f82b 	bl	8003dc4 <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d82:	d103      	bne.n	8003d8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e013      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d90:	897b      	ldrh	r3, [r7, #10]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	6a3a      	ldr	r2, [r7, #32]
 8003da4:	4906      	ldr	r1, [pc, #24]	@ (8003dc0 <I2C_RequestMemoryRead+0x1cc>)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f886 	bl	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	00010002 	.word	0x00010002

08003dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd4:	e048      	b.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d044      	beq.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7fe fd49 	bl	8002874 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d139      	bne.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10d      	bne.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	e00c      	b.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	43da      	mvns	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d116      	bne.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e023      	b.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10d      	bne.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	e00c      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d093      	beq.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec6:	e071      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	d123      	bne.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e067      	b.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d041      	beq.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f28:	f7fe fca4 	bl	8002874 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d136      	bne.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10c      	bne.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	e00b      	b.n	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e021      	b.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	0c1b      	lsrs	r3, r3, #16
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10c      	bne.n	8003fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e00b      	b.n	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f af6d 	bne.w	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004004:	e034      	b.n	8004070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f8e3 	bl	80041d2 <I2C_IsAcknowledgeFailed>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e034      	b.n	8004080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d028      	beq.n	8004070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe fc29 	bl	8002874 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11d      	bne.n	8004070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403e:	2b80      	cmp	r3, #128	@ 0x80
 8004040:	d016      	beq.n	8004070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e007      	b.n	8004080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b80      	cmp	r3, #128	@ 0x80
 800407c:	d1c3      	bne.n	8004006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004094:	e034      	b.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f89b 	bl	80041d2 <I2C_IsAcknowledgeFailed>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e034      	b.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d028      	beq.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fe fbe1 	bl	8002874 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11d      	bne.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d016      	beq.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e007      	b.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d1c3      	bne.n	8004096 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004124:	e049      	b.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d119      	bne.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e030      	b.n	80041ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004168:	f7fe fb84 	bl	8002874 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11d      	bne.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d016      	beq.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d1ae      	bne.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e8:	d11b      	bne.n	8004222 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e267      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d075      	beq.n	800433a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800424e:	4b88      	ldr	r3, [pc, #544]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d00c      	beq.n	8004274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4b85      	ldr	r3, [pc, #532]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004262:	2b08      	cmp	r3, #8
 8004264:	d112      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004266:	4b82      	ldr	r3, [pc, #520]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004272:	d10b      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	4b7e      	ldr	r3, [pc, #504]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05b      	beq.n	8004338 <HAL_RCC_OscConfig+0x108>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d157      	bne.n	8004338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e242      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x74>
 8004296:	4b76      	ldr	r3, [pc, #472]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e01d      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b70      	ldr	r3, [pc, #448]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6c      	ldr	r2, [pc, #432]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042c8:	4b69      	ldr	r3, [pc, #420]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a68      	ldr	r2, [pc, #416]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b66      	ldr	r3, [pc, #408]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a65      	ldr	r2, [pc, #404]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80042da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fac4 	bl	8002874 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe fac0 	bl	8002874 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e207      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b5b      	ldr	r3, [pc, #364]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0xc0>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fe fab0 	bl	8002874 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004318:	f7fe faac 	bl	8002874 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	@ 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1f3      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	4b51      	ldr	r3, [pc, #324]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0xe8>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004346:	4b4a      	ldr	r3, [pc, #296]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b47      	ldr	r3, [pc, #284]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800435a:	2b08      	cmp	r3, #8
 800435c:	d11c      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b44      	ldr	r3, [pc, #272]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1c7      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b3b      	ldr	r3, [pc, #236]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4937      	ldr	r1, [pc, #220]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e03a      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a0:	4b34      	ldr	r3, [pc, #208]	@ (8004474 <HAL_RCC_OscConfig+0x244>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe fa65 	bl	8002874 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fe fa61 	bl	8002874 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1a8      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4925      	ldr	r1, [pc, #148]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <HAL_RCC_OscConfig+0x244>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fa44 	bl	8002874 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe fa40 	bl	8002874 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e187      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d036      	beq.n	8004488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <HAL_RCC_OscConfig+0x248>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe fa24 	bl	8002874 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004430:	f7fe fa20 	bl	8002874 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e167      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <HAL_RCC_OscConfig+0x240>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x200>
 800444e:	e01b      	b.n	8004488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004450:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_RCC_OscConfig+0x248>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe fa0d 	bl	8002874 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e00e      	b.n	800447c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe fa09 	bl	8002874 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d907      	bls.n	800447c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e150      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
 8004470:	40023800 	.word	0x40023800
 8004474:	42470000 	.word	0x42470000
 8004478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	4b88      	ldr	r3, [pc, #544]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ea      	bne.n	800445e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8097 	beq.w	80045c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449a:	4b81      	ldr	r3, [pc, #516]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	4b7d      	ldr	r3, [pc, #500]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	4a7c      	ldr	r2, [pc, #496]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044b6:	4b7a      	ldr	r3, [pc, #488]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	4b77      	ldr	r3, [pc, #476]	@ (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d2:	4b74      	ldr	r3, [pc, #464]	@ (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a73      	ldr	r2, [pc, #460]	@ (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fe f9c9 	bl	8002874 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fe f9c5 	bl	8002874 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e10c      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	4b6a      	ldr	r3, [pc, #424]	@ (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x2ea>
 800450c:	4b64      	ldr	r3, [pc, #400]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	4a63      	ldr	r2, [pc, #396]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	@ 0x70
 8004518:	e01c      	b.n	8004554 <HAL_RCC_OscConfig+0x324>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b05      	cmp	r3, #5
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x30c>
 8004522:	4b5f      	ldr	r3, [pc, #380]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	4a5e      	ldr	r2, [pc, #376]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	6713      	str	r3, [r2, #112]	@ 0x70
 800452e:	4b5c      	ldr	r3, [pc, #368]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	4a5b      	ldr	r2, [pc, #364]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6713      	str	r3, [r2, #112]	@ 0x70
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0x324>
 800453c:	4b58      	ldr	r3, [pc, #352]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004540:	4a57      	ldr	r2, [pc, #348]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	@ 0x70
 8004548:	4b55      	ldr	r3, [pc, #340]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454c:	4a54      	ldr	r2, [pc, #336]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800454e:	f023 0304 	bic.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fe f98a 	bl	8002874 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	e00a      	b.n	800457a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fe f986 	bl	8002874 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0cb      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	4b49      	ldr	r3, [pc, #292]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ee      	beq.n	8004564 <HAL_RCC_OscConfig+0x334>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004588:	f7fe f974 	bl	8002874 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fe f970 	bl	8002874 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0b5      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a6:	4b3e      	ldr	r3, [pc, #248]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ee      	bne.n	8004590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b39      	ldr	r3, [pc, #228]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	4a38      	ldr	r2, [pc, #224]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80a1 	beq.w	8004710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ce:	4b34      	ldr	r3, [pc, #208]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d05c      	beq.n	8004694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d141      	bne.n	8004666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b31      	ldr	r3, [pc, #196]	@ (80046a8 <HAL_RCC_OscConfig+0x478>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe f944 	bl	8002874 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe f940 	bl	8002874 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e087      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b27      	ldr	r3, [pc, #156]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	491b      	ldr	r1, [pc, #108]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004638:	4b1b      	ldr	r3, [pc, #108]	@ (80046a8 <HAL_RCC_OscConfig+0x478>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe f919 	bl	8002874 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe f915 	bl	8002874 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e05c      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004658:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x416>
 8004664:	e054      	b.n	8004710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004666:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <HAL_RCC_OscConfig+0x478>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe f902 	bl	8002874 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe f8fe 	bl	8002874 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e045      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x444>
 8004692:	e03d      	b.n	8004710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e038      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000
 80046a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ac:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCC_OscConfig+0x4ec>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d028      	beq.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d121      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d11a      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d111      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	3b01      	subs	r3, #1
 80046f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cc      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b68      	ldr	r3, [pc, #416]	@ (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90c      	bls.n	800475c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b65      	ldr	r3, [pc, #404]	@ (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	@ (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d044      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d003      	beq.n	80047de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b3f      	ldr	r3, [pc, #252]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3b      	ldr	r3, [pc, #236]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e067      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4934      	ldr	r1, [pc, #208]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe f830 	bl	8002874 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fe f82c 	bl	8002874 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2b      	ldr	r3, [pc, #172]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b25      	ldr	r3, [pc, #148]	@ (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d20c      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b22      	ldr	r3, [pc, #136]	@ (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	@ (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fd ff90 	bl	80027ec <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800753c 	.word	0x0800753c
 80048e4:	20000024 	.word	0x20000024
 80048e8:	20000028 	.word	0x20000028

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f0:	b090      	sub	sp, #64	@ 0x40
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004904:	4b59      	ldr	r3, [pc, #356]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d00d      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x40>
 8004910:	2b08      	cmp	r3, #8
 8004912:	f200 80a1 	bhi.w	8004a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x34>
 800491a:	2b04      	cmp	r3, #4
 800491c:	d003      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x3a>
 800491e:	e09b      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004922:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004924:	e09b      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b53      	ldr	r3, [pc, #332]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800492a:	e098      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004936:	4b4d      	ldr	r3, [pc, #308]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b4a      	ldr	r3, [pc, #296]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	2200      	movs	r2, #0
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	627a      	str	r2, [r7, #36]	@ 0x24
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004954:	2100      	movs	r1, #0
 8004956:	4b47      	ldr	r3, [pc, #284]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004958:	fb03 f201 	mul.w	r2, r3, r1
 800495c:	2300      	movs	r3, #0
 800495e:	fb00 f303 	mul.w	r3, r0, r3
 8004962:	4413      	add	r3, r2
 8004964:	4a43      	ldr	r2, [pc, #268]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004966:	fba0 1202 	umull	r1, r2, r0, r2
 800496a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800496c:	460a      	mov	r2, r1
 800496e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004972:	4413      	add	r3, r2
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004978:	2200      	movs	r2, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	61fa      	str	r2, [r7, #28]
 800497e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004986:	f7fb fc83 	bl	8000290 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4613      	mov	r3, r2
 8004990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004992:	e053      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004994:	4b35      	ldr	r3, [pc, #212]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	2200      	movs	r2, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	617a      	str	r2, [r7, #20]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049a6:	f04f 0b00 	mov.w	fp, #0
 80049aa:	4652      	mov	r2, sl
 80049ac:	465b      	mov	r3, fp
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0159      	lsls	r1, r3, #5
 80049b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049bc:	0150      	lsls	r0, r2, #5
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	ebb2 080a 	subs.w	r8, r2, sl
 80049c6:	eb63 090b 	sbc.w	r9, r3, fp
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049de:	ebb2 0408 	subs.w	r4, r2, r8
 80049e2:	eb63 0509 	sbc.w	r5, r3, r9
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	00eb      	lsls	r3, r5, #3
 80049f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f4:	00e2      	lsls	r2, r4, #3
 80049f6:	4614      	mov	r4, r2
 80049f8:	461d      	mov	r5, r3
 80049fa:	eb14 030a 	adds.w	r3, r4, sl
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	eb45 030b 	adc.w	r3, r5, fp
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a12:	4629      	mov	r1, r5
 8004a14:	028b      	lsls	r3, r1, #10
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	028a      	lsls	r2, r1, #10
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	2200      	movs	r2, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	60fa      	str	r2, [r7, #12]
 8004a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a30:	f7fb fc2e 	bl	8000290 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	3301      	adds	r3, #1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a56:	e002      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3740      	adds	r7, #64	@ 0x40
 8004a64:	46bd      	mov	sp, r7
 8004a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	017d7840 	.word	0x017d7840

08004a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000024 	.word	0x20000024

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff0 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0a9b      	lsrs	r3, r3, #10
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	@ (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	0800754c 	.word	0x0800754c

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004abc:	f7ff ffdc 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0b5b      	lsrs	r3, r3, #13
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800754c 	.word	0x0800754c

08004ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e041      	b.n	8004b76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd fc00 	bl	800230c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 fb42 	bl	80051a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_TIM_PWM_Start_IT+0x28>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e022      	b.n	8004bee <HAL_TIM_PWM_Start_IT+0x6e>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d109      	bne.n	8004bc2 <HAL_TIM_PWM_Start_IT+0x42>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e015      	b.n	8004bee <HAL_TIM_PWM_Start_IT+0x6e>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d109      	bne.n	8004bdc <HAL_TIM_PWM_Start_IT+0x5c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e008      	b.n	8004bee <HAL_TIM_PWM_Start_IT+0x6e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0b3      	b.n	8004d5e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start_IT+0x86>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c04:	e013      	b.n	8004c2e <HAL_TIM_PWM_Start_IT+0xae>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start_IT+0x96>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c14:	e00b      	b.n	8004c2e <HAL_TIM_PWM_Start_IT+0xae>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start_IT+0xa6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c24:	e003      	b.n	8004c2e <HAL_TIM_PWM_Start_IT+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	d841      	bhi.n	8004cb8 <HAL_TIM_PWM_Start_IT+0x138>
 8004c34:	a201      	add	r2, pc, #4	@ (adr r2, 8004c3c <HAL_TIM_PWM_Start_IT+0xbc>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c71 	.word	0x08004c71
 8004c40:	08004cb9 	.word	0x08004cb9
 8004c44:	08004cb9 	.word	0x08004cb9
 8004c48:	08004cb9 	.word	0x08004cb9
 8004c4c:	08004c83 	.word	0x08004c83
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004cb9 	.word	0x08004cb9
 8004c5c:	08004c95 	.word	0x08004c95
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004ca7 	.word	0x08004ca7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0202 	orr.w	r2, r2, #2
 8004c7e:	60da      	str	r2, [r3, #12]
      break;
 8004c80:	e01d      	b.n	8004cbe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0204 	orr.w	r2, r2, #4
 8004c90:	60da      	str	r2, [r3, #12]
      break;
 8004c92:	e014      	b.n	8004cbe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0208 	orr.w	r2, r2, #8
 8004ca2:	60da      	str	r2, [r3, #12]
      break;
 8004ca4:	e00b      	b.n	8004cbe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0210 	orr.w	r2, r2, #16
 8004cb4:	60da      	str	r2, [r3, #12]
      break;
 8004cb6:	e002      	b.n	8004cbe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      break;
 8004cbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d14b      	bne.n	8004d5c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fc83 	bl	80055d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfe:	d013      	beq.n	8004d28 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a19      	ldr	r2, [pc, #100]	@ (8004d6c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a16      	ldr	r2, [pc, #88]	@ (8004d74 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a15      	ldr	r2, [pc, #84]	@ (8004d78 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d111      	bne.n	8004d4c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b06      	cmp	r3, #6
 8004d38:	d010      	beq.n	8004d5c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	e007      	b.n	8004d5c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40014000 	.word	0x40014000

08004d7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e097      	b.n	8004ec0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fd faff 	bl	80023a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dc0:	f023 0307 	bic.w	r3, r3, #7
 8004dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f000 f9e9 	bl	80051a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e1c:	f023 030c 	bic.w	r3, r3, #12
 8004e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	011a      	lsls	r2, r3, #4
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	031b      	lsls	r3, r3, #12
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ed8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ee0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ee8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ef0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d102      	bne.n	8004f04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004efe:	7b7b      	ldrb	r3, [r7, #13]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d001      	beq.n	8004f08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e089      	b.n	800501c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f18:	e031      	b.n	8004f7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d110      	bne.n	8004f42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d102      	bne.n	8004f2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f26:	7b3b      	ldrb	r3, [r7, #12]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e075      	b.n	800501c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f40:	e01d      	b.n	8004f7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d108      	bne.n	8004f5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4e:	7b7b      	ldrb	r3, [r7, #13]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d102      	bne.n	8004f5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f54:	7b3b      	ldrb	r3, [r7, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e05e      	b.n	800501c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d010      	beq.n	8004fac <HAL_TIM_Encoder_Start_IT+0xe4>
 8004f8a:	e01f      	b.n	8004fcc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2201      	movs	r2, #1
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fb1f 	bl	80055d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0202 	orr.w	r2, r2, #2
 8004fa8:	60da      	str	r2, [r3, #12]
      break;
 8004faa:	e02e      	b.n	800500a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	2104      	movs	r1, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fb0f 	bl	80055d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0204 	orr.w	r2, r2, #4
 8004fc8:	60da      	str	r2, [r3, #12]
      break;
 8004fca:	e01e      	b.n	800500a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 faff 	bl	80055d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 faf8 	bl	80055d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0202 	orr.w	r2, r2, #2
 8004ff6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0204 	orr.w	r2, r2, #4
 8005006:	60da      	str	r2, [r3, #12]
      break;
 8005008:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800503e:	2302      	movs	r3, #2
 8005040:	e0ae      	b.n	80051a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b0c      	cmp	r3, #12
 800504e:	f200 809f 	bhi.w	8005190 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005052:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800508d 	.word	0x0800508d
 800505c:	08005191 	.word	0x08005191
 8005060:	08005191 	.word	0x08005191
 8005064:	08005191 	.word	0x08005191
 8005068:	080050cd 	.word	0x080050cd
 800506c:	08005191 	.word	0x08005191
 8005070:	08005191 	.word	0x08005191
 8005074:	08005191 	.word	0x08005191
 8005078:	0800510f 	.word	0x0800510f
 800507c:	08005191 	.word	0x08005191
 8005080:	08005191 	.word	0x08005191
 8005084:	08005191 	.word	0x08005191
 8005088:	0800514f 	.word	0x0800514f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 f914 	bl	80052c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0208 	orr.w	r2, r2, #8
 80050a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6999      	ldr	r1, [r3, #24]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	619a      	str	r2, [r3, #24]
      break;
 80050ca:	e064      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f95a 	bl	800538c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	021a      	lsls	r2, r3, #8
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	619a      	str	r2, [r3, #24]
      break;
 800510c:	e043      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 f9a5 	bl	8005464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0208 	orr.w	r2, r2, #8
 8005128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0204 	bic.w	r2, r2, #4
 8005138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	61da      	str	r2, [r3, #28]
      break;
 800514c:	e023      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 f9ef 	bl	8005538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	021a      	lsls	r2, r3, #8
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	61da      	str	r2, [r3, #28]
      break;
 800518e:	e002      	b.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	75fb      	strb	r3, [r7, #23]
      break;
 8005194:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3a      	ldr	r2, [pc, #232]	@ (80052a4 <TIM_Base_SetConfig+0xfc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c6:	d00b      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a37      	ldr	r2, [pc, #220]	@ (80052a8 <TIM_Base_SetConfig+0x100>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a36      	ldr	r2, [pc, #216]	@ (80052ac <TIM_Base_SetConfig+0x104>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a35      	ldr	r2, [pc, #212]	@ (80052b0 <TIM_Base_SetConfig+0x108>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d108      	bne.n	80051f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2b      	ldr	r2, [pc, #172]	@ (80052a4 <TIM_Base_SetConfig+0xfc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01b      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005200:	d017      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a28      	ldr	r2, [pc, #160]	@ (80052a8 <TIM_Base_SetConfig+0x100>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a27      	ldr	r2, [pc, #156]	@ (80052ac <TIM_Base_SetConfig+0x104>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a26      	ldr	r2, [pc, #152]	@ (80052b0 <TIM_Base_SetConfig+0x108>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a25      	ldr	r2, [pc, #148]	@ (80052b4 <TIM_Base_SetConfig+0x10c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a24      	ldr	r2, [pc, #144]	@ (80052b8 <TIM_Base_SetConfig+0x110>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a23      	ldr	r2, [pc, #140]	@ (80052bc <TIM_Base_SetConfig+0x114>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d108      	bne.n	8005244 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0e      	ldr	r2, [pc, #56]	@ (80052a4 <TIM_Base_SetConfig+0xfc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d103      	bne.n	8005278 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	611a      	str	r2, [r3, #16]
  }
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f023 0201 	bic.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0302 	bic.w	r3, r3, #2
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <TIM_OC1_SetConfig+0xc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10c      	bne.n	8005336 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0308 	bic.w	r3, r3, #8
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <TIM_OC1_SetConfig+0xc8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d111      	bne.n	8005362 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40010000 	.word	0x40010000

0800538c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f023 0210 	bic.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <TIM_OC2_SetConfig+0xd4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10d      	bne.n	8005408 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a15      	ldr	r2, [pc, #84]	@ (8005460 <TIM_OC2_SetConfig+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d113      	bne.n	8005438 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000

08005464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <TIM_OC3_SetConfig+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10d      	bne.n	80054de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <TIM_OC3_SetConfig+0xd0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d113      	bne.n	800550e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40010000 	.word	0x40010000

08005538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a10      	ldr	r2, [pc, #64]	@ (80055d4 <TIM_OC4_SetConfig+0x9c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800559e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	019b      	lsls	r3, r3, #6
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000

080055d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	2201      	movs	r2, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	43db      	mvns	r3, r3
 80055fa:	401a      	ands	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1a      	ldr	r2, [r3, #32]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	431a      	orrs	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005638:	2302      	movs	r3, #2
 800563a:	e050      	b.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1c      	ldr	r2, [pc, #112]	@ (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005688:	d013      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a15      	ldr	r2, [pc, #84]	@ (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a13      	ldr	r2, [pc, #76]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10c      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40014000 	.word	0x40014000

08005700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005718:	2302      	movs	r3, #2
 800571a:	e03d      	b.n	8005798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e042      	b.n	800583c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc fef0 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	@ 0x24
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fdbd 	bl	8006368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800580c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800581c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08a      	sub	sp, #40	@ 0x28
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b20      	cmp	r3, #32
 8005862:	d175      	bne.n	8005950 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_UART_Transmit+0x2c>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e06e      	b.n	8005952 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2221      	movs	r2, #33	@ 0x21
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005882:	f7fc fff7 	bl	8002874 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800589c:	d108      	bne.n	80058b0 <HAL_UART_Transmit+0x6c>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	e003      	b.n	80058b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058b8:	e02e      	b.n	8005918 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2180      	movs	r1, #128	@ 0x80
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fb1f 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e03a      	b.n	8005952 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	3302      	adds	r3, #2
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	e007      	b.n	800590a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1cb      	bne.n	80058ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	2140      	movs	r1, #64	@ 0x40
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 faeb 	bl	8005f08 <UART_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	e000      	b.n	8005952 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005950:	2302      	movs	r3, #2
  }
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	4613      	mov	r3, r2
 8005966:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b20      	cmp	r3, #32
 8005972:	d112      	bne.n	800599a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_UART_Receive_IT+0x26>
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e00b      	b.n	800599c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	461a      	mov	r2, r3
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fb12 	bl	8005fba <UART_Start_Receive_IT>
 8005996:	4603      	mov	r3, r0
 8005998:	e000      	b.n	800599c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b0ba      	sub	sp, #232	@ 0xe8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80059e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10f      	bne.n	8005a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_UART_IRQHandler+0x66>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fbf2 	bl	80061ec <UART_Receive_IT>
      return;
 8005a08:	e25b      	b.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80de 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x22c>
 8005a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80d1 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_UART_IRQHandler+0xae>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <HAL_UART_IRQHandler+0xd2>
 8005a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6e:	f043 0202 	orr.w	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <HAL_UART_IRQHandler+0xf6>
 8005a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	f043 0204 	orr.w	r2, r3, #4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d011      	beq.n	8005aca <HAL_UART_IRQHandler+0x126>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d105      	bne.n	8005abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac2:	f043 0208 	orr.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 81f2 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_UART_IRQHandler+0x14e>
 8005ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb7d 	bl	80061ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afc:	2b40      	cmp	r3, #64	@ 0x40
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_UART_IRQHandler+0x17a>
 8005b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04f      	beq.n	8005bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa85 	bl	800602e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	2b40      	cmp	r3, #64	@ 0x40
 8005b30:	d141      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1d9      	bne.n	8005b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d013      	beq.n	8005bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d84 <HAL_UART_IRQHandler+0x3e0>)
 8005b8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd f81f 	bl	8002bd6 <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d016      	beq.n	8005bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	e00e      	b.n	8005bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f994 	bl	8005edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	e00a      	b.n	8005bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f990 	bl	8005edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	e006      	b.n	8005bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f98c 	bl	8005edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005bca:	e175      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bcc:	bf00      	nop
    return;
 8005bce:	e173      	b.n	8005eb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 814f 	bne.w	8005e78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8148 	beq.w	8005e78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8141 	beq.w	8005e78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c16:	2b40      	cmp	r3, #64	@ 0x40
 8005c18:	f040 80b6 	bne.w	8005d88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8145 	beq.w	8005ebc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	f080 813e 	bcs.w	8005ebc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c52:	f000 8088 	beq.w	8005d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1d9      	bne.n	8005c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e1      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3314      	adds	r3, #20
 8005ce4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e3      	bne.n	8005cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d36:	f023 0310 	bic.w	r3, r3, #16
 8005d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e3      	bne.n	8005d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fc fec8 	bl	8002af6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8b7 	bl	8005ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d82:	e09b      	b.n	8005ebc <HAL_UART_IRQHandler+0x518>
 8005d84:	080060f5 	.word	0x080060f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 808e 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8089 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005dd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e3      	bne.n	8005dae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3314      	adds	r3, #20
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	623b      	str	r3, [r7, #32]
   return(result);
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e3      	bne.n	8005de6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0310 	bic.w	r3, r3, #16
 8005e42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e50:	61fa      	str	r2, [r7, #28]
 8005e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e3      	bne.n	8005e2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f83d 	bl	8005ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e76:	e023      	b.n	8005ec0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <HAL_UART_IRQHandler+0x4f4>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f943 	bl	800611c <UART_Transmit_IT>
    return;
 8005e96:	e014      	b.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f983 	bl	80061bc <UART_EndTransmit_IT>
    return;
 8005eb6:	e004      	b.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005eb8:	bf00      	nop
 8005eba:	e002      	b.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	37e8      	adds	r7, #232	@ 0xe8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f18:	e03b      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d037      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f22:	f7fc fca7 	bl	8002874 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d302      	bcc.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e03a      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d023      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b80      	cmp	r3, #128	@ 0x80
 8005f4e:	d020      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b40      	cmp	r3, #64	@ 0x40
 8005f54:	d01d      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d116      	bne.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f857 	bl	800602e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2208      	movs	r2, #8
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e00f      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d0b4      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2222      	movs	r2, #34	@ 0x22
 8005fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ffe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0220 	orr.w	r2, r2, #32
 800601e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800602e:	b480      	push	{r7}
 8006030:	b095      	sub	sp, #84	@ 0x54
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800604c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006056:	643a      	str	r2, [r7, #64]	@ 0x40
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800605c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3314      	adds	r3, #20
 8006070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	61fb      	str	r3, [r7, #28]
   return(result);
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800608a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800608c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d119      	bne.n	80060da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f023 0310 	bic.w	r3, r3, #16
 80060bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060c6:	61ba      	str	r2, [r7, #24]
 80060c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6979      	ldr	r1, [r7, #20]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	613b      	str	r3, [r7, #16]
   return(result);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060e8:	bf00      	nop
 80060ea:	3754      	adds	r7, #84	@ 0x54
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fee4 	bl	8005edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b21      	cmp	r3, #33	@ 0x21
 800612e:	d13e      	bne.n	80061ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006138:	d114      	bne.n	8006164 <UART_Transmit_IT+0x48>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d110      	bne.n	8006164 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006156:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	1c9a      	adds	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]
 8006162:	e008      	b.n	8006176 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6211      	str	r1, [r2, #32]
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4619      	mov	r1, r3
 8006184:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10f      	bne.n	80061aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006198:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	e000      	b.n	80061b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061ae:	2302      	movs	r3, #2
  }
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fe73 	bl	8005ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	@ 0x30
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b22      	cmp	r3, #34	@ 0x22
 80061fe:	f040 80ae 	bne.w	800635e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620a:	d117      	bne.n	800623c <UART_Receive_IT+0x50>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d113      	bne.n	800623c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	b29a      	uxth	r2, r3
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	1c9a      	adds	r2, r3, #2
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	629a      	str	r2, [r3, #40]	@ 0x28
 800623a:	e026      	b.n	800628a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624e:	d007      	beq.n	8006260 <UART_Receive_IT+0x74>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <UART_Receive_IT+0x82>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e008      	b.n	8006280 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29b      	uxth	r3, r3
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800629a:	2b00      	cmp	r3, #0
 800629c:	d15d      	bne.n	800635a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0220 	bic.w	r2, r2, #32
 80062ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d135      	bne.n	8006350 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	613b      	str	r3, [r7, #16]
   return(result);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f023 0310 	bic.w	r3, r3, #16
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630a:	623a      	str	r2, [r7, #32]
 800630c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	61bb      	str	r3, [r7, #24]
   return(result);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b10      	cmp	r3, #16
 800632a:	d10a      	bne.n	8006342 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fdd1 	bl	8005ef0 <HAL_UARTEx_RxEventCallback>
 800634e:	e002      	b.n	8006356 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fb f9e3 	bl	800171c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e002      	b.n	8006360 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800635e:	2302      	movs	r3, #2
  }
}
 8006360:	4618      	mov	r0, r3
 8006362:	3730      	adds	r7, #48	@ 0x30
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800636c:	b0c0      	sub	sp, #256	@ 0x100
 800636e:	af00      	add	r7, sp, #0
 8006370:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	68d9      	ldr	r1, [r3, #12]
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	ea40 0301 	orr.w	r3, r0, r1
 8006390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	431a      	orrs	r2, r3
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063c0:	f021 010c 	bic.w	r1, r1, #12
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063ce:	430b      	orrs	r3, r1
 80063d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e2:	6999      	ldr	r1, [r3, #24]
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	ea40 0301 	orr.w	r3, r0, r1
 80063ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006634 <UART_SetConfig+0x2cc>)
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d005      	beq.n	8006408 <UART_SetConfig+0xa0>
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b8d      	ldr	r3, [pc, #564]	@ (8006638 <UART_SetConfig+0x2d0>)
 8006404:	429a      	cmp	r2, r3
 8006406:	d104      	bne.n	8006412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006408:	f7fe fb56 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 800640c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006410:	e003      	b.n	800641a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006412:	f7fe fb3d 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006416:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006424:	f040 810c 	bne.w	8006640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642c:	2200      	movs	r2, #0
 800642e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006432:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800643a:	4622      	mov	r2, r4
 800643c:	462b      	mov	r3, r5
 800643e:	1891      	adds	r1, r2, r2
 8006440:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006442:	415b      	adcs	r3, r3
 8006444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800644a:	4621      	mov	r1, r4
 800644c:	eb12 0801 	adds.w	r8, r2, r1
 8006450:	4629      	mov	r1, r5
 8006452:	eb43 0901 	adc.w	r9, r3, r1
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800646a:	4690      	mov	r8, r2
 800646c:	4699      	mov	r9, r3
 800646e:	4623      	mov	r3, r4
 8006470:	eb18 0303 	adds.w	r3, r8, r3
 8006474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006478:	462b      	mov	r3, r5
 800647a:	eb49 0303 	adc.w	r3, r9, r3
 800647e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800648e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006496:	460b      	mov	r3, r1
 8006498:	18db      	adds	r3, r3, r3
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50
 800649c:	4613      	mov	r3, r2
 800649e:	eb42 0303 	adc.w	r3, r2, r3
 80064a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80064a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064ac:	f7f9 fef0 	bl	8000290 <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4b61      	ldr	r3, [pc, #388]	@ (800663c <UART_SetConfig+0x2d4>)
 80064b6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	011c      	lsls	r4, r3, #4
 80064be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	1891      	adds	r1, r2, r2
 80064d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064d8:	415b      	adcs	r3, r3
 80064da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064e0:	4641      	mov	r1, r8
 80064e2:	eb12 0a01 	adds.w	sl, r2, r1
 80064e6:	4649      	mov	r1, r9
 80064e8:	eb43 0b01 	adc.w	fp, r3, r1
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006500:	4692      	mov	sl, r2
 8006502:	469b      	mov	fp, r3
 8006504:	4643      	mov	r3, r8
 8006506:	eb1a 0303 	adds.w	r3, sl, r3
 800650a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800650e:	464b      	mov	r3, r9
 8006510:	eb4b 0303 	adc.w	r3, fp, r3
 8006514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006524:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800652c:	460b      	mov	r3, r1
 800652e:	18db      	adds	r3, r3, r3
 8006530:	643b      	str	r3, [r7, #64]	@ 0x40
 8006532:	4613      	mov	r3, r2
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	647b      	str	r3, [r7, #68]	@ 0x44
 800653a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800653e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006542:	f7f9 fea5 	bl	8000290 <__aeabi_uldivmod>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4611      	mov	r1, r2
 800654c:	4b3b      	ldr	r3, [pc, #236]	@ (800663c <UART_SetConfig+0x2d4>)
 800654e:	fba3 2301 	umull	r2, r3, r3, r1
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	2264      	movs	r2, #100	@ 0x64
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	1acb      	subs	r3, r1, r3
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006562:	4b36      	ldr	r3, [pc, #216]	@ (800663c <UART_SetConfig+0x2d4>)
 8006564:	fba3 2302 	umull	r2, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006570:	441c      	add	r4, r3
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800657c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800658c:	415b      	adcs	r3, r3
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006594:	4641      	mov	r1, r8
 8006596:	1851      	adds	r1, r2, r1
 8006598:	6339      	str	r1, [r7, #48]	@ 0x30
 800659a:	4649      	mov	r1, r9
 800659c:	414b      	adcs	r3, r1
 800659e:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065ac:	4659      	mov	r1, fp
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	4651      	mov	r1, sl
 80065b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b6:	4651      	mov	r1, sl
 80065b8:	00ca      	lsls	r2, r1, #3
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	4642      	mov	r2, r8
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065c8:	464b      	mov	r3, r9
 80065ca:	460a      	mov	r2, r1
 80065cc:	eb42 0303 	adc.w	r3, r2, r3
 80065d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065e8:	460b      	mov	r3, r1
 80065ea:	18db      	adds	r3, r3, r3
 80065ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ee:	4613      	mov	r3, r2
 80065f0:	eb42 0303 	adc.w	r3, r2, r3
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065fe:	f7f9 fe47 	bl	8000290 <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <UART_SetConfig+0x2d4>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	@ 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	3332      	adds	r3, #50	@ 0x32
 800661a:	4a08      	ldr	r2, [pc, #32]	@ (800663c <UART_SetConfig+0x2d4>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 0207 	and.w	r2, r3, #7
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4422      	add	r2, r4
 800662e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006630:	e106      	b.n	8006840 <UART_SetConfig+0x4d8>
 8006632:	bf00      	nop
 8006634:	40011000 	.word	0x40011000
 8006638:	40011400 	.word	0x40011400
 800663c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006644:	2200      	movs	r2, #0
 8006646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800664a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800664e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006652:	4642      	mov	r2, r8
 8006654:	464b      	mov	r3, r9
 8006656:	1891      	adds	r1, r2, r2
 8006658:	6239      	str	r1, [r7, #32]
 800665a:	415b      	adcs	r3, r3
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
 800665e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006662:	4641      	mov	r1, r8
 8006664:	1854      	adds	r4, r2, r1
 8006666:	4649      	mov	r1, r9
 8006668:	eb43 0501 	adc.w	r5, r3, r1
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	00eb      	lsls	r3, r5, #3
 8006676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800667a:	00e2      	lsls	r2, r4, #3
 800667c:	4614      	mov	r4, r2
 800667e:	461d      	mov	r5, r3
 8006680:	4643      	mov	r3, r8
 8006682:	18e3      	adds	r3, r4, r3
 8006684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006688:	464b      	mov	r3, r9
 800668a:	eb45 0303 	adc.w	r3, r5, r3
 800668e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800669e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066ae:	4629      	mov	r1, r5
 80066b0:	008b      	lsls	r3, r1, #2
 80066b2:	4621      	mov	r1, r4
 80066b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066b8:	4621      	mov	r1, r4
 80066ba:	008a      	lsls	r2, r1, #2
 80066bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066c0:	f7f9 fde6 	bl	8000290 <__aeabi_uldivmod>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4b60      	ldr	r3, [pc, #384]	@ (800684c <UART_SetConfig+0x4e4>)
 80066ca:	fba3 2302 	umull	r2, r3, r3, r2
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	011c      	lsls	r4, r3, #4
 80066d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	1891      	adds	r1, r2, r2
 80066ea:	61b9      	str	r1, [r7, #24]
 80066ec:	415b      	adcs	r3, r3
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066f4:	4641      	mov	r1, r8
 80066f6:	1851      	adds	r1, r2, r1
 80066f8:	6139      	str	r1, [r7, #16]
 80066fa:	4649      	mov	r1, r9
 80066fc:	414b      	adcs	r3, r1
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800670c:	4659      	mov	r1, fp
 800670e:	00cb      	lsls	r3, r1, #3
 8006710:	4651      	mov	r1, sl
 8006712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006716:	4651      	mov	r1, sl
 8006718:	00ca      	lsls	r2, r1, #3
 800671a:	4610      	mov	r0, r2
 800671c:	4619      	mov	r1, r3
 800671e:	4603      	mov	r3, r0
 8006720:	4642      	mov	r2, r8
 8006722:	189b      	adds	r3, r3, r2
 8006724:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006728:	464b      	mov	r3, r9
 800672a:	460a      	mov	r2, r1
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800673e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800674c:	4649      	mov	r1, r9
 800674e:	008b      	lsls	r3, r1, #2
 8006750:	4641      	mov	r1, r8
 8006752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006756:	4641      	mov	r1, r8
 8006758:	008a      	lsls	r2, r1, #2
 800675a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800675e:	f7f9 fd97 	bl	8000290 <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4611      	mov	r1, r2
 8006768:	4b38      	ldr	r3, [pc, #224]	@ (800684c <UART_SetConfig+0x4e4>)
 800676a:	fba3 2301 	umull	r2, r3, r3, r1
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	2264      	movs	r2, #100	@ 0x64
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	1acb      	subs	r3, r1, r3
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	3332      	adds	r3, #50	@ 0x32
 800677c:	4a33      	ldr	r2, [pc, #204]	@ (800684c <UART_SetConfig+0x4e4>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006788:	441c      	add	r4, r3
 800678a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800678e:	2200      	movs	r2, #0
 8006790:	673b      	str	r3, [r7, #112]	@ 0x70
 8006792:	677a      	str	r2, [r7, #116]	@ 0x74
 8006794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	1891      	adds	r1, r2, r2
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	415b      	adcs	r3, r3
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067a8:	4641      	mov	r1, r8
 80067aa:	1851      	adds	r1, r2, r1
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	4649      	mov	r1, r9
 80067b0:	414b      	adcs	r3, r1
 80067b2:	607b      	str	r3, [r7, #4]
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067c0:	4659      	mov	r1, fp
 80067c2:	00cb      	lsls	r3, r1, #3
 80067c4:	4651      	mov	r1, sl
 80067c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ca:	4651      	mov	r1, sl
 80067cc:	00ca      	lsls	r2, r1, #3
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	4642      	mov	r2, r8
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067da:	464b      	mov	r3, r9
 80067dc:	460a      	mov	r2, r1
 80067de:	eb42 0303 	adc.w	r3, r2, r3
 80067e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80067ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067fc:	4649      	mov	r1, r9
 80067fe:	008b      	lsls	r3, r1, #2
 8006800:	4641      	mov	r1, r8
 8006802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006806:	4641      	mov	r1, r8
 8006808:	008a      	lsls	r2, r1, #2
 800680a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800680e:	f7f9 fd3f 	bl	8000290 <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <UART_SetConfig+0x4e4>)
 8006818:	fba3 1302 	umull	r1, r3, r3, r2
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	2164      	movs	r1, #100	@ 0x64
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	3332      	adds	r3, #50	@ 0x32
 800682a:	4a08      	ldr	r2, [pc, #32]	@ (800684c <UART_SetConfig+0x4e4>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f003 020f 	and.w	r2, r3, #15
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4422      	add	r2, r4
 800683e:	609a      	str	r2, [r3, #8]
}
 8006840:	bf00      	nop
 8006842:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006846:	46bd      	mov	sp, r7
 8006848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800684c:	51eb851f 	.word	0x51eb851f

08006850 <_strtol_l.isra.0>:
 8006850:	2b24      	cmp	r3, #36	@ 0x24
 8006852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006856:	4686      	mov	lr, r0
 8006858:	4690      	mov	r8, r2
 800685a:	d801      	bhi.n	8006860 <_strtol_l.isra.0+0x10>
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <_strtol_l.isra.0+0x1e>
 8006860:	f000 f8c0 	bl	80069e4 <__errno>
 8006864:	2316      	movs	r3, #22
 8006866:	6003      	str	r3, [r0, #0]
 8006868:	2000      	movs	r0, #0
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	4834      	ldr	r0, [pc, #208]	@ (8006940 <_strtol_l.isra.0+0xf0>)
 8006870:	460d      	mov	r5, r1
 8006872:	462a      	mov	r2, r5
 8006874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006878:	5d06      	ldrb	r6, [r0, r4]
 800687a:	f016 0608 	ands.w	r6, r6, #8
 800687e:	d1f8      	bne.n	8006872 <_strtol_l.isra.0+0x22>
 8006880:	2c2d      	cmp	r4, #45	@ 0x2d
 8006882:	d110      	bne.n	80068a6 <_strtol_l.isra.0+0x56>
 8006884:	782c      	ldrb	r4, [r5, #0]
 8006886:	2601      	movs	r6, #1
 8006888:	1c95      	adds	r5, r2, #2
 800688a:	f033 0210 	bics.w	r2, r3, #16
 800688e:	d115      	bne.n	80068bc <_strtol_l.isra.0+0x6c>
 8006890:	2c30      	cmp	r4, #48	@ 0x30
 8006892:	d10d      	bne.n	80068b0 <_strtol_l.isra.0+0x60>
 8006894:	782a      	ldrb	r2, [r5, #0]
 8006896:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800689a:	2a58      	cmp	r2, #88	@ 0x58
 800689c:	d108      	bne.n	80068b0 <_strtol_l.isra.0+0x60>
 800689e:	786c      	ldrb	r4, [r5, #1]
 80068a0:	3502      	adds	r5, #2
 80068a2:	2310      	movs	r3, #16
 80068a4:	e00a      	b.n	80068bc <_strtol_l.isra.0+0x6c>
 80068a6:	2c2b      	cmp	r4, #43	@ 0x2b
 80068a8:	bf04      	itt	eq
 80068aa:	782c      	ldrbeq	r4, [r5, #0]
 80068ac:	1c95      	addeq	r5, r2, #2
 80068ae:	e7ec      	b.n	800688a <_strtol_l.isra.0+0x3a>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f6      	bne.n	80068a2 <_strtol_l.isra.0+0x52>
 80068b4:	2c30      	cmp	r4, #48	@ 0x30
 80068b6:	bf14      	ite	ne
 80068b8:	230a      	movne	r3, #10
 80068ba:	2308      	moveq	r3, #8
 80068bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80068c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068c4:	2200      	movs	r2, #0
 80068c6:	fbbc f9f3 	udiv	r9, ip, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80068d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80068d4:	2f09      	cmp	r7, #9
 80068d6:	d80f      	bhi.n	80068f8 <_strtol_l.isra.0+0xa8>
 80068d8:	463c      	mov	r4, r7
 80068da:	42a3      	cmp	r3, r4
 80068dc:	dd1b      	ble.n	8006916 <_strtol_l.isra.0+0xc6>
 80068de:	1c57      	adds	r7, r2, #1
 80068e0:	d007      	beq.n	80068f2 <_strtol_l.isra.0+0xa2>
 80068e2:	4581      	cmp	r9, r0
 80068e4:	d314      	bcc.n	8006910 <_strtol_l.isra.0+0xc0>
 80068e6:	d101      	bne.n	80068ec <_strtol_l.isra.0+0x9c>
 80068e8:	45a2      	cmp	sl, r4
 80068ea:	db11      	blt.n	8006910 <_strtol_l.isra.0+0xc0>
 80068ec:	fb00 4003 	mla	r0, r0, r3, r4
 80068f0:	2201      	movs	r2, #1
 80068f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068f6:	e7eb      	b.n	80068d0 <_strtol_l.isra.0+0x80>
 80068f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80068fc:	2f19      	cmp	r7, #25
 80068fe:	d801      	bhi.n	8006904 <_strtol_l.isra.0+0xb4>
 8006900:	3c37      	subs	r4, #55	@ 0x37
 8006902:	e7ea      	b.n	80068da <_strtol_l.isra.0+0x8a>
 8006904:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006908:	2f19      	cmp	r7, #25
 800690a:	d804      	bhi.n	8006916 <_strtol_l.isra.0+0xc6>
 800690c:	3c57      	subs	r4, #87	@ 0x57
 800690e:	e7e4      	b.n	80068da <_strtol_l.isra.0+0x8a>
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	e7ed      	b.n	80068f2 <_strtol_l.isra.0+0xa2>
 8006916:	1c53      	adds	r3, r2, #1
 8006918:	d108      	bne.n	800692c <_strtol_l.isra.0+0xdc>
 800691a:	2322      	movs	r3, #34	@ 0x22
 800691c:	f8ce 3000 	str.w	r3, [lr]
 8006920:	4660      	mov	r0, ip
 8006922:	f1b8 0f00 	cmp.w	r8, #0
 8006926:	d0a0      	beq.n	800686a <_strtol_l.isra.0+0x1a>
 8006928:	1e69      	subs	r1, r5, #1
 800692a:	e006      	b.n	800693a <_strtol_l.isra.0+0xea>
 800692c:	b106      	cbz	r6, 8006930 <_strtol_l.isra.0+0xe0>
 800692e:	4240      	negs	r0, r0
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	d099      	beq.n	800686a <_strtol_l.isra.0+0x1a>
 8006936:	2a00      	cmp	r2, #0
 8006938:	d1f6      	bne.n	8006928 <_strtol_l.isra.0+0xd8>
 800693a:	f8c8 1000 	str.w	r1, [r8]
 800693e:	e794      	b.n	800686a <_strtol_l.isra.0+0x1a>
 8006940:	08007555 	.word	0x08007555

08006944 <strtol>:
 8006944:	4613      	mov	r3, r2
 8006946:	460a      	mov	r2, r1
 8006948:	4601      	mov	r1, r0
 800694a:	4802      	ldr	r0, [pc, #8]	@ (8006954 <strtol+0x10>)
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f7ff bf7f 	b.w	8006850 <_strtol_l.isra.0>
 8006952:	bf00      	nop
 8006954:	20000030 	.word	0x20000030

08006958 <toupper>:
 8006958:	4b03      	ldr	r3, [pc, #12]	@ (8006968 <toupper+0x10>)
 800695a:	5c1b      	ldrb	r3, [r3, r0]
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	2b02      	cmp	r3, #2
 8006962:	bf08      	it	eq
 8006964:	3820      	subeq	r0, #32
 8006966:	4770      	bx	lr
 8006968:	08007555 	.word	0x08007555

0800696c <siprintf>:
 800696c:	b40e      	push	{r1, r2, r3}
 800696e:	b510      	push	{r4, lr}
 8006970:	b09d      	sub	sp, #116	@ 0x74
 8006972:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006974:	9002      	str	r0, [sp, #8]
 8006976:	9006      	str	r0, [sp, #24]
 8006978:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800697c:	480a      	ldr	r0, [pc, #40]	@ (80069a8 <siprintf+0x3c>)
 800697e:	9107      	str	r1, [sp, #28]
 8006980:	9104      	str	r1, [sp, #16]
 8006982:	490a      	ldr	r1, [pc, #40]	@ (80069ac <siprintf+0x40>)
 8006984:	f853 2b04 	ldr.w	r2, [r3], #4
 8006988:	9105      	str	r1, [sp, #20]
 800698a:	2400      	movs	r4, #0
 800698c:	a902      	add	r1, sp, #8
 800698e:	6800      	ldr	r0, [r0, #0]
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006994:	f000 f9b4 	bl	8006d00 <_svfiprintf_r>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	701c      	strb	r4, [r3, #0]
 800699c:	b01d      	add	sp, #116	@ 0x74
 800699e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a2:	b003      	add	sp, #12
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000030 	.word	0x20000030
 80069ac:	ffff0208 	.word	0xffff0208

080069b0 <memset>:
 80069b0:	4402      	add	r2, r0
 80069b2:	4603      	mov	r3, r0
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d100      	bne.n	80069ba <memset+0xa>
 80069b8:	4770      	bx	lr
 80069ba:	f803 1b01 	strb.w	r1, [r3], #1
 80069be:	e7f9      	b.n	80069b4 <memset+0x4>

080069c0 <strncmp>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	b16a      	cbz	r2, 80069e0 <strncmp+0x20>
 80069c4:	3901      	subs	r1, #1
 80069c6:	1884      	adds	r4, r0, r2
 80069c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d103      	bne.n	80069dc <strncmp+0x1c>
 80069d4:	42a0      	cmp	r0, r4
 80069d6:	d001      	beq.n	80069dc <strncmp+0x1c>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d1f5      	bne.n	80069c8 <strncmp+0x8>
 80069dc:	1ad0      	subs	r0, r2, r3
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	4610      	mov	r0, r2
 80069e2:	e7fc      	b.n	80069de <strncmp+0x1e>

080069e4 <__errno>:
 80069e4:	4b01      	ldr	r3, [pc, #4]	@ (80069ec <__errno+0x8>)
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000030 	.word	0x20000030

080069f0 <__libc_init_array>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006a28 <__libc_init_array+0x38>)
 80069f4:	4c0d      	ldr	r4, [pc, #52]	@ (8006a2c <__libc_init_array+0x3c>)
 80069f6:	1b64      	subs	r4, r4, r5
 80069f8:	10a4      	asrs	r4, r4, #2
 80069fa:	2600      	movs	r6, #0
 80069fc:	42a6      	cmp	r6, r4
 80069fe:	d109      	bne.n	8006a14 <__libc_init_array+0x24>
 8006a00:	4d0b      	ldr	r5, [pc, #44]	@ (8006a30 <__libc_init_array+0x40>)
 8006a02:	4c0c      	ldr	r4, [pc, #48]	@ (8006a34 <__libc_init_array+0x44>)
 8006a04:	f000 fc64 	bl	80072d0 <_init>
 8006a08:	1b64      	subs	r4, r4, r5
 8006a0a:	10a4      	asrs	r4, r4, #2
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	42a6      	cmp	r6, r4
 8006a10:	d105      	bne.n	8006a1e <__libc_init_array+0x2e>
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a18:	4798      	blx	r3
 8006a1a:	3601      	adds	r6, #1
 8006a1c:	e7ee      	b.n	80069fc <__libc_init_array+0xc>
 8006a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a22:	4798      	blx	r3
 8006a24:	3601      	adds	r6, #1
 8006a26:	e7f2      	b.n	8006a0e <__libc_init_array+0x1e>
 8006a28:	08007690 	.word	0x08007690
 8006a2c:	08007690 	.word	0x08007690
 8006a30:	08007690 	.word	0x08007690
 8006a34:	08007698 	.word	0x08007698

08006a38 <__retarget_lock_acquire_recursive>:
 8006a38:	4770      	bx	lr

08006a3a <__retarget_lock_release_recursive>:
 8006a3a:	4770      	bx	lr

08006a3c <memcpy>:
 8006a3c:	440a      	add	r2, r1
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a44:	d100      	bne.n	8006a48 <memcpy+0xc>
 8006a46:	4770      	bx	lr
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a52:	4291      	cmp	r1, r2
 8006a54:	d1f9      	bne.n	8006a4a <memcpy+0xe>
 8006a56:	bd10      	pop	{r4, pc}

08006a58 <_free_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d041      	beq.n	8006ae4 <_free_r+0x8c>
 8006a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a64:	1f0c      	subs	r4, r1, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfb8      	it	lt
 8006a6a:	18e4      	addlt	r4, r4, r3
 8006a6c:	f000 f8e0 	bl	8006c30 <__malloc_lock>
 8006a70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <_free_r+0x90>)
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	b933      	cbnz	r3, 8006a84 <_free_r+0x2c>
 8006a76:	6063      	str	r3, [r4, #4]
 8006a78:	6014      	str	r4, [r2, #0]
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a80:	f000 b8dc 	b.w	8006c3c <__malloc_unlock>
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d908      	bls.n	8006a9a <_free_r+0x42>
 8006a88:	6820      	ldr	r0, [r4, #0]
 8006a8a:	1821      	adds	r1, r4, r0
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf01      	itttt	eq
 8006a90:	6819      	ldreq	r1, [r3, #0]
 8006a92:	685b      	ldreq	r3, [r3, #4]
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	e7ed      	b.n	8006a76 <_free_r+0x1e>
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b10b      	cbz	r3, 8006aa4 <_free_r+0x4c>
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d9fa      	bls.n	8006a9a <_free_r+0x42>
 8006aa4:	6811      	ldr	r1, [r2, #0]
 8006aa6:	1850      	adds	r0, r2, r1
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d10b      	bne.n	8006ac4 <_free_r+0x6c>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	4401      	add	r1, r0
 8006ab0:	1850      	adds	r0, r2, r1
 8006ab2:	4283      	cmp	r3, r0
 8006ab4:	6011      	str	r1, [r2, #0]
 8006ab6:	d1e0      	bne.n	8006a7a <_free_r+0x22>
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	6053      	str	r3, [r2, #4]
 8006abe:	4408      	add	r0, r1
 8006ac0:	6010      	str	r0, [r2, #0]
 8006ac2:	e7da      	b.n	8006a7a <_free_r+0x22>
 8006ac4:	d902      	bls.n	8006acc <_free_r+0x74>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	e7d6      	b.n	8006a7a <_free_r+0x22>
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	1821      	adds	r1, r4, r0
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf04      	itt	eq
 8006ad4:	6819      	ldreq	r1, [r3, #0]
 8006ad6:	685b      	ldreq	r3, [r3, #4]
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	bf04      	itt	eq
 8006adc:	1809      	addeq	r1, r1, r0
 8006ade:	6021      	streq	r1, [r4, #0]
 8006ae0:	6054      	str	r4, [r2, #4]
 8006ae2:	e7ca      	b.n	8006a7a <_free_r+0x22>
 8006ae4:	bd38      	pop	{r3, r4, r5, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000574 	.word	0x20000574

08006aec <sbrk_aligned>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4e0f      	ldr	r6, [pc, #60]	@ (8006b2c <sbrk_aligned+0x40>)
 8006af0:	460c      	mov	r4, r1
 8006af2:	6831      	ldr	r1, [r6, #0]
 8006af4:	4605      	mov	r5, r0
 8006af6:	b911      	cbnz	r1, 8006afe <sbrk_aligned+0x12>
 8006af8:	f000 fba4 	bl	8007244 <_sbrk_r>
 8006afc:	6030      	str	r0, [r6, #0]
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 fb9f 	bl	8007244 <_sbrk_r>
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	d103      	bne.n	8006b12 <sbrk_aligned+0x26>
 8006b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b0e:	4620      	mov	r0, r4
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	1cc4      	adds	r4, r0, #3
 8006b14:	f024 0403 	bic.w	r4, r4, #3
 8006b18:	42a0      	cmp	r0, r4
 8006b1a:	d0f8      	beq.n	8006b0e <sbrk_aligned+0x22>
 8006b1c:	1a21      	subs	r1, r4, r0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fb90 	bl	8007244 <_sbrk_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d1f2      	bne.n	8006b0e <sbrk_aligned+0x22>
 8006b28:	e7ef      	b.n	8006b0a <sbrk_aligned+0x1e>
 8006b2a:	bf00      	nop
 8006b2c:	20000570 	.word	0x20000570

08006b30 <_malloc_r>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	1ccd      	adds	r5, r1, #3
 8006b36:	f025 0503 	bic.w	r5, r5, #3
 8006b3a:	3508      	adds	r5, #8
 8006b3c:	2d0c      	cmp	r5, #12
 8006b3e:	bf38      	it	cc
 8006b40:	250c      	movcc	r5, #12
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	4606      	mov	r6, r0
 8006b46:	db01      	blt.n	8006b4c <_malloc_r+0x1c>
 8006b48:	42a9      	cmp	r1, r5
 8006b4a:	d904      	bls.n	8006b56 <_malloc_r+0x26>
 8006b4c:	230c      	movs	r3, #12
 8006b4e:	6033      	str	r3, [r6, #0]
 8006b50:	2000      	movs	r0, #0
 8006b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c2c <_malloc_r+0xfc>
 8006b5a:	f000 f869 	bl	8006c30 <__malloc_lock>
 8006b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b62:	461c      	mov	r4, r3
 8006b64:	bb44      	cbnz	r4, 8006bb8 <_malloc_r+0x88>
 8006b66:	4629      	mov	r1, r5
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff ffbf 	bl	8006aec <sbrk_aligned>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	4604      	mov	r4, r0
 8006b72:	d158      	bne.n	8006c26 <_malloc_r+0xf6>
 8006b74:	f8d8 4000 	ldr.w	r4, [r8]
 8006b78:	4627      	mov	r7, r4
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	d143      	bne.n	8006c06 <_malloc_r+0xd6>
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	d04b      	beq.n	8006c1a <_malloc_r+0xea>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	4639      	mov	r1, r7
 8006b86:	4630      	mov	r0, r6
 8006b88:	eb04 0903 	add.w	r9, r4, r3
 8006b8c:	f000 fb5a 	bl	8007244 <_sbrk_r>
 8006b90:	4581      	cmp	r9, r0
 8006b92:	d142      	bne.n	8006c1a <_malloc_r+0xea>
 8006b94:	6821      	ldr	r1, [r4, #0]
 8006b96:	1a6d      	subs	r5, r5, r1
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ffa6 	bl	8006aec <sbrk_aligned>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d03a      	beq.n	8006c1a <_malloc_r+0xea>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	442b      	add	r3, r5
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	bb62      	cbnz	r2, 8006c0c <_malloc_r+0xdc>
 8006bb2:	f8c8 7000 	str.w	r7, [r8]
 8006bb6:	e00f      	b.n	8006bd8 <_malloc_r+0xa8>
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	1b52      	subs	r2, r2, r5
 8006bbc:	d420      	bmi.n	8006c00 <_malloc_r+0xd0>
 8006bbe:	2a0b      	cmp	r2, #11
 8006bc0:	d917      	bls.n	8006bf2 <_malloc_r+0xc2>
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	bf18      	it	ne
 8006bca:	6059      	strne	r1, [r3, #4]
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	bf08      	it	eq
 8006bd0:	f8c8 1000 	streq.w	r1, [r8]
 8006bd4:	5162      	str	r2, [r4, r5]
 8006bd6:	604b      	str	r3, [r1, #4]
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f000 f82f 	bl	8006c3c <__malloc_unlock>
 8006bde:	f104 000b 	add.w	r0, r4, #11
 8006be2:	1d23      	adds	r3, r4, #4
 8006be4:	f020 0007 	bic.w	r0, r0, #7
 8006be8:	1ac2      	subs	r2, r0, r3
 8006bea:	bf1c      	itt	ne
 8006bec:	1a1b      	subne	r3, r3, r0
 8006bee:	50a3      	strne	r3, [r4, r2]
 8006bf0:	e7af      	b.n	8006b52 <_malloc_r+0x22>
 8006bf2:	6862      	ldr	r2, [r4, #4]
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	bf0c      	ite	eq
 8006bf8:	f8c8 2000 	streq.w	r2, [r8]
 8006bfc:	605a      	strne	r2, [r3, #4]
 8006bfe:	e7eb      	b.n	8006bd8 <_malloc_r+0xa8>
 8006c00:	4623      	mov	r3, r4
 8006c02:	6864      	ldr	r4, [r4, #4]
 8006c04:	e7ae      	b.n	8006b64 <_malloc_r+0x34>
 8006c06:	463c      	mov	r4, r7
 8006c08:	687f      	ldr	r7, [r7, #4]
 8006c0a:	e7b6      	b.n	8006b7a <_malloc_r+0x4a>
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d1fb      	bne.n	8006c0c <_malloc_r+0xdc>
 8006c14:	2300      	movs	r3, #0
 8006c16:	6053      	str	r3, [r2, #4]
 8006c18:	e7de      	b.n	8006bd8 <_malloc_r+0xa8>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	6033      	str	r3, [r6, #0]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 f80c 	bl	8006c3c <__malloc_unlock>
 8006c24:	e794      	b.n	8006b50 <_malloc_r+0x20>
 8006c26:	6005      	str	r5, [r0, #0]
 8006c28:	e7d6      	b.n	8006bd8 <_malloc_r+0xa8>
 8006c2a:	bf00      	nop
 8006c2c:	20000574 	.word	0x20000574

08006c30 <__malloc_lock>:
 8006c30:	4801      	ldr	r0, [pc, #4]	@ (8006c38 <__malloc_lock+0x8>)
 8006c32:	f7ff bf01 	b.w	8006a38 <__retarget_lock_acquire_recursive>
 8006c36:	bf00      	nop
 8006c38:	2000056c 	.word	0x2000056c

08006c3c <__malloc_unlock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	@ (8006c44 <__malloc_unlock+0x8>)
 8006c3e:	f7ff befc 	b.w	8006a3a <__retarget_lock_release_recursive>
 8006c42:	bf00      	nop
 8006c44:	2000056c 	.word	0x2000056c

08006c48 <__ssputs_r>:
 8006c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	688e      	ldr	r6, [r1, #8]
 8006c4e:	461f      	mov	r7, r3
 8006c50:	42be      	cmp	r6, r7
 8006c52:	680b      	ldr	r3, [r1, #0]
 8006c54:	4682      	mov	sl, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4690      	mov	r8, r2
 8006c5a:	d82d      	bhi.n	8006cb8 <__ssputs_r+0x70>
 8006c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c64:	d026      	beq.n	8006cb4 <__ssputs_r+0x6c>
 8006c66:	6965      	ldr	r5, [r4, #20]
 8006c68:	6909      	ldr	r1, [r1, #16]
 8006c6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c6e:	eba3 0901 	sub.w	r9, r3, r1
 8006c72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c76:	1c7b      	adds	r3, r7, #1
 8006c78:	444b      	add	r3, r9
 8006c7a:	106d      	asrs	r5, r5, #1
 8006c7c:	429d      	cmp	r5, r3
 8006c7e:	bf38      	it	cc
 8006c80:	461d      	movcc	r5, r3
 8006c82:	0553      	lsls	r3, r2, #21
 8006c84:	d527      	bpl.n	8006cd6 <__ssputs_r+0x8e>
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7ff ff52 	bl	8006b30 <_malloc_r>
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	b360      	cbz	r0, 8006cea <__ssputs_r+0xa2>
 8006c90:	6921      	ldr	r1, [r4, #16]
 8006c92:	464a      	mov	r2, r9
 8006c94:	f7ff fed2 	bl	8006a3c <memcpy>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca2:	81a3      	strh	r3, [r4, #12]
 8006ca4:	6126      	str	r6, [r4, #16]
 8006ca6:	6165      	str	r5, [r4, #20]
 8006ca8:	444e      	add	r6, r9
 8006caa:	eba5 0509 	sub.w	r5, r5, r9
 8006cae:	6026      	str	r6, [r4, #0]
 8006cb0:	60a5      	str	r5, [r4, #8]
 8006cb2:	463e      	mov	r6, r7
 8006cb4:	42be      	cmp	r6, r7
 8006cb6:	d900      	bls.n	8006cba <__ssputs_r+0x72>
 8006cb8:	463e      	mov	r6, r7
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	f000 faa6 	bl	8007210 <memmove>
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	1b9b      	subs	r3, r3, r6
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4433      	add	r3, r6
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd6:	462a      	mov	r2, r5
 8006cd8:	f000 fac4 	bl	8007264 <_realloc_r>
 8006cdc:	4606      	mov	r6, r0
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d1e0      	bne.n	8006ca4 <__ssputs_r+0x5c>
 8006ce2:	6921      	ldr	r1, [r4, #16]
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	f7ff feb7 	bl	8006a58 <_free_r>
 8006cea:	230c      	movs	r3, #12
 8006cec:	f8ca 3000 	str.w	r3, [sl]
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	e7e9      	b.n	8006cd2 <__ssputs_r+0x8a>
	...

08006d00 <_svfiprintf_r>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	4698      	mov	r8, r3
 8006d06:	898b      	ldrh	r3, [r1, #12]
 8006d08:	061b      	lsls	r3, r3, #24
 8006d0a:	b09d      	sub	sp, #116	@ 0x74
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	460d      	mov	r5, r1
 8006d10:	4614      	mov	r4, r2
 8006d12:	d510      	bpl.n	8006d36 <_svfiprintf_r+0x36>
 8006d14:	690b      	ldr	r3, [r1, #16]
 8006d16:	b973      	cbnz	r3, 8006d36 <_svfiprintf_r+0x36>
 8006d18:	2140      	movs	r1, #64	@ 0x40
 8006d1a:	f7ff ff09 	bl	8006b30 <_malloc_r>
 8006d1e:	6028      	str	r0, [r5, #0]
 8006d20:	6128      	str	r0, [r5, #16]
 8006d22:	b930      	cbnz	r0, 8006d32 <_svfiprintf_r+0x32>
 8006d24:	230c      	movs	r3, #12
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	b01d      	add	sp, #116	@ 0x74
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d32:	2340      	movs	r3, #64	@ 0x40
 8006d34:	616b      	str	r3, [r5, #20]
 8006d36:	2300      	movs	r3, #0
 8006d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d3a:	2320      	movs	r3, #32
 8006d3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d44:	2330      	movs	r3, #48	@ 0x30
 8006d46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ee4 <_svfiprintf_r+0x1e4>
 8006d4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d4e:	f04f 0901 	mov.w	r9, #1
 8006d52:	4623      	mov	r3, r4
 8006d54:	469a      	mov	sl, r3
 8006d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d5a:	b10a      	cbz	r2, 8006d60 <_svfiprintf_r+0x60>
 8006d5c:	2a25      	cmp	r2, #37	@ 0x25
 8006d5e:	d1f9      	bne.n	8006d54 <_svfiprintf_r+0x54>
 8006d60:	ebba 0b04 	subs.w	fp, sl, r4
 8006d64:	d00b      	beq.n	8006d7e <_svfiprintf_r+0x7e>
 8006d66:	465b      	mov	r3, fp
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7ff ff6b 	bl	8006c48 <__ssputs_r>
 8006d72:	3001      	adds	r0, #1
 8006d74:	f000 80a7 	beq.w	8006ec6 <_svfiprintf_r+0x1c6>
 8006d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d7a:	445a      	add	r2, fp
 8006d7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 809f 	beq.w	8006ec6 <_svfiprintf_r+0x1c6>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d92:	f10a 0a01 	add.w	sl, sl, #1
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	9307      	str	r3, [sp, #28]
 8006d9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006da0:	4654      	mov	r4, sl
 8006da2:	2205      	movs	r2, #5
 8006da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da8:	484e      	ldr	r0, [pc, #312]	@ (8006ee4 <_svfiprintf_r+0x1e4>)
 8006daa:	f7f9 fa21 	bl	80001f0 <memchr>
 8006dae:	9a04      	ldr	r2, [sp, #16]
 8006db0:	b9d8      	cbnz	r0, 8006dea <_svfiprintf_r+0xea>
 8006db2:	06d0      	lsls	r0, r2, #27
 8006db4:	bf44      	itt	mi
 8006db6:	2320      	movmi	r3, #32
 8006db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dbc:	0711      	lsls	r1, r2, #28
 8006dbe:	bf44      	itt	mi
 8006dc0:	232b      	movmi	r3, #43	@ 0x2b
 8006dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dcc:	d015      	beq.n	8006dfa <_svfiprintf_r+0xfa>
 8006dce:	9a07      	ldr	r2, [sp, #28]
 8006dd0:	4654      	mov	r4, sl
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f04f 0c0a 	mov.w	ip, #10
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dde:	3b30      	subs	r3, #48	@ 0x30
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	d94b      	bls.n	8006e7c <_svfiprintf_r+0x17c>
 8006de4:	b1b0      	cbz	r0, 8006e14 <_svfiprintf_r+0x114>
 8006de6:	9207      	str	r2, [sp, #28]
 8006de8:	e014      	b.n	8006e14 <_svfiprintf_r+0x114>
 8006dea:	eba0 0308 	sub.w	r3, r0, r8
 8006dee:	fa09 f303 	lsl.w	r3, r9, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	46a2      	mov	sl, r4
 8006df8:	e7d2      	b.n	8006da0 <_svfiprintf_r+0xa0>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	1d19      	adds	r1, r3, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	9103      	str	r1, [sp, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bfbb      	ittet	lt
 8006e06:	425b      	neglt	r3, r3
 8006e08:	f042 0202 	orrlt.w	r2, r2, #2
 8006e0c:	9307      	strge	r3, [sp, #28]
 8006e0e:	9307      	strlt	r3, [sp, #28]
 8006e10:	bfb8      	it	lt
 8006e12:	9204      	strlt	r2, [sp, #16]
 8006e14:	7823      	ldrb	r3, [r4, #0]
 8006e16:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e18:	d10a      	bne.n	8006e30 <_svfiprintf_r+0x130>
 8006e1a:	7863      	ldrb	r3, [r4, #1]
 8006e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e1e:	d132      	bne.n	8006e86 <_svfiprintf_r+0x186>
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	9203      	str	r2, [sp, #12]
 8006e28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e2c:	3402      	adds	r4, #2
 8006e2e:	9305      	str	r3, [sp, #20]
 8006e30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ef4 <_svfiprintf_r+0x1f4>
 8006e34:	7821      	ldrb	r1, [r4, #0]
 8006e36:	2203      	movs	r2, #3
 8006e38:	4650      	mov	r0, sl
 8006e3a:	f7f9 f9d9 	bl	80001f0 <memchr>
 8006e3e:	b138      	cbz	r0, 8006e50 <_svfiprintf_r+0x150>
 8006e40:	9b04      	ldr	r3, [sp, #16]
 8006e42:	eba0 000a 	sub.w	r0, r0, sl
 8006e46:	2240      	movs	r2, #64	@ 0x40
 8006e48:	4082      	lsls	r2, r0
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	3401      	adds	r4, #1
 8006e4e:	9304      	str	r3, [sp, #16]
 8006e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e54:	4824      	ldr	r0, [pc, #144]	@ (8006ee8 <_svfiprintf_r+0x1e8>)
 8006e56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e5a:	2206      	movs	r2, #6
 8006e5c:	f7f9 f9c8 	bl	80001f0 <memchr>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d036      	beq.n	8006ed2 <_svfiprintf_r+0x1d2>
 8006e64:	4b21      	ldr	r3, [pc, #132]	@ (8006eec <_svfiprintf_r+0x1ec>)
 8006e66:	bb1b      	cbnz	r3, 8006eb0 <_svfiprintf_r+0x1b0>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	3307      	adds	r3, #7
 8006e6c:	f023 0307 	bic.w	r3, r3, #7
 8006e70:	3308      	adds	r3, #8
 8006e72:	9303      	str	r3, [sp, #12]
 8006e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e76:	4433      	add	r3, r6
 8006e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7a:	e76a      	b.n	8006d52 <_svfiprintf_r+0x52>
 8006e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e80:	460c      	mov	r4, r1
 8006e82:	2001      	movs	r0, #1
 8006e84:	e7a8      	b.n	8006dd8 <_svfiprintf_r+0xd8>
 8006e86:	2300      	movs	r3, #0
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f04f 0c0a 	mov.w	ip, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e98:	3a30      	subs	r2, #48	@ 0x30
 8006e9a:	2a09      	cmp	r2, #9
 8006e9c:	d903      	bls.n	8006ea6 <_svfiprintf_r+0x1a6>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0c6      	beq.n	8006e30 <_svfiprintf_r+0x130>
 8006ea2:	9105      	str	r1, [sp, #20]
 8006ea4:	e7c4      	b.n	8006e30 <_svfiprintf_r+0x130>
 8006ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eaa:	4604      	mov	r4, r0
 8006eac:	2301      	movs	r3, #1
 8006eae:	e7f0      	b.n	8006e92 <_svfiprintf_r+0x192>
 8006eb0:	ab03      	add	r3, sp, #12
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef0 <_svfiprintf_r+0x1f0>)
 8006eb8:	a904      	add	r1, sp, #16
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f3af 8000 	nop.w
 8006ec0:	1c42      	adds	r2, r0, #1
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	d1d6      	bne.n	8006e74 <_svfiprintf_r+0x174>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	065b      	lsls	r3, r3, #25
 8006eca:	f53f af2d 	bmi.w	8006d28 <_svfiprintf_r+0x28>
 8006ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ed0:	e72c      	b.n	8006d2c <_svfiprintf_r+0x2c>
 8006ed2:	ab03      	add	r3, sp, #12
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	462a      	mov	r2, r5
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <_svfiprintf_r+0x1f0>)
 8006eda:	a904      	add	r1, sp, #16
 8006edc:	4638      	mov	r0, r7
 8006ede:	f000 f879 	bl	8006fd4 <_printf_i>
 8006ee2:	e7ed      	b.n	8006ec0 <_svfiprintf_r+0x1c0>
 8006ee4:	08007655 	.word	0x08007655
 8006ee8:	0800765f 	.word	0x0800765f
 8006eec:	00000000 	.word	0x00000000
 8006ef0:	08006c49 	.word	0x08006c49
 8006ef4:	0800765b 	.word	0x0800765b

08006ef8 <_printf_common>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	4616      	mov	r6, r2
 8006efe:	4698      	mov	r8, r3
 8006f00:	688a      	ldr	r2, [r1, #8]
 8006f02:	690b      	ldr	r3, [r1, #16]
 8006f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bfb8      	it	lt
 8006f0c:	4613      	movlt	r3, r2
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f14:	4607      	mov	r7, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b10a      	cbz	r2, 8006f1e <_printf_common+0x26>
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	6033      	str	r3, [r6, #0]
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	0699      	lsls	r1, r3, #26
 8006f22:	bf42      	ittt	mi
 8006f24:	6833      	ldrmi	r3, [r6, #0]
 8006f26:	3302      	addmi	r3, #2
 8006f28:	6033      	strmi	r3, [r6, #0]
 8006f2a:	6825      	ldr	r5, [r4, #0]
 8006f2c:	f015 0506 	ands.w	r5, r5, #6
 8006f30:	d106      	bne.n	8006f40 <_printf_common+0x48>
 8006f32:	f104 0a19 	add.w	sl, r4, #25
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	6832      	ldr	r2, [r6, #0]
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dc26      	bgt.n	8006f8e <_printf_common+0x96>
 8006f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	3b00      	subs	r3, #0
 8006f48:	bf18      	it	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	0692      	lsls	r2, r2, #26
 8006f4e:	d42b      	bmi.n	8006fa8 <_printf_common+0xb0>
 8006f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f54:	4641      	mov	r1, r8
 8006f56:	4638      	mov	r0, r7
 8006f58:	47c8      	blx	r9
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d01e      	beq.n	8006f9c <_printf_common+0xa4>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	6922      	ldr	r2, [r4, #16]
 8006f62:	f003 0306 	and.w	r3, r3, #6
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	bf02      	ittt	eq
 8006f6a:	68e5      	ldreq	r5, [r4, #12]
 8006f6c:	6833      	ldreq	r3, [r6, #0]
 8006f6e:	1aed      	subeq	r5, r5, r3
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	bf0c      	ite	eq
 8006f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f78:	2500      	movne	r5, #0
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bfc4      	itt	gt
 8006f7e:	1a9b      	subgt	r3, r3, r2
 8006f80:	18ed      	addgt	r5, r5, r3
 8006f82:	2600      	movs	r6, #0
 8006f84:	341a      	adds	r4, #26
 8006f86:	42b5      	cmp	r5, r6
 8006f88:	d11a      	bne.n	8006fc0 <_printf_common+0xc8>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e008      	b.n	8006fa0 <_printf_common+0xa8>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4641      	mov	r1, r8
 8006f94:	4638      	mov	r0, r7
 8006f96:	47c8      	blx	r9
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d103      	bne.n	8006fa4 <_printf_common+0xac>
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	e7c6      	b.n	8006f36 <_printf_common+0x3e>
 8006fa8:	18e1      	adds	r1, r4, r3
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	2030      	movs	r0, #48	@ 0x30
 8006fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fb2:	4422      	add	r2, r4
 8006fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	e7c7      	b.n	8006f50 <_printf_common+0x58>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c8      	blx	r9
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d0e6      	beq.n	8006f9c <_printf_common+0xa4>
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7d9      	b.n	8006f86 <_printf_common+0x8e>
	...

08006fd4 <_printf_i>:
 8006fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	7e0f      	ldrb	r7, [r1, #24]
 8006fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fdc:	2f78      	cmp	r7, #120	@ 0x78
 8006fde:	4691      	mov	r9, r2
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fea:	d807      	bhi.n	8006ffc <_printf_i+0x28>
 8006fec:	2f62      	cmp	r7, #98	@ 0x62
 8006fee:	d80a      	bhi.n	8007006 <_printf_i+0x32>
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	f000 80d1 	beq.w	8007198 <_printf_i+0x1c4>
 8006ff6:	2f58      	cmp	r7, #88	@ 0x58
 8006ff8:	f000 80b8 	beq.w	800716c <_printf_i+0x198>
 8006ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007004:	e03a      	b.n	800707c <_printf_i+0xa8>
 8007006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800700a:	2b15      	cmp	r3, #21
 800700c:	d8f6      	bhi.n	8006ffc <_printf_i+0x28>
 800700e:	a101      	add	r1, pc, #4	@ (adr r1, 8007014 <_printf_i+0x40>)
 8007010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007014:	0800706d 	.word	0x0800706d
 8007018:	08007081 	.word	0x08007081
 800701c:	08006ffd 	.word	0x08006ffd
 8007020:	08006ffd 	.word	0x08006ffd
 8007024:	08006ffd 	.word	0x08006ffd
 8007028:	08006ffd 	.word	0x08006ffd
 800702c:	08007081 	.word	0x08007081
 8007030:	08006ffd 	.word	0x08006ffd
 8007034:	08006ffd 	.word	0x08006ffd
 8007038:	08006ffd 	.word	0x08006ffd
 800703c:	08006ffd 	.word	0x08006ffd
 8007040:	0800717f 	.word	0x0800717f
 8007044:	080070ab 	.word	0x080070ab
 8007048:	08007139 	.word	0x08007139
 800704c:	08006ffd 	.word	0x08006ffd
 8007050:	08006ffd 	.word	0x08006ffd
 8007054:	080071a1 	.word	0x080071a1
 8007058:	08006ffd 	.word	0x08006ffd
 800705c:	080070ab 	.word	0x080070ab
 8007060:	08006ffd 	.word	0x08006ffd
 8007064:	08006ffd 	.word	0x08006ffd
 8007068:	08007141 	.word	0x08007141
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	1d1a      	adds	r2, r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6032      	str	r2, [r6, #0]
 8007074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800707c:	2301      	movs	r3, #1
 800707e:	e09c      	b.n	80071ba <_printf_i+0x1e6>
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	6031      	str	r1, [r6, #0]
 8007088:	0606      	lsls	r6, r0, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xbc>
 800708c:	681d      	ldr	r5, [r3, #0]
 800708e:	e003      	b.n	8007098 <_printf_i+0xc4>
 8007090:	0645      	lsls	r5, r0, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xb8>
 8007094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007098:	2d00      	cmp	r5, #0
 800709a:	da03      	bge.n	80070a4 <_printf_i+0xd0>
 800709c:	232d      	movs	r3, #45	@ 0x2d
 800709e:	426d      	negs	r5, r5
 80070a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070a4:	4858      	ldr	r0, [pc, #352]	@ (8007208 <_printf_i+0x234>)
 80070a6:	230a      	movs	r3, #10
 80070a8:	e011      	b.n	80070ce <_printf_i+0xfa>
 80070aa:	6821      	ldr	r1, [r4, #0]
 80070ac:	6833      	ldr	r3, [r6, #0]
 80070ae:	0608      	lsls	r0, r1, #24
 80070b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80070b4:	d402      	bmi.n	80070bc <_printf_i+0xe8>
 80070b6:	0649      	lsls	r1, r1, #25
 80070b8:	bf48      	it	mi
 80070ba:	b2ad      	uxthmi	r5, r5
 80070bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80070be:	4852      	ldr	r0, [pc, #328]	@ (8007208 <_printf_i+0x234>)
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	bf14      	ite	ne
 80070c4:	230a      	movne	r3, #10
 80070c6:	2308      	moveq	r3, #8
 80070c8:	2100      	movs	r1, #0
 80070ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070ce:	6866      	ldr	r6, [r4, #4]
 80070d0:	60a6      	str	r6, [r4, #8]
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	db05      	blt.n	80070e2 <_printf_i+0x10e>
 80070d6:	6821      	ldr	r1, [r4, #0]
 80070d8:	432e      	orrs	r6, r5
 80070da:	f021 0104 	bic.w	r1, r1, #4
 80070de:	6021      	str	r1, [r4, #0]
 80070e0:	d04b      	beq.n	800717a <_printf_i+0x1a6>
 80070e2:	4616      	mov	r6, r2
 80070e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80070e8:	fb03 5711 	mls	r7, r3, r1, r5
 80070ec:	5dc7      	ldrb	r7, [r0, r7]
 80070ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070f2:	462f      	mov	r7, r5
 80070f4:	42bb      	cmp	r3, r7
 80070f6:	460d      	mov	r5, r1
 80070f8:	d9f4      	bls.n	80070e4 <_printf_i+0x110>
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d10b      	bne.n	8007116 <_printf_i+0x142>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	07df      	lsls	r7, r3, #31
 8007102:	d508      	bpl.n	8007116 <_printf_i+0x142>
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	6861      	ldr	r1, [r4, #4]
 8007108:	4299      	cmp	r1, r3
 800710a:	bfde      	ittt	le
 800710c:	2330      	movle	r3, #48	@ 0x30
 800710e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007112:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007116:	1b92      	subs	r2, r2, r6
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	f8cd a000 	str.w	sl, [sp]
 800711e:	464b      	mov	r3, r9
 8007120:	aa03      	add	r2, sp, #12
 8007122:	4621      	mov	r1, r4
 8007124:	4640      	mov	r0, r8
 8007126:	f7ff fee7 	bl	8006ef8 <_printf_common>
 800712a:	3001      	adds	r0, #1
 800712c:	d14a      	bne.n	80071c4 <_printf_i+0x1f0>
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	b004      	add	sp, #16
 8007134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	f043 0320 	orr.w	r3, r3, #32
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	4832      	ldr	r0, [pc, #200]	@ (800720c <_printf_i+0x238>)
 8007142:	2778      	movs	r7, #120	@ 0x78
 8007144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	6831      	ldr	r1, [r6, #0]
 800714c:	061f      	lsls	r7, r3, #24
 800714e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007152:	d402      	bmi.n	800715a <_printf_i+0x186>
 8007154:	065f      	lsls	r7, r3, #25
 8007156:	bf48      	it	mi
 8007158:	b2ad      	uxthmi	r5, r5
 800715a:	6031      	str	r1, [r6, #0]
 800715c:	07d9      	lsls	r1, r3, #31
 800715e:	bf44      	itt	mi
 8007160:	f043 0320 	orrmi.w	r3, r3, #32
 8007164:	6023      	strmi	r3, [r4, #0]
 8007166:	b11d      	cbz	r5, 8007170 <_printf_i+0x19c>
 8007168:	2310      	movs	r3, #16
 800716a:	e7ad      	b.n	80070c8 <_printf_i+0xf4>
 800716c:	4826      	ldr	r0, [pc, #152]	@ (8007208 <_printf_i+0x234>)
 800716e:	e7e9      	b.n	8007144 <_printf_i+0x170>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	f023 0320 	bic.w	r3, r3, #32
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	e7f6      	b.n	8007168 <_printf_i+0x194>
 800717a:	4616      	mov	r6, r2
 800717c:	e7bd      	b.n	80070fa <_printf_i+0x126>
 800717e:	6833      	ldr	r3, [r6, #0]
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	6961      	ldr	r1, [r4, #20]
 8007184:	1d18      	adds	r0, r3, #4
 8007186:	6030      	str	r0, [r6, #0]
 8007188:	062e      	lsls	r6, r5, #24
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	d501      	bpl.n	8007192 <_printf_i+0x1be>
 800718e:	6019      	str	r1, [r3, #0]
 8007190:	e002      	b.n	8007198 <_printf_i+0x1c4>
 8007192:	0668      	lsls	r0, r5, #25
 8007194:	d5fb      	bpl.n	800718e <_printf_i+0x1ba>
 8007196:	8019      	strh	r1, [r3, #0]
 8007198:	2300      	movs	r3, #0
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	4616      	mov	r6, r2
 800719e:	e7bc      	b.n	800711a <_printf_i+0x146>
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	6032      	str	r2, [r6, #0]
 80071a6:	681e      	ldr	r6, [r3, #0]
 80071a8:	6862      	ldr	r2, [r4, #4]
 80071aa:	2100      	movs	r1, #0
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7f9 f81f 	bl	80001f0 <memchr>
 80071b2:	b108      	cbz	r0, 80071b8 <_printf_i+0x1e4>
 80071b4:	1b80      	subs	r0, r0, r6
 80071b6:	6060      	str	r0, [r4, #4]
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	2300      	movs	r3, #0
 80071be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c2:	e7aa      	b.n	800711a <_printf_i+0x146>
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	4632      	mov	r2, r6
 80071c8:	4649      	mov	r1, r9
 80071ca:	4640      	mov	r0, r8
 80071cc:	47d0      	blx	sl
 80071ce:	3001      	adds	r0, #1
 80071d0:	d0ad      	beq.n	800712e <_printf_i+0x15a>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	079b      	lsls	r3, r3, #30
 80071d6:	d413      	bmi.n	8007200 <_printf_i+0x22c>
 80071d8:	68e0      	ldr	r0, [r4, #12]
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	4298      	cmp	r0, r3
 80071de:	bfb8      	it	lt
 80071e0:	4618      	movlt	r0, r3
 80071e2:	e7a6      	b.n	8007132 <_printf_i+0x15e>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4632      	mov	r2, r6
 80071e8:	4649      	mov	r1, r9
 80071ea:	4640      	mov	r0, r8
 80071ec:	47d0      	blx	sl
 80071ee:	3001      	adds	r0, #1
 80071f0:	d09d      	beq.n	800712e <_printf_i+0x15a>
 80071f2:	3501      	adds	r5, #1
 80071f4:	68e3      	ldr	r3, [r4, #12]
 80071f6:	9903      	ldr	r1, [sp, #12]
 80071f8:	1a5b      	subs	r3, r3, r1
 80071fa:	42ab      	cmp	r3, r5
 80071fc:	dcf2      	bgt.n	80071e4 <_printf_i+0x210>
 80071fe:	e7eb      	b.n	80071d8 <_printf_i+0x204>
 8007200:	2500      	movs	r5, #0
 8007202:	f104 0619 	add.w	r6, r4, #25
 8007206:	e7f5      	b.n	80071f4 <_printf_i+0x220>
 8007208:	08007666 	.word	0x08007666
 800720c:	08007677 	.word	0x08007677

08007210 <memmove>:
 8007210:	4288      	cmp	r0, r1
 8007212:	b510      	push	{r4, lr}
 8007214:	eb01 0402 	add.w	r4, r1, r2
 8007218:	d902      	bls.n	8007220 <memmove+0x10>
 800721a:	4284      	cmp	r4, r0
 800721c:	4623      	mov	r3, r4
 800721e:	d807      	bhi.n	8007230 <memmove+0x20>
 8007220:	1e43      	subs	r3, r0, #1
 8007222:	42a1      	cmp	r1, r4
 8007224:	d008      	beq.n	8007238 <memmove+0x28>
 8007226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800722e:	e7f8      	b.n	8007222 <memmove+0x12>
 8007230:	4402      	add	r2, r0
 8007232:	4601      	mov	r1, r0
 8007234:	428a      	cmp	r2, r1
 8007236:	d100      	bne.n	800723a <memmove+0x2a>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800723e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007242:	e7f7      	b.n	8007234 <memmove+0x24>

08007244 <_sbrk_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d06      	ldr	r5, [pc, #24]	@ (8007260 <_sbrk_r+0x1c>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fb fa38 	bl	80026c4 <_sbrk>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_sbrk_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_sbrk_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20000568 	.word	0x20000568

08007264 <_realloc_r>:
 8007264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007268:	4607      	mov	r7, r0
 800726a:	4614      	mov	r4, r2
 800726c:	460d      	mov	r5, r1
 800726e:	b921      	cbnz	r1, 800727a <_realloc_r+0x16>
 8007270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007274:	4611      	mov	r1, r2
 8007276:	f7ff bc5b 	b.w	8006b30 <_malloc_r>
 800727a:	b92a      	cbnz	r2, 8007288 <_realloc_r+0x24>
 800727c:	f7ff fbec 	bl	8006a58 <_free_r>
 8007280:	4625      	mov	r5, r4
 8007282:	4628      	mov	r0, r5
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	f000 f81a 	bl	80072c0 <_malloc_usable_size_r>
 800728c:	4284      	cmp	r4, r0
 800728e:	4606      	mov	r6, r0
 8007290:	d802      	bhi.n	8007298 <_realloc_r+0x34>
 8007292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007296:	d8f4      	bhi.n	8007282 <_realloc_r+0x1e>
 8007298:	4621      	mov	r1, r4
 800729a:	4638      	mov	r0, r7
 800729c:	f7ff fc48 	bl	8006b30 <_malloc_r>
 80072a0:	4680      	mov	r8, r0
 80072a2:	b908      	cbnz	r0, 80072a8 <_realloc_r+0x44>
 80072a4:	4645      	mov	r5, r8
 80072a6:	e7ec      	b.n	8007282 <_realloc_r+0x1e>
 80072a8:	42b4      	cmp	r4, r6
 80072aa:	4622      	mov	r2, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	bf28      	it	cs
 80072b0:	4632      	movcs	r2, r6
 80072b2:	f7ff fbc3 	bl	8006a3c <memcpy>
 80072b6:	4629      	mov	r1, r5
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff fbcd 	bl	8006a58 <_free_r>
 80072be:	e7f1      	b.n	80072a4 <_realloc_r+0x40>

080072c0 <_malloc_usable_size_r>:
 80072c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c4:	1f18      	subs	r0, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfbc      	itt	lt
 80072ca:	580b      	ldrlt	r3, [r1, r0]
 80072cc:	18c0      	addlt	r0, r0, r3
 80072ce:	4770      	bx	lr

080072d0 <_init>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr

080072dc <_fini>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr
