
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007ac8  08007ac8  00008ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb4  08007eb4  00009098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007eb4  08007eb4  00008eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ebc  08007ebc  00009098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007ebc  08007ebc  00008ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ec4  08007ec4  00008ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08007ec8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000098  08007f60  00009098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08007f60  00009578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197c9  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0d  00000000  00000000  00022891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  000253a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001463  00000000  00000000  00026ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d70f  00000000  00000000  0002810b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cffb  00000000  00000000  0004581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c20  00000000  00000000  00062815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103435  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007620  00000000  00000000  00103478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ab0 	.word	0x08007ab0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08007ab0 	.word	0x08007ab0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b988 	b.w	8000df4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	468e      	mov	lr, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	4688      	mov	r8, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4617      	mov	r7, r2
 8000b10:	d962      	bls.n	8000bd8 <__udivmoddi4+0xdc>
 8000b12:	fab2 f682 	clz	r6, r2
 8000b16:	b14e      	cbz	r6, 8000b2c <__udivmoddi4+0x30>
 8000b18:	f1c6 0320 	rsb	r3, r6, #32
 8000b1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b20:	fa20 f303 	lsr.w	r3, r0, r3
 8000b24:	40b7      	lsls	r7, r6
 8000b26:	ea43 0808 	orr.w	r8, r3, r8
 8000b2a:	40b4      	lsls	r4, r6
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	fa1f fc87 	uxth.w	ip, r7
 8000b34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b42:	fb01 f20c 	mul.w	r2, r1, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b50:	f080 80ea 	bcs.w	8000d28 <__udivmoddi4+0x22c>
 8000b54:	429a      	cmp	r2, r3
 8000b56:	f240 80e7 	bls.w	8000d28 <__udivmoddi4+0x22c>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	443b      	add	r3, r7
 8000b5e:	1a9a      	subs	r2, r3, r2
 8000b60:	b2a3      	uxth	r3, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b72:	459c      	cmp	ip, r3
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0x8e>
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7c:	f080 80d6 	bcs.w	8000d2c <__udivmoddi4+0x230>
 8000b80:	459c      	cmp	ip, r3
 8000b82:	f240 80d3 	bls.w	8000d2c <__udivmoddi4+0x230>
 8000b86:	443b      	add	r3, r7
 8000b88:	3802      	subs	r0, #2
 8000b8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b8e:	eba3 030c 	sub.w	r3, r3, ip
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11d      	cbz	r5, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40f3      	lsrs	r3, r6
 8000b98:	2200      	movs	r2, #0
 8000b9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d905      	bls.n	8000bb2 <__udivmoddi4+0xb6>
 8000ba6:	b10d      	cbz	r5, 8000bac <__udivmoddi4+0xb0>
 8000ba8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bac:	2100      	movs	r1, #0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e7f5      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bb2:	fab3 f183 	clz	r1, r3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d146      	bne.n	8000c48 <__udivmoddi4+0x14c>
 8000bba:	4573      	cmp	r3, lr
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xc8>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 8105 	bhi.w	8000dce <__udivmoddi4+0x2d2>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4690      	mov	r8, r2
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d0e5      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bd6:	e7e2      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f000 8090 	beq.w	8000cfe <__udivmoddi4+0x202>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	f040 80a4 	bne.w	8000d30 <__udivmoddi4+0x234>
 8000be8:	1a8a      	subs	r2, r1, r2
 8000bea:	0c03      	lsrs	r3, r0, #16
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	b2bc      	uxth	r4, r7
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c02:	fb04 f20c 	mul.w	r2, r4, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d907      	bls.n	8000c1a <__udivmoddi4+0x11e>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x11c>
 8000c12:	429a      	cmp	r2, r3
 8000c14:	f200 80e0 	bhi.w	8000dd8 <__udivmoddi4+0x2dc>
 8000c18:	46c4      	mov	ip, r8
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c28:	fb02 f404 	mul.w	r4, r2, r4
 8000c2c:	429c      	cmp	r4, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x144>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x142>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f200 80ca 	bhi.w	8000dd2 <__udivmoddi4+0x2d6>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	1b1b      	subs	r3, r3, r4
 8000c42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c46:	e7a5      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c48:	f1c1 0620 	rsb	r6, r1, #32
 8000c4c:	408b      	lsls	r3, r1
 8000c4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c52:	431f      	orrs	r7, r3
 8000c54:	fa0e f401 	lsl.w	r4, lr, r1
 8000c58:	fa20 f306 	lsr.w	r3, r0, r6
 8000c5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c64:	4323      	orrs	r3, r4
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	fa1f fc87 	uxth.w	ip, r7
 8000c6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c72:	0c1c      	lsrs	r4, r3, #16
 8000c74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	fa02 f201 	lsl.w	r2, r2, r1
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x1a0>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c8e:	f080 809c 	bcs.w	8000dca <__udivmoddi4+0x2ce>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f240 8099 	bls.w	8000dca <__udivmoddi4+0x2ce>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	fa1f fe83 	uxth.w	lr, r3
 8000ca4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cb0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb4:	45a4      	cmp	ip, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x1ce>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cbe:	f080 8082 	bcs.w	8000dc6 <__udivmoddi4+0x2ca>
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d97f      	bls.n	8000dc6 <__udivmoddi4+0x2ca>
 8000cc6:	3b02      	subs	r3, #2
 8000cc8:	443c      	add	r4, r7
 8000cca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cd6:	4564      	cmp	r4, ip
 8000cd8:	4673      	mov	r3, lr
 8000cda:	46e1      	mov	r9, ip
 8000cdc:	d362      	bcc.n	8000da4 <__udivmoddi4+0x2a8>
 8000cde:	d05f      	beq.n	8000da0 <__udivmoddi4+0x2a4>
 8000ce0:	b15d      	cbz	r5, 8000cfa <__udivmoddi4+0x1fe>
 8000ce2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ce6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cea:	fa04 f606 	lsl.w	r6, r4, r6
 8000cee:	fa22 f301 	lsr.w	r3, r2, r1
 8000cf2:	431e      	orrs	r6, r3
 8000cf4:	40cc      	lsrs	r4, r1
 8000cf6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	e74f      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000cfe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d02:	0c01      	lsrs	r1, r0, #16
 8000d04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d08:	b280      	uxth	r0, r0
 8000d0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4638      	mov	r0, r7
 8000d12:	463c      	mov	r4, r7
 8000d14:	46b8      	mov	r8, r7
 8000d16:	46be      	mov	lr, r7
 8000d18:	2620      	movs	r6, #32
 8000d1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d1e:	eba2 0208 	sub.w	r2, r2, r8
 8000d22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d26:	e766      	b.n	8000bf6 <__udivmoddi4+0xfa>
 8000d28:	4601      	mov	r1, r0
 8000d2a:	e718      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	e72c      	b.n	8000b8a <__udivmoddi4+0x8e>
 8000d30:	f1c6 0220 	rsb	r2, r6, #32
 8000d34:	fa2e f302 	lsr.w	r3, lr, r2
 8000d38:	40b7      	lsls	r7, r6
 8000d3a:	40b1      	lsls	r1, r6
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	430a      	orrs	r2, r1
 8000d46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d4a:	b2bc      	uxth	r4, r7
 8000d4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb08 f904 	mul.w	r9, r8, r4
 8000d5a:	40b0      	lsls	r0, r6
 8000d5c:	4589      	cmp	r9, r1
 8000d5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d62:	b280      	uxth	r0, r0
 8000d64:	d93e      	bls.n	8000de4 <__udivmoddi4+0x2e8>
 8000d66:	1879      	adds	r1, r7, r1
 8000d68:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d6c:	d201      	bcs.n	8000d72 <__udivmoddi4+0x276>
 8000d6e:	4589      	cmp	r9, r1
 8000d70:	d81f      	bhi.n	8000db2 <__udivmoddi4+0x2b6>
 8000d72:	eba1 0109 	sub.w	r1, r1, r9
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fb09 f804 	mul.w	r8, r9, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	b292      	uxth	r2, r2
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	4542      	cmp	r2, r8
 8000d8a:	d229      	bcs.n	8000de0 <__udivmoddi4+0x2e4>
 8000d8c:	18ba      	adds	r2, r7, r2
 8000d8e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d92:	d2c4      	bcs.n	8000d1e <__udivmoddi4+0x222>
 8000d94:	4542      	cmp	r2, r8
 8000d96:	d2c2      	bcs.n	8000d1e <__udivmoddi4+0x222>
 8000d98:	f1a9 0102 	sub.w	r1, r9, #2
 8000d9c:	443a      	add	r2, r7
 8000d9e:	e7be      	b.n	8000d1e <__udivmoddi4+0x222>
 8000da0:	45f0      	cmp	r8, lr
 8000da2:	d29d      	bcs.n	8000ce0 <__udivmoddi4+0x1e4>
 8000da4:	ebbe 0302 	subs.w	r3, lr, r2
 8000da8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dac:	3801      	subs	r0, #1
 8000dae:	46e1      	mov	r9, ip
 8000db0:	e796      	b.n	8000ce0 <__udivmoddi4+0x1e4>
 8000db2:	eba7 0909 	sub.w	r9, r7, r9
 8000db6:	4449      	add	r1, r9
 8000db8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dbc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc0:	fb09 f804 	mul.w	r8, r9, r4
 8000dc4:	e7db      	b.n	8000d7e <__udivmoddi4+0x282>
 8000dc6:	4673      	mov	r3, lr
 8000dc8:	e77f      	b.n	8000cca <__udivmoddi4+0x1ce>
 8000dca:	4650      	mov	r0, sl
 8000dcc:	e766      	b.n	8000c9c <__udivmoddi4+0x1a0>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e6fd      	b.n	8000bce <__udivmoddi4+0xd2>
 8000dd2:	443b      	add	r3, r7
 8000dd4:	3a02      	subs	r2, #2
 8000dd6:	e733      	b.n	8000c40 <__udivmoddi4+0x144>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	443b      	add	r3, r7
 8000dde:	e71c      	b.n	8000c1a <__udivmoddi4+0x11e>
 8000de0:	4649      	mov	r1, r9
 8000de2:	e79c      	b.n	8000d1e <__udivmoddi4+0x222>
 8000de4:	eba1 0109 	sub.w	r1, r1, r9
 8000de8:	46c4      	mov	ip, r8
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	e7c4      	b.n	8000d7e <__udivmoddi4+0x282>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e00:	23ff      	movs	r3, #255	@ 0xff
 8000e02:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000e10:	4a58      	ldr	r2, [pc, #352]	@ (8000f74 <bno055_init+0x17c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000e16:	4b57      	ldr	r3, [pc, #348]	@ (8000f74 <bno055_init+0x17c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68dc      	ldr	r4, [r3, #12]
 8000e1c:	4b55      	ldr	r3, [pc, #340]	@ (8000f74 <bno055_init+0x17c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	7a58      	ldrb	r0, [r3, #9]
 8000e22:	f107 020d 	add.w	r2, r7, #13
 8000e26:	2301      	movs	r3, #1
 8000e28:	2107      	movs	r1, #7
 8000e2a:	47a0      	blx	r4
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e30:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <bno055_init+0x17c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	691c      	ldr	r4, [r3, #16]
 8000e36:	4b4f      	ldr	r3, [pc, #316]	@ (8000f74 <bno055_init+0x17c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	7a58      	ldrb	r0, [r3, #9]
 8000e3c:	f107 020e 	add.w	r2, r7, #14
 8000e40:	2301      	movs	r3, #1
 8000e42:	2100      	movs	r1, #0
 8000e44:	47a0      	blx	r4
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000e52:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <bno055_init+0x17c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	7bba      	ldrb	r2, [r7, #14]
 8000e58:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <bno055_init+0x17c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691c      	ldr	r4, [r3, #16]
 8000e60:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <bno055_init+0x17c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	7a58      	ldrb	r0, [r3, #9]
 8000e66:	f107 020e 	add.w	r2, r7, #14
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	47a0      	blx	r4
 8000e70:	4603      	mov	r3, r0
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4413      	add	r3, r2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <bno055_init+0x17c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	7bba      	ldrb	r2, [r7, #14]
 8000e82:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e84:	4b3b      	ldr	r3, [pc, #236]	@ (8000f74 <bno055_init+0x17c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691c      	ldr	r4, [r3, #16]
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <bno055_init+0x17c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	7a58      	ldrb	r0, [r3, #9]
 8000e90:	f107 020e 	add.w	r2, r7, #14
 8000e94:	2301      	movs	r3, #1
 8000e96:	2102      	movs	r1, #2
 8000e98:	47a0      	blx	r4
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <bno055_init+0x17c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	7bba      	ldrb	r2, [r7, #14]
 8000eac:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <bno055_init+0x17c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	691c      	ldr	r4, [r3, #16]
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <bno055_init+0x17c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	7a58      	ldrb	r0, [r3, #9]
 8000eba:	f107 020e 	add.w	r2, r7, #14
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	47a0      	blx	r4
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <bno055_init+0x17c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	7bba      	ldrb	r2, [r7, #14]
 8000ed6:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <bno055_init+0x17c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	691c      	ldr	r4, [r3, #16]
 8000ede:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <bno055_init+0x17c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	7a58      	ldrb	r0, [r3, #9]
 8000ee4:	f107 020e 	add.w	r2, r7, #14
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2106      	movs	r1, #6
 8000eec:	47a0      	blx	r4
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <bno055_init+0x17c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	7bba      	ldrb	r2, [r7, #14]
 8000f00:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <bno055_init+0x17c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691c      	ldr	r4, [r3, #16]
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <bno055_init+0x17c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	7a58      	ldrb	r0, [r3, #9]
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	2302      	movs	r3, #2
 8000f14:	2104      	movs	r1, #4
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
 8000f26:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000f28:	7a7b      	ldrb	r3, [r7, #9]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	7a3b      	ldrb	r3, [r7, #8]
 8000f30:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <bno055_init+0x17c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000f36:	430a      	orrs	r2, r1
 8000f38:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000f3a:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <bno055_init+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691c      	ldr	r4, [r3, #16]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <bno055_init+0x17c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	7a58      	ldrb	r0, [r3, #9]
 8000f48:	f107 020e 	add.w	r2, r7, #14
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2107      	movs	r1, #7
 8000f50:	47a0      	blx	r4
 8000f52:	4603      	mov	r3, r0
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <bno055_init+0x17c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	7bba      	ldrb	r2, [r7, #14]
 8000f64:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000b4 	.word	0x200000b4

08000f78 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <bno055_write_register+0x48>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000f94:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000f98:	e00d      	b.n	8000fb6 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <bno055_write_register+0x48>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68dc      	ldr	r4, [r3, #12]
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <bno055_write_register+0x48>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	7a58      	ldrb	r0, [r3, #9]
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	79f9      	ldrb	r1, [r7, #7]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	47a0      	blx	r4
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000b4 	.word	0x200000b4

08000fc4 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000fce:	23ff      	movs	r3, #255	@ 0xff
 8000fd0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <bno055_write_page_id+0x8c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000fde:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000fe2:	e030      	b.n	8001046 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <bno055_write_page_id+0x8c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691c      	ldr	r4, [r3, #16]
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <bno055_write_page_id+0x8c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7a58      	ldrb	r0, [r3, #9]
 8000ff0:	f107 020e 	add.w	r2, r7, #14
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	47a0      	blx	r4
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d11b      	bne.n	800103e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <bno055_write_page_id+0x8c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68dc      	ldr	r4, [r3, #12]
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <bno055_write_page_id+0x8c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	7a58      	ldrb	r0, [r3, #9]
 8001016:	f107 020e 	add.w	r2, r7, #14
 800101a:	2301      	movs	r3, #1
 800101c:	2107      	movs	r1, #7
 800101e:	47a0      	blx	r4
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	4413      	add	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <bno055_write_page_id+0x8c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	711a      	strb	r2, [r3, #4]
 800103c:	e001      	b.n	8001042 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800103e:	23ff      	movs	r3, #255	@ 0xff
 8001040:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	200000b4 	.word	0x200000b4

08001054 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800105c:	23ff      	movs	r3, #255	@ 0xff
 800105e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001060:	2300      	movs	r3, #0
 8001062:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001064:	23ff      	movs	r3, #255	@ 0xff
 8001066:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001070:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001074:	e02a      	b.n	80010cc <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	791b      	ldrb	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff9f 	bl	8000fc4 <bno055_write_page_id>
 8001086:	4603      	mov	r3, r0
 8001088:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800108a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <bno055_get_operation_mode+0x48>
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	791b      	ldrb	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d113      	bne.n	80010c4 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691c      	ldr	r4, [r3, #16]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7a58      	ldrb	r0, [r3, #9]
 80010a8:	f107 020d 	add.w	r2, r7, #13
 80010ac:	2301      	movs	r3, #1
 80010ae:	213d      	movs	r1, #61	@ 0x3d
 80010b0:	47a0      	blx	r4
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e001      	b.n	80010c8 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80010c4:	23ff      	movs	r3, #255	@ 0xff
 80010c6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	200000b4 	.word	0x200000b4

080010d8 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80010e2:	23ff      	movs	r3, #255	@ 0xff
 80010e4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80010ea:	2300      	movs	r3, #0
 80010ec:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80010ee:	23ff      	movs	r3, #255	@ 0xff
 80010f0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80010f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80010fa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80010fe:	e0ac      	b.n	800125a <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffa5 	bl	8001054 <bno055_get_operation_mode>
 800110a:	4603      	mov	r3, r0
 800110c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800110e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 809d 	bne.w	8001252 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d137      	bne.n	800118e <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800111e:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691c      	ldr	r4, [r3, #16]
 8001124:	4b4f      	ldr	r3, [pc, #316]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	7a58      	ldrb	r0, [r3, #9]
 800112a:	f107 020d 	add.w	r2, r7, #13
 800112e:	2301      	movs	r3, #1
 8001130:	213d      	movs	r1, #61	@ 0x3d
 8001132:	47a0      	blx	r4
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 808a 	bne.w	8001256 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	b25b      	sxtb	r3, r3
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	b25a      	sxtb	r2, r3
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800115e:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68dc      	ldr	r4, [r3, #12]
 8001164:	4b3f      	ldr	r3, [pc, #252]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	7a58      	ldrb	r0, [r3, #9]
 800116a:	f107 020d 	add.w	r2, r7, #13
 800116e:	2301      	movs	r3, #1
 8001170:	213d      	movs	r1, #61	@ 0x3d
 8001172:	47a0      	blx	r4
 8001174:	4603      	mov	r3, r0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001180:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800118a:	4798      	blx	r3
 800118c:	e063      	b.n	8001256 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800118e:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	691c      	ldr	r4, [r3, #16]
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	7a58      	ldrb	r0, [r3, #9]
 800119a:	f107 020d 	add.w	r2, r7, #13
 800119e:	2301      	movs	r3, #1
 80011a0:	213d      	movs	r1, #61	@ 0x3d
 80011a2:	47a0      	blx	r4
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d116      	bne.n	80011de <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80011b0:	7b7b      	ldrb	r3, [r7, #13]
 80011b2:	f023 030f 	bic.w	r3, r3, #15
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80011ba:	f107 030d 	add.w	r3, r7, #13
 80011be:	2201      	movs	r2, #1
 80011c0:	4619      	mov	r1, r3
 80011c2:	203d      	movs	r0, #61	@ 0x3d
 80011c4:	f7ff fed8 	bl	8000f78 <bno055_write_register>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2014      	movs	r0, #20
 80011dc:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d038      	beq.n	8001256 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691c      	ldr	r4, [r3, #16]
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	7a58      	ldrb	r0, [r3, #9]
 80011f0:	f107 020d 	add.w	r2, r7, #13
 80011f4:	2301      	movs	r3, #1
 80011f6:	213d      	movs	r1, #61	@ 0x3d
 80011f8:	47a0      	blx	r4
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d127      	bne.n	8001256 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	f023 030f 	bic.w	r3, r3, #15
 800120e:	b25a      	sxtb	r2, r3
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	b25b      	sxtb	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68dc      	ldr	r4, [r3, #12]
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7a58      	ldrb	r0, [r3, #9]
 800122e:	f107 020d 	add.w	r2, r7, #13
 8001232:	2301      	movs	r3, #1
 8001234:	213d      	movs	r1, #61	@ 0x3d
 8001236:	47a0      	blx	r4
 8001238:	4603      	mov	r3, r0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	4413      	add	r3, r2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800124e:	4798      	blx	r3
 8001250:	e001      	b.n	8001256 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001252:	23ff      	movs	r3, #255	@ 0xff
 8001254:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	200000b4 	.word	0x200000b4

08001268 <BNO055_I2C_bus_write>:
#include "bno055_hal.h"

extern I2C_HandleTypeDef hi2c3;

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 wr_len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af04      	add	r7, sp, #16
 800126e:	603a      	str	r2, [r7, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	460b      	mov	r3, r1
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Write(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, wr_len, HAL_MAX_DELAY) == HAL_OK)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	b29b      	uxth	r3, r3
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b299      	uxth	r1, r3
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	b29a      	uxth	r2, r3
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	9002      	str	r0, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <BNO055_I2C_bus_write+0x50>)
 800129e:	f002 fb9d 	bl	80039dc <HAL_I2C_Mem_Write>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <BNO055_I2C_bus_write+0x44>
        return 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e000      	b.n	80012ae <BNO055_I2C_bus_write+0x46>
    else
        return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000110 	.word	0x20000110

080012bc <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 r_len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	603a      	str	r2, [r7, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	460b      	mov	r3, r1
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	4613      	mov	r3, r2
 80012d0:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Read(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, r_len, HAL_MAX_DELAY) == HAL_OK){
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	b299      	uxth	r1, r3
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
 80012e6:	9002      	str	r0, [sp, #8]
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <BNO055_I2C_bus_read+0x50>)
 80012f2:	f002 fc6d 	bl	8003bd0 <HAL_I2C_Mem_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <BNO055_I2C_bus_read+0x44>
        return 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <BNO055_I2C_bus_read+0x46>
    }
    return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000110 	.word	0x20000110

08001310 <BNO055_delay_msec>:

void BNO055_delay_msec(u32 msec)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    HAL_Delay(msec);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f001 feb5 	bl	8003088 <HAL_Delay>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <BNO055_setup>:


void BNO055_setup(struct bno055_t* bno055_device)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    bno055_device ->dev_addr = BNO055_I2C_ADDR1;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2228      	movs	r2, #40	@ 0x28
 8001334:	725a      	strb	r2, [r3, #9]
    bno055_device->bus_write = BNO055_I2C_bus_write;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <BNO055_setup+0x30>)
 800133a:	60da      	str	r2, [r3, #12]
    bno055_device->bus_read = BNO055_I2C_bus_read;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <BNO055_setup+0x34>)
 8001340:	611a      	str	r2, [r3, #16]
    bno055_device->delay_msec = BNO055_delay_msec;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <BNO055_setup+0x38>)
 8001346:	615a      	str	r2, [r3, #20]

    if (bno055_init(bno055_device) == 0)
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fd55 	bl	8000df8 <bno055_init>
    {
        // Initialization successful
    }
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	08001269 	.word	0x08001269
 800135c:	080012bd 	.word	0x080012bd
 8001360:	08001311 	.word	0x08001311

08001364 <_ZN3FSMC1Ev>:
extern UART_HandleTypeDef huart1;




FSM::FSM():state(S0_INIT){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]


}
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_ZN3FSM3runEv>:


void FSM::run(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    // Switch case is a bit tidier than a bunch of if / else if statements
    // but you must remember to use break or fall through into later states
    switch(state)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d811      	bhi.n	80013b4 <_ZN3FSM3runEv+0x34>
 8001390:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <_ZN3FSM3runEv+0x18>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013ad 	.word	0x080013ad
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	080013c5 	.word	0x080013c5
 80013a4:	080013c5 	.word	0x080013c5
 80013a8:	080013c5 	.word	0x080013c5
    {
        case S0_INIT:

        	//HAL_UART_Transmit(&huart1, (uint8_t*)"In State 0\r\n", 13, HAL_MAX_DELAY);
            state = S1_IDLE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
            break;
 80013b2:	e008      	b.n	80013c6 <_ZN3FSM3runEv+0x46>




        default:
        	HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid State\r\n", 16, HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	2210      	movs	r2, #16
 80013ba:	4905      	ldr	r1, [pc, #20]	@ (80013d0 <_ZN3FSM3runEv+0x50>)
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <_ZN3FSM3runEv+0x54>)
 80013be:	f004 fe31 	bl	8006024 <HAL_UART_Transmit>
        	break;
 80013c2:	e000      	b.n	80013c6 <_ZN3FSM3runEv+0x46>
            break;
 80013c4:	bf00      	nop
    }


}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08007ac8 	.word	0x08007ac8
 80013d4:	200002cc 	.word	0x200002cc

080013d8 <_ZN3FSM9set_stateENS_5stateE>:


void FSM::set_state(system_state_t new_state) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
    state = new_state;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	701a      	strb	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_ZNK3FSM9get_stateEv>:

	  void run(void);

	  void set_state(system_state_t new_state);

	  system_state_t get_state() const { return this->state; }
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f001 fdc5 	bl	8002fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f8df 	bl	80015dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f000 fc6b 	bl	8001cf8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001422:	f000 fc3b 	bl	8001c9c <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 8001426:	f000 fa6d 	bl	8001904 <_ZL12MX_TIM2_Initv>
  MX_I2C3_Init();
 800142a:	f000 f97d 	bl	8001728 <_ZL12MX_I2C3_Initv>
  MX_TIM1_Init();
 800142e:	f000 f9af 	bl	8001790 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001432:	f000 fac5 	bl	80019c0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001436:	f000 fb5b 	bl	8001af0 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 800143a:	f000 fbb7 	bl	8001bac <_ZL12MX_TIM5_Initv>
  MX_I2C2_Init();
 800143e:	f000 f93f 	bl	80016c0 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */


  // SERVO MOTOR
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 8001442:	210c      	movs	r1, #12
 8001444:	4855      	ldr	r0, [pc, #340]	@ (800159c <main+0x18c>)
 8001446:	f003 ff8b 	bl	8005360 <HAL_TIM_PWM_Start_IT>


  // BASE MOTOR
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 800144a:	213c      	movs	r1, #60	@ 0x3c
 800144c:	4854      	ldr	r0, [pc, #336]	@ (80015a0 <main+0x190>)
 800144e:	f004 f92b 	bl	80056a8 <HAL_TIM_Encoder_Start_IT>

  // POLOLU 2
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001452:	2100      	movs	r1, #0
 8001454:	4853      	ldr	r0, [pc, #332]	@ (80015a4 <main+0x194>)
 8001456:	f003 ff83 	bl	8005360 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800145a:	2104      	movs	r1, #4
 800145c:	4851      	ldr	r0, [pc, #324]	@ (80015a4 <main+0x194>)
 800145e:	f003 ff7f 	bl	8005360 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8001462:	2108      	movs	r1, #8
 8001464:	484f      	ldr	r0, [pc, #316]	@ (80015a4 <main+0x194>)
 8001466:	f003 ff7b 	bl	8005360 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800146a:	210c      	movs	r1, #12
 800146c:	484d      	ldr	r0, [pc, #308]	@ (80015a4 <main+0x194>)
 800146e:	f003 ff77 	bl	8005360 <HAL_TIM_PWM_Start_IT>


  // LAUNCHER MOTOR
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001472:	213c      	movs	r1, #60	@ 0x3c
 8001474:	484c      	ldr	r0, [pc, #304]	@ (80015a8 <main+0x198>)
 8001476:	f004 f917 	bl	80056a8 <HAL_TIM_Encoder_Start_IT>


  // POLOLU 1
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
 800147a:	2108      	movs	r1, #8
 800147c:	484b      	ldr	r0, [pc, #300]	@ (80015ac <main+0x19c>)
 800147e:	f003 ff6f 	bl	8005360 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);
 8001482:	210c      	movs	r1, #12
 8001484:	4849      	ldr	r0, [pc, #292]	@ (80015ac <main+0x19c>)
 8001486:	f003 ff6b 	bl	8005360 <HAL_TIM_PWM_Start_IT>
  //set BNO055 reset to low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001490:	4847      	ldr	r0, [pc, #284]	@ (80015b0 <main+0x1a0>)
 8001492:	f002 f945 	bl	8003720 <HAL_GPIO_WritePin>
  //initialize BNO055
  BNO055_setup(&IMU);
 8001496:	4847      	ldr	r0, [pc, #284]	@ (80015b4 <main+0x1a4>)
 8001498:	f7ff ff46 	bl	8001328 <BNO055_setup>

  initialize_IMU();
 800149c:	f000 ff3a 	bl	8002314 <_ZL14initialize_IMUv>
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80014a0:	2201      	movs	r2, #1
 80014a2:	4945      	ldr	r1, [pc, #276]	@ (80015b8 <main+0x1a8>)
 80014a4:	4845      	ldr	r0, [pc, #276]	@ (80015bc <main+0x1ac>)
 80014a6:	f004 fe48 	bl	800613a <HAL_UART_Receive_IT>

  int16_t last_count1 = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	80bb      	strh	r3, [r7, #4]
  int16_t last_count2 = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	807b      	strh	r3, [r7, #2]



  //set_duty_dual(&Pololu_2, 0, 2500);
  motor_d_set_pos(&Pololu_2, &pos_controller_1, 1000);
 80014b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014b6:	4942      	ldr	r1, [pc, #264]	@ (80015c0 <main+0x1b0>)
 80014b8:	4842      	ldr	r0, [pc, #264]	@ (80015c4 <main+0x1b4>)
 80014ba:	f001 f9fd 	bl	80028b8 <motor_d_set_pos>

  sprintf((char*)log_buf, "Motor Pos: %d Motor goal: %d \r\n", motor_d_get_pos(&Pololu_2), pos_controller_1.setpoint);
 80014be:	4841      	ldr	r0, [pc, #260]	@ (80015c4 <main+0x1b4>)
 80014c0:	f001 fa0d 	bl	80028de <motor_d_get_pos>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b3e      	ldr	r3, [pc, #248]	@ (80015c0 <main+0x1b0>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	493f      	ldr	r1, [pc, #252]	@ (80015c8 <main+0x1b8>)
 80014cc:	483f      	ldr	r0, [pc, #252]	@ (80015cc <main+0x1bc>)
 80014ce:	f005 fe3d 	bl	800714c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80014d2:	483e      	ldr	r0, [pc, #248]	@ (80015cc <main+0x1bc>)
 80014d4:	f7fe fe84 	bl	80001e0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	493a      	ldr	r1, [pc, #232]	@ (80015cc <main+0x1bc>)
 80014e2:	4836      	ldr	r0, [pc, #216]	@ (80015bc <main+0x1ac>)
 80014e4:	f004 fd9e 	bl	8006024 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  HAL_Delay(10);
 80014e8:	200a      	movs	r0, #10
 80014ea:	f001 fdcd 	bl	8003088 <HAL_Delay>
	  //log_IMU();
	  //log_LIDAR();
	  //enc_val = __HAL_TIM_GET_COUNTER(Pololu_2.enc);

	  motor_d_update_pos(&Pololu_2, &pos_controller_1);
 80014ee:	4934      	ldr	r1, [pc, #208]	@ (80015c0 <main+0x1b0>)
 80014f0:	4834      	ldr	r0, [pc, #208]	@ (80015c4 <main+0x1b4>)
 80014f2:	f001 f845 	bl	8002580 <motor_d_update_pos>
	  //sprintf((char*)log_buf, "Motor Pos: %d \r\n", enc_val);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);

	  fsm.run();
 80014f6:	4836      	ldr	r0, [pc, #216]	@ (80015d0 <main+0x1c0>)
 80014f8:	f7ff ff42 	bl	8001380 <_ZN3FSM3runEv>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"FSM RUNNING\r\n", 13, HAL_MAX_DELAY);
	  step_counter += 1;
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	3301      	adds	r3, #1
 8001500:	80fb      	strh	r3, [r7, #6]

	  if(step_counter % 10 == 0) {
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <main+0x1c4>)
 8001506:	fba3 1302 	umull	r1, r3, r3, r2
 800150a:	08d9      	lsrs	r1, r3, #3
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11d      	bne.n	8001558 <main+0x148>
		  sprintf((char*)log_buf, "CH1 effort: %d CH2 effort: %d error: %d \r\n",
				  htim3.Instance->CCR1,
 800151c:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <main+0x194>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
				  htim3.Instance->CCR2,
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <main+0x194>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b99      	ldr	r1, [r3, #56]	@ 0x38
				  pos_controller_1.setpoint-htim4.Instance->CNT);
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <main+0x1b0>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <main+0x198>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		  sprintf((char*)log_buf, "CH1 effort: %d CH2 effort: %d error: %d \r\n",
 8001534:	1ac3      	subs	r3, r0, r3
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	460b      	mov	r3, r1
 800153a:	4927      	ldr	r1, [pc, #156]	@ (80015d8 <main+0x1c8>)
 800153c:	4823      	ldr	r0, [pc, #140]	@ (80015cc <main+0x1bc>)
 800153e:	f005 fe05 	bl	800714c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001542:	4822      	ldr	r0, [pc, #136]	@ (80015cc <main+0x1bc>)
 8001544:	f7fe fe4c 	bl	80001e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001550:	491e      	ldr	r1, [pc, #120]	@ (80015cc <main+0x1bc>)
 8001552:	481a      	ldr	r0, [pc, #104]	@ (80015bc <main+0x1ac>)
 8001554:	f004 fd66 	bl	8006024 <HAL_UART_Transmit>
	  }

	  if(step_counter >= 500) {
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800155e:	d3c3      	bcc.n	80014e8 <main+0xd8>
		  step_counter = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	80fb      	strh	r3, [r7, #6]
		  motor_d_set_pos(&Pololu_2, &pos_controller_1, 1000);
 8001564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001568:	4915      	ldr	r1, [pc, #84]	@ (80015c0 <main+0x1b0>)
 800156a:	4816      	ldr	r0, [pc, #88]	@ (80015c4 <main+0x1b4>)
 800156c:	f001 f9a4 	bl	80028b8 <motor_d_set_pos>
		  sprintf((char*)log_buf, "Motor Pos: %d Motor goal: %d \r\n", motor_d_get_pos(&Pololu_2), pos_controller_1.setpoint);
 8001570:	4814      	ldr	r0, [pc, #80]	@ (80015c4 <main+0x1b4>)
 8001572:	f001 f9b4 	bl	80028de <motor_d_get_pos>
 8001576:	4602      	mov	r2, r0
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <main+0x1b0>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4912      	ldr	r1, [pc, #72]	@ (80015c8 <main+0x1b8>)
 800157e:	4813      	ldr	r0, [pc, #76]	@ (80015cc <main+0x1bc>)
 8001580:	f005 fde4 	bl	800714c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8001584:	4811      	ldr	r0, [pc, #68]	@ (80015cc <main+0x1bc>)
 8001586:	f7fe fe2b 	bl	80001e0 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001592:	490e      	ldr	r1, [pc, #56]	@ (80015cc <main+0x1bc>)
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <main+0x1ac>)
 8001596:	f004 fd45 	bl	8006024 <HAL_UART_Transmit>
	  HAL_Delay(10);
 800159a:	e7a5      	b.n	80014e8 <main+0xd8>
 800159c:	20000164 	.word	0x20000164
 80015a0:	200001ac 	.word	0x200001ac
 80015a4:	200001f4 	.word	0x200001f4
 80015a8:	2000023c 	.word	0x2000023c
 80015ac:	20000284 	.word	0x20000284
 80015b0:	40020400 	.word	0x40020400
 80015b4:	200003c8 	.word	0x200003c8
 80015b8:	20000354 	.word	0x20000354
 80015bc:	200002cc 	.word	0x200002cc
 80015c0:	20000020 	.word	0x20000020
 80015c4:	20000010 	.word	0x20000010
 80015c8:	08007ad8 	.word	0x08007ad8
 80015cc:	20000394 	.word	0x20000394
 80015d0:	200000b8 	.word	0x200000b8
 80015d4:	cccccccd 	.word	0xcccccccd
 80015d8:	08007af8 	.word	0x08007af8

080015dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	@ 0x50
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2230      	movs	r2, #48	@ 0x30
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fdd0 	bl	8007190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <_Z18SystemClock_Configv+0xdc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	4a2b      	ldr	r2, [pc, #172]	@ (80016b8 <_Z18SystemClock_Configv+0xdc>)
 800160a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <_Z18SystemClock_Configv+0xdc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <_Z18SystemClock_Configv+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a25      	ldr	r2, [pc, #148]	@ (80016bc <_Z18SystemClock_Configv+0xe0>)
 8001626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <_Z18SystemClock_Configv+0xe0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163c:	2301      	movs	r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001640:	2310      	movs	r3, #16
 8001642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001644:	2302      	movs	r3, #2
 8001646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001648:	2300      	movs	r3, #0
 800164a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800164c:	2308      	movs	r3, #8
 800164e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001650:	2360      	movs	r3, #96	@ 0x60
 8001652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001654:	2302      	movs	r3, #2
 8001656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001658:	2304      	movs	r3, #4
 800165a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f9d5 	bl	8004a10 <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001676:	f000 ff3f 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	230f      	movs	r3, #15
 800167c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167e:	2302      	movs	r3, #2
 8001680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2103      	movs	r1, #3
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fc32 	bl	8004f00 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80016ac:	f000 ff24 	bl	80024f8 <Error_Handler>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3750      	adds	r7, #80	@ 0x50
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016c4:	4b15      	ldr	r3, [pc, #84]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016c6:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <_ZL12MX_I2C2_Initv+0x60>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016cc:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <_ZL12MX_I2C2_Initv+0x64>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016fc:	4807      	ldr	r0, [pc, #28]	@ (800171c <_ZL12MX_I2C2_Initv+0x5c>)
 80016fe:	f002 f829 	bl	8003754 <HAL_I2C_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001712:	f000 fef1 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000bc 	.word	0x200000bc
 8001720:	40005800 	.word	0x40005800
 8001724:	000186a0 	.word	0x000186a0

08001728 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 800172e:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <_ZL12MX_I2C3_Initv+0x60>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 8001734:	4a15      	ldr	r2, [pc, #84]	@ (800178c <_ZL12MX_I2C3_Initv+0x64>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 8001746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800174a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001764:	4807      	ldr	r0, [pc, #28]	@ (8001784 <_ZL12MX_I2C3_Initv+0x5c>)
 8001766:	f001 fff5 	bl	8003754 <HAL_I2C_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800177a:	f000 febd 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000110 	.word	0x20000110
 8001788:	40005c00 	.word	0x40005c00
 800178c:	000186a0 	.word	0x000186a0

08001790 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b092      	sub	sp, #72	@ 0x48
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2220      	movs	r2, #32
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fce8 	bl	8007190 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c0:	4b4e      	ldr	r3, [pc, #312]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001900 <_ZL12MX_TIM1_Initv+0x170>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017c6:	4b4d      	ldr	r3, [pc, #308]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017d2:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b48      	ldr	r3, [pc, #288]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e0:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ec:	4843      	ldr	r0, [pc, #268]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80017ee:	f003 fd67 	bl	80052c0 <HAL_TIM_PWM_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001802:	f000 fe79 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800180e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001812:	4619      	mov	r1, r3
 8001814:	4839      	ldr	r0, [pc, #228]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 8001816:	f004 faf5 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800182a:	f000 fe65 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	@ 0x60
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	482a      	ldr	r0, [pc, #168]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 8001854:	f003 ffd6 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001868:	f000 fe46 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	2204      	movs	r2, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4821      	ldr	r0, [pc, #132]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 8001876:	f003 ffc5 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 800188a:	f000 fe35 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800188e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001892:	220c      	movs	r2, #12
 8001894:	4619      	mov	r1, r3
 8001896:	4819      	ldr	r0, [pc, #100]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 8001898:	f003 ffb4 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80018ac:	f000 fe24 	bl	80024f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	480a      	ldr	r0, [pc, #40]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80018d4:	f004 fb04 	bl	8005ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 80018e8:	f000 fe06 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <_ZL12MX_TIM1_Initv+0x16c>)
 80018ee:	f001 f9d5 	bl	8002c9c <HAL_TIM_MspPostInit>

}
 80018f2:	bf00      	nop
 80018f4:	3748      	adds	r7, #72	@ 0x48
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000164 	.word	0x20000164
 8001900:	40010000 	.word	0x40010000

08001904 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	@ 0x30
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2224      	movs	r2, #36	@ 0x24
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f005 fc3c 	bl	8007190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001920:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 8001922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001948:	2301      	movs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001950:	2301      	movs	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4812      	ldr	r0, [pc, #72]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 8001974:	f003 fdf2 	bl	800555c <HAL_TIM_Encoder_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf14      	ite	ne
 800197e:	2301      	movne	r3, #1
 8001980:	2300      	moveq	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001988:	f000 fdb6 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <_ZL12MX_TIM2_Initv+0xb8>)
 800199a:	f004 fa33 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80019ae:	f000 fda3 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3730      	adds	r7, #48	@ 0x30
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200001ac 	.word	0x200001ac

080019c0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e2:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 80019e4:	4a41      	ldr	r2, [pc, #260]	@ (8001aec <_ZL12MX_TIM3_Initv+0x12c>)
 80019e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80019f4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 80019f6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80019fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b39      	ldr	r3, [pc, #228]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a08:	4837      	ldr	r0, [pc, #220]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001a0a:	f003 fc59 	bl	80052c0 <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001a1e:	f000 fd6b 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4619      	mov	r1, r3
 8001a30:	482d      	ldr	r0, [pc, #180]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001a32:	f004 f9e7 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001a46:	f000 fd57 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	@ 0x60
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4821      	ldr	r0, [pc, #132]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001a62:	f003 fecf 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001a76:	f000 fd3f 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4819      	ldr	r0, [pc, #100]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001a82:	f003 febf 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001a96:	f000 fd2f 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001aa2:	f003 feaf 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8001ab6:	f000 fd1f 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	220c      	movs	r2, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001ac2:	f003 fe9f 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8001ad6:	f000 fd0f 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ada:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <_ZL12MX_TIM3_Initv+0x128>)
 8001adc:	f001 f8de 	bl	8002c9c <HAL_TIM_MspPostInit>

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200001f4 	.word	0x200001f4
 8001aec:	40000400 	.word	0x40000400

08001af0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	@ 0x30
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	2224      	movs	r2, #36	@ 0x24
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 fb46 	bl	8007190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ba8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b5e:	f003 fcfd 	bl	800555c <HAL_TIM_Encoder_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001b72:	f000 fcc1 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4808      	ldr	r0, [pc, #32]	@ (8001ba4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001b84:	f004 f93e 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001b98:	f000 fcae 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3730      	adds	r7, #48	@ 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000023c 	.word	0x2000023c
 8001ba8:	40000800 	.word	0x40000800

08001bac <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001bd0:	4a31      	ldr	r2, [pc, #196]	@ (8001c98 <_ZL12MX_TIM5_Initv+0xec>)
 8001bd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 8001be0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001be2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001be6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b29      	ldr	r3, [pc, #164]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bf4:	4827      	ldr	r0, [pc, #156]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001bf6:	f003 fb63 	bl	80052c0 <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8001c0a:	f000 fc75 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c16:	f107 0320 	add.w	r3, r7, #32
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481d      	ldr	r0, [pc, #116]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001c1e:	f004 f8f1 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8001c32:	f000 fc61 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4811      	ldr	r0, [pc, #68]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001c4e:	f003 fdd9 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf14      	ite	ne
 8001c58:	2301      	movne	r3, #1
 8001c5a:	2300      	moveq	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8001c62:	f000 fc49 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001c6e:	f003 fdc9 	bl	8005804 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8001c82:	f000 fc39 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c86:	4803      	ldr	r0, [pc, #12]	@ (8001c94 <_ZL12MX_TIM5_Initv+0xe8>)
 8001c88:	f001 f808 	bl	8002c9c <HAL_TIM_MspPostInit>

}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	@ 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000284 	.word	0x20000284
 8001c98:	40000c00 	.word	0x40000c00

08001c9c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ca2:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cd4:	f004 f956 	bl	8005f84 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001ce8:	f000 fc06 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002cc 	.word	0x200002cc
 8001cf4:	40011000 	.word	0x40011000

08001cf8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b38      	ldr	r3, [pc, #224]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a37      	ldr	r2, [pc, #220]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a30      	ldr	r2, [pc, #192]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a29      	ldr	r2, [pc, #164]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001d84:	481c      	ldr	r0, [pc, #112]	@ (8001df8 <_ZL12MX_GPIO_Initv+0x100>)
 8001d86:	f001 fccb 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d90:	481a      	ldr	r0, [pc, #104]	@ (8001dfc <_ZL12MX_GPIO_Initv+0x104>)
 8001d92:	f001 fcc5 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <_ZL12MX_GPIO_Initv+0x108>)
 8001dac:	f001 fb34 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001db0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480b      	ldr	r0, [pc, #44]	@ (8001df8 <_ZL12MX_GPIO_Initv+0x100>)
 8001dca:	f001 fb25 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <_ZL12MX_GPIO_Initv+0x104>)
 8001de8:	f001 fb16 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	@ 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800

08001e04 <HAL_UART_RxCpltCallback>:



#include <ctype.h>  // for toupper()
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a9e      	ldr	r2, [pc, #632]	@ (800208c <HAL_UART_RxCpltCallback+0x288>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	f040 825a 	bne.w	80022cc <HAL_UART_RxCpltCallback+0x4c8>
    {
        char c = rx_buf[0];
 8001e18:	4b9d      	ldr	r3, [pc, #628]	@ (8002090 <HAL_UART_RxCpltCallback+0x28c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	76bb      	strb	r3, [r7, #26]
        static char cmd_buffer[64];
        static uint8_t cmd_index = 0;

        if (c == '\r' || c == '\n')  // End of command
 8001e1e:	7ebb      	ldrb	r3, [r7, #26]
 8001e20:	2b0d      	cmp	r3, #13
 8001e22:	d003      	beq.n	8001e2c <HAL_UART_RxCpltCallback+0x28>
 8001e24:	7ebb      	ldrb	r3, [r7, #26]
 8001e26:	2b0a      	cmp	r3, #10
 8001e28:	f040 823d 	bne.w	80022a6 <HAL_UART_RxCpltCallback+0x4a2>
        {
            cmd_buffer[cmd_index] = '\0';
 8001e2c:	4b99      	ldr	r3, [pc, #612]	@ (8002094 <HAL_UART_RxCpltCallback+0x290>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b99      	ldr	r3, [pc, #612]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

            // Convert to uppercase for consistent parsing
            for (uint8_t i = 0; i < cmd_index; i++) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	77fb      	strb	r3, [r7, #31]
 8001e3c:	e00d      	b.n	8001e5a <HAL_UART_RxCpltCallback+0x56>
                cmd_buffer[i] = toupper((unsigned char)cmd_buffer[i]);
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	4a95      	ldr	r2, [pc, #596]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 f977 	bl	8007138 <toupper>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	7ffb      	ldrb	r3, [r7, #31]
 8001e4e:	b2d1      	uxtb	r1, r2
 8001e50:	4a91      	ldr	r2, [pc, #580]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001e52:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < cmd_index; i++) {
 8001e54:	7ffb      	ldrb	r3, [r7, #31]
 8001e56:	3301      	adds	r3, #1
 8001e58:	77fb      	strb	r3, [r7, #31]
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	@ (8002094 <HAL_UART_RxCpltCallback+0x290>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	7ffa      	ldrb	r2, [r7, #31]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3ec      	bcc.n	8001e3e <HAL_UART_RxCpltCallback+0x3a>
            }

            // Process full command
            if (cmd_index >= 4)
 8001e64:	4b8b      	ldr	r3, [pc, #556]	@ (8002094 <HAL_UART_RxCpltCallback+0x290>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	f240 8211 	bls.w	8002290 <HAL_UART_RxCpltCallback+0x48c>
            {
                // === FSM STATE TRANSITION ===
                if (strncmp(cmd_buffer, "MODE", 4) == 0)
 8001e6e:	2204      	movs	r2, #4
 8001e70:	498a      	ldr	r1, [pc, #552]	@ (800209c <HAL_UART_RxCpltCallback+0x298>)
 8001e72:	4889      	ldr	r0, [pc, #548]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001e74:	f005 f994 	bl	80071a0 <strncmp>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d14a      	bne.n	8001f14 <HAL_UART_RxCpltCallback+0x110>
                {
                    uint8_t mode = cmd_buffer[4] - '0';
 8001e7e:	4b86      	ldr	r3, [pc, #536]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	3b30      	subs	r3, #48	@ 0x30
 8001e84:	753b      	strb	r3, [r7, #20]
                    switch (mode) {
 8001e86:	7d3b      	ldrb	r3, [r7, #20]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d826      	bhi.n	8001eda <HAL_UART_RxCpltCallback+0xd6>
 8001e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e94 <HAL_UART_RxCpltCallback+0x90>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ea9 	.word	0x08001ea9
 8001e98:	08001eb3 	.word	0x08001eb3
 8001e9c:	08001ebd 	.word	0x08001ebd
 8001ea0:	08001ec7 	.word	0x08001ec7
 8001ea4:	08001ed1 	.word	0x08001ed1
                        case 0: fsm.set_state(FSM::S0_INIT); break;
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	487d      	ldr	r0, [pc, #500]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001eac:	f7ff fa94 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001eb0:	e01b      	b.n	8001eea <HAL_UART_RxCpltCallback+0xe6>
                        case 1: fsm.set_state(FSM::S1_IDLE); break;
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	487a      	ldr	r0, [pc, #488]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001eb6:	f7ff fa8f 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001eba:	e016      	b.n	8001eea <HAL_UART_RxCpltCallback+0xe6>
                        case 2: fsm.set_state(FSM::S2_MANUAL_STEP_INPUT); break;
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4878      	ldr	r0, [pc, #480]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001ec0:	f7ff fa8a 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ec4:	e011      	b.n	8001eea <HAL_UART_RxCpltCallback+0xe6>
                        case 3: fsm.set_state(FSM::S3_MANUAL_TARGET); break;
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	4875      	ldr	r0, [pc, #468]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001eca:	f7ff fa85 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ece:	e00c      	b.n	8001eea <HAL_UART_RxCpltCallback+0xe6>
                        case 4: fsm.set_state(FSM::S4_AUTOMATIC); break;
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4873      	ldr	r0, [pc, #460]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001ed4:	f7ff fa80 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ed8:	e007      	b.n	8001eea <HAL_UART_RxCpltCallback+0xe6>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Mode\r\n", 15, 1000);
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	220f      	movs	r2, #15
 8001ee0:	4970      	ldr	r1, [pc, #448]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001ee2:	4871      	ldr	r0, [pc, #452]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001ee4:	f004 f89e 	bl	8006024 <HAL_UART_Transmit>
                            break;
 8001ee8:	bf00      	nop
                    }

                    sprintf((char*)tx_buf, "FSM state: %d\r\n", fsm.get_state());
 8001eea:	486d      	ldr	r0, [pc, #436]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001eec:	f7ff fa83 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	496d      	ldr	r1, [pc, #436]	@ (80020ac <HAL_UART_RxCpltCallback+0x2a8>)
 8001ef6:	486e      	ldr	r0, [pc, #440]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001ef8:	f005 f928 	bl	800714c <siprintf>
                    HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001efc:	486c      	ldr	r0, [pc, #432]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001efe:	f7fe f96f 	bl	80001e0 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0a:	4969      	ldr	r1, [pc, #420]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f0c:	4866      	ldr	r0, [pc, #408]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f0e:	f004 f889 	bl	8006024 <HAL_UART_Transmit>
 8001f12:	e1c4      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                }

                // === MOTOR COMMAND: M1FF / M2FF ===
                else if (cmd_buffer[0] == 'M')
 8001f14:	4b60      	ldr	r3, [pc, #384]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b4d      	cmp	r3, #77	@ 0x4d
 8001f1a:	f040 808e 	bne.w	800203a <HAL_UART_RxCpltCallback+0x236>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8001f1e:	4860      	ldr	r0, [pc, #384]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001f20:	f7ff fa69 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_UART_RxCpltCallback+0x140>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Motor command not allowed in this state\r\n", 41, 1000);
 8001f34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f38:	2229      	movs	r2, #41	@ 0x29
 8001f3a:	495e      	ldr	r1, [pc, #376]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001f3c:	485a      	ldr	r0, [pc, #360]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f3e:	f004 f871 	bl	8006024 <HAL_UART_Transmit>
 8001f42:	e1ac      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 8001f44:	4b54      	ldr	r3, [pc, #336]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	2b30      	cmp	r3, #48	@ 0x30
 8001f4a:	d903      	bls.n	8001f54 <HAL_UART_RxCpltCallback+0x150>
 8001f4c:	4b52      	ldr	r3, [pc, #328]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b32      	cmp	r3, #50	@ 0x32
 8001f52:	d907      	bls.n	8001f64 <HAL_UART_RxCpltCallback+0x160>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Motor Number\r\n", 23, 1000);
 8001f54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f58:	2217      	movs	r2, #23
 8001f5a:	4957      	ldr	r1, [pc, #348]	@ (80020b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001f5c:	4852      	ldr	r0, [pc, #328]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f5e:	f004 f861 	bl	8006024 <HAL_UART_Transmit>
 8001f62:	e19c      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                    } else {
                        uint8_t motor_num = cmd_buffer[1] - '0';
 8001f64:	4b4c      	ldr	r3, [pc, #304]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001f66:	785b      	ldrb	r3, [r3, #1]
 8001f68:	3b30      	subs	r3, #48	@ 0x30
 8001f6a:	757b      	strb	r3, [r7, #21]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2100      	movs	r1, #0
 8001f72:	460a      	mov	r2, r1
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	460a      	mov	r2, r1
 8001f78:	709a      	strb	r2, [r3, #2]
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001f7c:	789b      	ldrb	r3, [r3, #2]
 8001f7e:	743b      	strb	r3, [r7, #16]
 8001f80:	4b45      	ldr	r3, [pc, #276]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8001f82:	78db      	ldrb	r3, [r3, #3]
 8001f84:	747b      	strb	r3, [r7, #17]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f005 f8c8 	bl	8007124 <strtol>
 8001f94:	4603      	mov	r3, r0
 8001f96:	77bb      	strb	r3, [r7, #30]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 8001f98:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001f9c:	2b64      	cmp	r3, #100	@ 0x64
 8001f9e:	dd01      	ble.n	8001fa4 <HAL_UART_RxCpltCallback+0x1a0>
 8001fa0:	2364      	movs	r3, #100	@ 0x64
 8001fa2:	77bb      	strb	r3, [r7, #30]
                        if (duty < -100) duty = -100;
 8001fa4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fa8:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001fac:	da01      	bge.n	8001fb2 <HAL_UART_RxCpltCallback+0x1ae>
 8001fae:	239c      	movs	r3, #156	@ 0x9c
 8001fb0:	77bb      	strb	r3, [r7, #30]
                        int16_t pulse = (duty * 4799) / 100;
 8001fb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fb6:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80020bc <HAL_UART_RxCpltCallback+0x2b8>)
 8001fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc4:	1152      	asrs	r2, r2, #5
 8001fc6:	17db      	asrs	r3, r3, #31
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	83bb      	strh	r3, [r7, #28]
                        if (pulse < 0) pulse = -pulse;
 8001fcc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da03      	bge.n	8001fdc <HAL_UART_RxCpltCallback+0x1d8>
 8001fd4:	8bbb      	ldrh	r3, [r7, #28]
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	83bb      	strh	r3, [r7, #28]

                        if (motor_num == 1)
 8001fdc:	7d7b      	ldrb	r3, [r7, #21]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10c      	bne.n	8001ffc <HAL_UART_RxCpltCallback+0x1f8>
                            set_duty(&motor_1, (duty >= 0) ? pulse : 0);
 8001fe2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db02      	blt.n	8001ff0 <HAL_UART_RxCpltCallback+0x1ec>
 8001fea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fee:	e000      	b.n	8001ff2 <HAL_UART_RxCpltCallback+0x1ee>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4832      	ldr	r0, [pc, #200]	@ (80020c0 <HAL_UART_RxCpltCallback+0x2bc>)
 8001ff6:	f000 fa94 	bl	8002522 <set_duty>
 8001ffa:	e00b      	b.n	8002014 <HAL_UART_RxCpltCallback+0x210>
                        else
                            set_duty(&motor_2, (duty >= 0) ? pulse : 0);
 8001ffc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db02      	blt.n	800200a <HAL_UART_RxCpltCallback+0x206>
 8002004:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002008:	e000      	b.n	800200c <HAL_UART_RxCpltCallback+0x208>
 800200a:	2300      	movs	r3, #0
 800200c:	4619      	mov	r1, r3
 800200e:	482d      	ldr	r0, [pc, #180]	@ (80020c4 <HAL_UART_RxCpltCallback+0x2c0>)
 8002010:	f000 fa87 	bl	8002522 <set_duty>

                        sprintf((char*)tx_buf, "Motor %d set to duty %d\r\n", motor_num, duty);
 8002014:	7d7a      	ldrb	r2, [r7, #21]
 8002016:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800201a:	492b      	ldr	r1, [pc, #172]	@ (80020c8 <HAL_UART_RxCpltCallback+0x2c4>)
 800201c:	4824      	ldr	r0, [pc, #144]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2ac>)
 800201e:	f005 f895 	bl	800714c <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8002022:	4823      	ldr	r0, [pc, #140]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002024:	f7fe f8dc 	bl	80001e0 <strlen>
 8002028:	4603      	mov	r3, r0
 800202a:	b29a      	uxth	r2, r3
 800202c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002030:	491f      	ldr	r1, [pc, #124]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002032:	481d      	ldr	r0, [pc, #116]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8002034:	f003 fff6 	bl	8006024 <HAL_UART_Transmit>
 8002038:	e131      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === SERVO COMMAND: S1XX / S2XX ===
                else if (cmd_buffer[0] == 'S')
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b53      	cmp	r3, #83	@ 0x53
 8002040:	f040 80ad 	bne.w	800219e <HAL_UART_RxCpltCallback+0x39a>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8002044:	4816      	ldr	r0, [pc, #88]	@ (80020a0 <HAL_UART_RxCpltCallback+0x29c>)
 8002046:	f7ff f9d6 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 800204a:	4603      	mov	r3, r0
 800204c:	2b02      	cmp	r3, #2
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_UART_RxCpltCallback+0x266>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Servo command not allowed in this state\r\n", 41, 1000);
 800205a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205e:	2229      	movs	r2, #41	@ 0x29
 8002060:	491a      	ldr	r1, [pc, #104]	@ (80020cc <HAL_UART_RxCpltCallback+0x2c8>)
 8002062:	4811      	ldr	r0, [pc, #68]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8002064:	f003 ffde 	bl	8006024 <HAL_UART_Transmit>
 8002068:	e119      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 800206c:	785b      	ldrb	r3, [r3, #1]
 800206e:	2b30      	cmp	r3, #48	@ 0x30
 8002070:	d903      	bls.n	800207a <HAL_UART_RxCpltCallback+0x276>
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_UART_RxCpltCallback+0x294>)
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	2b32      	cmp	r3, #50	@ 0x32
 8002078:	d92c      	bls.n	80020d4 <HAL_UART_RxCpltCallback+0x2d0>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Servo Number\r\n", 23, 1000);
 800207a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207e:	2217      	movs	r2, #23
 8002080:	4913      	ldr	r1, [pc, #76]	@ (80020d0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002082:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8002084:	f003 ffce 	bl	8006024 <HAL_UART_Transmit>
 8002088:	e109      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
 800208a:	bf00      	nop
 800208c:	40011000 	.word	0x40011000
 8002090:	20000354 	.word	0x20000354
 8002094:	20000424 	.word	0x20000424
 8002098:	200003e4 	.word	0x200003e4
 800209c:	08007b24 	.word	0x08007b24
 80020a0:	200000b8 	.word	0x200000b8
 80020a4:	08007b2c 	.word	0x08007b2c
 80020a8:	200002cc 	.word	0x200002cc
 80020ac:	08007b3c 	.word	0x08007b3c
 80020b0:	20000314 	.word	0x20000314
 80020b4:	08007b4c 	.word	0x08007b4c
 80020b8:	08007b78 	.word	0x08007b78
 80020bc:	51eb851f 	.word	0x51eb851f
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000008 	.word	0x20000008
 80020c8:	08007b90 	.word	0x08007b90
 80020cc:	08007bac 	.word	0x08007bac
 80020d0:	08007bd8 	.word	0x08007bd8
                    } else {
                        uint8_t servo_num = cmd_buffer[1] - '0';
 80020d4:	4b7f      	ldr	r3, [pc, #508]	@ (80022d4 <HAL_UART_RxCpltCallback+0x4d0>)
 80020d6:	785b      	ldrb	r3, [r3, #1]
 80020d8:	3b30      	subs	r3, #48	@ 0x30
 80020da:	763b      	strb	r3, [r7, #24]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	2100      	movs	r1, #0
 80020e2:	460a      	mov	r2, r1
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	460a      	mov	r2, r1
 80020e8:	709a      	strb	r2, [r3, #2]
 80020ea:	4b7a      	ldr	r3, [pc, #488]	@ (80022d4 <HAL_UART_RxCpltCallback+0x4d0>)
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	733b      	strb	r3, [r7, #12]
 80020f0:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <HAL_UART_RxCpltCallback+0x4d0>)
 80020f2:	78db      	ldrb	r3, [r3, #3]
 80020f4:	737b      	strb	r3, [r7, #13]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2210      	movs	r2, #16
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f005 f810 	bl	8007124 <strtol>
 8002104:	4603      	mov	r3, r0
 8002106:	76fb      	strb	r3, [r7, #27]
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 8002108:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800210c:	2b64      	cmp	r3, #100	@ 0x64
 800210e:	dd01      	ble.n	8002114 <HAL_UART_RxCpltCallback+0x310>
 8002110:	2364      	movs	r3, #100	@ 0x64
 8002112:	76fb      	strb	r3, [r7, #27]
                        if (duty < -100) duty = -100;
 8002114:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002118:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800211c:	da01      	bge.n	8002122 <HAL_UART_RxCpltCallback+0x31e>
 800211e:	239c      	movs	r3, #156	@ 0x9c
 8002120:	76fb      	strb	r3, [r7, #27]

                        int16_t pulse = duty * (8275 - 1655) / 100 + 1655;
 8002122:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002126:	f641 12dc 	movw	r2, #6620	@ 0x19dc
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	4a6a      	ldr	r2, [pc, #424]	@ (80022d8 <HAL_UART_RxCpltCallback+0x4d4>)
 8002130:	fb82 1203 	smull	r1, r2, r2, r3
 8002134:	1152      	asrs	r2, r2, #5
 8002136:	17db      	asrs	r3, r3, #31
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	b29b      	uxth	r3, r3
 800213c:	f203 6377 	addw	r3, r3, #1655	@ 0x677
 8002140:	b29b      	uxth	r3, r3
 8002142:	82fb      	strh	r3, [r7, #22]
                        if (pulse < 0) {
 8002144:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da06      	bge.n	800215a <HAL_UART_RxCpltCallback+0x356>
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Duty\r\n", 15, 1000);
 800214c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002150:	220f      	movs	r2, #15
 8002152:	4962      	ldr	r1, [pc, #392]	@ (80022dc <HAL_UART_RxCpltCallback+0x4d8>)
 8002154:	4862      	ldr	r0, [pc, #392]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 8002156:	f003 ff65 	bl	8006024 <HAL_UART_Transmit>
                        }

                        if (servo_num == 1)
 800215a:	7e3b      	ldrb	r3, [r7, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10b      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x374>
                            servo_duty(&servo_1, (duty >= 0) ? pulse : 0);
 8002160:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db02      	blt.n	800216e <HAL_UART_RxCpltCallback+0x36a>
 8002168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800216c:	e000      	b.n	8002170 <HAL_UART_RxCpltCallback+0x36c>
 800216e:	2300      	movs	r3, #0
 8002170:	4619      	mov	r1, r3
 8002172:	485c      	ldr	r0, [pc, #368]	@ (80022e4 <HAL_UART_RxCpltCallback+0x4e0>)
 8002174:	f000 fbc1 	bl	80028fa <servo_duty>
                        else
                            ; // placeholder for servo_2

                        sprintf((char*)tx_buf, "Servo %d set to duty %d\r\n", servo_num, duty);
 8002178:	7e3a      	ldrb	r2, [r7, #24]
 800217a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800217e:	495a      	ldr	r1, [pc, #360]	@ (80022e8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002180:	485a      	ldr	r0, [pc, #360]	@ (80022ec <HAL_UART_RxCpltCallback+0x4e8>)
 8002182:	f004 ffe3 	bl	800714c <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8002186:	4859      	ldr	r0, [pc, #356]	@ (80022ec <HAL_UART_RxCpltCallback+0x4e8>)
 8002188:	f7fe f82a 	bl	80001e0 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	b29a      	uxth	r2, r3
 8002190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002194:	4955      	ldr	r1, [pc, #340]	@ (80022ec <HAL_UART_RxCpltCallback+0x4e8>)
 8002196:	4852      	ldr	r0, [pc, #328]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 8002198:	f003 ff44 	bl	8006024 <HAL_UART_Transmit>
 800219c:	e07f      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === MOVEMENT COMMANDS (W/A/S/D) ===
                else if (fsm.get_state() == FSM::S2_MANUAL_STEP_INPUT || fsm.get_state() == FSM::S3_MANUAL_TARGET)
 800219e:	4854      	ldr	r0, [pc, #336]	@ (80022f0 <HAL_UART_RxCpltCallback+0x4ec>)
 80021a0:	f7ff f929 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d005      	beq.n	80021b6 <HAL_UART_RxCpltCallback+0x3b2>
 80021aa:	4851      	ldr	r0, [pc, #324]	@ (80022f0 <HAL_UART_RxCpltCallback+0x4ec>)
 80021ac:	f7ff f923 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d101      	bne.n	80021ba <HAL_UART_RxCpltCallback+0x3b6>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_UART_RxCpltCallback+0x3b8>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05f      	beq.n	8002280 <HAL_UART_RxCpltCallback+0x47c>
                {
                    char dir = cmd_buffer[0];
 80021c0:	4b44      	ldr	r3, [pc, #272]	@ (80022d4 <HAL_UART_RxCpltCallback+0x4d0>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	767b      	strb	r3, [r7, #25]
                    switch (dir) {
 80021c6:	7e7b      	ldrb	r3, [r7, #25]
 80021c8:	3b41      	subs	r3, #65	@ 0x41
 80021ca:	2b16      	cmp	r3, #22
 80021cc:	d850      	bhi.n	8002270 <HAL_UART_RxCpltCallback+0x46c>
 80021ce:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <HAL_UART_RxCpltCallback+0x3d0>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	08002241 	.word	0x08002241
 80021d8:	08002271 	.word	0x08002271
 80021dc:	08002271 	.word	0x08002271
 80021e0:	08002261 	.word	0x08002261
 80021e4:	08002271 	.word	0x08002271
 80021e8:	08002271 	.word	0x08002271
 80021ec:	08002271 	.word	0x08002271
 80021f0:	08002271 	.word	0x08002271
 80021f4:	08002271 	.word	0x08002271
 80021f8:	08002271 	.word	0x08002271
 80021fc:	08002271 	.word	0x08002271
 8002200:	08002271 	.word	0x08002271
 8002204:	08002271 	.word	0x08002271
 8002208:	08002271 	.word	0x08002271
 800220c:	08002271 	.word	0x08002271
 8002210:	08002271 	.word	0x08002271
 8002214:	08002271 	.word	0x08002271
 8002218:	08002271 	.word	0x08002271
 800221c:	08002251 	.word	0x08002251
 8002220:	08002271 	.word	0x08002271
 8002224:	08002271 	.word	0x08002271
 8002228:	08002271 	.word	0x08002271
 800222c:	08002231 	.word	0x08002231
                        case 'W': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Up\r\n", 9, 1000); break;
 8002230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002234:	2209      	movs	r2, #9
 8002236:	492f      	ldr	r1, [pc, #188]	@ (80022f4 <HAL_UART_RxCpltCallback+0x4f0>)
 8002238:	4829      	ldr	r0, [pc, #164]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800223a:	f003 fef3 	bl	8006024 <HAL_UART_Transmit>
 800223e:	e02e      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                        case 'A': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Left\r\n", 11, 1000); break;
 8002240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002244:	220b      	movs	r2, #11
 8002246:	492c      	ldr	r1, [pc, #176]	@ (80022f8 <HAL_UART_RxCpltCallback+0x4f4>)
 8002248:	4825      	ldr	r0, [pc, #148]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800224a:	f003 feeb 	bl	8006024 <HAL_UART_Transmit>
 800224e:	e026      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                        case 'S': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Down\r\n", 11, 1000); break;
 8002250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002254:	220b      	movs	r2, #11
 8002256:	4929      	ldr	r1, [pc, #164]	@ (80022fc <HAL_UART_RxCpltCallback+0x4f8>)
 8002258:	4821      	ldr	r0, [pc, #132]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800225a:	f003 fee3 	bl	8006024 <HAL_UART_Transmit>
 800225e:	e01e      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                        case 'D': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Right\r\n", 12, 1000); break;
 8002260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002264:	220c      	movs	r2, #12
 8002266:	4926      	ldr	r1, [pc, #152]	@ (8002300 <HAL_UART_RxCpltCallback+0x4fc>)
 8002268:	481d      	ldr	r0, [pc, #116]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800226a:	f003 fedb 	bl	8006024 <HAL_UART_Transmit>
 800226e:	e016      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Unknown Direction\r\n", 20, 1000);
 8002270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002274:	2214      	movs	r2, #20
 8002276:	4923      	ldr	r1, [pc, #140]	@ (8002304 <HAL_UART_RxCpltCallback+0x500>)
 8002278:	4819      	ldr	r0, [pc, #100]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800227a:	f003 fed3 	bl	8006024 <HAL_UART_Transmit>
                            break;
 800227e:	e00e      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                    }
                }

                // === INVALID COMMAND ===
                else {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8002280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002284:	2212      	movs	r2, #18
 8002286:	4920      	ldr	r1, [pc, #128]	@ (8002308 <HAL_UART_RxCpltCallback+0x504>)
 8002288:	4815      	ldr	r0, [pc, #84]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800228a:	f003 fecb 	bl	8006024 <HAL_UART_Transmit>
 800228e:	e006      	b.n	800229e <HAL_UART_RxCpltCallback+0x49a>
                }
            }
            else {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 8002290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002294:	2212      	movs	r2, #18
 8002296:	491c      	ldr	r1, [pc, #112]	@ (8002308 <HAL_UART_RxCpltCallback+0x504>)
 8002298:	4811      	ldr	r0, [pc, #68]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 800229a:	f003 fec3 	bl	8006024 <HAL_UART_Transmit>
            }

            cmd_index = 0; // reset buffer
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_UART_RxCpltCallback+0x508>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
        }
 80022a4:	e00d      	b.n	80022c2 <HAL_UART_RxCpltCallback+0x4be>
        else
        {
            if (cmd_index < sizeof(cmd_buffer) - 1)
 80022a6:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_UART_RxCpltCallback+0x508>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80022ac:	d809      	bhi.n	80022c2 <HAL_UART_RxCpltCallback+0x4be>
                cmd_buffer[cmd_index++] = c;
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <HAL_UART_RxCpltCallback+0x508>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	b2d1      	uxtb	r1, r2
 80022b6:	4a15      	ldr	r2, [pc, #84]	@ (800230c <HAL_UART_RxCpltCallback+0x508>)
 80022b8:	7011      	strb	r1, [r2, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <HAL_UART_RxCpltCallback+0x4d0>)
 80022be:	7ebb      	ldrb	r3, [r7, #26]
 80022c0:	5453      	strb	r3, [r2, r1]
        }

        // Enable next UART RX interrupt
        HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80022c2:	2201      	movs	r2, #1
 80022c4:	4912      	ldr	r1, [pc, #72]	@ (8002310 <HAL_UART_RxCpltCallback+0x50c>)
 80022c6:	4806      	ldr	r0, [pc, #24]	@ (80022e0 <HAL_UART_RxCpltCallback+0x4dc>)
 80022c8:	f003 ff37 	bl	800613a <HAL_UART_Receive_IT>
    }
}
 80022cc:	bf00      	nop
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200003e4 	.word	0x200003e4
 80022d8:	51eb851f 	.word	0x51eb851f
 80022dc:	08007bf0 	.word	0x08007bf0
 80022e0:	200002cc 	.word	0x200002cc
 80022e4:	20000034 	.word	0x20000034
 80022e8:	08007c00 	.word	0x08007c00
 80022ec:	20000314 	.word	0x20000314
 80022f0:	200000b8 	.word	0x200000b8
 80022f4:	08007c1c 	.word	0x08007c1c
 80022f8:	08007c28 	.word	0x08007c28
 80022fc:	08007c34 	.word	0x08007c34
 8002300:	08007c40 	.word	0x08007c40
 8002304:	08007c50 	.word	0x08007c50
 8002308:	08007c64 	.word	0x08007c64
 800230c:	20000424 	.word	0x20000424
 8002310:	20000354 	.word	0x20000354

08002314 <_ZL14initialize_IMUv>:


void initialize_IMU(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800231a:	2064      	movs	r0, #100	@ 0x64
 800231c:	f000 feb4 	bl	8003088 <HAL_Delay>
	sprintf((char*)log_buf, "INIT IMU \r\n");
 8002320:	496a      	ldr	r1, [pc, #424]	@ (80024cc <_ZL14initialize_IMUv+0x1b8>)
 8002322:	486b      	ldr	r0, [pc, #428]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002324:	f004 ff12 	bl	800714c <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*) log_buf, strlen((char*)log_buf), 1000);
 8002328:	4869      	ldr	r0, [pc, #420]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800232a:	f7fd ff59 	bl	80001e0 <strlen>
 800232e:	4603      	mov	r3, r0
 8002330:	b29a      	uxth	r2, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	4966      	ldr	r1, [pc, #408]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002338:	4866      	ldr	r0, [pc, #408]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 800233a:	f003 fe73 	bl	8006024 <HAL_UART_Transmit>
	  if(HAL_I2C_IsDeviceReady (&hi2c3, 0x28 << 1, 10, 500) == HAL_OK) {
 800233e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002342:	220a      	movs	r2, #10
 8002344:	2150      	movs	r1, #80	@ 0x50
 8002346:	4864      	ldr	r0, [pc, #400]	@ (80024d8 <_ZL14initialize_IMUv+0x1c4>)
 8002348:	f001 fe74 	bl	8004034 <HAL_I2C_IsDeviceReady>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d114      	bne.n	8002386 <_ZL14initialize_IMUv+0x72>

	  } else {
		  const int error = HAL_I2C_GetError(&hi2c3);
 800235c:	485e      	ldr	r0, [pc, #376]	@ (80024d8 <_ZL14initialize_IMUv+0x1c4>)
 800235e:	f001 ff97 	bl	8004290 <HAL_I2C_GetError>
 8002362:	4603      	mov	r3, r0
 8002364:	607b      	str	r3, [r7, #4]
		  sprintf((char*)log_buf, "Device status error: %d\r\n", error);
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	495c      	ldr	r1, [pc, #368]	@ (80024dc <_ZL14initialize_IMUv+0x1c8>)
 800236a:	4859      	ldr	r0, [pc, #356]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800236c:	f004 feee 	bl	800714c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8002370:	4857      	ldr	r0, [pc, #348]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002372:	f7fd ff35 	bl	80001e0 <strlen>
 8002376:	4603      	mov	r3, r0
 8002378:	b29a      	uxth	r2, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237e:	4954      	ldr	r1, [pc, #336]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002380:	4854      	ldr	r0, [pc, #336]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 8002382:	f003 fe4f 	bl	8006024 <HAL_UART_Transmit>
	  }


	  if(bno055_get_operation_mode(&op_mode) != 0) {
 8002386:	4856      	ldr	r0, [pc, #344]	@ (80024e0 <_ZL14initialize_IMUv+0x1cc>)
 8002388:	f7fe fe64 	bl	8001054 <bno055_get_operation_mode>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00f      	beq.n	80023bc <_ZL14initialize_IMUv+0xa8>
		  sprintf((char*)log_buf, "Failed to read op mode\r\n");
 800239c:	4951      	ldr	r1, [pc, #324]	@ (80024e4 <_ZL14initialize_IMUv+0x1d0>)
 800239e:	484c      	ldr	r0, [pc, #304]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023a0:	f004 fed4 	bl	800714c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80023a4:	484a      	ldr	r0, [pc, #296]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023a6:	f7fd ff1b 	bl	80001e0 <strlen>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b2:	4947      	ldr	r1, [pc, #284]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023b4:	4847      	ldr	r0, [pc, #284]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 80023b6:	f003 fe35 	bl	8006024 <HAL_UART_Transmit>
 80023ba:	e011      	b.n	80023e0 <_ZL14initialize_IMUv+0xcc>
	  } else {
		  sprintf((char*)log_buf, "Op mode is: %d \r\n", op_mode);
 80023bc:	4b48      	ldr	r3, [pc, #288]	@ (80024e0 <_ZL14initialize_IMUv+0x1cc>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4949      	ldr	r1, [pc, #292]	@ (80024e8 <_ZL14initialize_IMUv+0x1d4>)
 80023c4:	4842      	ldr	r0, [pc, #264]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023c6:	f004 fec1 	bl	800714c <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*) log_buf, strlen((char*)log_buf), 1000);
 80023ca:	4841      	ldr	r0, [pc, #260]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023cc:	f7fd ff08 	bl	80001e0 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d8:	493d      	ldr	r1, [pc, #244]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023da:	483e      	ldr	r0, [pc, #248]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 80023dc:	f003 fe22 	bl	8006024 <HAL_UART_Transmit>
	  }


	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG)) {
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fe79 	bl	80010d8 <bno055_set_operation_mode>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 80023ec:	d012      	beq.n	8002414 <_ZL14initialize_IMUv+0x100>
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d11f      	bne.n	8002434 <_ZL14initialize_IMUv+0x120>
	    	  case BNO055_ERROR:
	    		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 80023f4:	493d      	ldr	r1, [pc, #244]	@ (80024ec <_ZL14initialize_IMUv+0x1d8>)
 80023f6:	4836      	ldr	r0, [pc, #216]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023f8:	f004 fea8 	bl	800714c <siprintf>
	    		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80023fc:	4834      	ldr	r0, [pc, #208]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80023fe:	f7fd feef 	bl	80001e0 <strlen>
 8002402:	4603      	mov	r3, r0
 8002404:	b29a      	uxth	r2, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800240a:	4931      	ldr	r1, [pc, #196]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800240c:	4831      	ldr	r0, [pc, #196]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 800240e:	f003 fe09 	bl	8006024 <HAL_UART_Transmit>
	    		  break;
 8002412:	e010      	b.n	8002436 <_ZL14initialize_IMUv+0x122>
	    	  case BNO055_E_NULL_PTR:
	    		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 8002414:	4936      	ldr	r1, [pc, #216]	@ (80024f0 <_ZL14initialize_IMUv+0x1dc>)
 8002416:	482e      	ldr	r0, [pc, #184]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002418:	f004 fe98 	bl	800714c <siprintf>
	    		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 800241c:	482c      	ldr	r0, [pc, #176]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800241e:	f7fd fedf 	bl	80001e0 <strlen>
 8002422:	4603      	mov	r3, r0
 8002424:	b29a      	uxth	r2, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800242a:	4929      	ldr	r1, [pc, #164]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800242c:	4829      	ldr	r0, [pc, #164]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 800242e:	f003 fdf9 	bl	8006024 <HAL_UART_Transmit>
	    		  break;
 8002432:	e000      	b.n	8002436 <_ZL14initialize_IMUv+0x122>
	    	  default:
	    		  break;
 8002434:	bf00      	nop
	  }
	  HAL_Delay(100);
 8002436:	2064      	movs	r0, #100	@ 0x64
 8002438:	f000 fe26 	bl	8003088 <HAL_Delay>
	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS)) {
 800243c:	2008      	movs	r0, #8
 800243e:	f7fe fe4b 	bl	80010d8 <bno055_set_operation_mode>
 8002442:	4603      	mov	r3, r0
 8002444:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8002448:	d012      	beq.n	8002470 <_ZL14initialize_IMUv+0x15c>
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d11f      	bne.n	8002490 <_ZL14initialize_IMUv+0x17c>
	  	  case BNO055_ERROR:
	  		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 8002450:	4926      	ldr	r1, [pc, #152]	@ (80024ec <_ZL14initialize_IMUv+0x1d8>)
 8002452:	481f      	ldr	r0, [pc, #124]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002454:	f004 fe7a 	bl	800714c <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8002458:	481d      	ldr	r0, [pc, #116]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800245a:	f7fd fec1 	bl	80001e0 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	b29a      	uxth	r2, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002466:	491a      	ldr	r1, [pc, #104]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002468:	481a      	ldr	r0, [pc, #104]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 800246a:	f003 fddb 	bl	8006024 <HAL_UART_Transmit>
	  		  break;
 800246e:	e010      	b.n	8002492 <_ZL14initialize_IMUv+0x17e>
	  	  case BNO055_E_NULL_PTR:
	  		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 8002470:	491f      	ldr	r1, [pc, #124]	@ (80024f0 <_ZL14initialize_IMUv+0x1dc>)
 8002472:	4817      	ldr	r0, [pc, #92]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002474:	f004 fe6a 	bl	800714c <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8002478:	4815      	ldr	r0, [pc, #84]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 800247a:	f7fd feb1 	bl	80001e0 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29a      	uxth	r2, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002486:	4912      	ldr	r1, [pc, #72]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 8002488:	4812      	ldr	r0, [pc, #72]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 800248a:	f003 fdcb 	bl	8006024 <HAL_UART_Transmit>
	  		  break;
 800248e:	e000      	b.n	8002492 <_ZL14initialize_IMUv+0x17e>
	  	  default:
	  		  break;
 8002490:	bf00      	nop
	}
	  bno055_get_operation_mode(&op_mode);
 8002492:	4813      	ldr	r0, [pc, #76]	@ (80024e0 <_ZL14initialize_IMUv+0x1cc>)
 8002494:	f7fe fdde 	bl	8001054 <bno055_get_operation_mode>
	  sprintf((char*)log_buf, "Set Op Mode to: %d \r\n", op_mode);
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <_ZL14initialize_IMUv+0x1cc>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4915      	ldr	r1, [pc, #84]	@ (80024f4 <_ZL14initialize_IMUv+0x1e0>)
 80024a0:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80024a2:	f004 fe53 	bl	800714c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80024a6:	480a      	ldr	r0, [pc, #40]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80024a8:	f7fd fe9a 	bl	80001e0 <strlen>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b4:	4906      	ldr	r1, [pc, #24]	@ (80024d0 <_ZL14initialize_IMUv+0x1bc>)
 80024b6:	4807      	ldr	r0, [pc, #28]	@ (80024d4 <_ZL14initialize_IMUv+0x1c0>)
 80024b8:	f003 fdb4 	bl	8006024 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 80024bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024c0:	f000 fde2 	bl	8003088 <HAL_Delay>



}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	08007c78 	.word	0x08007c78
 80024d0:	20000394 	.word	0x20000394
 80024d4:	200002cc 	.word	0x200002cc
 80024d8:	20000110 	.word	0x20000110
 80024dc:	08007c84 	.word	0x08007c84
 80024e0:	200003e0 	.word	0x200003e0
 80024e4:	08007ca0 	.word	0x08007ca0
 80024e8:	08007cbc 	.word	0x08007cbc
 80024ec:	08007cd0 	.word	0x08007cd0
 80024f0:	08007cec 	.word	0x08007cec
 80024f4:	08007d00 	.word	0x08007d00

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <Error_Handler+0x8>

08002504 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  FSM fsm;
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800250a:	f7fe ff2b 	bl	8001364 <_ZN3FSMC1Ev>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200000b8 	.word	0x200000b8

08002518 <_GLOBAL__sub_I_fsm>:
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
 800251c:	f7ff fff2 	bl	8002504 <_Z41__static_initialization_and_destruction_0v>
 8002520:	bd80      	pop	{r7, pc}

08002522 <set_duty>:
};




void set_duty(motor_t* motor, uint32_t pulse_1) {
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <set_duty+0x1e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800253e:	e018      	b.n	8002572 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d105      	bne.n	8002554 <set_duty+0x32>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002552:	e00e      	b.n	8002572 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d105      	bne.n	8002568 <set_duty+0x46>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002566:	e004      	b.n	8002572 <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <motor_d_update_pos>:
}
//Sets
//@param motor_dual*, a motor with two PWM inputs
//@param PI_Controller*, controller

void motor_d_update_pos(motor_dual* motor_d, PI_Controller* ctrl) {
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    int32_t current_count = __HAL_TIM_GET_COUNTER(motor_d->enc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	61bb      	str	r3, [r7, #24]
    int32_t error = ctrl->setpoint - current_count;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]

    //calculate deltaT
   	uint32_t deltaT = HAL_GetTick() - ctrl->prevTick;
 800259e:	f000 fd67 	bl	8003070 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	613b      	str	r3, [r7, #16]
   	ctrl->prevTick = HAL_GetTick();
 80025ac:	f000 fd60 	bl	8003070 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	611a      	str	r2, [r3, #16]

    // Update integral
    ctrl->integral += error*deltaT*0.001;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ffcc 	bl	8000558 <__aeabi_f2d>
 80025c0:	4604      	mov	r4, r0
 80025c2:	460d      	mov	r5, r1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffa1 	bl	8000514 <__aeabi_ui2d>
 80025d2:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002874 <motor_d_update_pos+0x2f4>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fe f816 	bl	8000608 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fd fe5a 	bl	800029c <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fa1c 	bl	8000a2c <__aeabi_d2f>
 80025f4:	4602      	mov	r2, r0
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	609a      	str	r2, [r3, #8]

    // Anti-windup (optional)
    if (ctrl->integral > 10000) ctrl->integral = 10000;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002600:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8002858 <motor_d_update_pos+0x2d8>
 8002604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	dd02      	ble.n	8002614 <motor_d_update_pos+0x94>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	4a92      	ldr	r2, [pc, #584]	@ (800285c <motor_d_update_pos+0x2dc>)
 8002612:	609a      	str	r2, [r3, #8]
    if (ctrl->integral < -10000) ctrl->integral = -10000;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	edd3 7a02 	vldr	s15, [r3, #8]
 800261a:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8002860 <motor_d_update_pos+0x2e0>
 800261e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	d502      	bpl.n	800262e <motor_d_update_pos+0xae>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4a8e      	ldr	r2, [pc, #568]	@ (8002864 <motor_d_update_pos+0x2e4>)
 800262c:	609a      	str	r2, [r3, #8]

    // PI output
    float control = ctrl->Kp * error + ctrl->Ki * ctrl->integral;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	edd3 6a01 	vldr	s13, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	edd3 7a02 	vldr	s15, [r3, #8]
 800264e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002656:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert to PWM pulse
    int16_t pulse = fabs(control);
 800265a:	edd7 7a03 	vldr	s15, [r7, #12]
 800265e:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8002868 <motor_d_update_pos+0x2e8>
 8002662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	dd02      	ble.n	8002672 <motor_d_update_pos+0xf2>
 800266c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002670:	e011      	b.n	8002696 <motor_d_update_pos+0x116>
 8002672:	edd7 7a03 	vldr	s15, [r7, #12]
 8002676:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 800286c <motor_d_update_pos+0x2ec>
 800267a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d501      	bpl.n	8002688 <motor_d_update_pos+0x108>
 8002684:	4b7a      	ldr	r3, [pc, #488]	@ (8002870 <motor_d_update_pos+0x2f0>)
 8002686:	e006      	b.n	8002696 <motor_d_update_pos+0x116>
 8002688:	edd7 7a03 	vldr	s15, [r7, #12]
 800268c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002690:	ee17 3a90 	vmov	r3, s15
 8002694:	b21b      	sxth	r3, r3
 8002696:	83fb      	strh	r3, [r7, #30]
    if (pulse > 4799) pulse = 4799;
 8002698:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800269c:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 80026a0:	db02      	blt.n	80026a8 <motor_d_update_pos+0x128>
 80026a2:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 80026a6:	83fb      	strh	r3, [r7, #30]

    // Set direction based on sign
    if (control > 4) {
 80026a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026ac:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80026b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	dd4a      	ble.n	8002750 <motor_d_update_pos+0x1d0>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, 0);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <motor_d_update_pos+0x14e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80026cc:	e018      	b.n	8002700 <motor_d_update_pos+0x180>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d105      	bne.n	80026e2 <motor_d_update_pos+0x162>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	6393      	str	r3, [r2, #56]	@ 0x38
 80026e0:	e00e      	b.n	8002700 <motor_d_update_pos+0x180>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d105      	bne.n	80026f6 <motor_d_update_pos+0x176>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2300      	movs	r3, #0
 80026f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80026f4:	e004      	b.n	8002700 <motor_d_update_pos+0x180>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <motor_d_update_pos+0x196>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002712:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        // Stop motor if within small error band
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, 0);
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
    }
}
 8002714:	e0cc      	b.n	80028b0 <motor_d_update_pos+0x330>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d106      	bne.n	800272c <motor_d_update_pos+0x1ac>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002728:	6393      	str	r3, [r2, #56]	@ 0x38
 800272a:	e0c1      	b.n	80028b0 <motor_d_update_pos+0x330>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d106      	bne.n	8002742 <motor_d_update_pos+0x1c2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800273e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002740:	e0b6      	b.n	80028b0 <motor_d_update_pos+0x330>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800274e:	e0af      	b.n	80028b0 <motor_d_update_pos+0x330>
    } else if (control < -4) {
 8002750:	edd7 7a03 	vldr	s15, [r7, #12]
 8002754:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8002758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	d54a      	bpl.n	80027f8 <motor_d_update_pos+0x278>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, pulse);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <motor_d_update_pos+0x1f8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34
 8002776:	e01b      	b.n	80027b0 <motor_d_update_pos+0x230>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d106      	bne.n	800278e <motor_d_update_pos+0x20e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800278a:	6393      	str	r3, [r2, #56]	@ 0x38
 800278c:	e010      	b.n	80027b0 <motor_d_update_pos+0x230>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b08      	cmp	r3, #8
 8002794:	d106      	bne.n	80027a4 <motor_d_update_pos+0x224>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027a2:	e005      	b.n	80027b0 <motor_d_update_pos+0x230>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027ae:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <motor_d_update_pos+0x244>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80027c2:	e075      	b.n	80028b0 <motor_d_update_pos+0x330>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d105      	bne.n	80027d8 <motor_d_update_pos+0x258>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80027d6:	e06b      	b.n	80028b0 <motor_d_update_pos+0x330>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d105      	bne.n	80027ec <motor_d_update_pos+0x26c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2300      	movs	r3, #0
 80027e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027ea:	e061      	b.n	80028b0 <motor_d_update_pos+0x330>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2300      	movs	r3, #0
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80027f6:	e05b      	b.n	80028b0 <motor_d_update_pos+0x330>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, 0);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <motor_d_update_pos+0x28c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	@ 0x34
 800280a:	e018      	b.n	800283e <motor_d_update_pos+0x2be>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d105      	bne.n	8002820 <motor_d_update_pos+0x2a0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2300      	movs	r3, #0
 800281c:	6393      	str	r3, [r2, #56]	@ 0x38
 800281e:	e00e      	b.n	800283e <motor_d_update_pos+0x2be>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d105      	bne.n	8002834 <motor_d_update_pos+0x2b4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002832:	e004      	b.n	800283e <motor_d_update_pos+0x2be>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11a      	bne.n	800287c <motor_d_update_pos+0x2fc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002850:	e02e      	b.n	80028b0 <motor_d_update_pos+0x330>
 8002852:	bf00      	nop
 8002854:	f3af 8000 	nop.w
 8002858:	461c4000 	.word	0x461c4000
 800285c:	461c4000 	.word	0x461c4000
 8002860:	c61c4000 	.word	0xc61c4000
 8002864:	c61c4000 	.word	0xc61c4000
 8002868:	457a0000 	.word	0x457a0000
 800286c:	c57a0000 	.word	0xc57a0000
 8002870:	fffff060 	.word	0xfffff060
 8002874:	d2f1a9fc 	.word	0xd2f1a9fc
 8002878:	3f50624d 	.word	0x3f50624d
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d105      	bne.n	8002890 <motor_d_update_pos+0x310>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800288e:	e00f      	b.n	80028b0 <motor_d_update_pos+0x330>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d105      	bne.n	80028a4 <motor_d_update_pos+0x324>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2300      	movs	r3, #0
 80028a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80028a2:	e005      	b.n	80028b0 <motor_d_update_pos+0x330>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80028ae:	e7ff      	b.n	80028b0 <motor_d_update_pos+0x330>
 80028b0:	bf00      	nop
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bdb0      	pop	{r4, r5, r7, pc}

080028b8 <motor_d_set_pos>:


void motor_d_set_pos(motor_dual* motor_d, PI_Controller* ctrl, uint32_t pos) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	ctrl->setpoint = pos + motor_d_get_pos(motor_d);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f80a 	bl	80028de <motor_d_get_pos>
 80028ca:	4602      	mov	r2, r0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	60da      	str	r2, [r3, #12]

}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <motor_d_get_pos>:

uint32_t motor_d_get_pos(motor_dual* motor_d) {
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(motor_d->enc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <servo_duty>:
servo_t servo_1 = {
	.PWM_CHANNEL = TIM_CHANNEL_4,
	.htim = &htim1
};

void servo_duty(servo_t* servo, uint32_t pulse_1) {
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <servo_duty+0x1e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002916:	e018      	b.n	800294a <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d105      	bne.n	800292c <servo_duty+0x32>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800292a:	e00e      	b.n	800294a <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d105      	bne.n	8002940 <servo_duty+0x46>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800293e:	e004      	b.n	800294a <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_MspInit+0x4c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <HAL_MspInit+0x4c>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800296c:	6453      	str	r3, [r2, #68]	@ 0x44
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_MspInit+0x4c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	4a08      	ldr	r2, [pc, #32]	@ (80029a4 <HAL_MspInit+0x4c>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	@ 0x40
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	@ (8002af4 <HAL_I2C_MspInit+0x14c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d13e      	bne.n	8002a48 <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4a49      	ldr	r2, [pc, #292]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ec:	2312      	movs	r3, #18
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029f8:	2304      	movs	r3, #4
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	483e      	ldr	r0, [pc, #248]	@ (8002afc <HAL_I2C_MspInit+0x154>)
 8002a04:	f000 fd08 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0e:	2312      	movs	r3, #18
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4835      	ldr	r0, [pc, #212]	@ (8002afc <HAL_I2C_MspInit+0x154>)
 8002a26:	f000 fcf7 	bl	8003418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a31      	ldr	r2, [pc, #196]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a46:	e050      	b.n	8002aea <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <HAL_I2C_MspInit+0x158>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d14b      	bne.n	8002aea <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	4a27      	ldr	r2, [pc, #156]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a62:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	4a20      	ldr	r2, [pc, #128]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a90:	2312      	movs	r3, #18
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4817      	ldr	r0, [pc, #92]	@ (8002b04 <HAL_I2C_MspInit+0x15c>)
 8002aa8:	f000 fcb6 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab2:	2312      	movs	r3, #18
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002abe:	2309      	movs	r3, #9
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	@ (8002afc <HAL_I2C_MspInit+0x154>)
 8002aca:	f000 fca5 	bl	8003418 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002ad8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_I2C_MspInit+0x150>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
}
 8002aea:	bf00      	nop
 8002aec:	3730      	adds	r7, #48	@ 0x30
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40005800 	.word	0x40005800
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40005c00 	.word	0x40005c00
 8002b04:	40020000 	.word	0x40020000

08002b08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b36:	e026      	b.n	8002b86 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a17      	ldr	r2, [pc, #92]	@ (8002b9c <HAL_TIM_PWM_MspInit+0x94>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
}
 8002b5e:	e012      	b.n	8002b86 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10d      	bne.n	8002b86 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	4a09      	ldr	r2, [pc, #36]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000c00 	.word	0x40000c00

08002ba4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc4:	d12c      	bne.n	8002c20 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	4a2f      	ldr	r2, [pc, #188]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b29      	ldr	r3, [pc, #164]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002bfe:	2322      	movs	r3, #34	@ 0x22
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	481d      	ldr	r0, [pc, #116]	@ (8002c90 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c1a:	f000 fbfd 	bl	8003418 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c1e:	e030      	b.n	8002c82 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12b      	bne.n	8002c82 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3a:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c62:	23c0      	movs	r3, #192	@ 0xc0
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c72:	2302      	movs	r3, #2
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4806      	ldr	r0, [pc, #24]	@ (8002c98 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002c7e:	f000 fbcb 	bl	8003418 <HAL_GPIO_Init>
}
 8002c82:	bf00      	nop
 8002c84:	3730      	adds	r7, #48	@ 0x30
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40000800 	.word	0x40000800
 8002c98:	40020400 	.word	0x40020400

08002c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a36      	ldr	r2, [pc, #216]	@ (8002d94 <HAL_TIM_MspPostInit+0xf8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d11f      	bne.n	8002cfe <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b35      	ldr	r3, [pc, #212]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cec:	2301      	movs	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4829      	ldr	r0, [pc, #164]	@ (8002d9c <HAL_TIM_MspPostInit+0x100>)
 8002cf8:	f000 fb8e 	bl	8003418 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002cfc:	e046      	b.n	8002d8c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a27      	ldr	r2, [pc, #156]	@ (8002da0 <HAL_TIM_MspPostInit+0x104>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d11e      	bne.n	8002d46 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4a21      	ldr	r2, [pc, #132]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d18:	4b1f      	ldr	r3, [pc, #124]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d24:	2333      	movs	r3, #51	@ 0x33
 8002d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d34:	2302      	movs	r3, #2
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4819      	ldr	r0, [pc, #100]	@ (8002da4 <HAL_TIM_MspPostInit+0x108>)
 8002d40:	f000 fb6a 	bl	8003418 <HAL_GPIO_Init>
}
 8002d44:	e022      	b.n	8002d8c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <HAL_TIM_MspPostInit+0x10c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d11d      	bne.n	8002d8c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	4a0f      	ldr	r2, [pc, #60]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d60:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <HAL_TIM_MspPostInit+0xfc>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4619      	mov	r1, r3
 8002d86:	4805      	ldr	r0, [pc, #20]	@ (8002d9c <HAL_TIM_MspPostInit+0x100>)
 8002d88:	f000 fb46 	bl	8003418 <HAL_GPIO_Init>
}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	@ 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40000c00 	.word	0x40000c00

08002dac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <HAL_UART_MspInit+0x94>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d134      	bne.n	8002e38 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e44 <HAL_UART_MspInit+0x98>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <HAL_UART_MspInit+0x98>)
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dde:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_UART_MspInit+0x98>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_UART_MspInit+0x98>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <HAL_UART_MspInit+0x98>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_UART_MspInit+0x98>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002e06:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	4809      	ldr	r0, [pc, #36]	@ (8002e48 <HAL_UART_MspInit+0x9c>)
 8002e24:	f000 faf8 	bl	8003418 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2025      	movs	r0, #37	@ 0x25
 8002e2e:	f000 fa2a 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e32:	2025      	movs	r0, #37	@ 0x25
 8002e34:	f000 fa43 	bl	80032be <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	@ 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <NMI_Handler+0x4>

08002e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <HardFault_Handler+0x4>

08002e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <MemManage_Handler+0x4>

08002e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <BusFault_Handler+0x4>

08002e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <UsageFault_Handler+0x4>

08002e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea2:	f000 f8d1 	bl	8003048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <USART1_IRQHandler+0x10>)
 8002eb2:	f003 f967 	bl	8006184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200002cc 	.word	0x200002cc

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f004 f968 	bl	80071c4 <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20020000 	.word	0x20020000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	20000428 	.word	0x20000428
 8002f28:	20000578 	.word	0x20000578

08002f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <SystemInit+0x20>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <SystemInit+0x20>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f54:	f7ff ffea 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	@ (8002f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f004 f927 	bl	80071d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f82:	f7fe fa45 	bl	8001410 <main>
  bx  lr    
 8002f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002f94:	08007ec8 	.word	0x08007ec8
  ldr r2, =_sbss
 8002f98:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002f9c:	20000578 	.word	0x20000578

08002fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC_IRQHandler>
	...

08002fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe4 <HAL_Init+0x40>)
 8002fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <HAL_Init+0x40>)
 8002fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a07      	ldr	r2, [pc, #28]	@ (8002fe4 <HAL_Init+0x40>)
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fcc:	2003      	movs	r0, #3
 8002fce:	f000 f94f 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd2:	200f      	movs	r0, #15
 8002fd4:	f000 f808 	bl	8002fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd8:	f7ff fcbe 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023c00 	.word	0x40023c00

08002fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_InitTick+0x54>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_InitTick+0x58>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f967 	bl	80032da <HAL_SYSTICK_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00e      	b.n	8003034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b0f      	cmp	r3, #15
 800301a:	d80a      	bhi.n	8003032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800301c:	2200      	movs	r2, #0
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f000 f92f 	bl	8003286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003028:	4a06      	ldr	r2, [pc, #24]	@ (8003044 <HAL_InitTick+0x5c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000003c 	.word	0x2000003c
 8003040:	20000044 	.word	0x20000044
 8003044:	20000040 	.word	0x20000040

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_IncTick+0x20>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_IncTick+0x24>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <HAL_IncTick+0x24>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000044 	.word	0x20000044
 800306c:	2000042c 	.word	0x2000042c

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b03      	ldr	r3, [pc, #12]	@ (8003084 <HAL_GetTick+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	2000042c 	.word	0x2000042c

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff ffee 	bl	8003070 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffde 	bl	8003070 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000044 	.word	0x20000044

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	@ (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	@ (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	@ (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800323c:	d301      	bcc.n	8003242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003242:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <SysTick_Config+0x40>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324a:	210f      	movs	r1, #15
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f7ff ff8e 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <SysTick_Config+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325a:	4b04      	ldr	r3, [pc, #16]	@ (800326c <SysTick_Config+0x40>)
 800325c:	2207      	movs	r2, #7
 800325e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff29 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003298:	f7ff ff3e 	bl	8003118 <__NVIC_GetPriorityGrouping>
 800329c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff8e 	bl	80031c4 <NVIC_EncodePriority>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff5d 	bl	8003170 <__NVIC_SetPriority>
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff31 	bl	8003134 <__NVIC_EnableIRQ>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffa2 	bl	800322c <SysTick_Config>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff feb6 	bl	8003070 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d008      	beq.n	8003324 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	@ 0x80
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e052      	b.n	80033ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0216 	bic.w	r2, r2, #22
 8003332:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003342:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d103      	bne.n	8003354 <HAL_DMA_Abort+0x62>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0208 	bic.w	r2, r2, #8
 8003362:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003374:	e013      	b.n	800339e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003376:	f7ff fe7b 	bl	8003070 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b05      	cmp	r3, #5
 8003382:	d90c      	bls.n	800339e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e015      	b.n	80033ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e4      	bne.n	8003376 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	223f      	movs	r2, #63	@ 0x3f
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d004      	beq.n	80033f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2280      	movs	r2, #128	@ 0x80
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e00c      	b.n	800340a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2205      	movs	r2, #5
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	@ 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e159      	b.n	80036e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003434:	2201      	movs	r2, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	429a      	cmp	r2, r3
 800344e:	f040 8148 	bne.w	80036e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d005      	beq.n	800346a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003466:	2b02      	cmp	r3, #2
 8003468:	d130      	bne.n	80034cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a0:	2201      	movs	r2, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 0201 	and.w	r2, r3, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d017      	beq.n	8003508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d123      	bne.n	800355c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	08da      	lsrs	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3208      	adds	r2, #8
 800351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	220f      	movs	r2, #15
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	08da      	lsrs	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3208      	adds	r2, #8
 8003556:	69b9      	ldr	r1, [r7, #24]
 8003558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0203 	and.w	r2, r3, #3
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a2 	beq.w	80036e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b57      	ldr	r3, [pc, #348]	@ (8003700 <HAL_GPIO_Init+0x2e8>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	4a56      	ldr	r2, [pc, #344]	@ (8003700 <HAL_GPIO_Init+0x2e8>)
 80035a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ae:	4b54      	ldr	r3, [pc, #336]	@ (8003700 <HAL_GPIO_Init+0x2e8>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ba:	4a52      	ldr	r2, [pc, #328]	@ (8003704 <HAL_GPIO_Init+0x2ec>)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	3302      	adds	r3, #2
 80035c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	220f      	movs	r2, #15
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a49      	ldr	r2, [pc, #292]	@ (8003708 <HAL_GPIO_Init+0x2f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x202>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a48      	ldr	r2, [pc, #288]	@ (800370c <HAL_GPIO_Init+0x2f4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x1fe>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a47      	ldr	r2, [pc, #284]	@ (8003710 <HAL_GPIO_Init+0x2f8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x1fa>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a46      	ldr	r2, [pc, #280]	@ (8003714 <HAL_GPIO_Init+0x2fc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x1f6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a45      	ldr	r2, [pc, #276]	@ (8003718 <HAL_GPIO_Init+0x300>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x1f2>
 8003606:	2304      	movs	r3, #4
 8003608:	e008      	b.n	800361c <HAL_GPIO_Init+0x204>
 800360a:	2307      	movs	r3, #7
 800360c:	e006      	b.n	800361c <HAL_GPIO_Init+0x204>
 800360e:	2303      	movs	r3, #3
 8003610:	e004      	b.n	800361c <HAL_GPIO_Init+0x204>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <HAL_GPIO_Init+0x204>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_GPIO_Init+0x204>
 800361a:	2300      	movs	r3, #0
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f002 0203 	and.w	r2, r2, #3
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	4093      	lsls	r3, r2
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800362c:	4935      	ldr	r1, [pc, #212]	@ (8003704 <HAL_GPIO_Init+0x2ec>)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363a:	4b38      	ldr	r3, [pc, #224]	@ (800371c <HAL_GPIO_Init+0x304>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800365e:	4a2f      	ldr	r2, [pc, #188]	@ (800371c <HAL_GPIO_Init+0x304>)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003664:	4b2d      	ldr	r3, [pc, #180]	@ (800371c <HAL_GPIO_Init+0x304>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003688:	4a24      	ldr	r2, [pc, #144]	@ (800371c <HAL_GPIO_Init+0x304>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800368e:	4b23      	ldr	r3, [pc, #140]	@ (800371c <HAL_GPIO_Init+0x304>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b2:	4a1a      	ldr	r2, [pc, #104]	@ (800371c <HAL_GPIO_Init+0x304>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_GPIO_Init+0x304>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036dc:	4a0f      	ldr	r2, [pc, #60]	@ (800371c <HAL_GPIO_Init+0x304>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	f67f aea2 	bls.w	8003434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3724      	adds	r7, #36	@ 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40013800 	.word	0x40013800
 8003708:	40020000 	.word	0x40020000
 800370c:	40020400 	.word	0x40020400
 8003710:	40020800 	.word	0x40020800
 8003714:	40020c00 	.word	0x40020c00
 8003718:	40021000 	.word	0x40021000
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800373c:	e003      	b.n	8003746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	619a      	str	r2, [r3, #24]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e12b      	b.n	80039be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff f914 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	@ 0x24
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b8:	f001 fd5a 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80037bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a81      	ldr	r2, [pc, #516]	@ (80039c8 <HAL_I2C_Init+0x274>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d807      	bhi.n	80037d8 <HAL_I2C_Init+0x84>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a80      	ldr	r2, [pc, #512]	@ (80039cc <HAL_I2C_Init+0x278>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e006      	b.n	80037e6 <HAL_I2C_Init+0x92>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a7d      	ldr	r2, [pc, #500]	@ (80039d0 <HAL_I2C_Init+0x27c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0e7      	b.n	80039be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a78      	ldr	r2, [pc, #480]	@ (80039d4 <HAL_I2C_Init+0x280>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9b      	lsrs	r3, r3, #18
 80037f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a6a      	ldr	r2, [pc, #424]	@ (80039c8 <HAL_I2C_Init+0x274>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d802      	bhi.n	8003828 <HAL_I2C_Init+0xd4>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3301      	adds	r3, #1
 8003826:	e009      	b.n	800383c <HAL_I2C_Init+0xe8>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	4a69      	ldr	r2, [pc, #420]	@ (80039d8 <HAL_I2C_Init+0x284>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	3301      	adds	r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800384e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	495c      	ldr	r1, [pc, #368]	@ (80039c8 <HAL_I2C_Init+0x274>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d819      	bhi.n	8003890 <HAL_I2C_Init+0x13c>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e59      	subs	r1, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fbb1 f3f3 	udiv	r3, r1, r3
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003870:	400b      	ands	r3, r1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_I2C_Init+0x138>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1e59      	subs	r1, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fbb1 f3f3 	udiv	r3, r1, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388a:	e051      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 800388c:	2304      	movs	r3, #4
 800388e:	e04f      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <HAL_I2C_Init+0x168>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Init+0x18e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	0099      	lsls	r1, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Init+0x196>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e022      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10e      	bne.n	8003910 <HAL_I2C_Init+0x1bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e58      	subs	r0, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	440b      	add	r3, r1
 8003900:	fbb0 f3f3 	udiv	r3, r0, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800390e:	e00f      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	0099      	lsls	r1, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	6809      	ldr	r1, [r1, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800395e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6911      	ldr	r1, [r2, #16]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	000186a0 	.word	0x000186a0
 80039cc:	001e847f 	.word	0x001e847f
 80039d0:	003d08ff 	.word	0x003d08ff
 80039d4:	431bde83 	.word	0x431bde83
 80039d8:	10624dd3 	.word	0x10624dd3

080039dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	461a      	mov	r2, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	817b      	strh	r3, [r7, #10]
 80039ee:	460b      	mov	r3, r1
 80039f0:	813b      	strh	r3, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039f6:	f7ff fb3b 	bl	8003070 <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	f040 80d9 	bne.w	8003bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2319      	movs	r3, #25
 8003a10:	2201      	movs	r2, #1
 8003a12:	496d      	ldr	r1, [pc, #436]	@ (8003bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fdc5 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0cc      	b.n	8003bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_Mem_Write+0x56>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e0c5      	b.n	8003bbe <HAL_I2C_Mem_Write+0x1e2>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d007      	beq.n	8003a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2221      	movs	r2, #33	@ 0x21
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a4d      	ldr	r2, [pc, #308]	@ (8003bcc <HAL_I2C_Mem_Write+0x1f0>)
 8003a98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9a:	88f8      	ldrh	r0, [r7, #6]
 8003a9c:	893a      	ldrh	r2, [r7, #8]
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fbfc 	bl	80042a8 <I2C_RequestMemoryWrite>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d052      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e081      	b.n	8003bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fe8a 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d107      	bne.n	8003ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06b      	b.n	8003bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_I2C_Mem_Write+0x180>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d017      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1aa      	bne.n	8003aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fe7d 	bl	8004868 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00d      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d107      	bne.n	8003b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e016      	b.n	8003bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	00100002 	.word	0x00100002
 8003bcc:	ffff0000 	.word	0xffff0000

08003bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	@ 0x30
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	817b      	strh	r3, [r7, #10]
 8003be2:	460b      	mov	r3, r1
 8003be4:	813b      	strh	r3, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bea:	f7ff fa41 	bl	8003070 <HAL_GetTick>
 8003bee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 8214 	bne.w	8004026 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2319      	movs	r3, #25
 8003c04:	2201      	movs	r2, #1
 8003c06:	497b      	ldr	r1, [pc, #492]	@ (8003df4 <HAL_I2C_Mem_Read+0x224>)
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fccb 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
 8003c16:	e207      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x56>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e200      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2222      	movs	r2, #34	@ 0x22
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2240      	movs	r2, #64	@ 0x40
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003df8 <HAL_I2C_Mem_Read+0x228>)
 8003c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c8e:	88f8      	ldrh	r0, [r7, #6]
 8003c90:	893a      	ldrh	r2, [r7, #8]
 8003c92:	8979      	ldrh	r1, [r7, #10]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fb98 	bl	80043d4 <I2C_RequestMemoryRead>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1bc      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d113      	bne.n	8003cde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e190      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d11b      	bne.n	8003d1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e170      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d11b      	bne.n	8003d5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	e150      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d74:	e144      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	f200 80f1 	bhi.w	8003f62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d123      	bne.n	8003dd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fdb3 	bl	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e145      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dce:	e117      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d14e      	bne.n	8003e76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dde:	2200      	movs	r2, #0
 8003de0:	4906      	ldr	r1, [pc, #24]	@ (8003dfc <HAL_I2C_Mem_Read+0x22c>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fbde 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e11a      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000
 8003dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e74:	e0c4      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	496c      	ldr	r1, [pc, #432]	@ (8004030 <HAL_I2C_Mem_Read+0x460>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb8f 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0cb      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4955      	ldr	r1, [pc, #340]	@ (8004030 <HAL_I2C_Mem_Read+0x460>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fb61 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e09d      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f60:	e04e      	b.n	8004000 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fcc6 	bl	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e058      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d124      	bne.n	8004000 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fcc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f aeb6 	bne.w	8003d76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	@ 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	00010004 	.word	0x00010004

08004034 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	@ 0x28
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	460b      	mov	r3, r1
 8004042:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004044:	f7ff f814 	bl	8003070 <HAL_GetTick>
 8004048:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	f040 8111 	bne.w	800427e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2319      	movs	r3, #25
 8004062:	2201      	movs	r2, #1
 8004064:	4988      	ldr	r1, [pc, #544]	@ (8004288 <HAL_I2C_IsDeviceReady+0x254>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa9c 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	e104      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_I2C_IsDeviceReady+0x50>
 8004080:	2302      	movs	r3, #2
 8004082:	e0fd      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d007      	beq.n	80040aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2224      	movs	r2, #36	@ 0x24
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a70      	ldr	r2, [pc, #448]	@ (800428c <HAL_I2C_IsDeviceReady+0x258>)
 80040cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fa5a 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004104:	d103      	bne.n	800410e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e0b6      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004120:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004122:	f7fe ffa5 	bl	8003070 <HAL_GetTick>
 8004126:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004156:	e025      	b.n	80041a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004158:	f7fe ff8a 	bl	8003070 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <HAL_I2C_IsDeviceReady+0x13a>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	22a0      	movs	r2, #160	@ 0xa0
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80041ae:	d005      	beq.n	80041bc <HAL_I2C_IsDeviceReady+0x188>
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <HAL_I2C_IsDeviceReady+0x188>
 80041b6:	7dbb      	ldrb	r3, [r7, #22]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0cd      	beq.n	8004158 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d129      	bne.n	8004226 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2319      	movs	r3, #25
 80041fe:	2201      	movs	r2, #1
 8004200:	4921      	ldr	r1, [pc, #132]	@ (8004288 <HAL_I2C_IsDeviceReady+0x254>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f9ce 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e036      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e02c      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004234:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800423e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2319      	movs	r3, #25
 8004246:	2201      	movs	r2, #1
 8004248:	490f      	ldr	r1, [pc, #60]	@ (8004288 <HAL_I2C_IsDeviceReady+0x254>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f9aa 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e012      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	3301      	adds	r3, #1
 800425e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	f4ff af32 	bcc.w	80040ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	00100002 	.word	0x00100002
 800428c:	ffff0000 	.word	0xffff0000

08004290 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	460b      	mov	r3, r1
 80042bc:	813b      	strh	r3, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2200      	movs	r2, #0
 80042da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f960 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f8:	d103      	bne.n	8004302 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004300:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e05f      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	492d      	ldr	r1, [pc, #180]	@ (80043d0 <I2C_RequestMemoryWrite+0x128>)
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f9bb 	bl	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e04c      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004344:	6a39      	ldr	r1, [r7, #32]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa46 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2b04      	cmp	r3, #4
 8004358:	d107      	bne.n	800436a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e02b      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]
 800437e:	e021      	b.n	80043c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004380:	893b      	ldrh	r3, [r7, #8]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	b29b      	uxth	r3, r3
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fa20 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e005      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ba:	893b      	ldrh	r3, [r7, #8]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00010002 	.word	0x00010002

080043d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	460b      	mov	r3, r1
 80043e8:	813b      	strh	r3, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800440c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2200      	movs	r2, #0
 8004416:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f8c2 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004434:	d103      	bne.n	800443e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e0aa      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	4952      	ldr	r1, [pc, #328]	@ (80045a0 <I2C_RequestMemoryRead+0x1cc>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f91d 	bl	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e097      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004480:	6a39      	ldr	r1, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9a8 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	2b04      	cmp	r3, #4
 8004494:	d107      	bne.n	80044a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e076      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]
 80044ba:	e021      	b.n	8004500 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f982 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e050      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f6:	893b      	ldrh	r3, [r7, #8]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004502:	6a39      	ldr	r1, [r7, #32]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f967 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	2b04      	cmp	r3, #4
 8004516:	d107      	bne.n	8004528 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e035      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800453a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2200      	movs	r2, #0
 8004544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f82b 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00d      	beq.n	8004570 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004562:	d103      	bne.n	800456c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e013      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004570:	897b      	ldrh	r3, [r7, #10]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	6a3a      	ldr	r2, [r7, #32]
 8004584:	4906      	ldr	r1, [pc, #24]	@ (80045a0 <I2C_RequestMemoryRead+0x1cc>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f886 	bl	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	00010002 	.word	0x00010002

080045a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b4:	e048      	b.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d044      	beq.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fe fd57 	bl	8003070 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d139      	bne.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10d      	bne.n	80045fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	e00c      	b.n	8004614 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	429a      	cmp	r2, r3
 8004618:	d116      	bne.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e023      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10d      	bne.n	800466e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	43da      	mvns	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4013      	ands	r3, r2
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	e00c      	b.n	8004688 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	43da      	mvns	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	429a      	cmp	r2, r3
 800468c:	d093      	beq.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a6:	e071      	b.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b6:	d123      	bne.n	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e067      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d041      	beq.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004708:	f7fe fcb2 	bl	8003070 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d302      	bcc.n	800471e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d136      	bne.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10c      	bne.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e00b      	b.n	800475a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	43da      	mvns	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e021      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	0c1b      	lsrs	r3, r3, #16
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10c      	bne.n	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	43da      	mvns	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4013      	ands	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e00b      	b.n	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f af6d 	bne.w	80046a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e4:	e034      	b.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8e3 	bl	80049b2 <I2C_IsAcknowledgeFailed>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e034      	b.n	8004860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d028      	beq.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fe fc37 	bl	8003070 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11d      	bne.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481e:	2b80      	cmp	r3, #128	@ 0x80
 8004820:	d016      	beq.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e007      	b.n	8004860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485a:	2b80      	cmp	r3, #128	@ 0x80
 800485c:	d1c3      	bne.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004874:	e034      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f89b 	bl	80049b2 <I2C_IsAcknowledgeFailed>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e034      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d028      	beq.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fe fbef 	bl	8003070 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d016      	beq.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e007      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d1c3      	bne.n	8004876 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004904:	e049      	b.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d119      	bne.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e030      	b.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fe fb92 	bl	8003070 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11d      	bne.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d016      	beq.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e007      	b.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b40      	cmp	r3, #64	@ 0x40
 80049a6:	d1ae      	bne.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c8:	d11b      	bne.n	8004a02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e267      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d075      	beq.n	8004b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a2e:	4b88      	ldr	r3, [pc, #544]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d00c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3a:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d112      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a46:	4b82      	ldr	r3, [pc, #520]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	4b7e      	ldr	r3, [pc, #504]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05b      	beq.n	8004b18 <HAL_RCC_OscConfig+0x108>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d157      	bne.n	8004b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e242      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x74>
 8004a76:	4b76      	ldr	r3, [pc, #472]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a75      	ldr	r2, [pc, #468]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e01d      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x98>
 8004a8e:	4b70      	ldr	r3, [pc, #448]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6f      	ldr	r2, [pc, #444]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004aa8:	4b69      	ldr	r3, [pc, #420]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a68      	ldr	r2, [pc, #416]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b66      	ldr	r3, [pc, #408]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a65      	ldr	r2, [pc, #404]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fad2 	bl	8003070 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fe face 	bl	8003070 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e207      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xc0>
 8004aee:	e014      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe fabe 	bl	8003070 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe faba 	bl	8003070 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	@ 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1f3      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	4b51      	ldr	r3, [pc, #324]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0xe8>
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d063      	beq.n	8004bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b26:	4b4a      	ldr	r3, [pc, #296]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b47      	ldr	r3, [pc, #284]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b44      	ldr	r3, [pc, #272]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	4b41      	ldr	r3, [pc, #260]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_RCC_OscConfig+0x152>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e1c7      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b62:	4b3b      	ldr	r3, [pc, #236]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4937      	ldr	r1, [pc, #220]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	e03a      	b.n	8004bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b80:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0x244>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fe fa73 	bl	8003070 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fe fa6f 	bl	8003070 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1a8      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4925      	ldr	r1, [pc, #148]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <HAL_RCC_OscConfig+0x244>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fe fa52 	bl	8003070 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fe fa4e 	bl	8003070 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e187      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d036      	beq.n	8004c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c02:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <HAL_RCC_OscConfig+0x248>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fe fa32 	bl	8003070 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fe fa2e 	bl	8003070 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e167      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x200>
 8004c2e:	e01b      	b.n	8004c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x248>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fe fa1b 	bl	8003070 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3c:	e00e      	b.n	8004c5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7fe fa17 	bl	8003070 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d907      	bls.n	8004c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e150      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	42470000 	.word	0x42470000
 8004c58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5c:	4b88      	ldr	r3, [pc, #544]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ea      	bne.n	8004c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8097 	beq.w	8004da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	4b81      	ldr	r3, [pc, #516]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c96:	4b7a      	ldr	r3, [pc, #488]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b77      	ldr	r3, [pc, #476]	@ (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d118      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb2:	4b74      	ldr	r3, [pc, #464]	@ (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a73      	ldr	r2, [pc, #460]	@ (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbe:	f7fe f9d7 	bl	8003070 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fe f9d3 	bl	8003070 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e10c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x2ea>
 8004cec:	4b64      	ldr	r3, [pc, #400]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	4a63      	ldr	r2, [pc, #396]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf8:	e01c      	b.n	8004d34 <HAL_RCC_OscConfig+0x324>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x30c>
 8004d02:	4b5f      	ldr	r3, [pc, #380]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	4a5e      	ldr	r2, [pc, #376]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	4a5b      	ldr	r2, [pc, #364]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0x324>
 8004d1c:	4b58      	ldr	r3, [pc, #352]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d20:	4a57      	ldr	r2, [pc, #348]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d28:	4b55      	ldr	r3, [pc, #340]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2c:	4a54      	ldr	r2, [pc, #336]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fe f998 	bl	8003070 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fe f994 	bl	8003070 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0cb      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	4b49      	ldr	r3, [pc, #292]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ee      	beq.n	8004d44 <HAL_RCC_OscConfig+0x334>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d68:	f7fe f982 	bl	8003070 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fe f97e 	bl	8003070 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0b5      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d86:	4b3e      	ldr	r3, [pc, #248]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ee      	bne.n	8004d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b39      	ldr	r3, [pc, #228]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	4a38      	ldr	r2, [pc, #224]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a1 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dae:	4b34      	ldr	r3, [pc, #208]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d05c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d141      	bne.n	8004e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fe f952 	bl	8003070 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fe f94e 	bl	8003070 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e087      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	4b27      	ldr	r3, [pc, #156]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	3b01      	subs	r3, #1
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	491b      	ldr	r1, [pc, #108]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fe f927 	bl	8003070 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fe f923 	bl	8003070 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e05c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e38:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x416>
 8004e44:	e054      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b10      	ldr	r3, [pc, #64]	@ (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fe f910 	bl	8003070 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fe f90c 	bl	8003070 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e045      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x444>
 8004e72:	e03d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e038      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40007000 	.word	0x40007000
 8004e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004efc <HAL_RCC_OscConfig+0x4ec>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d028      	beq.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d121      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d11a      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d111      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800

08004f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0cc      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b68      	ldr	r3, [pc, #416]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d90c      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b65      	ldr	r3, [pc, #404]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b63      	ldr	r3, [pc, #396]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0b8      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f54:	4b59      	ldr	r3, [pc, #356]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a58      	ldr	r2, [pc, #352]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f6c:	4b53      	ldr	r3, [pc, #332]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a52      	ldr	r2, [pc, #328]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f78:	4b50      	ldr	r3, [pc, #320]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	494d      	ldr	r1, [pc, #308]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4b47      	ldr	r3, [pc, #284]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d119      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3b      	ldr	r3, [pc, #236]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e067      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b37      	ldr	r3, [pc, #220]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4934      	ldr	r1, [pc, #208]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fe f83e 	bl	8003070 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fe f83a 	bl	8003070 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e04f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b25      	ldr	r3, [pc, #148]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d20c      	bcs.n	8005048 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b20      	ldr	r3, [pc, #128]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e032      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005054:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4916      	ldr	r1, [pc, #88]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005072:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	490e      	ldr	r1, [pc, #56]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005086:	f000 f821 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 800508a:	4602      	mov	r2, r0
 800508c:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	091b      	lsrs	r3, r3, #4
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	490a      	ldr	r1, [pc, #40]	@ (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	5ccb      	ldrb	r3, [r1, r3]
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050a2:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd ff9e 	bl	8002fe8 <HAL_InitTick>

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40023c00 	.word	0x40023c00
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08007d68 	.word	0x08007d68
 80050c4:	2000003c 	.word	0x2000003c
 80050c8:	20000040 	.word	0x20000040

080050cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b090      	sub	sp, #64	@ 0x40
 80050d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e4:	4b59      	ldr	r3, [pc, #356]	@ (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d00d      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x40>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	f200 80a1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x16c>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x34>
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x3a>
 80050fe:	e09b      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b53      	ldr	r3, [pc, #332]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x184>)
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005104:	e09b      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005106:	4b53      	ldr	r3, [pc, #332]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x188>)
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800510a:	e098      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800510c:	4b4f      	ldr	r3, [pc, #316]	@ (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005116:	4b4d      	ldr	r3, [pc, #308]	@ (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d028      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005122:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	2200      	movs	r2, #0
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	627a      	str	r2, [r7, #36]	@ 0x24
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005134:	2100      	movs	r1, #0
 8005136:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x188>)
 8005138:	fb03 f201 	mul.w	r2, r3, r1
 800513c:	2300      	movs	r3, #0
 800513e:	fb00 f303 	mul.w	r3, r0, r3
 8005142:	4413      	add	r3, r2
 8005144:	4a43      	ldr	r2, [pc, #268]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x188>)
 8005146:	fba0 1202 	umull	r1, r2, r0, r2
 800514a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514c:	460a      	mov	r2, r1
 800514e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005152:	4413      	add	r3, r2
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	61fa      	str	r2, [r7, #28]
 800515e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005166:	f7fb fcb1 	bl	8000acc <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4613      	mov	r3, r2
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005172:	e053      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005174:	4b35      	ldr	r3, [pc, #212]	@ (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	2200      	movs	r2, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	617a      	str	r2, [r7, #20]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005186:	f04f 0b00 	mov.w	fp, #0
 800518a:	4652      	mov	r2, sl
 800518c:	465b      	mov	r3, fp
 800518e:	f04f 0000 	mov.w	r0, #0
 8005192:	f04f 0100 	mov.w	r1, #0
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519c:	0150      	lsls	r0, r2, #5
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	ebb2 080a 	subs.w	r8, r2, sl
 80051a6:	eb63 090b 	sbc.w	r9, r3, fp
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051be:	ebb2 0408 	subs.w	r4, r2, r8
 80051c2:	eb63 0509 	sbc.w	r5, r3, r9
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	00eb      	lsls	r3, r5, #3
 80051d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d4:	00e2      	lsls	r2, r4, #3
 80051d6:	4614      	mov	r4, r2
 80051d8:	461d      	mov	r5, r3
 80051da:	eb14 030a 	adds.w	r3, r4, sl
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	eb45 030b 	adc.w	r3, r5, fp
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	2200      	movs	r2, #0
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	60fa      	str	r2, [r7, #12]
 800520c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005210:	f7fb fc5c 	bl	8000acc <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800522c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x184>)
 800523a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005240:	4618      	mov	r0, r3
 8005242:	3740      	adds	r7, #64	@ 0x40
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	017d7840 	.word	0x017d7840

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	@ (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000003c 	.word	0x2000003c

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	08007d78 	.word	0x08007d78

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff ffdc 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800
 80052bc:	08007d78 	.word	0x08007d78

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fd fc0e 	bl	8002b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fb42 	bl	8005988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <HAL_TIM_PWM_Start_IT+0x28>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e022      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x6e>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d109      	bne.n	80053a2 <HAL_TIM_PWM_Start_IT+0x42>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e015      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x6e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d109      	bne.n	80053bc <HAL_TIM_PWM_Start_IT+0x5c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e008      	b.n	80053ce <HAL_TIM_PWM_Start_IT+0x6e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	bf14      	ite	ne
 80053c8:	2301      	movne	r3, #1
 80053ca:	2300      	moveq	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0b3      	b.n	800553e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start_IT+0x86>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e4:	e013      	b.n	800540e <HAL_TIM_PWM_Start_IT+0xae>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start_IT+0x96>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f4:	e00b      	b.n	800540e <HAL_TIM_PWM_Start_IT+0xae>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start_IT+0xa6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005404:	e003      	b.n	800540e <HAL_TIM_PWM_Start_IT+0xae>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	d841      	bhi.n	8005498 <HAL_TIM_PWM_Start_IT+0x138>
 8005414:	a201      	add	r2, pc, #4	@ (adr r2, 800541c <HAL_TIM_PWM_Start_IT+0xbc>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	08005451 	.word	0x08005451
 8005420:	08005499 	.word	0x08005499
 8005424:	08005499 	.word	0x08005499
 8005428:	08005499 	.word	0x08005499
 800542c:	08005463 	.word	0x08005463
 8005430:	08005499 	.word	0x08005499
 8005434:	08005499 	.word	0x08005499
 8005438:	08005499 	.word	0x08005499
 800543c:	08005475 	.word	0x08005475
 8005440:	08005499 	.word	0x08005499
 8005444:	08005499 	.word	0x08005499
 8005448:	08005499 	.word	0x08005499
 800544c:	08005487 	.word	0x08005487
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0202 	orr.w	r2, r2, #2
 800545e:	60da      	str	r2, [r3, #12]
      break;
 8005460:	e01d      	b.n	800549e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0204 	orr.w	r2, r2, #4
 8005470:	60da      	str	r2, [r3, #12]
      break;
 8005472:	e014      	b.n	800549e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	60da      	str	r2, [r3, #12]
      break;
 8005484:	e00b      	b.n	800549e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0210 	orr.w	r2, r2, #16
 8005494:	60da      	str	r2, [r3, #12]
      break;
 8005496:	e002      	b.n	800549e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	bf00      	nop
  }

  if (status == HAL_OK)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d14b      	bne.n	800553c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fc83 	bl	8005db8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_TIM_PWM_Start_IT+0x1a8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054de:	d013      	beq.n	8005508 <HAL_TIM_PWM_Start_IT+0x1a8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_TIM_PWM_Start_IT+0x1ec>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_TIM_PWM_Start_IT+0x1a8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_TIM_PWM_Start_IT+0x1a8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a16      	ldr	r2, [pc, #88]	@ (8005554 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_PWM_Start_IT+0x1a8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d111      	bne.n	800552c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d010      	beq.n	800553c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	e007      	b.n	800553c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800
 8005554:	40000c00 	.word	0x40000c00
 8005558:	40014000 	.word	0x40014000

0800555c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e097      	b.n	80056a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fd fb0d 	bl	8002ba4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f000 f9e9 	bl	8005988 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	4313      	orrs	r3, r2
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055fc:	f023 030c 	bic.w	r3, r3, #12
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	4313      	orrs	r3, r2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	011a      	lsls	r2, r3, #4
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	031b      	lsls	r3, r3, #12
 800562c:	4313      	orrs	r3, r2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	4313      	orrs	r3, r2
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d110      	bne.n	80056fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d102      	bne.n	80056e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056de:	7b7b      	ldrb	r3, [r7, #13]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d001      	beq.n	80056e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e089      	b.n	80057fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f8:	e031      	b.n	800575e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d110      	bne.n	8005722 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d102      	bne.n	800570c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005706:	7b3b      	ldrb	r3, [r7, #12]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d001      	beq.n	8005710 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e075      	b.n	80057fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005720:	e01d      	b.n	800575e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d108      	bne.n	800573a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800572e:	7b7b      	ldrb	r3, [r7, #13]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d102      	bne.n	800573a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005734:	7b3b      	ldrb	r3, [r7, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d001      	beq.n	800573e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e05e      	b.n	80057fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d010      	beq.n	800578c <HAL_TIM_Encoder_Start_IT+0xe4>
 800576a:	e01f      	b.n	80057ac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb1f 	bl	8005db8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0202 	orr.w	r2, r2, #2
 8005788:	60da      	str	r2, [r3, #12]
      break;
 800578a:	e02e      	b.n	80057ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2201      	movs	r2, #1
 8005792:	2104      	movs	r1, #4
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fb0f 	bl	8005db8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0204 	orr.w	r2, r2, #4
 80057a8:	60da      	str	r2, [r3, #12]
      break;
 80057aa:	e01e      	b.n	80057ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 faff 	bl	8005db8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2201      	movs	r2, #1
 80057c0:	2104      	movs	r1, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 faf8 	bl	8005db8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0202 	orr.w	r2, r2, #2
 80057d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0204 	orr.w	r2, r2, #4
 80057e6:	60da      	str	r2, [r3, #12]
      break;
 80057e8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800581e:	2302      	movs	r3, #2
 8005820:	e0ae      	b.n	8005980 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	f200 809f 	bhi.w	8005970 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005832:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800586d 	.word	0x0800586d
 800583c:	08005971 	.word	0x08005971
 8005840:	08005971 	.word	0x08005971
 8005844:	08005971 	.word	0x08005971
 8005848:	080058ad 	.word	0x080058ad
 800584c:	08005971 	.word	0x08005971
 8005850:	08005971 	.word	0x08005971
 8005854:	08005971 	.word	0x08005971
 8005858:	080058ef 	.word	0x080058ef
 800585c:	08005971 	.word	0x08005971
 8005860:	08005971 	.word	0x08005971
 8005864:	08005971 	.word	0x08005971
 8005868:	0800592f 	.word	0x0800592f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f914 	bl	8005aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6999      	ldr	r1, [r3, #24]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	619a      	str	r2, [r3, #24]
      break;
 80058aa:	e064      	b.n	8005976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f95a 	bl	8005b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]
      break;
 80058ec:	e043      	b.n	8005976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f9a5 	bl	8005c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0208 	orr.w	r2, r2, #8
 8005908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69d9      	ldr	r1, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	61da      	str	r2, [r3, #28]
      break;
 800592c:	e023      	b.n	8005976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f9ef 	bl	8005d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
      break;
 800596e:	e002      	b.n	8005976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
      break;
 8005974:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3a      	ldr	r2, [pc, #232]	@ (8005a84 <TIM_Base_SetConfig+0xfc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_Base_SetConfig+0x38>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a6:	d00b      	beq.n	80059c0 <TIM_Base_SetConfig+0x38>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a37      	ldr	r2, [pc, #220]	@ (8005a88 <TIM_Base_SetConfig+0x100>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_Base_SetConfig+0x38>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <TIM_Base_SetConfig+0x104>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0x38>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a35      	ldr	r2, [pc, #212]	@ (8005a90 <TIM_Base_SetConfig+0x108>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d108      	bne.n	80059d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005a84 <TIM_Base_SetConfig+0xfc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01b      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e0:	d017      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a28      	ldr	r2, [pc, #160]	@ (8005a88 <TIM_Base_SetConfig+0x100>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a27      	ldr	r2, [pc, #156]	@ (8005a8c <TIM_Base_SetConfig+0x104>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00f      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <TIM_Base_SetConfig+0x108>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a25      	ldr	r2, [pc, #148]	@ (8005a94 <TIM_Base_SetConfig+0x10c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a24      	ldr	r2, [pc, #144]	@ (8005a98 <TIM_Base_SetConfig+0x110>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a23      	ldr	r2, [pc, #140]	@ (8005a9c <TIM_Base_SetConfig+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005a84 <TIM_Base_SetConfig+0xfc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]
  }
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f023 0201 	bic.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0302 	bic.w	r3, r3, #2
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b68 <TIM_OC1_SetConfig+0xc8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10c      	bne.n	8005b16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0308 	bic.w	r3, r3, #8
 8005b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 0304 	bic.w	r3, r3, #4
 8005b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <TIM_OC1_SetConfig+0xc8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d111      	bne.n	8005b42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	621a      	str	r2, [r3, #32]
}
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	40010000 	.word	0x40010000

08005b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f023 0210 	bic.w	r2, r3, #16
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0320 	bic.w	r3, r3, #32
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c40 <TIM_OC2_SetConfig+0xd4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d10d      	bne.n	8005be8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <TIM_OC2_SetConfig+0xd4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d113      	bne.n	8005c18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000

08005c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d14 <TIM_OC3_SetConfig+0xd0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10d      	bne.n	8005cbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a14      	ldr	r2, [pc, #80]	@ (8005d14 <TIM_OC3_SetConfig+0xd0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d113      	bne.n	8005cee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40010000 	.word	0x40010000

08005d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a10      	ldr	r2, [pc, #64]	@ (8005db4 <TIM_OC4_SetConfig+0x9c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d109      	bne.n	8005d8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	019b      	lsls	r3, r3, #6
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40010000 	.word	0x40010000

08005db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2201      	movs	r2, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e050      	b.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e68:	d013      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a16      	ldr	r2, [pc, #88]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a15      	ldr	r2, [pc, #84]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10c      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40014000 	.word	0x40014000

08005ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e03d      	b.n	8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e042      	b.n	800601c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fc fefe 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	@ 0x24
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fdbd 	bl	8006b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d175      	bne.n	8006130 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Transmit+0x2c>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e06e      	b.n	8006132 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2221      	movs	r2, #33	@ 0x21
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006062:	f7fd f805 	bl	8003070 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	88fa      	ldrh	r2, [r7, #6]
 8006072:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607c:	d108      	bne.n	8006090 <HAL_UART_Transmit+0x6c>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	e003      	b.n	8006098 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006098:	e02e      	b.n	80060f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2180      	movs	r1, #128	@ 0x80
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fb1f 	bl	80066e8 <UART_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e03a      	b.n	8006132 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	3302      	adds	r3, #2
 80060d6:	61bb      	str	r3, [r7, #24]
 80060d8:	e007      	b.n	80060ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	3301      	adds	r3, #1
 80060e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1cb      	bne.n	800609a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	2140      	movs	r1, #64	@ 0x40
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 faeb 	bl	80066e8 <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e006      	b.n	8006132 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	4613      	mov	r3, r2
 8006146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b20      	cmp	r3, #32
 8006152:	d112      	bne.n	800617a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_UART_Receive_IT+0x26>
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e00b      	b.n	800617c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	461a      	mov	r2, r3
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fb12 	bl	800679a <UART_Start_Receive_IT>
 8006176:	4603      	mov	r3, r0
 8006178:	e000      	b.n	800617c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b0ba      	sub	sp, #232	@ 0xe8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80061c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10f      	bne.n	80061ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_UART_IRQHandler+0x66>
 80061d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fbf2 	bl	80069cc <UART_Receive_IT>
      return;
 80061e8:	e25b      	b.n	80066a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80de 	beq.w	80063b0 <HAL_UART_IRQHandler+0x22c>
 80061f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006204:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80d1 	beq.w	80063b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800620e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <HAL_UART_IRQHandler+0xae>
 800621a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	f043 0201 	orr.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <HAL_UART_IRQHandler+0xd2>
 800623e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624e:	f043 0202 	orr.w	r2, r3, #2
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <HAL_UART_IRQHandler+0xf6>
 8006262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	f043 0204 	orr.w	r2, r3, #4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d011      	beq.n	80062aa <HAL_UART_IRQHandler+0x126>
 8006286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d105      	bne.n	800629e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a2:	f043 0208 	orr.w	r2, r3, #8
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 81f2 	beq.w	8006698 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_UART_IRQHandler+0x14e>
 80062c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb7d 	bl	80069cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <HAL_UART_IRQHandler+0x17a>
 80062f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d04f      	beq.n	800639e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa85 	bl	800680e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630e:	2b40      	cmp	r3, #64	@ 0x40
 8006310:	d141      	bne.n	8006396 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3314      	adds	r3, #20
 8006318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800632c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800633e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800634a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1d9      	bne.n	8006312 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d013      	beq.n	800638e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636a:	4a7e      	ldr	r2, [pc, #504]	@ (8006564 <HAL_UART_IRQHandler+0x3e0>)
 800636c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006372:	4618      	mov	r0, r3
 8006374:	f7fd f82d 	bl	80033d2 <HAL_DMA_Abort_IT>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e00e      	b.n	80063ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f994 	bl	80066bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e00a      	b.n	80063ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f990 	bl	80066bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	e006      	b.n	80063ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f98c 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80063aa:	e175      	b.n	8006698 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	bf00      	nop
    return;
 80063ae:	e173      	b.n	8006698 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f040 814f 	bne.w	8006658 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8148 	beq.w	8006658 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8141 	beq.w	8006658 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063d6:	2300      	movs	r3, #0
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f6:	2b40      	cmp	r3, #64	@ 0x40
 80063f8:	f040 80b6 	bne.w	8006568 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8145 	beq.w	800669c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800641a:	429a      	cmp	r2, r3
 800641c:	f080 813e 	bcs.w	800669c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006426:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006432:	f000 8088 	beq.w	8006546 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800644c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006462:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800646e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800647a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1d9      	bne.n	8006436 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006492:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e1      	bne.n	8006482 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3314      	adds	r3, #20
 80064c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3314      	adds	r3, #20
 80064de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e3      	bne.n	80064be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006516:	f023 0310 	bic.w	r3, r3, #16
 800651a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006528:	65ba      	str	r2, [r7, #88]	@ 0x58
 800652a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800652e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e3      	bne.n	8006504 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006540:	4618      	mov	r0, r3
 8006542:	f7fc fed6 	bl	80032f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006554:	b29b      	uxth	r3, r3
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	b29b      	uxth	r3, r3
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8b7 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006562:	e09b      	b.n	800669c <HAL_UART_IRQHandler+0x518>
 8006564:	080068d5 	.word	0x080068d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006570:	b29b      	uxth	r3, r3
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 808e 	beq.w	80066a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8089 	beq.w	80066a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800659e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80065b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80065b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	623b      	str	r3, [r7, #32]
   return(result);
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3314      	adds	r3, #20
 80065e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80065ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e3      	bne.n	80065c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	60fb      	str	r3, [r7, #12]
   return(result);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006630:	61fa      	str	r2, [r7, #28]
 8006632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	617b      	str	r3, [r7, #20]
   return(result);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e3      	bne.n	800660c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800664a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f83d 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006656:	e023      	b.n	80066a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <HAL_UART_IRQHandler+0x4f4>
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f943 	bl	80068fc <UART_Transmit_IT>
    return;
 8006676:	e014      	b.n	80066a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00e      	beq.n	80066a2 <HAL_UART_IRQHandler+0x51e>
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f983 	bl	800699c <UART_EndTransmit_IT>
    return;
 8006696:	e004      	b.n	80066a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80066a0:	bf00      	nop
  }
}
 80066a2:	37e8      	adds	r7, #232	@ 0xe8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f8:	e03b      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006700:	d037      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006702:	f7fc fcb5 	bl	8003070 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	6a3a      	ldr	r2, [r7, #32]
 800670e:	429a      	cmp	r2, r3
 8006710:	d302      	bcc.n	8006718 <UART_WaitOnFlagUntilTimeout+0x30>
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e03a      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d023      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8a>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b80      	cmp	r3, #128	@ 0x80
 800672e:	d020      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b40      	cmp	r3, #64	@ 0x40
 8006734:	d01d      	beq.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d116      	bne.n	8006772 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f857 	bl	800680e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2208      	movs	r2, #8
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e00f      	b.n	8006792 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4013      	ands	r3, r2
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	429a      	cmp	r2, r3
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	429a      	cmp	r2, r3
 800678e:	d0b4      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	88fa      	ldrh	r2, [r7, #6]
 80067b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2222      	movs	r2, #34	@ 0x22
 80067c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0220 	orr.w	r2, r2, #32
 80067fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800680e:	b480      	push	{r7}
 8006810:	b095      	sub	sp, #84	@ 0x54
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006836:	643a      	str	r2, [r7, #64]	@ 0x40
 8006838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800683c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e5      	bne.n	8006816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	61fb      	str	r3, [r7, #28]
   return(result);
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3314      	adds	r3, #20
 8006868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800686a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	2b01      	cmp	r3, #1
 8006884:	d119      	bne.n	80068ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	60bb      	str	r3, [r7, #8]
   return(result);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	647b      	str	r3, [r7, #68]	@ 0x44
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068a6:	61ba      	str	r2, [r7, #24]
 80068a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6979      	ldr	r1, [r7, #20]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	613b      	str	r3, [r7, #16]
   return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e5      	bne.n	8006886 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068c8:	bf00      	nop
 80068ca:	3754      	adds	r7, #84	@ 0x54
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fee4 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b21      	cmp	r3, #33	@ 0x21
 800690e:	d13e      	bne.n	800698e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006918:	d114      	bne.n	8006944 <UART_Transmit_IT+0x48>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d110      	bne.n	8006944 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006936:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	1c9a      	adds	r2, r3, #2
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	621a      	str	r2, [r3, #32]
 8006942:	e008      	b.n	8006956 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	1c59      	adds	r1, r3, #1
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6211      	str	r1, [r2, #32]
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29b      	uxth	r3, r3
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10f      	bne.n	800698a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006978:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006988:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fe73 	bl	80066a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08c      	sub	sp, #48	@ 0x30
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b22      	cmp	r3, #34	@ 0x22
 80069de:	f040 80ae 	bne.w	8006b3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ea:	d117      	bne.n	8006a1c <UART_Receive_IT+0x50>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d113      	bne.n	8006a1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	1c9a      	adds	r2, r3, #2
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a1a:	e026      	b.n	8006a6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a2e:	d007      	beq.n	8006a40 <UART_Receive_IT+0x74>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <UART_Receive_IT+0x82>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	e008      	b.n	8006a60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4619      	mov	r1, r3
 8006a78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d15d      	bne.n	8006b3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0220 	bic.w	r2, r2, #32
 8006a8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d135      	bne.n	8006b30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f023 0310 	bic.w	r3, r3, #16
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aea:	623a      	str	r2, [r7, #32]
 8006aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	69f9      	ldr	r1, [r7, #28]
 8006af0:	6a3a      	ldr	r2, [r7, #32]
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e5      	bne.n	8006aca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d10a      	bne.n	8006b22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff fdd1 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
 8006b2e:	e002      	b.n	8006b36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fb f967 	bl	8001e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e002      	b.n	8006b40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e000      	b.n	8006b40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b3e:	2302      	movs	r3, #2
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3730      	adds	r7, #48	@ 0x30
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b4c:	b0c0      	sub	sp, #256	@ 0x100
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	68d9      	ldr	r1, [r3, #12]
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	ea40 0301 	orr.w	r3, r0, r1
 8006b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ba0:	f021 010c 	bic.w	r1, r1, #12
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	6999      	ldr	r1, [r3, #24]
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	ea40 0301 	orr.w	r3, r0, r1
 8006bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b8f      	ldr	r3, [pc, #572]	@ (8006e14 <UART_SetConfig+0x2cc>)
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d005      	beq.n	8006be8 <UART_SetConfig+0xa0>
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b8d      	ldr	r3, [pc, #564]	@ (8006e18 <UART_SetConfig+0x2d0>)
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d104      	bne.n	8006bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7fe fb56 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 8006bec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bf0:	e003      	b.n	8006bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bf2:	f7fe fb3d 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c04:	f040 810c 	bne.w	8006e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	1891      	adds	r1, r2, r2
 8006c20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c22:	415b      	adcs	r3, r3
 8006c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	eb12 0801 	adds.w	r8, r2, r1
 8006c30:	4629      	mov	r1, r5
 8006c32:	eb43 0901 	adc.w	r9, r3, r1
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c4a:	4690      	mov	r8, r2
 8006c4c:	4699      	mov	r9, r3
 8006c4e:	4623      	mov	r3, r4
 8006c50:	eb18 0303 	adds.w	r3, r8, r3
 8006c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c58:	462b      	mov	r3, r5
 8006c5a:	eb49 0303 	adc.w	r3, r9, r3
 8006c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c76:	460b      	mov	r3, r1
 8006c78:	18db      	adds	r3, r3, r3
 8006c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	eb42 0303 	adc.w	r3, r2, r3
 8006c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c8c:	f7f9 ff1e 	bl	8000acc <__aeabi_uldivmod>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4b61      	ldr	r3, [pc, #388]	@ (8006e1c <UART_SetConfig+0x2d4>)
 8006c96:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	011c      	lsls	r4, r3, #4
 8006c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	1891      	adds	r1, r2, r2
 8006cb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cb8:	415b      	adcs	r3, r3
 8006cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce0:	4692      	mov	sl, r2
 8006ce2:	469b      	mov	fp, r3
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8006cea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8006cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	18db      	adds	r3, r3, r3
 8006d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d12:	4613      	mov	r3, r2
 8006d14:	eb42 0303 	adc.w	r3, r2, r3
 8006d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d22:	f7f9 fed3 	bl	8000acc <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e1c <UART_SetConfig+0x2d4>)
 8006d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	2264      	movs	r2, #100	@ 0x64
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	1acb      	subs	r3, r1, r3
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d42:	4b36      	ldr	r3, [pc, #216]	@ (8006e1c <UART_SetConfig+0x2d4>)
 8006d44:	fba3 2302 	umull	r2, r3, r3, r2
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d50:	441c      	add	r4, r3
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d74:	4641      	mov	r1, r8
 8006d76:	1851      	adds	r1, r2, r1
 8006d78:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	414b      	adcs	r3, r1
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	00cb      	lsls	r3, r1, #3
 8006d90:	4651      	mov	r1, sl
 8006d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d96:	4651      	mov	r1, sl
 8006d98:	00ca      	lsls	r2, r1, #3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4642      	mov	r2, r8
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006da8:	464b      	mov	r3, r9
 8006daa:	460a      	mov	r2, r1
 8006dac:	eb42 0303 	adc.w	r3, r2, r3
 8006db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dc8:	460b      	mov	r3, r1
 8006dca:	18db      	adds	r3, r3, r3
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dce:	4613      	mov	r3, r2
 8006dd0:	eb42 0303 	adc.w	r3, r2, r3
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dde:	f7f9 fe75 	bl	8000acc <__aeabi_uldivmod>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e1c <UART_SetConfig+0x2d4>)
 8006de8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	2164      	movs	r1, #100	@ 0x64
 8006df0:	fb01 f303 	mul.w	r3, r1, r3
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	3332      	adds	r3, #50	@ 0x32
 8006dfa:	4a08      	ldr	r2, [pc, #32]	@ (8006e1c <UART_SetConfig+0x2d4>)
 8006dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	f003 0207 	and.w	r2, r3, #7
 8006e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4422      	add	r2, r4
 8006e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e10:	e106      	b.n	8007020 <UART_SetConfig+0x4d8>
 8006e12:	bf00      	nop
 8006e14:	40011000 	.word	0x40011000
 8006e18:	40011400 	.word	0x40011400
 8006e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e32:	4642      	mov	r2, r8
 8006e34:	464b      	mov	r3, r9
 8006e36:	1891      	adds	r1, r2, r2
 8006e38:	6239      	str	r1, [r7, #32]
 8006e3a:	415b      	adcs	r3, r3
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e42:	4641      	mov	r1, r8
 8006e44:	1854      	adds	r4, r2, r1
 8006e46:	4649      	mov	r1, r9
 8006e48:	eb43 0501 	adc.w	r5, r3, r1
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	00eb      	lsls	r3, r5, #3
 8006e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e5a:	00e2      	lsls	r2, r4, #3
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	461d      	mov	r5, r3
 8006e60:	4643      	mov	r3, r8
 8006e62:	18e3      	adds	r3, r4, r3
 8006e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e68:	464b      	mov	r3, r9
 8006e6a:	eb45 0303 	adc.w	r3, r5, r3
 8006e6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e8e:	4629      	mov	r1, r5
 8006e90:	008b      	lsls	r3, r1, #2
 8006e92:	4621      	mov	r1, r4
 8006e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e98:	4621      	mov	r1, r4
 8006e9a:	008a      	lsls	r2, r1, #2
 8006e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ea0:	f7f9 fe14 	bl	8000acc <__aeabi_uldivmod>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4b60      	ldr	r3, [pc, #384]	@ (800702c <UART_SetConfig+0x4e4>)
 8006eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	011c      	lsls	r4, r3, #4
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ebc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	1891      	adds	r1, r2, r2
 8006eca:	61b9      	str	r1, [r7, #24]
 8006ecc:	415b      	adcs	r3, r3
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed4:	4641      	mov	r1, r8
 8006ed6:	1851      	adds	r1, r2, r1
 8006ed8:	6139      	str	r1, [r7, #16]
 8006eda:	4649      	mov	r1, r9
 8006edc:	414b      	adcs	r3, r1
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eec:	4659      	mov	r1, fp
 8006eee:	00cb      	lsls	r3, r1, #3
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	00ca      	lsls	r2, r1, #3
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	4642      	mov	r2, r8
 8006f02:	189b      	adds	r3, r3, r2
 8006f04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f08:	464b      	mov	r3, r9
 8006f0a:	460a      	mov	r2, r1
 8006f0c:	eb42 0303 	adc.w	r3, r2, r3
 8006f10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	008b      	lsls	r3, r1, #2
 8006f30:	4641      	mov	r1, r8
 8006f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f36:	4641      	mov	r1, r8
 8006f38:	008a      	lsls	r2, r1, #2
 8006f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f3e:	f7f9 fdc5 	bl	8000acc <__aeabi_uldivmod>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4611      	mov	r1, r2
 8006f48:	4b38      	ldr	r3, [pc, #224]	@ (800702c <UART_SetConfig+0x4e4>)
 8006f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2264      	movs	r2, #100	@ 0x64
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	1acb      	subs	r3, r1, r3
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	3332      	adds	r3, #50	@ 0x32
 8006f5c:	4a33      	ldr	r2, [pc, #204]	@ (800702c <UART_SetConfig+0x4e4>)
 8006f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f68:	441c      	add	r4, r3
 8006f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6e:	2200      	movs	r2, #0
 8006f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f72:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	1891      	adds	r1, r2, r2
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	415b      	adcs	r3, r3
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f88:	4641      	mov	r1, r8
 8006f8a:	1851      	adds	r1, r2, r1
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	4649      	mov	r1, r9
 8006f90:	414b      	adcs	r3, r1
 8006f92:	607b      	str	r3, [r7, #4]
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	00cb      	lsls	r3, r1, #3
 8006fa4:	4651      	mov	r1, sl
 8006fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006faa:	4651      	mov	r1, sl
 8006fac:	00ca      	lsls	r2, r1, #3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fba:	464b      	mov	r3, r9
 8006fbc:	460a      	mov	r2, r1
 8006fbe:	eb42 0303 	adc.w	r3, r2, r3
 8006fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fce:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fdc:	4649      	mov	r1, r9
 8006fde:	008b      	lsls	r3, r1, #2
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	008a      	lsls	r2, r1, #2
 8006fea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fee:	f7f9 fd6d 	bl	8000acc <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <UART_SetConfig+0x4e4>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	@ 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	3332      	adds	r3, #50	@ 0x32
 800700a:	4a08      	ldr	r2, [pc, #32]	@ (800702c <UART_SetConfig+0x4e4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 020f 	and.w	r2, r3, #15
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4422      	add	r2, r4
 800701e:	609a      	str	r2, [r3, #8]
}
 8007020:	bf00      	nop
 8007022:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007026:	46bd      	mov	sp, r7
 8007028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800702c:	51eb851f 	.word	0x51eb851f

08007030 <_strtol_l.isra.0>:
 8007030:	2b24      	cmp	r3, #36	@ 0x24
 8007032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007036:	4686      	mov	lr, r0
 8007038:	4690      	mov	r8, r2
 800703a:	d801      	bhi.n	8007040 <_strtol_l.isra.0+0x10>
 800703c:	2b01      	cmp	r3, #1
 800703e:	d106      	bne.n	800704e <_strtol_l.isra.0+0x1e>
 8007040:	f000 f8c0 	bl	80071c4 <__errno>
 8007044:	2316      	movs	r3, #22
 8007046:	6003      	str	r3, [r0, #0]
 8007048:	2000      	movs	r0, #0
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	4834      	ldr	r0, [pc, #208]	@ (8007120 <_strtol_l.isra.0+0xf0>)
 8007050:	460d      	mov	r5, r1
 8007052:	462a      	mov	r2, r5
 8007054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007058:	5d06      	ldrb	r6, [r0, r4]
 800705a:	f016 0608 	ands.w	r6, r6, #8
 800705e:	d1f8      	bne.n	8007052 <_strtol_l.isra.0+0x22>
 8007060:	2c2d      	cmp	r4, #45	@ 0x2d
 8007062:	d110      	bne.n	8007086 <_strtol_l.isra.0+0x56>
 8007064:	782c      	ldrb	r4, [r5, #0]
 8007066:	2601      	movs	r6, #1
 8007068:	1c95      	adds	r5, r2, #2
 800706a:	f033 0210 	bics.w	r2, r3, #16
 800706e:	d115      	bne.n	800709c <_strtol_l.isra.0+0x6c>
 8007070:	2c30      	cmp	r4, #48	@ 0x30
 8007072:	d10d      	bne.n	8007090 <_strtol_l.isra.0+0x60>
 8007074:	782a      	ldrb	r2, [r5, #0]
 8007076:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800707a:	2a58      	cmp	r2, #88	@ 0x58
 800707c:	d108      	bne.n	8007090 <_strtol_l.isra.0+0x60>
 800707e:	786c      	ldrb	r4, [r5, #1]
 8007080:	3502      	adds	r5, #2
 8007082:	2310      	movs	r3, #16
 8007084:	e00a      	b.n	800709c <_strtol_l.isra.0+0x6c>
 8007086:	2c2b      	cmp	r4, #43	@ 0x2b
 8007088:	bf04      	itt	eq
 800708a:	782c      	ldrbeq	r4, [r5, #0]
 800708c:	1c95      	addeq	r5, r2, #2
 800708e:	e7ec      	b.n	800706a <_strtol_l.isra.0+0x3a>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f6      	bne.n	8007082 <_strtol_l.isra.0+0x52>
 8007094:	2c30      	cmp	r4, #48	@ 0x30
 8007096:	bf14      	ite	ne
 8007098:	230a      	movne	r3, #10
 800709a:	2308      	moveq	r3, #8
 800709c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80070a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070a4:	2200      	movs	r2, #0
 80070a6:	fbbc f9f3 	udiv	r9, ip, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80070b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80070b4:	2f09      	cmp	r7, #9
 80070b6:	d80f      	bhi.n	80070d8 <_strtol_l.isra.0+0xa8>
 80070b8:	463c      	mov	r4, r7
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	dd1b      	ble.n	80070f6 <_strtol_l.isra.0+0xc6>
 80070be:	1c57      	adds	r7, r2, #1
 80070c0:	d007      	beq.n	80070d2 <_strtol_l.isra.0+0xa2>
 80070c2:	4581      	cmp	r9, r0
 80070c4:	d314      	bcc.n	80070f0 <_strtol_l.isra.0+0xc0>
 80070c6:	d101      	bne.n	80070cc <_strtol_l.isra.0+0x9c>
 80070c8:	45a2      	cmp	sl, r4
 80070ca:	db11      	blt.n	80070f0 <_strtol_l.isra.0+0xc0>
 80070cc:	fb00 4003 	mla	r0, r0, r3, r4
 80070d0:	2201      	movs	r2, #1
 80070d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070d6:	e7eb      	b.n	80070b0 <_strtol_l.isra.0+0x80>
 80070d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80070dc:	2f19      	cmp	r7, #25
 80070de:	d801      	bhi.n	80070e4 <_strtol_l.isra.0+0xb4>
 80070e0:	3c37      	subs	r4, #55	@ 0x37
 80070e2:	e7ea      	b.n	80070ba <_strtol_l.isra.0+0x8a>
 80070e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80070e8:	2f19      	cmp	r7, #25
 80070ea:	d804      	bhi.n	80070f6 <_strtol_l.isra.0+0xc6>
 80070ec:	3c57      	subs	r4, #87	@ 0x57
 80070ee:	e7e4      	b.n	80070ba <_strtol_l.isra.0+0x8a>
 80070f0:	f04f 32ff 	mov.w	r2, #4294967295
 80070f4:	e7ed      	b.n	80070d2 <_strtol_l.isra.0+0xa2>
 80070f6:	1c53      	adds	r3, r2, #1
 80070f8:	d108      	bne.n	800710c <_strtol_l.isra.0+0xdc>
 80070fa:	2322      	movs	r3, #34	@ 0x22
 80070fc:	f8ce 3000 	str.w	r3, [lr]
 8007100:	4660      	mov	r0, ip
 8007102:	f1b8 0f00 	cmp.w	r8, #0
 8007106:	d0a0      	beq.n	800704a <_strtol_l.isra.0+0x1a>
 8007108:	1e69      	subs	r1, r5, #1
 800710a:	e006      	b.n	800711a <_strtol_l.isra.0+0xea>
 800710c:	b106      	cbz	r6, 8007110 <_strtol_l.isra.0+0xe0>
 800710e:	4240      	negs	r0, r0
 8007110:	f1b8 0f00 	cmp.w	r8, #0
 8007114:	d099      	beq.n	800704a <_strtol_l.isra.0+0x1a>
 8007116:	2a00      	cmp	r2, #0
 8007118:	d1f6      	bne.n	8007108 <_strtol_l.isra.0+0xd8>
 800711a:	f8c8 1000 	str.w	r1, [r8]
 800711e:	e794      	b.n	800704a <_strtol_l.isra.0+0x1a>
 8007120:	08007d81 	.word	0x08007d81

08007124 <strtol>:
 8007124:	4613      	mov	r3, r2
 8007126:	460a      	mov	r2, r1
 8007128:	4601      	mov	r1, r0
 800712a:	4802      	ldr	r0, [pc, #8]	@ (8007134 <strtol+0x10>)
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f7ff bf7f 	b.w	8007030 <_strtol_l.isra.0>
 8007132:	bf00      	nop
 8007134:	20000048 	.word	0x20000048

08007138 <toupper>:
 8007138:	4b03      	ldr	r3, [pc, #12]	@ (8007148 <toupper+0x10>)
 800713a:	5c1b      	ldrb	r3, [r3, r0]
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	2b02      	cmp	r3, #2
 8007142:	bf08      	it	eq
 8007144:	3820      	subeq	r0, #32
 8007146:	4770      	bx	lr
 8007148:	08007d81 	.word	0x08007d81

0800714c <siprintf>:
 800714c:	b40e      	push	{r1, r2, r3}
 800714e:	b510      	push	{r4, lr}
 8007150:	b09d      	sub	sp, #116	@ 0x74
 8007152:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	9006      	str	r0, [sp, #24]
 8007158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800715c:	480a      	ldr	r0, [pc, #40]	@ (8007188 <siprintf+0x3c>)
 800715e:	9107      	str	r1, [sp, #28]
 8007160:	9104      	str	r1, [sp, #16]
 8007162:	490a      	ldr	r1, [pc, #40]	@ (800718c <siprintf+0x40>)
 8007164:	f853 2b04 	ldr.w	r2, [r3], #4
 8007168:	9105      	str	r1, [sp, #20]
 800716a:	2400      	movs	r4, #0
 800716c:	a902      	add	r1, sp, #8
 800716e:	6800      	ldr	r0, [r0, #0]
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007174:	f000 f9b4 	bl	80074e0 <_svfiprintf_r>
 8007178:	9b02      	ldr	r3, [sp, #8]
 800717a:	701c      	strb	r4, [r3, #0]
 800717c:	b01d      	add	sp, #116	@ 0x74
 800717e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007182:	b003      	add	sp, #12
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000048 	.word	0x20000048
 800718c:	ffff0208 	.word	0xffff0208

08007190 <memset>:
 8007190:	4402      	add	r2, r0
 8007192:	4603      	mov	r3, r0
 8007194:	4293      	cmp	r3, r2
 8007196:	d100      	bne.n	800719a <memset+0xa>
 8007198:	4770      	bx	lr
 800719a:	f803 1b01 	strb.w	r1, [r3], #1
 800719e:	e7f9      	b.n	8007194 <memset+0x4>

080071a0 <strncmp>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	b16a      	cbz	r2, 80071c0 <strncmp+0x20>
 80071a4:	3901      	subs	r1, #1
 80071a6:	1884      	adds	r4, r0, r2
 80071a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d103      	bne.n	80071bc <strncmp+0x1c>
 80071b4:	42a0      	cmp	r0, r4
 80071b6:	d001      	beq.n	80071bc <strncmp+0x1c>
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	d1f5      	bne.n	80071a8 <strncmp+0x8>
 80071bc:	1ad0      	subs	r0, r2, r3
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	4610      	mov	r0, r2
 80071c2:	e7fc      	b.n	80071be <strncmp+0x1e>

080071c4 <__errno>:
 80071c4:	4b01      	ldr	r3, [pc, #4]	@ (80071cc <__errno+0x8>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000048 	.word	0x20000048

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007208 <__libc_init_array+0x38>)
 80071d4:	4c0d      	ldr	r4, [pc, #52]	@ (800720c <__libc_init_array+0x3c>)
 80071d6:	1b64      	subs	r4, r4, r5
 80071d8:	10a4      	asrs	r4, r4, #2
 80071da:	2600      	movs	r6, #0
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007210 <__libc_init_array+0x40>)
 80071e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007214 <__libc_init_array+0x44>)
 80071e4:	f000 fc64 	bl	8007ab0 <_init>
 80071e8:	1b64      	subs	r4, r4, r5
 80071ea:	10a4      	asrs	r4, r4, #2
 80071ec:	2600      	movs	r6, #0
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	08007ebc 	.word	0x08007ebc
 800720c:	08007ebc 	.word	0x08007ebc
 8007210:	08007ebc 	.word	0x08007ebc
 8007214:	08007ec4 	.word	0x08007ec4

08007218 <__retarget_lock_acquire_recursive>:
 8007218:	4770      	bx	lr

0800721a <__retarget_lock_release_recursive>:
 800721a:	4770      	bx	lr

0800721c <memcpy>:
 800721c:	440a      	add	r2, r1
 800721e:	4291      	cmp	r1, r2
 8007220:	f100 33ff 	add.w	r3, r0, #4294967295
 8007224:	d100      	bne.n	8007228 <memcpy+0xc>
 8007226:	4770      	bx	lr
 8007228:	b510      	push	{r4, lr}
 800722a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007232:	4291      	cmp	r1, r2
 8007234:	d1f9      	bne.n	800722a <memcpy+0xe>
 8007236:	bd10      	pop	{r4, pc}

08007238 <_free_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4605      	mov	r5, r0
 800723c:	2900      	cmp	r1, #0
 800723e:	d041      	beq.n	80072c4 <_free_r+0x8c>
 8007240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007244:	1f0c      	subs	r4, r1, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfb8      	it	lt
 800724a:	18e4      	addlt	r4, r4, r3
 800724c:	f000 f8e0 	bl	8007410 <__malloc_lock>
 8007250:	4a1d      	ldr	r2, [pc, #116]	@ (80072c8 <_free_r+0x90>)
 8007252:	6813      	ldr	r3, [r2, #0]
 8007254:	b933      	cbnz	r3, 8007264 <_free_r+0x2c>
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	4628      	mov	r0, r5
 800725c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007260:	f000 b8dc 	b.w	800741c <__malloc_unlock>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d908      	bls.n	800727a <_free_r+0x42>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	1821      	adds	r1, r4, r0
 800726c:	428b      	cmp	r3, r1
 800726e:	bf01      	itttt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	1809      	addeq	r1, r1, r0
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	e7ed      	b.n	8007256 <_free_r+0x1e>
 800727a:	461a      	mov	r2, r3
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b10b      	cbz	r3, 8007284 <_free_r+0x4c>
 8007280:	42a3      	cmp	r3, r4
 8007282:	d9fa      	bls.n	800727a <_free_r+0x42>
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	1850      	adds	r0, r2, r1
 8007288:	42a0      	cmp	r0, r4
 800728a:	d10b      	bne.n	80072a4 <_free_r+0x6c>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	4401      	add	r1, r0
 8007290:	1850      	adds	r0, r2, r1
 8007292:	4283      	cmp	r3, r0
 8007294:	6011      	str	r1, [r2, #0]
 8007296:	d1e0      	bne.n	800725a <_free_r+0x22>
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	4408      	add	r0, r1
 80072a0:	6010      	str	r0, [r2, #0]
 80072a2:	e7da      	b.n	800725a <_free_r+0x22>
 80072a4:	d902      	bls.n	80072ac <_free_r+0x74>
 80072a6:	230c      	movs	r3, #12
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	e7d6      	b.n	800725a <_free_r+0x22>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	1821      	adds	r1, r4, r0
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf04      	itt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	bf04      	itt	eq
 80072bc:	1809      	addeq	r1, r1, r0
 80072be:	6021      	streq	r1, [r4, #0]
 80072c0:	6054      	str	r4, [r2, #4]
 80072c2:	e7ca      	b.n	800725a <_free_r+0x22>
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20000574 	.word	0x20000574

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0f      	ldr	r6, [pc, #60]	@ (800730c <sbrk_aligned+0x40>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 fba4 	bl	8007a24 <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fb9f 	bl	8007a24 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d103      	bne.n	80072f2 <sbrk_aligned+0x26>
 80072ea:	f04f 34ff 	mov.w	r4, #4294967295
 80072ee:	4620      	mov	r0, r4
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	1cc4      	adds	r4, r0, #3
 80072f4:	f024 0403 	bic.w	r4, r4, #3
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d0f8      	beq.n	80072ee <sbrk_aligned+0x22>
 80072fc:	1a21      	subs	r1, r4, r0
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fb90 	bl	8007a24 <_sbrk_r>
 8007304:	3001      	adds	r0, #1
 8007306:	d1f2      	bne.n	80072ee <sbrk_aligned+0x22>
 8007308:	e7ef      	b.n	80072ea <sbrk_aligned+0x1e>
 800730a:	bf00      	nop
 800730c:	20000570 	.word	0x20000570

08007310 <_malloc_r>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	1ccd      	adds	r5, r1, #3
 8007316:	f025 0503 	bic.w	r5, r5, #3
 800731a:	3508      	adds	r5, #8
 800731c:	2d0c      	cmp	r5, #12
 800731e:	bf38      	it	cc
 8007320:	250c      	movcc	r5, #12
 8007322:	2d00      	cmp	r5, #0
 8007324:	4606      	mov	r6, r0
 8007326:	db01      	blt.n	800732c <_malloc_r+0x1c>
 8007328:	42a9      	cmp	r1, r5
 800732a:	d904      	bls.n	8007336 <_malloc_r+0x26>
 800732c:	230c      	movs	r3, #12
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	2000      	movs	r0, #0
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800740c <_malloc_r+0xfc>
 800733a:	f000 f869 	bl	8007410 <__malloc_lock>
 800733e:	f8d8 3000 	ldr.w	r3, [r8]
 8007342:	461c      	mov	r4, r3
 8007344:	bb44      	cbnz	r4, 8007398 <_malloc_r+0x88>
 8007346:	4629      	mov	r1, r5
 8007348:	4630      	mov	r0, r6
 800734a:	f7ff ffbf 	bl	80072cc <sbrk_aligned>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	4604      	mov	r4, r0
 8007352:	d158      	bne.n	8007406 <_malloc_r+0xf6>
 8007354:	f8d8 4000 	ldr.w	r4, [r8]
 8007358:	4627      	mov	r7, r4
 800735a:	2f00      	cmp	r7, #0
 800735c:	d143      	bne.n	80073e6 <_malloc_r+0xd6>
 800735e:	2c00      	cmp	r4, #0
 8007360:	d04b      	beq.n	80073fa <_malloc_r+0xea>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	4639      	mov	r1, r7
 8007366:	4630      	mov	r0, r6
 8007368:	eb04 0903 	add.w	r9, r4, r3
 800736c:	f000 fb5a 	bl	8007a24 <_sbrk_r>
 8007370:	4581      	cmp	r9, r0
 8007372:	d142      	bne.n	80073fa <_malloc_r+0xea>
 8007374:	6821      	ldr	r1, [r4, #0]
 8007376:	1a6d      	subs	r5, r5, r1
 8007378:	4629      	mov	r1, r5
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ffa6 	bl	80072cc <sbrk_aligned>
 8007380:	3001      	adds	r0, #1
 8007382:	d03a      	beq.n	80073fa <_malloc_r+0xea>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	442b      	add	r3, r5
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	f8d8 3000 	ldr.w	r3, [r8]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	bb62      	cbnz	r2, 80073ec <_malloc_r+0xdc>
 8007392:	f8c8 7000 	str.w	r7, [r8]
 8007396:	e00f      	b.n	80073b8 <_malloc_r+0xa8>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	1b52      	subs	r2, r2, r5
 800739c:	d420      	bmi.n	80073e0 <_malloc_r+0xd0>
 800739e:	2a0b      	cmp	r2, #11
 80073a0:	d917      	bls.n	80073d2 <_malloc_r+0xc2>
 80073a2:	1961      	adds	r1, r4, r5
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	6025      	str	r5, [r4, #0]
 80073a8:	bf18      	it	ne
 80073aa:	6059      	strne	r1, [r3, #4]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	bf08      	it	eq
 80073b0:	f8c8 1000 	streq.w	r1, [r8]
 80073b4:	5162      	str	r2, [r4, r5]
 80073b6:	604b      	str	r3, [r1, #4]
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 f82f 	bl	800741c <__malloc_unlock>
 80073be:	f104 000b 	add.w	r0, r4, #11
 80073c2:	1d23      	adds	r3, r4, #4
 80073c4:	f020 0007 	bic.w	r0, r0, #7
 80073c8:	1ac2      	subs	r2, r0, r3
 80073ca:	bf1c      	itt	ne
 80073cc:	1a1b      	subne	r3, r3, r0
 80073ce:	50a3      	strne	r3, [r4, r2]
 80073d0:	e7af      	b.n	8007332 <_malloc_r+0x22>
 80073d2:	6862      	ldr	r2, [r4, #4]
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	bf0c      	ite	eq
 80073d8:	f8c8 2000 	streq.w	r2, [r8]
 80073dc:	605a      	strne	r2, [r3, #4]
 80073de:	e7eb      	b.n	80073b8 <_malloc_r+0xa8>
 80073e0:	4623      	mov	r3, r4
 80073e2:	6864      	ldr	r4, [r4, #4]
 80073e4:	e7ae      	b.n	8007344 <_malloc_r+0x34>
 80073e6:	463c      	mov	r4, r7
 80073e8:	687f      	ldr	r7, [r7, #4]
 80073ea:	e7b6      	b.n	800735a <_malloc_r+0x4a>
 80073ec:	461a      	mov	r2, r3
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d1fb      	bne.n	80073ec <_malloc_r+0xdc>
 80073f4:	2300      	movs	r3, #0
 80073f6:	6053      	str	r3, [r2, #4]
 80073f8:	e7de      	b.n	80073b8 <_malloc_r+0xa8>
 80073fa:	230c      	movs	r3, #12
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	4630      	mov	r0, r6
 8007400:	f000 f80c 	bl	800741c <__malloc_unlock>
 8007404:	e794      	b.n	8007330 <_malloc_r+0x20>
 8007406:	6005      	str	r5, [r0, #0]
 8007408:	e7d6      	b.n	80073b8 <_malloc_r+0xa8>
 800740a:	bf00      	nop
 800740c:	20000574 	.word	0x20000574

08007410 <__malloc_lock>:
 8007410:	4801      	ldr	r0, [pc, #4]	@ (8007418 <__malloc_lock+0x8>)
 8007412:	f7ff bf01 	b.w	8007218 <__retarget_lock_acquire_recursive>
 8007416:	bf00      	nop
 8007418:	2000056c 	.word	0x2000056c

0800741c <__malloc_unlock>:
 800741c:	4801      	ldr	r0, [pc, #4]	@ (8007424 <__malloc_unlock+0x8>)
 800741e:	f7ff befc 	b.w	800721a <__retarget_lock_release_recursive>
 8007422:	bf00      	nop
 8007424:	2000056c 	.word	0x2000056c

08007428 <__ssputs_r>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	688e      	ldr	r6, [r1, #8]
 800742e:	461f      	mov	r7, r3
 8007430:	42be      	cmp	r6, r7
 8007432:	680b      	ldr	r3, [r1, #0]
 8007434:	4682      	mov	sl, r0
 8007436:	460c      	mov	r4, r1
 8007438:	4690      	mov	r8, r2
 800743a:	d82d      	bhi.n	8007498 <__ssputs_r+0x70>
 800743c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007444:	d026      	beq.n	8007494 <__ssputs_r+0x6c>
 8007446:	6965      	ldr	r5, [r4, #20]
 8007448:	6909      	ldr	r1, [r1, #16]
 800744a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800744e:	eba3 0901 	sub.w	r9, r3, r1
 8007452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007456:	1c7b      	adds	r3, r7, #1
 8007458:	444b      	add	r3, r9
 800745a:	106d      	asrs	r5, r5, #1
 800745c:	429d      	cmp	r5, r3
 800745e:	bf38      	it	cc
 8007460:	461d      	movcc	r5, r3
 8007462:	0553      	lsls	r3, r2, #21
 8007464:	d527      	bpl.n	80074b6 <__ssputs_r+0x8e>
 8007466:	4629      	mov	r1, r5
 8007468:	f7ff ff52 	bl	8007310 <_malloc_r>
 800746c:	4606      	mov	r6, r0
 800746e:	b360      	cbz	r0, 80074ca <__ssputs_r+0xa2>
 8007470:	6921      	ldr	r1, [r4, #16]
 8007472:	464a      	mov	r2, r9
 8007474:	f7ff fed2 	bl	800721c <memcpy>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800747e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	6126      	str	r6, [r4, #16]
 8007486:	6165      	str	r5, [r4, #20]
 8007488:	444e      	add	r6, r9
 800748a:	eba5 0509 	sub.w	r5, r5, r9
 800748e:	6026      	str	r6, [r4, #0]
 8007490:	60a5      	str	r5, [r4, #8]
 8007492:	463e      	mov	r6, r7
 8007494:	42be      	cmp	r6, r7
 8007496:	d900      	bls.n	800749a <__ssputs_r+0x72>
 8007498:	463e      	mov	r6, r7
 800749a:	6820      	ldr	r0, [r4, #0]
 800749c:	4632      	mov	r2, r6
 800749e:	4641      	mov	r1, r8
 80074a0:	f000 faa6 	bl	80079f0 <memmove>
 80074a4:	68a3      	ldr	r3, [r4, #8]
 80074a6:	1b9b      	subs	r3, r3, r6
 80074a8:	60a3      	str	r3, [r4, #8]
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	4433      	add	r3, r6
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	2000      	movs	r0, #0
 80074b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b6:	462a      	mov	r2, r5
 80074b8:	f000 fac4 	bl	8007a44 <_realloc_r>
 80074bc:	4606      	mov	r6, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	d1e0      	bne.n	8007484 <__ssputs_r+0x5c>
 80074c2:	6921      	ldr	r1, [r4, #16]
 80074c4:	4650      	mov	r0, sl
 80074c6:	f7ff feb7 	bl	8007238 <_free_r>
 80074ca:	230c      	movs	r3, #12
 80074cc:	f8ca 3000 	str.w	r3, [sl]
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	e7e9      	b.n	80074b2 <__ssputs_r+0x8a>
	...

080074e0 <_svfiprintf_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	4698      	mov	r8, r3
 80074e6:	898b      	ldrh	r3, [r1, #12]
 80074e8:	061b      	lsls	r3, r3, #24
 80074ea:	b09d      	sub	sp, #116	@ 0x74
 80074ec:	4607      	mov	r7, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	d510      	bpl.n	8007516 <_svfiprintf_r+0x36>
 80074f4:	690b      	ldr	r3, [r1, #16]
 80074f6:	b973      	cbnz	r3, 8007516 <_svfiprintf_r+0x36>
 80074f8:	2140      	movs	r1, #64	@ 0x40
 80074fa:	f7ff ff09 	bl	8007310 <_malloc_r>
 80074fe:	6028      	str	r0, [r5, #0]
 8007500:	6128      	str	r0, [r5, #16]
 8007502:	b930      	cbnz	r0, 8007512 <_svfiprintf_r+0x32>
 8007504:	230c      	movs	r3, #12
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	b01d      	add	sp, #116	@ 0x74
 800750e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007512:	2340      	movs	r3, #64	@ 0x40
 8007514:	616b      	str	r3, [r5, #20]
 8007516:	2300      	movs	r3, #0
 8007518:	9309      	str	r3, [sp, #36]	@ 0x24
 800751a:	2320      	movs	r3, #32
 800751c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007520:	f8cd 800c 	str.w	r8, [sp, #12]
 8007524:	2330      	movs	r3, #48	@ 0x30
 8007526:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076c4 <_svfiprintf_r+0x1e4>
 800752a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800752e:	f04f 0901 	mov.w	r9, #1
 8007532:	4623      	mov	r3, r4
 8007534:	469a      	mov	sl, r3
 8007536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753a:	b10a      	cbz	r2, 8007540 <_svfiprintf_r+0x60>
 800753c:	2a25      	cmp	r2, #37	@ 0x25
 800753e:	d1f9      	bne.n	8007534 <_svfiprintf_r+0x54>
 8007540:	ebba 0b04 	subs.w	fp, sl, r4
 8007544:	d00b      	beq.n	800755e <_svfiprintf_r+0x7e>
 8007546:	465b      	mov	r3, fp
 8007548:	4622      	mov	r2, r4
 800754a:	4629      	mov	r1, r5
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ff6b 	bl	8007428 <__ssputs_r>
 8007552:	3001      	adds	r0, #1
 8007554:	f000 80a7 	beq.w	80076a6 <_svfiprintf_r+0x1c6>
 8007558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800755a:	445a      	add	r2, fp
 800755c:	9209      	str	r2, [sp, #36]	@ 0x24
 800755e:	f89a 3000 	ldrb.w	r3, [sl]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 809f 	beq.w	80076a6 <_svfiprintf_r+0x1c6>
 8007568:	2300      	movs	r3, #0
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007572:	f10a 0a01 	add.w	sl, sl, #1
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800757e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007580:	4654      	mov	r4, sl
 8007582:	2205      	movs	r2, #5
 8007584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007588:	484e      	ldr	r0, [pc, #312]	@ (80076c4 <_svfiprintf_r+0x1e4>)
 800758a:	f7f8 fe31 	bl	80001f0 <memchr>
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	b9d8      	cbnz	r0, 80075ca <_svfiprintf_r+0xea>
 8007592:	06d0      	lsls	r0, r2, #27
 8007594:	bf44      	itt	mi
 8007596:	2320      	movmi	r3, #32
 8007598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800759c:	0711      	lsls	r1, r2, #28
 800759e:	bf44      	itt	mi
 80075a0:	232b      	movmi	r3, #43	@ 0x2b
 80075a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075a6:	f89a 3000 	ldrb.w	r3, [sl]
 80075aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ac:	d015      	beq.n	80075da <_svfiprintf_r+0xfa>
 80075ae:	9a07      	ldr	r2, [sp, #28]
 80075b0:	4654      	mov	r4, sl
 80075b2:	2000      	movs	r0, #0
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4621      	mov	r1, r4
 80075ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075be:	3b30      	subs	r3, #48	@ 0x30
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d94b      	bls.n	800765c <_svfiprintf_r+0x17c>
 80075c4:	b1b0      	cbz	r0, 80075f4 <_svfiprintf_r+0x114>
 80075c6:	9207      	str	r2, [sp, #28]
 80075c8:	e014      	b.n	80075f4 <_svfiprintf_r+0x114>
 80075ca:	eba0 0308 	sub.w	r3, r0, r8
 80075ce:	fa09 f303 	lsl.w	r3, r9, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	46a2      	mov	sl, r4
 80075d8:	e7d2      	b.n	8007580 <_svfiprintf_r+0xa0>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	1d19      	adds	r1, r3, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	9103      	str	r1, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfbb      	ittet	lt
 80075e6:	425b      	neglt	r3, r3
 80075e8:	f042 0202 	orrlt.w	r2, r2, #2
 80075ec:	9307      	strge	r3, [sp, #28]
 80075ee:	9307      	strlt	r3, [sp, #28]
 80075f0:	bfb8      	it	lt
 80075f2:	9204      	strlt	r2, [sp, #16]
 80075f4:	7823      	ldrb	r3, [r4, #0]
 80075f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80075f8:	d10a      	bne.n	8007610 <_svfiprintf_r+0x130>
 80075fa:	7863      	ldrb	r3, [r4, #1]
 80075fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80075fe:	d132      	bne.n	8007666 <_svfiprintf_r+0x186>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9203      	str	r2, [sp, #12]
 8007608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800760c:	3402      	adds	r4, #2
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076d4 <_svfiprintf_r+0x1f4>
 8007614:	7821      	ldrb	r1, [r4, #0]
 8007616:	2203      	movs	r2, #3
 8007618:	4650      	mov	r0, sl
 800761a:	f7f8 fde9 	bl	80001f0 <memchr>
 800761e:	b138      	cbz	r0, 8007630 <_svfiprintf_r+0x150>
 8007620:	9b04      	ldr	r3, [sp, #16]
 8007622:	eba0 000a 	sub.w	r0, r0, sl
 8007626:	2240      	movs	r2, #64	@ 0x40
 8007628:	4082      	lsls	r2, r0
 800762a:	4313      	orrs	r3, r2
 800762c:	3401      	adds	r4, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007634:	4824      	ldr	r0, [pc, #144]	@ (80076c8 <_svfiprintf_r+0x1e8>)
 8007636:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800763a:	2206      	movs	r2, #6
 800763c:	f7f8 fdd8 	bl	80001f0 <memchr>
 8007640:	2800      	cmp	r0, #0
 8007642:	d036      	beq.n	80076b2 <_svfiprintf_r+0x1d2>
 8007644:	4b21      	ldr	r3, [pc, #132]	@ (80076cc <_svfiprintf_r+0x1ec>)
 8007646:	bb1b      	cbnz	r3, 8007690 <_svfiprintf_r+0x1b0>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	3307      	adds	r3, #7
 800764c:	f023 0307 	bic.w	r3, r3, #7
 8007650:	3308      	adds	r3, #8
 8007652:	9303      	str	r3, [sp, #12]
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	4433      	add	r3, r6
 8007658:	9309      	str	r3, [sp, #36]	@ 0x24
 800765a:	e76a      	b.n	8007532 <_svfiprintf_r+0x52>
 800765c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007660:	460c      	mov	r4, r1
 8007662:	2001      	movs	r0, #1
 8007664:	e7a8      	b.n	80075b8 <_svfiprintf_r+0xd8>
 8007666:	2300      	movs	r3, #0
 8007668:	3401      	adds	r4, #1
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	4619      	mov	r1, r3
 800766e:	f04f 0c0a 	mov.w	ip, #10
 8007672:	4620      	mov	r0, r4
 8007674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007678:	3a30      	subs	r2, #48	@ 0x30
 800767a:	2a09      	cmp	r2, #9
 800767c:	d903      	bls.n	8007686 <_svfiprintf_r+0x1a6>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0c6      	beq.n	8007610 <_svfiprintf_r+0x130>
 8007682:	9105      	str	r1, [sp, #20]
 8007684:	e7c4      	b.n	8007610 <_svfiprintf_r+0x130>
 8007686:	fb0c 2101 	mla	r1, ip, r1, r2
 800768a:	4604      	mov	r4, r0
 800768c:	2301      	movs	r3, #1
 800768e:	e7f0      	b.n	8007672 <_svfiprintf_r+0x192>
 8007690:	ab03      	add	r3, sp, #12
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	462a      	mov	r2, r5
 8007696:	4b0e      	ldr	r3, [pc, #56]	@ (80076d0 <_svfiprintf_r+0x1f0>)
 8007698:	a904      	add	r1, sp, #16
 800769a:	4638      	mov	r0, r7
 800769c:	f3af 8000 	nop.w
 80076a0:	1c42      	adds	r2, r0, #1
 80076a2:	4606      	mov	r6, r0
 80076a4:	d1d6      	bne.n	8007654 <_svfiprintf_r+0x174>
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	065b      	lsls	r3, r3, #25
 80076aa:	f53f af2d 	bmi.w	8007508 <_svfiprintf_r+0x28>
 80076ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b0:	e72c      	b.n	800750c <_svfiprintf_r+0x2c>
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	462a      	mov	r2, r5
 80076b8:	4b05      	ldr	r3, [pc, #20]	@ (80076d0 <_svfiprintf_r+0x1f0>)
 80076ba:	a904      	add	r1, sp, #16
 80076bc:	4638      	mov	r0, r7
 80076be:	f000 f879 	bl	80077b4 <_printf_i>
 80076c2:	e7ed      	b.n	80076a0 <_svfiprintf_r+0x1c0>
 80076c4:	08007e81 	.word	0x08007e81
 80076c8:	08007e8b 	.word	0x08007e8b
 80076cc:	00000000 	.word	0x00000000
 80076d0:	08007429 	.word	0x08007429
 80076d4:	08007e87 	.word	0x08007e87

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4616      	mov	r6, r2
 80076de:	4698      	mov	r8, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfb8      	it	lt
 80076ec:	4613      	movlt	r3, r2
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076f4:	4607      	mov	r7, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	b10a      	cbz	r2, 80076fe <_printf_common+0x26>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	6833      	ldrmi	r3, [r6, #0]
 8007706:	3302      	addmi	r3, #2
 8007708:	6033      	strmi	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f015 0506 	ands.w	r5, r5, #6
 8007710:	d106      	bne.n	8007720 <_printf_common+0x48>
 8007712:	f104 0a19 	add.w	sl, r4, #25
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	6832      	ldr	r2, [r6, #0]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ab      	cmp	r3, r5
 800771e:	dc26      	bgt.n	800776e <_printf_common+0x96>
 8007720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	3b00      	subs	r3, #0
 8007728:	bf18      	it	ne
 800772a:	2301      	movne	r3, #1
 800772c:	0692      	lsls	r2, r2, #26
 800772e:	d42b      	bmi.n	8007788 <_printf_common+0xb0>
 8007730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007734:	4641      	mov	r1, r8
 8007736:	4638      	mov	r0, r7
 8007738:	47c8      	blx	r9
 800773a:	3001      	adds	r0, #1
 800773c:	d01e      	beq.n	800777c <_printf_common+0xa4>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	6922      	ldr	r2, [r4, #16]
 8007742:	f003 0306 	and.w	r3, r3, #6
 8007746:	2b04      	cmp	r3, #4
 8007748:	bf02      	ittt	eq
 800774a:	68e5      	ldreq	r5, [r4, #12]
 800774c:	6833      	ldreq	r3, [r6, #0]
 800774e:	1aed      	subeq	r5, r5, r3
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	bf0c      	ite	eq
 8007754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007758:	2500      	movne	r5, #0
 800775a:	4293      	cmp	r3, r2
 800775c:	bfc4      	itt	gt
 800775e:	1a9b      	subgt	r3, r3, r2
 8007760:	18ed      	addgt	r5, r5, r3
 8007762:	2600      	movs	r6, #0
 8007764:	341a      	adds	r4, #26
 8007766:	42b5      	cmp	r5, r6
 8007768:	d11a      	bne.n	80077a0 <_printf_common+0xc8>
 800776a:	2000      	movs	r0, #0
 800776c:	e008      	b.n	8007780 <_printf_common+0xa8>
 800776e:	2301      	movs	r3, #1
 8007770:	4652      	mov	r2, sl
 8007772:	4641      	mov	r1, r8
 8007774:	4638      	mov	r0, r7
 8007776:	47c8      	blx	r9
 8007778:	3001      	adds	r0, #1
 800777a:	d103      	bne.n	8007784 <_printf_common+0xac>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007784:	3501      	adds	r5, #1
 8007786:	e7c6      	b.n	8007716 <_printf_common+0x3e>
 8007788:	18e1      	adds	r1, r4, r3
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	2030      	movs	r0, #48	@ 0x30
 800778e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007792:	4422      	add	r2, r4
 8007794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800779c:	3302      	adds	r3, #2
 800779e:	e7c7      	b.n	8007730 <_printf_common+0x58>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4622      	mov	r2, r4
 80077a4:	4641      	mov	r1, r8
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c8      	blx	r9
 80077aa:	3001      	adds	r0, #1
 80077ac:	d0e6      	beq.n	800777c <_printf_common+0xa4>
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7d9      	b.n	8007766 <_printf_common+0x8e>
	...

080077b4 <_printf_i>:
 80077b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	7e0f      	ldrb	r7, [r1, #24]
 80077ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077bc:	2f78      	cmp	r7, #120	@ 0x78
 80077be:	4691      	mov	r9, r2
 80077c0:	4680      	mov	r8, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	469a      	mov	sl, r3
 80077c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077ca:	d807      	bhi.n	80077dc <_printf_i+0x28>
 80077cc:	2f62      	cmp	r7, #98	@ 0x62
 80077ce:	d80a      	bhi.n	80077e6 <_printf_i+0x32>
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f000 80d1 	beq.w	8007978 <_printf_i+0x1c4>
 80077d6:	2f58      	cmp	r7, #88	@ 0x58
 80077d8:	f000 80b8 	beq.w	800794c <_printf_i+0x198>
 80077dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077e4:	e03a      	b.n	800785c <_printf_i+0xa8>
 80077e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077ea:	2b15      	cmp	r3, #21
 80077ec:	d8f6      	bhi.n	80077dc <_printf_i+0x28>
 80077ee:	a101      	add	r1, pc, #4	@ (adr r1, 80077f4 <_printf_i+0x40>)
 80077f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	08007861 	.word	0x08007861
 80077fc:	080077dd 	.word	0x080077dd
 8007800:	080077dd 	.word	0x080077dd
 8007804:	080077dd 	.word	0x080077dd
 8007808:	080077dd 	.word	0x080077dd
 800780c:	08007861 	.word	0x08007861
 8007810:	080077dd 	.word	0x080077dd
 8007814:	080077dd 	.word	0x080077dd
 8007818:	080077dd 	.word	0x080077dd
 800781c:	080077dd 	.word	0x080077dd
 8007820:	0800795f 	.word	0x0800795f
 8007824:	0800788b 	.word	0x0800788b
 8007828:	08007919 	.word	0x08007919
 800782c:	080077dd 	.word	0x080077dd
 8007830:	080077dd 	.word	0x080077dd
 8007834:	08007981 	.word	0x08007981
 8007838:	080077dd 	.word	0x080077dd
 800783c:	0800788b 	.word	0x0800788b
 8007840:	080077dd 	.word	0x080077dd
 8007844:	080077dd 	.word	0x080077dd
 8007848:	08007921 	.word	0x08007921
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6032      	str	r2, [r6, #0]
 8007854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800785c:	2301      	movs	r3, #1
 800785e:	e09c      	b.n	800799a <_printf_i+0x1e6>
 8007860:	6833      	ldr	r3, [r6, #0]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1d19      	adds	r1, r3, #4
 8007866:	6031      	str	r1, [r6, #0]
 8007868:	0606      	lsls	r6, r0, #24
 800786a:	d501      	bpl.n	8007870 <_printf_i+0xbc>
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	e003      	b.n	8007878 <_printf_i+0xc4>
 8007870:	0645      	lsls	r5, r0, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0xb8>
 8007874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007878:	2d00      	cmp	r5, #0
 800787a:	da03      	bge.n	8007884 <_printf_i+0xd0>
 800787c:	232d      	movs	r3, #45	@ 0x2d
 800787e:	426d      	negs	r5, r5
 8007880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007884:	4858      	ldr	r0, [pc, #352]	@ (80079e8 <_printf_i+0x234>)
 8007886:	230a      	movs	r3, #10
 8007888:	e011      	b.n	80078ae <_printf_i+0xfa>
 800788a:	6821      	ldr	r1, [r4, #0]
 800788c:	6833      	ldr	r3, [r6, #0]
 800788e:	0608      	lsls	r0, r1, #24
 8007890:	f853 5b04 	ldr.w	r5, [r3], #4
 8007894:	d402      	bmi.n	800789c <_printf_i+0xe8>
 8007896:	0649      	lsls	r1, r1, #25
 8007898:	bf48      	it	mi
 800789a:	b2ad      	uxthmi	r5, r5
 800789c:	2f6f      	cmp	r7, #111	@ 0x6f
 800789e:	4852      	ldr	r0, [pc, #328]	@ (80079e8 <_printf_i+0x234>)
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	bf14      	ite	ne
 80078a4:	230a      	movne	r3, #10
 80078a6:	2308      	moveq	r3, #8
 80078a8:	2100      	movs	r1, #0
 80078aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078ae:	6866      	ldr	r6, [r4, #4]
 80078b0:	60a6      	str	r6, [r4, #8]
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	db05      	blt.n	80078c2 <_printf_i+0x10e>
 80078b6:	6821      	ldr	r1, [r4, #0]
 80078b8:	432e      	orrs	r6, r5
 80078ba:	f021 0104 	bic.w	r1, r1, #4
 80078be:	6021      	str	r1, [r4, #0]
 80078c0:	d04b      	beq.n	800795a <_printf_i+0x1a6>
 80078c2:	4616      	mov	r6, r2
 80078c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80078c8:	fb03 5711 	mls	r7, r3, r1, r5
 80078cc:	5dc7      	ldrb	r7, [r0, r7]
 80078ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078d2:	462f      	mov	r7, r5
 80078d4:	42bb      	cmp	r3, r7
 80078d6:	460d      	mov	r5, r1
 80078d8:	d9f4      	bls.n	80078c4 <_printf_i+0x110>
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d10b      	bne.n	80078f6 <_printf_i+0x142>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	07df      	lsls	r7, r3, #31
 80078e2:	d508      	bpl.n	80078f6 <_printf_i+0x142>
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	6861      	ldr	r1, [r4, #4]
 80078e8:	4299      	cmp	r1, r3
 80078ea:	bfde      	ittt	le
 80078ec:	2330      	movle	r3, #48	@ 0x30
 80078ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078f6:	1b92      	subs	r2, r2, r6
 80078f8:	6122      	str	r2, [r4, #16]
 80078fa:	f8cd a000 	str.w	sl, [sp]
 80078fe:	464b      	mov	r3, r9
 8007900:	aa03      	add	r2, sp, #12
 8007902:	4621      	mov	r1, r4
 8007904:	4640      	mov	r0, r8
 8007906:	f7ff fee7 	bl	80076d8 <_printf_common>
 800790a:	3001      	adds	r0, #1
 800790c:	d14a      	bne.n	80079a4 <_printf_i+0x1f0>
 800790e:	f04f 30ff 	mov.w	r0, #4294967295
 8007912:	b004      	add	sp, #16
 8007914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	f043 0320 	orr.w	r3, r3, #32
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	4832      	ldr	r0, [pc, #200]	@ (80079ec <_printf_i+0x238>)
 8007922:	2778      	movs	r7, #120	@ 0x78
 8007924:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	6831      	ldr	r1, [r6, #0]
 800792c:	061f      	lsls	r7, r3, #24
 800792e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007932:	d402      	bmi.n	800793a <_printf_i+0x186>
 8007934:	065f      	lsls	r7, r3, #25
 8007936:	bf48      	it	mi
 8007938:	b2ad      	uxthmi	r5, r5
 800793a:	6031      	str	r1, [r6, #0]
 800793c:	07d9      	lsls	r1, r3, #31
 800793e:	bf44      	itt	mi
 8007940:	f043 0320 	orrmi.w	r3, r3, #32
 8007944:	6023      	strmi	r3, [r4, #0]
 8007946:	b11d      	cbz	r5, 8007950 <_printf_i+0x19c>
 8007948:	2310      	movs	r3, #16
 800794a:	e7ad      	b.n	80078a8 <_printf_i+0xf4>
 800794c:	4826      	ldr	r0, [pc, #152]	@ (80079e8 <_printf_i+0x234>)
 800794e:	e7e9      	b.n	8007924 <_printf_i+0x170>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	f023 0320 	bic.w	r3, r3, #32
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	e7f6      	b.n	8007948 <_printf_i+0x194>
 800795a:	4616      	mov	r6, r2
 800795c:	e7bd      	b.n	80078da <_printf_i+0x126>
 800795e:	6833      	ldr	r3, [r6, #0]
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	6961      	ldr	r1, [r4, #20]
 8007964:	1d18      	adds	r0, r3, #4
 8007966:	6030      	str	r0, [r6, #0]
 8007968:	062e      	lsls	r6, r5, #24
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	d501      	bpl.n	8007972 <_printf_i+0x1be>
 800796e:	6019      	str	r1, [r3, #0]
 8007970:	e002      	b.n	8007978 <_printf_i+0x1c4>
 8007972:	0668      	lsls	r0, r5, #25
 8007974:	d5fb      	bpl.n	800796e <_printf_i+0x1ba>
 8007976:	8019      	strh	r1, [r3, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	4616      	mov	r6, r2
 800797e:	e7bc      	b.n	80078fa <_printf_i+0x146>
 8007980:	6833      	ldr	r3, [r6, #0]
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	6032      	str	r2, [r6, #0]
 8007986:	681e      	ldr	r6, [r3, #0]
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	2100      	movs	r1, #0
 800798c:	4630      	mov	r0, r6
 800798e:	f7f8 fc2f 	bl	80001f0 <memchr>
 8007992:	b108      	cbz	r0, 8007998 <_printf_i+0x1e4>
 8007994:	1b80      	subs	r0, r0, r6
 8007996:	6060      	str	r0, [r4, #4]
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2300      	movs	r3, #0
 800799e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a2:	e7aa      	b.n	80078fa <_printf_i+0x146>
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	4632      	mov	r2, r6
 80079a8:	4649      	mov	r1, r9
 80079aa:	4640      	mov	r0, r8
 80079ac:	47d0      	blx	sl
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0ad      	beq.n	800790e <_printf_i+0x15a>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	079b      	lsls	r3, r3, #30
 80079b6:	d413      	bmi.n	80079e0 <_printf_i+0x22c>
 80079b8:	68e0      	ldr	r0, [r4, #12]
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	4298      	cmp	r0, r3
 80079be:	bfb8      	it	lt
 80079c0:	4618      	movlt	r0, r3
 80079c2:	e7a6      	b.n	8007912 <_printf_i+0x15e>
 80079c4:	2301      	movs	r3, #1
 80079c6:	4632      	mov	r2, r6
 80079c8:	4649      	mov	r1, r9
 80079ca:	4640      	mov	r0, r8
 80079cc:	47d0      	blx	sl
 80079ce:	3001      	adds	r0, #1
 80079d0:	d09d      	beq.n	800790e <_printf_i+0x15a>
 80079d2:	3501      	adds	r5, #1
 80079d4:	68e3      	ldr	r3, [r4, #12]
 80079d6:	9903      	ldr	r1, [sp, #12]
 80079d8:	1a5b      	subs	r3, r3, r1
 80079da:	42ab      	cmp	r3, r5
 80079dc:	dcf2      	bgt.n	80079c4 <_printf_i+0x210>
 80079de:	e7eb      	b.n	80079b8 <_printf_i+0x204>
 80079e0:	2500      	movs	r5, #0
 80079e2:	f104 0619 	add.w	r6, r4, #25
 80079e6:	e7f5      	b.n	80079d4 <_printf_i+0x220>
 80079e8:	08007e92 	.word	0x08007e92
 80079ec:	08007ea3 	.word	0x08007ea3

080079f0 <memmove>:
 80079f0:	4288      	cmp	r0, r1
 80079f2:	b510      	push	{r4, lr}
 80079f4:	eb01 0402 	add.w	r4, r1, r2
 80079f8:	d902      	bls.n	8007a00 <memmove+0x10>
 80079fa:	4284      	cmp	r4, r0
 80079fc:	4623      	mov	r3, r4
 80079fe:	d807      	bhi.n	8007a10 <memmove+0x20>
 8007a00:	1e43      	subs	r3, r0, #1
 8007a02:	42a1      	cmp	r1, r4
 8007a04:	d008      	beq.n	8007a18 <memmove+0x28>
 8007a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a0e:	e7f8      	b.n	8007a02 <memmove+0x12>
 8007a10:	4402      	add	r2, r0
 8007a12:	4601      	mov	r1, r0
 8007a14:	428a      	cmp	r2, r1
 8007a16:	d100      	bne.n	8007a1a <memmove+0x2a>
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a22:	e7f7      	b.n	8007a14 <memmove+0x24>

08007a24 <_sbrk_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d06      	ldr	r5, [pc, #24]	@ (8007a40 <_sbrk_r+0x1c>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7fb fa46 	bl	8002ec0 <_sbrk>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_sbrk_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_sbrk_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20000568 	.word	0x20000568

08007a44 <_realloc_r>:
 8007a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a48:	4607      	mov	r7, r0
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	b921      	cbnz	r1, 8007a5a <_realloc_r+0x16>
 8007a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a54:	4611      	mov	r1, r2
 8007a56:	f7ff bc5b 	b.w	8007310 <_malloc_r>
 8007a5a:	b92a      	cbnz	r2, 8007a68 <_realloc_r+0x24>
 8007a5c:	f7ff fbec 	bl	8007238 <_free_r>
 8007a60:	4625      	mov	r5, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a68:	f000 f81a 	bl	8007aa0 <_malloc_usable_size_r>
 8007a6c:	4284      	cmp	r4, r0
 8007a6e:	4606      	mov	r6, r0
 8007a70:	d802      	bhi.n	8007a78 <_realloc_r+0x34>
 8007a72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a76:	d8f4      	bhi.n	8007a62 <_realloc_r+0x1e>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f7ff fc48 	bl	8007310 <_malloc_r>
 8007a80:	4680      	mov	r8, r0
 8007a82:	b908      	cbnz	r0, 8007a88 <_realloc_r+0x44>
 8007a84:	4645      	mov	r5, r8
 8007a86:	e7ec      	b.n	8007a62 <_realloc_r+0x1e>
 8007a88:	42b4      	cmp	r4, r6
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	bf28      	it	cs
 8007a90:	4632      	movcs	r2, r6
 8007a92:	f7ff fbc3 	bl	800721c <memcpy>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f7ff fbcd 	bl	8007238 <_free_r>
 8007a9e:	e7f1      	b.n	8007a84 <_realloc_r+0x40>

08007aa0 <_malloc_usable_size_r>:
 8007aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa4:	1f18      	subs	r0, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bfbc      	itt	lt
 8007aaa:	580b      	ldrlt	r3, [r1, r0]
 8007aac:	18c0      	addlt	r0, r0, r3
 8007aae:	4770      	bx	lr

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
