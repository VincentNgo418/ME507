
ME507.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08007d18  08007d18  00008d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b0  080081b0  0000a0ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080081b0  080081b0  000091b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b8  080081b8  0000a0ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080081b8  080081b8  000091b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081c0  080081c0  000091c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  080081c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000ac  08008270  0000a0ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08008270  0000a58c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019878  00000000  00000000  0000a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b46  00000000  00000000  00023954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  000264a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001463  00000000  00000000  00027da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d70f  00000000  00000000  0002920b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0b4  00000000  00000000  0004691a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c5c  00000000  00000000  000639ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010462a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007624  00000000  00000000  00104670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010bc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d00 	.word	0x08007d00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08007d00 	.word	0x08007d00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b988 	b.w	8000df4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	468e      	mov	lr, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	4688      	mov	r8, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4617      	mov	r7, r2
 8000b10:	d962      	bls.n	8000bd8 <__udivmoddi4+0xdc>
 8000b12:	fab2 f682 	clz	r6, r2
 8000b16:	b14e      	cbz	r6, 8000b2c <__udivmoddi4+0x30>
 8000b18:	f1c6 0320 	rsb	r3, r6, #32
 8000b1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b20:	fa20 f303 	lsr.w	r3, r0, r3
 8000b24:	40b7      	lsls	r7, r6
 8000b26:	ea43 0808 	orr.w	r8, r3, r8
 8000b2a:	40b4      	lsls	r4, r6
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	fa1f fc87 	uxth.w	ip, r7
 8000b34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b42:	fb01 f20c 	mul.w	r2, r1, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b50:	f080 80ea 	bcs.w	8000d28 <__udivmoddi4+0x22c>
 8000b54:	429a      	cmp	r2, r3
 8000b56:	f240 80e7 	bls.w	8000d28 <__udivmoddi4+0x22c>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	443b      	add	r3, r7
 8000b5e:	1a9a      	subs	r2, r3, r2
 8000b60:	b2a3      	uxth	r3, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b72:	459c      	cmp	ip, r3
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0x8e>
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7c:	f080 80d6 	bcs.w	8000d2c <__udivmoddi4+0x230>
 8000b80:	459c      	cmp	ip, r3
 8000b82:	f240 80d3 	bls.w	8000d2c <__udivmoddi4+0x230>
 8000b86:	443b      	add	r3, r7
 8000b88:	3802      	subs	r0, #2
 8000b8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b8e:	eba3 030c 	sub.w	r3, r3, ip
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11d      	cbz	r5, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40f3      	lsrs	r3, r6
 8000b98:	2200      	movs	r2, #0
 8000b9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d905      	bls.n	8000bb2 <__udivmoddi4+0xb6>
 8000ba6:	b10d      	cbz	r5, 8000bac <__udivmoddi4+0xb0>
 8000ba8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bac:	2100      	movs	r1, #0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e7f5      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bb2:	fab3 f183 	clz	r1, r3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d146      	bne.n	8000c48 <__udivmoddi4+0x14c>
 8000bba:	4573      	cmp	r3, lr
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xc8>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 8105 	bhi.w	8000dce <__udivmoddi4+0x2d2>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4690      	mov	r8, r2
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d0e5      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bd6:	e7e2      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f000 8090 	beq.w	8000cfe <__udivmoddi4+0x202>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	f040 80a4 	bne.w	8000d30 <__udivmoddi4+0x234>
 8000be8:	1a8a      	subs	r2, r1, r2
 8000bea:	0c03      	lsrs	r3, r0, #16
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	b2bc      	uxth	r4, r7
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c02:	fb04 f20c 	mul.w	r2, r4, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d907      	bls.n	8000c1a <__udivmoddi4+0x11e>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x11c>
 8000c12:	429a      	cmp	r2, r3
 8000c14:	f200 80e0 	bhi.w	8000dd8 <__udivmoddi4+0x2dc>
 8000c18:	46c4      	mov	ip, r8
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c28:	fb02 f404 	mul.w	r4, r2, r4
 8000c2c:	429c      	cmp	r4, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x144>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x142>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f200 80ca 	bhi.w	8000dd2 <__udivmoddi4+0x2d6>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	1b1b      	subs	r3, r3, r4
 8000c42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c46:	e7a5      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c48:	f1c1 0620 	rsb	r6, r1, #32
 8000c4c:	408b      	lsls	r3, r1
 8000c4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c52:	431f      	orrs	r7, r3
 8000c54:	fa0e f401 	lsl.w	r4, lr, r1
 8000c58:	fa20 f306 	lsr.w	r3, r0, r6
 8000c5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c64:	4323      	orrs	r3, r4
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	fa1f fc87 	uxth.w	ip, r7
 8000c6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c72:	0c1c      	lsrs	r4, r3, #16
 8000c74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	fa02 f201 	lsl.w	r2, r2, r1
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x1a0>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c8e:	f080 809c 	bcs.w	8000dca <__udivmoddi4+0x2ce>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f240 8099 	bls.w	8000dca <__udivmoddi4+0x2ce>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	fa1f fe83 	uxth.w	lr, r3
 8000ca4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cb0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb4:	45a4      	cmp	ip, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x1ce>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cbe:	f080 8082 	bcs.w	8000dc6 <__udivmoddi4+0x2ca>
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d97f      	bls.n	8000dc6 <__udivmoddi4+0x2ca>
 8000cc6:	3b02      	subs	r3, #2
 8000cc8:	443c      	add	r4, r7
 8000cca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cd6:	4564      	cmp	r4, ip
 8000cd8:	4673      	mov	r3, lr
 8000cda:	46e1      	mov	r9, ip
 8000cdc:	d362      	bcc.n	8000da4 <__udivmoddi4+0x2a8>
 8000cde:	d05f      	beq.n	8000da0 <__udivmoddi4+0x2a4>
 8000ce0:	b15d      	cbz	r5, 8000cfa <__udivmoddi4+0x1fe>
 8000ce2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ce6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cea:	fa04 f606 	lsl.w	r6, r4, r6
 8000cee:	fa22 f301 	lsr.w	r3, r2, r1
 8000cf2:	431e      	orrs	r6, r3
 8000cf4:	40cc      	lsrs	r4, r1
 8000cf6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	e74f      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000cfe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d02:	0c01      	lsrs	r1, r0, #16
 8000d04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d08:	b280      	uxth	r0, r0
 8000d0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4638      	mov	r0, r7
 8000d12:	463c      	mov	r4, r7
 8000d14:	46b8      	mov	r8, r7
 8000d16:	46be      	mov	lr, r7
 8000d18:	2620      	movs	r6, #32
 8000d1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d1e:	eba2 0208 	sub.w	r2, r2, r8
 8000d22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d26:	e766      	b.n	8000bf6 <__udivmoddi4+0xfa>
 8000d28:	4601      	mov	r1, r0
 8000d2a:	e718      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	e72c      	b.n	8000b8a <__udivmoddi4+0x8e>
 8000d30:	f1c6 0220 	rsb	r2, r6, #32
 8000d34:	fa2e f302 	lsr.w	r3, lr, r2
 8000d38:	40b7      	lsls	r7, r6
 8000d3a:	40b1      	lsls	r1, r6
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	430a      	orrs	r2, r1
 8000d46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d4a:	b2bc      	uxth	r4, r7
 8000d4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb08 f904 	mul.w	r9, r8, r4
 8000d5a:	40b0      	lsls	r0, r6
 8000d5c:	4589      	cmp	r9, r1
 8000d5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d62:	b280      	uxth	r0, r0
 8000d64:	d93e      	bls.n	8000de4 <__udivmoddi4+0x2e8>
 8000d66:	1879      	adds	r1, r7, r1
 8000d68:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d6c:	d201      	bcs.n	8000d72 <__udivmoddi4+0x276>
 8000d6e:	4589      	cmp	r9, r1
 8000d70:	d81f      	bhi.n	8000db2 <__udivmoddi4+0x2b6>
 8000d72:	eba1 0109 	sub.w	r1, r1, r9
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fb09 f804 	mul.w	r8, r9, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	b292      	uxth	r2, r2
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	4542      	cmp	r2, r8
 8000d8a:	d229      	bcs.n	8000de0 <__udivmoddi4+0x2e4>
 8000d8c:	18ba      	adds	r2, r7, r2
 8000d8e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d92:	d2c4      	bcs.n	8000d1e <__udivmoddi4+0x222>
 8000d94:	4542      	cmp	r2, r8
 8000d96:	d2c2      	bcs.n	8000d1e <__udivmoddi4+0x222>
 8000d98:	f1a9 0102 	sub.w	r1, r9, #2
 8000d9c:	443a      	add	r2, r7
 8000d9e:	e7be      	b.n	8000d1e <__udivmoddi4+0x222>
 8000da0:	45f0      	cmp	r8, lr
 8000da2:	d29d      	bcs.n	8000ce0 <__udivmoddi4+0x1e4>
 8000da4:	ebbe 0302 	subs.w	r3, lr, r2
 8000da8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dac:	3801      	subs	r0, #1
 8000dae:	46e1      	mov	r9, ip
 8000db0:	e796      	b.n	8000ce0 <__udivmoddi4+0x1e4>
 8000db2:	eba7 0909 	sub.w	r9, r7, r9
 8000db6:	4449      	add	r1, r9
 8000db8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dbc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc0:	fb09 f804 	mul.w	r8, r9, r4
 8000dc4:	e7db      	b.n	8000d7e <__udivmoddi4+0x282>
 8000dc6:	4673      	mov	r3, lr
 8000dc8:	e77f      	b.n	8000cca <__udivmoddi4+0x1ce>
 8000dca:	4650      	mov	r0, sl
 8000dcc:	e766      	b.n	8000c9c <__udivmoddi4+0x1a0>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e6fd      	b.n	8000bce <__udivmoddi4+0xd2>
 8000dd2:	443b      	add	r3, r7
 8000dd4:	3a02      	subs	r2, #2
 8000dd6:	e733      	b.n	8000c40 <__udivmoddi4+0x144>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	443b      	add	r3, r7
 8000dde:	e71c      	b.n	8000c1a <__udivmoddi4+0x11e>
 8000de0:	4649      	mov	r1, r9
 8000de2:	e79c      	b.n	8000d1e <__udivmoddi4+0x222>
 8000de4:	eba1 0109 	sub.w	r1, r1, r9
 8000de8:	46c4      	mov	ip, r8
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	e7c4      	b.n	8000d7e <__udivmoddi4+0x282>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e00:	23ff      	movs	r3, #255	@ 0xff
 8000e02:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000e10:	4a58      	ldr	r2, [pc, #352]	@ (8000f74 <bno055_init+0x17c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000e16:	4b57      	ldr	r3, [pc, #348]	@ (8000f74 <bno055_init+0x17c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68dc      	ldr	r4, [r3, #12]
 8000e1c:	4b55      	ldr	r3, [pc, #340]	@ (8000f74 <bno055_init+0x17c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	7a58      	ldrb	r0, [r3, #9]
 8000e22:	f107 020d 	add.w	r2, r7, #13
 8000e26:	2301      	movs	r3, #1
 8000e28:	2107      	movs	r1, #7
 8000e2a:	47a0      	blx	r4
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e30:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <bno055_init+0x17c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	691c      	ldr	r4, [r3, #16]
 8000e36:	4b4f      	ldr	r3, [pc, #316]	@ (8000f74 <bno055_init+0x17c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	7a58      	ldrb	r0, [r3, #9]
 8000e3c:	f107 020e 	add.w	r2, r7, #14
 8000e40:	2301      	movs	r3, #1
 8000e42:	2100      	movs	r1, #0
 8000e44:	47a0      	blx	r4
 8000e46:	4603      	mov	r3, r0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000e52:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <bno055_init+0x17c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	7bba      	ldrb	r2, [r7, #14]
 8000e58:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <bno055_init+0x17c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691c      	ldr	r4, [r3, #16]
 8000e60:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <bno055_init+0x17c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	7a58      	ldrb	r0, [r3, #9]
 8000e66:	f107 020e 	add.w	r2, r7, #14
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	47a0      	blx	r4
 8000e70:	4603      	mov	r3, r0
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4413      	add	r3, r2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <bno055_init+0x17c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	7bba      	ldrb	r2, [r7, #14]
 8000e82:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e84:	4b3b      	ldr	r3, [pc, #236]	@ (8000f74 <bno055_init+0x17c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691c      	ldr	r4, [r3, #16]
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <bno055_init+0x17c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	7a58      	ldrb	r0, [r3, #9]
 8000e90:	f107 020e 	add.w	r2, r7, #14
 8000e94:	2301      	movs	r3, #1
 8000e96:	2102      	movs	r1, #2
 8000e98:	47a0      	blx	r4
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <bno055_init+0x17c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	7bba      	ldrb	r2, [r7, #14]
 8000eac:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <bno055_init+0x17c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	691c      	ldr	r4, [r3, #16]
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <bno055_init+0x17c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	7a58      	ldrb	r0, [r3, #9]
 8000eba:	f107 020e 	add.w	r2, r7, #14
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	47a0      	blx	r4
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <bno055_init+0x17c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	7bba      	ldrb	r2, [r7, #14]
 8000ed6:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <bno055_init+0x17c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	691c      	ldr	r4, [r3, #16]
 8000ede:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <bno055_init+0x17c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	7a58      	ldrb	r0, [r3, #9]
 8000ee4:	f107 020e 	add.w	r2, r7, #14
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2106      	movs	r1, #6
 8000eec:	47a0      	blx	r4
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <bno055_init+0x17c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	7bba      	ldrb	r2, [r7, #14]
 8000f00:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <bno055_init+0x17c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691c      	ldr	r4, [r3, #16]
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <bno055_init+0x17c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	7a58      	ldrb	r0, [r3, #9]
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	2302      	movs	r3, #2
 8000f14:	2104      	movs	r1, #4
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
 8000f26:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000f28:	7a7b      	ldrb	r3, [r7, #9]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	7a3b      	ldrb	r3, [r7, #8]
 8000f30:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <bno055_init+0x17c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000f36:	430a      	orrs	r2, r1
 8000f38:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000f3a:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <bno055_init+0x17c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691c      	ldr	r4, [r3, #16]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <bno055_init+0x17c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	7a58      	ldrb	r0, [r3, #9]
 8000f48:	f107 020e 	add.w	r2, r7, #14
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2107      	movs	r1, #7
 8000f50:	47a0      	blx	r4
 8000f52:	4603      	mov	r3, r0
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <bno055_init+0x17c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	7bba      	ldrb	r2, [r7, #14]
 8000f64:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000c8 	.word	0x200000c8

08000f78 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <bno055_write_register+0x48>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000f94:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000f98:	e00d      	b.n	8000fb6 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <bno055_write_register+0x48>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68dc      	ldr	r4, [r3, #12]
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <bno055_write_register+0x48>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	7a58      	ldrb	r0, [r3, #9]
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	79f9      	ldrb	r1, [r7, #7]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	47a0      	blx	r4
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000c8 	.word	0x200000c8

08000fc4 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000fce:	23ff      	movs	r3, #255	@ 0xff
 8000fd0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <bno055_write_page_id+0x8c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000fde:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000fe2:	e030      	b.n	8001046 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <bno055_write_page_id+0x8c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691c      	ldr	r4, [r3, #16]
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <bno055_write_page_id+0x8c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7a58      	ldrb	r0, [r3, #9]
 8000ff0:	f107 020e 	add.w	r2, r7, #14
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	47a0      	blx	r4
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d11b      	bne.n	800103e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <bno055_write_page_id+0x8c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68dc      	ldr	r4, [r3, #12]
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <bno055_write_page_id+0x8c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	7a58      	ldrb	r0, [r3, #9]
 8001016:	f107 020e 	add.w	r2, r7, #14
 800101a:	2301      	movs	r3, #1
 800101c:	2107      	movs	r1, #7
 800101e:	47a0      	blx	r4
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	4413      	add	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <bno055_write_page_id+0x8c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	711a      	strb	r2, [r3, #4]
 800103c:	e001      	b.n	8001042 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800103e:	23ff      	movs	r3, #255	@ 0xff
 8001040:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	200000c8 	.word	0x200000c8

08001054 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800105c:	23ff      	movs	r3, #255	@ 0xff
 800105e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001060:	2300      	movs	r3, #0
 8001062:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001064:	23ff      	movs	r3, #255	@ 0xff
 8001066:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001070:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8001074:	e02a      	b.n	80010cc <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	791b      	ldrb	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff9f 	bl	8000fc4 <bno055_write_page_id>
 8001086:	4603      	mov	r3, r0
 8001088:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800108a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <bno055_get_operation_mode+0x48>
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	791b      	ldrb	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d113      	bne.n	80010c4 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691c      	ldr	r4, [r3, #16]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <bno055_get_operation_mode+0x80>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7a58      	ldrb	r0, [r3, #9]
 80010a8:	f107 020d 	add.w	r2, r7, #13
 80010ac:	2301      	movs	r3, #1
 80010ae:	213d      	movs	r1, #61	@ 0x3d
 80010b0:	47a0      	blx	r4
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e001      	b.n	80010c8 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80010c4:	23ff      	movs	r3, #255	@ 0xff
 80010c6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	200000c8 	.word	0x200000c8

080010d8 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80010e2:	23ff      	movs	r3, #255	@ 0xff
 80010e4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80010ea:	2300      	movs	r3, #0
 80010ec:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80010ee:	23ff      	movs	r3, #255	@ 0xff
 80010f0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80010f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80010fa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80010fe:	e0ac      	b.n	800125a <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffa5 	bl	8001054 <bno055_get_operation_mode>
 800110a:	4603      	mov	r3, r0
 800110c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800110e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 809d 	bne.w	8001252 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d137      	bne.n	800118e <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800111e:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691c      	ldr	r4, [r3, #16]
 8001124:	4b4f      	ldr	r3, [pc, #316]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	7a58      	ldrb	r0, [r3, #9]
 800112a:	f107 020d 	add.w	r2, r7, #13
 800112e:	2301      	movs	r3, #1
 8001130:	213d      	movs	r1, #61	@ 0x3d
 8001132:	47a0      	blx	r4
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 808a 	bne.w	8001256 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	b25b      	sxtb	r3, r3
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	b25a      	sxtb	r2, r3
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800115e:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68dc      	ldr	r4, [r3, #12]
 8001164:	4b3f      	ldr	r3, [pc, #252]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	7a58      	ldrb	r0, [r3, #9]
 800116a:	f107 020d 	add.w	r2, r7, #13
 800116e:	2301      	movs	r3, #1
 8001170:	213d      	movs	r1, #61	@ 0x3d
 8001172:	47a0      	blx	r4
 8001174:	4603      	mov	r3, r0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001180:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800118a:	4798      	blx	r3
 800118c:	e063      	b.n	8001256 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800118e:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	691c      	ldr	r4, [r3, #16]
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	7a58      	ldrb	r0, [r3, #9]
 800119a:	f107 020d 	add.w	r2, r7, #13
 800119e:	2301      	movs	r3, #1
 80011a0:	213d      	movs	r1, #61	@ 0x3d
 80011a2:	47a0      	blx	r4
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d116      	bne.n	80011de <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80011b0:	7b7b      	ldrb	r3, [r7, #13]
 80011b2:	f023 030f 	bic.w	r3, r3, #15
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80011ba:	f107 030d 	add.w	r3, r7, #13
 80011be:	2201      	movs	r2, #1
 80011c0:	4619      	mov	r1, r3
 80011c2:	203d      	movs	r0, #61	@ 0x3d
 80011c4:	f7ff fed8 	bl	8000f78 <bno055_write_register>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2014      	movs	r0, #20
 80011dc:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d038      	beq.n	8001256 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691c      	ldr	r4, [r3, #16]
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	7a58      	ldrb	r0, [r3, #9]
 80011f0:	f107 020d 	add.w	r2, r7, #13
 80011f4:	2301      	movs	r3, #1
 80011f6:	213d      	movs	r1, #61	@ 0x3d
 80011f8:	47a0      	blx	r4
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d127      	bne.n	8001256 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	f023 030f 	bic.w	r3, r3, #15
 800120e:	b25a      	sxtb	r2, r3
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	b25b      	sxtb	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68dc      	ldr	r4, [r3, #12]
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7a58      	ldrb	r0, [r3, #9]
 800122e:	f107 020d 	add.w	r2, r7, #13
 8001232:	2301      	movs	r3, #1
 8001234:	213d      	movs	r1, #61	@ 0x3d
 8001236:	47a0      	blx	r4
 8001238:	4603      	mov	r3, r0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	4413      	add	r3, r2
 8001240:	b2db      	uxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <bno055_set_operation_mode+0x18c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800124e:	4798      	blx	r3
 8001250:	e001      	b.n	8001256 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001252:	23ff      	movs	r3, #255	@ 0xff
 8001254:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	200000c8 	.word	0x200000c8

08001268 <BNO055_I2C_bus_write>:
#include "bno055_hal.h"

extern I2C_HandleTypeDef hi2c3;

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 wr_len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af04      	add	r7, sp, #16
 800126e:	603a      	str	r2, [r7, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	460b      	mov	r3, r1
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Write(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, wr_len, HAL_MAX_DELAY) == HAL_OK)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	b29b      	uxth	r3, r3
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b299      	uxth	r1, r3
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	b29a      	uxth	r2, r3
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	9002      	str	r0, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <BNO055_I2C_bus_write+0x50>)
 800129e:	f002 fcc5 	bl	8003c2c <HAL_I2C_Mem_Write>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <BNO055_I2C_bus_write+0x44>
        return 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e000      	b.n	80012ae <BNO055_I2C_bus_write+0x46>
    else
        return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000124 	.word	0x20000124

080012bc <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 r_len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	603a      	str	r2, [r7, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	460b      	mov	r3, r1
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	4613      	mov	r3, r2
 80012d0:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Mem_Read(&hi2c3, (dev_addr << 1), reg_addr, 0b1, reg_data, r_len, HAL_MAX_DELAY) == HAL_OK){
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	b299      	uxth	r1, r3
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295
 80012e6:	9002      	str	r0, [sp, #8]
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <BNO055_I2C_bus_read+0x50>)
 80012f2:	f002 fd95 	bl	8003e20 <HAL_I2C_Mem_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <BNO055_I2C_bus_read+0x44>
        return 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <BNO055_I2C_bus_read+0x46>
    }
    return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000124 	.word	0x20000124

08001310 <BNO055_delay_msec>:

void BNO055_delay_msec(u32 msec)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    HAL_Delay(msec);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f001 ffdd 	bl	80032d8 <HAL_Delay>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <BNO055_setup>:


void BNO055_setup(struct bno055_t* bno055_device)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    bno055_device ->dev_addr = BNO055_I2C_ADDR1;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2228      	movs	r2, #40	@ 0x28
 8001334:	725a      	strb	r2, [r3, #9]
    bno055_device->bus_write = BNO055_I2C_bus_write;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <BNO055_setup+0x30>)
 800133a:	60da      	str	r2, [r3, #12]
    bno055_device->bus_read = BNO055_I2C_bus_read;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <BNO055_setup+0x34>)
 8001340:	611a      	str	r2, [r3, #16]
    bno055_device->delay_msec = BNO055_delay_msec;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <BNO055_setup+0x38>)
 8001346:	615a      	str	r2, [r3, #20]

    if (bno055_init(bno055_device) == 0)
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fd55 	bl	8000df8 <bno055_init>
    {
        // Initialization successful
    }
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	08001269 	.word	0x08001269
 800135c:	080012bd 	.word	0x080012bd
 8001360:	08001311 	.word	0x08001311

08001364 <_ZN3FSMC1Ev>:
extern UART_HandleTypeDef huart1;




FSM::FSM():state(S0_INIT){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]


}
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_ZN3FSM3runEv>:


void FSM::run(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    // Switch case is a bit tidier than a bunch of if / else if statements
    // but you must remember to use break or fall through into later states
    switch(state)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d811      	bhi.n	80013b4 <_ZN3FSM3runEv+0x34>
 8001390:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <_ZN3FSM3runEv+0x18>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013ad 	.word	0x080013ad
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	080013c5 	.word	0x080013c5
 80013a4:	080013c5 	.word	0x080013c5
 80013a8:	080013c5 	.word	0x080013c5
    {
        case S0_INIT:

        	//HAL_UART_Transmit(&huart1, (uint8_t*)"In State 0\r\n", 13, HAL_MAX_DELAY);
            state = S1_IDLE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
            break;
 80013b2:	e008      	b.n	80013c6 <_ZN3FSM3runEv+0x46>




        default:
        	HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid State\r\n", 16, HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	2210      	movs	r2, #16
 80013ba:	4905      	ldr	r1, [pc, #20]	@ (80013d0 <_ZN3FSM3runEv+0x50>)
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <_ZN3FSM3runEv+0x54>)
 80013be:	f004 ff59 	bl	8006274 <HAL_UART_Transmit>
        	break;
 80013c2:	e000      	b.n	80013c6 <_ZN3FSM3runEv+0x46>
            break;
 80013c4:	bf00      	nop
    }


}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08007d18 	.word	0x08007d18
 80013d4:	200002e0 	.word	0x200002e0

080013d8 <_ZN3FSM9set_stateENS_5stateE>:


void FSM::set_state(system_state_t new_state) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
    state = new_state;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	701a      	strb	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_ZNK3FSM9get_stateEv>:

	  void run(void);

	  void set_state(system_state_t new_state);

	  system_state_t get_state() const { return this->state; }
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b087      	sub	sp, #28
 8001414:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f001 feed 	bl	80031f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f8d3 	bl	80015c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 800141e:	f000 fac3 	bl	80019a8 <_ZL12MX_TIM3_Initv>
  MX_GPIO_Init();
 8001422:	f000 fc5d 	bl	8001ce0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001426:	f000 fc2d 	bl	8001c84 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 800142a:	f000 fa5f 	bl	80018ec <_ZL12MX_TIM2_Initv>
  MX_I2C3_Init();
 800142e:	f000 f96f 	bl	8001710 <_ZL12MX_I2C3_Initv>
  MX_TIM1_Init();
 8001432:	f000 f9a1 	bl	8001778 <_ZL12MX_TIM1_Initv>

  MX_TIM4_Init();
 8001436:	f000 fb4f 	bl	8001ad8 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 800143a:	f000 fbab 	bl	8001b94 <_ZL12MX_TIM5_Initv>
  MX_I2C2_Init();
 800143e:	f000 f933 	bl	80016a8 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */


  // SERVO MOTOR
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 8001442:	210c      	movs	r1, #12
 8001444:	484f      	ldr	r0, [pc, #316]	@ (8001584 <main+0x174>)
 8001446:	f004 f8b3 	bl	80055b0 <HAL_TIM_PWM_Start_IT>


  // BASE MOTOR
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 800144a:	213c      	movs	r1, #60	@ 0x3c
 800144c:	484e      	ldr	r0, [pc, #312]	@ (8001588 <main+0x178>)
 800144e:	f004 fa53 	bl	80058f8 <HAL_TIM_Encoder_Start_IT>

  // POLOLU 2
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001452:	2100      	movs	r1, #0
 8001454:	484d      	ldr	r0, [pc, #308]	@ (800158c <main+0x17c>)
 8001456:	f004 f8ab 	bl	80055b0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800145a:	2104      	movs	r1, #4
 800145c:	484b      	ldr	r0, [pc, #300]	@ (800158c <main+0x17c>)
 800145e:	f004 f8a7 	bl	80055b0 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8001462:	2108      	movs	r1, #8
 8001464:	4849      	ldr	r0, [pc, #292]	@ (800158c <main+0x17c>)
 8001466:	f004 f8a3 	bl	80055b0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800146a:	210c      	movs	r1, #12
 800146c:	4847      	ldr	r0, [pc, #284]	@ (800158c <main+0x17c>)
 800146e:	f004 f89f 	bl	80055b0 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001472:	213c      	movs	r1, #60	@ 0x3c
 8001474:	4846      	ldr	r0, [pc, #280]	@ (8001590 <main+0x180>)
 8001476:	f004 fa3f 	bl	80058f8 <HAL_TIM_Encoder_Start_IT>


  // POLOLU 1
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_3);
 800147a:	2108      	movs	r1, #8
 800147c:	4845      	ldr	r0, [pc, #276]	@ (8001594 <main+0x184>)
 800147e:	f004 f897 	bl	80055b0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4);
 8001482:	210c      	movs	r1, #12
 8001484:	4843      	ldr	r0, [pc, #268]	@ (8001594 <main+0x184>)
 8001486:	f004 f893 	bl	80055b0 <HAL_TIM_PWM_Start_IT>

  // FLYWHEEL
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800148a:	2104      	movs	r1, #4
 800148c:	483d      	ldr	r0, [pc, #244]	@ (8001584 <main+0x174>)
 800148e:	f004 f88f 	bl	80055b0 <HAL_TIM_PWM_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 2500);
 8001492:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <main+0x174>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38

  //set BNO055 reset to low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a2:	483d      	ldr	r0, [pc, #244]	@ (8001598 <main+0x188>)
 80014a4:	f002 fa64 	bl	8003970 <HAL_GPIO_WritePin>
  //initialize BNO055
  BNO055_setup(&IMU);
 80014a8:	483c      	ldr	r0, [pc, #240]	@ (800159c <main+0x18c>)
 80014aa:	f7ff ff3d 	bl	8001328 <BNO055_setup>

  initialize_IMU();
 80014ae:	f000 ff8d 	bl	80023cc <_ZL14initialize_IMUv>
  HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	493a      	ldr	r1, [pc, #232]	@ (80015a0 <main+0x190>)
 80014b6:	483b      	ldr	r0, [pc, #236]	@ (80015a4 <main+0x194>)
 80014b8:	f004 ff67 	bl	800638a <HAL_UART_Receive_IT>

  int16_t last_count1 = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	80bb      	strh	r3, [r7, #4]
  int16_t last_count2 = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	807b      	strh	r3, [r7, #2]


  //set_duty_dual(&Pololu_2, 0, 2500);
  //motor_d_set_pos(&Pololu_2, &pos_controller_1, 1000);

  sprintf((char*)log_buf, "Motor Pos: %d Motor goal: %d \r\n", motor_d_get_pos(&Pololu_2), pos_controller_1.setpoint);
 80014c4:	4838      	ldr	r0, [pc, #224]	@ (80015a8 <main+0x198>)
 80014c6:	f001 fb32 	bl	8002b2e <motor_d_get_pos>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <main+0x19c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4937      	ldr	r1, [pc, #220]	@ (80015b0 <main+0x1a0>)
 80014d2:	4838      	ldr	r0, [pc, #224]	@ (80015b4 <main+0x1a4>)
 80014d4:	f005 ff62 	bl	800739c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80014d8:	4836      	ldr	r0, [pc, #216]	@ (80015b4 <main+0x1a4>)
 80014da:	f7fe fe81 	bl	80001e0 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	4933      	ldr	r1, [pc, #204]	@ (80015b4 <main+0x1a4>)
 80014e8:	482e      	ldr	r0, [pc, #184]	@ (80015a4 <main+0x194>)
 80014ea:	f004 fec3 	bl	8006274 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t step_counter;
  uint16_t enc_val;
  htim4.Instance->CNT = 0;
 80014ee:	4b28      	ldr	r3, [pc, #160]	@ (8001590 <main+0x180>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  HAL_Delay(50);
 80014f6:	2032      	movs	r0, #50	@ 0x32
 80014f8:	f001 feee 	bl	80032d8 <HAL_Delay>

	  motor_d_update_pos(&Pololu_2, &pos_controller_1);
 80014fc:	492b      	ldr	r1, [pc, #172]	@ (80015ac <main+0x19c>)
 80014fe:	482a      	ldr	r0, [pc, #168]	@ (80015a8 <main+0x198>)
 8001500:	f001 f89a 	bl	8002638 <motor_d_update_pos>
	  //sprintf((char*)log_buf, "Motor Pos: %d \r\n", enc_val);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);

	  fsm.run();
 8001504:	482c      	ldr	r0, [pc, #176]	@ (80015b8 <main+0x1a8>)
 8001506:	f7ff ff3b 	bl	8001380 <_ZN3FSM3runEv>
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"FSM RUNNING\r\n", 13, HAL_MAX_DELAY);
	  step_counter += 1;
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	3301      	adds	r3, #1
 800150e:	80fb      	strh	r3, [r7, #6]

	  if(step_counter % 10 == 0) {
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <main+0x1ac>)
 8001514:	fba3 1302 	umull	r1, r3, r3, r2
 8001518:	08d9      	lsrs	r1, r3, #3
 800151a:	460b      	mov	r3, r1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	b29b      	uxth	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d125      	bne.n	8001576 <main+0x166>
		  //log_IMU();
		  //log_LIDAR();

		  sprintf((char*)log_buf, "CH1 effort: %d CH2 effort: %d error: %d setpoint: %d, pos: %d\r\n",
				  htim3.Instance->CCR1,
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <main+0x17c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
				  htim3.Instance->CCR2,
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <main+0x17c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
				  pos_controller_1.setpoint-htim4.Instance->CNT,
 8001536:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <main+0x19c>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	461a      	mov	r2, r3
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <main+0x180>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		  sprintf((char*)log_buf, "CH1 effort: %d CH2 effort: %d error: %d setpoint: %d, pos: %d\r\n",
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <main+0x19c>)
 8001546:	68d2      	ldr	r2, [r2, #12]
				  pos_controller_1.setpoint,
				  htim4.Instance->CNT);
 8001548:	4911      	ldr	r1, [pc, #68]	@ (8001590 <main+0x180>)
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
		  sprintf((char*)log_buf, "CH1 effort: %d CH2 effort: %d error: %d setpoint: %d, pos: %d\r\n",
 800154e:	9102      	str	r1, [sp, #8]
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	4623      	mov	r3, r4
 8001556:	4602      	mov	r2, r0
 8001558:	4919      	ldr	r1, [pc, #100]	@ (80015c0 <main+0x1b0>)
 800155a:	4816      	ldr	r0, [pc, #88]	@ (80015b4 <main+0x1a4>)
 800155c:	f005 ff1e 	bl	800739c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 500);
 8001560:	4814      	ldr	r0, [pc, #80]	@ (80015b4 <main+0x1a4>)
 8001562:	f7fe fe3d 	bl	80001e0 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	b29a      	uxth	r2, r3
 800156a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800156e:	4911      	ldr	r1, [pc, #68]	@ (80015b4 <main+0x1a4>)
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <main+0x194>)
 8001572:	f004 fe7f 	bl	8006274 <HAL_UART_Transmit>
	  }



	  if(step_counter >= 2000) {
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800157c:	d3bb      	bcc.n	80014f6 <main+0xe6>
		  step_counter = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	80fb      	strh	r3, [r7, #6]
	  HAL_Delay(50);
 8001582:	e7b8      	b.n	80014f6 <main+0xe6>
 8001584:	20000178 	.word	0x20000178
 8001588:	200001c0 	.word	0x200001c0
 800158c:	20000208 	.word	0x20000208
 8001590:	20000250 	.word	0x20000250
 8001594:	20000298 	.word	0x20000298
 8001598:	40020400 	.word	0x40020400
 800159c:	200003dc 	.word	0x200003dc
 80015a0:	20000368 	.word	0x20000368
 80015a4:	200002e0 	.word	0x200002e0
 80015a8:	20000020 	.word	0x20000020
 80015ac:	20000030 	.word	0x20000030
 80015b0:	08007d28 	.word	0x08007d28
 80015b4:	200003a8 	.word	0x200003a8
 80015b8:	200000cc 	.word	0x200000cc
 80015bc:	cccccccd 	.word	0xcccccccd
 80015c0:	08007d48 	.word	0x08007d48

080015c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b094      	sub	sp, #80	@ 0x50
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	2230      	movs	r2, #48	@ 0x30
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 ff04 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <_Z18SystemClock_Configv+0xdc>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	4a2b      	ldr	r2, [pc, #172]	@ (80016a0 <_Z18SystemClock_Configv+0xdc>)
 80015f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <_Z18SystemClock_Configv+0xdc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <_Z18SystemClock_Configv+0xe0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a25      	ldr	r2, [pc, #148]	@ (80016a4 <_Z18SystemClock_Configv+0xe0>)
 800160e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <_Z18SystemClock_Configv+0xe0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001628:	2310      	movs	r3, #16
 800162a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162c:	2302      	movs	r3, #2
 800162e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001634:	2308      	movs	r3, #8
 8001636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001638:	2360      	movs	r3, #96	@ 0x60
 800163a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001640:	2304      	movs	r3, #4
 8001642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fb09 	bl	8004c60 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800165e:	f000 ffa7 	bl	80025b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2302      	movs	r3, #2
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2103      	movs	r1, #3
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fd66 	bl	8005150 <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001694:	f000 ff8c 	bl	80025b0 <Error_Handler>
  }
}
 8001698:	bf00      	nop
 800169a:	3750      	adds	r7, #80	@ 0x50
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000

080016a8 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016ae:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <_ZL12MX_I2C2_Initv+0x60>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016b4:	4a15      	ldr	r2, [pc, #84]	@ (800170c <_ZL12MX_I2C2_Initv+0x64>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <_ZL12MX_I2C2_Initv+0x5c>)
 80016e6:	f002 f95d 	bl	80039a4 <HAL_I2C_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80016fa:	f000 ff59 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000d0 	.word	0x200000d0
 8001708:	40005800 	.word	0x40005800
 800170c:	000186a0 	.word	0x000186a0

08001710 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 8001716:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <_ZL12MX_I2C3_Initv+0x60>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800171a:	4b14      	ldr	r3, [pc, #80]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 800171c:	4a15      	ldr	r2, [pc, #84]	@ (8001774 <_ZL12MX_I2C3_Initv+0x64>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 800172e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001732:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800174c:	4807      	ldr	r0, [pc, #28]	@ (800176c <_ZL12MX_I2C3_Initv+0x5c>)
 800174e:	f002 f929 	bl	80039a4 <HAL_I2C_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8001762:	f000 ff25 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000124 	.word	0x20000124
 8001770:	40005c00 	.word	0x40005c00
 8001774:	000186a0 	.word	0x000186a0

08001778 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b092      	sub	sp, #72	@ 0x48
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2220      	movs	r2, #32
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 fe1c 	bl	80073e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a8:	4b4e      	ldr	r3, [pc, #312]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017aa:	4a4f      	ldr	r2, [pc, #316]	@ (80018e8 <_ZL12MX_TIM1_Initv+0x170>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ae:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b4b      	ldr	r3, [pc, #300]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017bc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b48      	ldr	r3, [pc, #288]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c8:	4b46      	ldr	r3, [pc, #280]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b45      	ldr	r3, [pc, #276]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017d4:	4843      	ldr	r0, [pc, #268]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017d6:	f003 fe9b 	bl	8005510 <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80017ea:	f000 fee1 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017fa:	4619      	mov	r1, r3
 80017fc:	4839      	ldr	r0, [pc, #228]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80017fe:	f004 fc29 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf14      	ite	ne
 8001808:	2301      	movne	r3, #1
 800180a:	2300      	moveq	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001812:	f000 fecd 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001816:	2360      	movs	r3, #96	@ 0x60
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	482a      	ldr	r0, [pc, #168]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 800183c:	f004 f90a 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001850:	f000 feae 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	2204      	movs	r2, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4821      	ldr	r0, [pc, #132]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 800185e:	f004 f8f9 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001872:	f000 fe9d 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187a:	220c      	movs	r2, #12
 800187c:	4619      	mov	r1, r3
 800187e:	4819      	ldr	r0, [pc, #100]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 8001880:	f004 f8e8 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001894:	f000 fe8c 	bl	80025b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80018bc:	f004 fc38 	bl	8006130 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf14      	ite	ne
 80018c6:	2301      	movne	r3, #1
 80018c8:	2300      	moveq	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 80018d0:	f000 fe6e 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d4:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <_ZL12MX_TIM1_Initv+0x16c>)
 80018d6:	f001 fb09 	bl	8002eec <HAL_TIM_MspPostInit>

}
 80018da:	bf00      	nop
 80018dc:	3748      	adds	r7, #72	@ 0x48
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000178 	.word	0x20000178
 80018e8:	40010000 	.word	0x40010000

080018ec <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	@ 0x30
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2224      	movs	r2, #36	@ 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 fd70 	bl	80073e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001910:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800191c:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001930:	2301      	movs	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4619      	mov	r1, r3
 800195a:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 800195c:	f003 ff26 	bl	80057ac <HAL_TIM_Encoder_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001970:	f000 fe1e 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001982:	f004 fb67 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001996:	f000 fe0b 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	@ 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001c0 	.word	0x200001c0

080019a8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	@ 0x28
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019cc:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <_ZL12MX_TIM3_Initv+0x12c>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019d0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80019dc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019de:	f241 3287 	movw	r2, #4999	@ 0x1387
 80019e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019f0:	4837      	ldr	r0, [pc, #220]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 80019f2:	f003 fd8d 	bl	8005510 <HAL_TIM_PWM_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001a06:	f000 fdd3 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4619      	mov	r1, r3
 8001a18:	482d      	ldr	r0, [pc, #180]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 8001a1a:	f004 fb1b 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001a2e:	f000 fdbf 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	@ 0x60
 8001a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 8001a4a:	f004 f803 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001a5e:	f000 fda7 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4819      	ldr	r0, [pc, #100]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 8001a6a:	f003 fff3 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001a7e:	f000 fd97 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	2208      	movs	r2, #8
 8001a86:	4619      	mov	r1, r3
 8001a88:	4811      	ldr	r0, [pc, #68]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 8001a8a:	f003 ffe3 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8001a9e:	f000 fd87 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 8001aaa:	f003 ffd3 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8001abe:	f000 fd77 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ac2:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <_ZL12MX_TIM3_Initv+0x128>)
 8001ac4:	f001 fa12 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	@ 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000208 	.word	0x20000208
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2224      	movs	r2, #36	@ 0x24
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 fc7a 	bl	80073e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af4:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001af6:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <_ZL12MX_TIM4_Initv+0xb8>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	4811      	ldr	r0, [pc, #68]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001b46:	f003 fe31 	bl	80057ac <HAL_TIM_Encoder_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001b5a:	f000 fd29 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4808      	ldr	r0, [pc, #32]	@ (8001b8c <_ZL12MX_TIM4_Initv+0xb4>)
 8001b6c:	f004 fa72 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001b80:	f000 fd16 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	@ 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000250 	.word	0x20000250
 8001b90:	40000800 	.word	0x40000800

08001b94 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bb6:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bb8:	4a31      	ldr	r2, [pc, #196]	@ (8001c80 <_ZL12MX_TIM5_Initv+0xec>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001bce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bdc:	4827      	ldr	r0, [pc, #156]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001bde:	f003 fc97 	bl	8005510 <HAL_TIM_PWM_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8001bf2:	f000 fcdd 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	4619      	mov	r1, r3
 8001c04:	481d      	ldr	r0, [pc, #116]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001c06:	f004 fa25 	bl	8006054 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8001c1a:	f000 fcc9 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1e:	2360      	movs	r3, #96	@ 0x60
 8001c20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2208      	movs	r2, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001c36:	f003 ff0d 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8001c4a:	f000 fcb1 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	220c      	movs	r2, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	4809      	ldr	r0, [pc, #36]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001c56:	f003 fefd 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8001c6a:	f000 fca1 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c6e:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <_ZL12MX_TIM5_Initv+0xe8>)
 8001c70:	f001 f93c 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	@ 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000298 	.word	0x20000298
 8001c80:	40000c00 	.word	0x40000c00

08001c84 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <_ZL19MX_USART1_UART_Initv+0x58>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cba:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001cbc:	f004 fa8a 	bl	80061d4 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001cd0:	f000 fc6e 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002e0 	.word	0x200002e0
 8001cdc:	40011000 	.word	0x40011000

08001ce0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b38      	ldr	r3, [pc, #224]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a37      	ldr	r2, [pc, #220]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b31      	ldr	r3, [pc, #196]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a30      	ldr	r2, [pc, #192]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a29      	ldr	r2, [pc, #164]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <_ZL12MX_GPIO_Initv+0xfc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001d6c:	481c      	ldr	r0, [pc, #112]	@ (8001de0 <_ZL12MX_GPIO_Initv+0x100>)
 8001d6e:	f001 fdff 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d78:	481a      	ldr	r0, [pc, #104]	@ (8001de4 <_ZL12MX_GPIO_Initv+0x104>)
 8001d7a:	f001 fdf9 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4815      	ldr	r0, [pc, #84]	@ (8001de8 <_ZL12MX_GPIO_Initv+0x108>)
 8001d94:	f001 fc68 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001d98:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <_ZL12MX_GPIO_Initv+0x100>)
 8001db2:	f001 fc59 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <_ZL12MX_GPIO_Initv+0x104>)
 8001dd0:	f001 fc4a 	bl	8003668 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	@ 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800

08001dec <HAL_UART_RxCpltCallback>:



#include <ctype.h>  // for toupper()
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	@ 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4aa5      	ldr	r2, [pc, #660]	@ (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 82b4 	bne.w	8002368 <HAL_UART_RxCpltCallback+0x57c>
    {
        char c = rx_buf[0];
 8001e00:	4ba4      	ldr	r3, [pc, #656]	@ (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        static char cmd_buffer[64];
        static uint8_t cmd_index = 0;

        if (c == '\r' || c == '\n')  // End of command
 8001e08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e0c:	2b0d      	cmp	r3, #13
 8001e0e:	d004      	beq.n	8001e1a <HAL_UART_RxCpltCallback+0x2e>
 8001e10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e14:	2b0a      	cmp	r3, #10
 8001e16:	f040 8293 	bne.w	8002340 <HAL_UART_RxCpltCallback+0x554>
        {
            cmd_buffer[cmd_index] = '\0';
 8001e1a:	4b9f      	ldr	r3, [pc, #636]	@ (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b9e      	ldr	r3, [pc, #632]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

            // Convert to uppercase for consistent parsing
            for (uint8_t i = 0; i < cmd_index; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e2c:	e011      	b.n	8001e52 <HAL_UART_RxCpltCallback+0x66>
                cmd_buffer[i] = toupper((unsigned char)cmd_buffer[i]);
 8001e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e32:	4a9a      	ldr	r2, [pc, #616]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 faa6 	bl	8007388 <toupper>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e42:	b2d1      	uxtb	r1, r2
 8001e44:	4a95      	ldr	r2, [pc, #596]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001e46:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < cmd_index; i++) {
 8001e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e52:	4b91      	ldr	r3, [pc, #580]	@ (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3e7      	bcc.n	8001e2e <HAL_UART_RxCpltCallback+0x42>
            }

            // Process full command
            if (cmd_index >= 4)
 8001e5e:	4b8e      	ldr	r3, [pc, #568]	@ (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	f240 8261 	bls.w	800232a <HAL_UART_RxCpltCallback+0x53e>
            {
                // === FSM STATE TRANSITION ===
                if (strncmp(cmd_buffer, "MODE", 4) == 0)
 8001e68:	2204      	movs	r2, #4
 8001e6a:	498d      	ldr	r1, [pc, #564]	@ (80020a0 <HAL_UART_RxCpltCallback+0x2b4>)
 8001e6c:	488b      	ldr	r0, [pc, #556]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001e6e:	f005 fabf 	bl	80073f0 <strncmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d149      	bne.n	8001f0c <HAL_UART_RxCpltCallback+0x120>
                {
                    uint8_t mode = cmd_buffer[4] - '0';
 8001e78:	4b88      	ldr	r3, [pc, #544]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001e7a:	791b      	ldrb	r3, [r3, #4]
 8001e7c:	3b30      	subs	r3, #48	@ 0x30
 8001e7e:	75bb      	strb	r3, [r7, #22]
                    switch (mode) {
 8001e80:	7dbb      	ldrb	r3, [r7, #22]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d825      	bhi.n	8001ed2 <HAL_UART_RxCpltCallback+0xe6>
 8001e86:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <HAL_UART_RxCpltCallback+0xa0>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001ea1 	.word	0x08001ea1
 8001e90:	08001eab 	.word	0x08001eab
 8001e94:	08001eb5 	.word	0x08001eb5
 8001e98:	08001ebf 	.word	0x08001ebf
 8001e9c:	08001ec9 	.word	0x08001ec9
                        case 0: fsm.set_state(FSM::S0_INIT); break;
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4880      	ldr	r0, [pc, #512]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001ea4:	f7ff fa98 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ea8:	e01b      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0xf6>
                        case 1: fsm.set_state(FSM::S1_IDLE); break;
 8001eaa:	2101      	movs	r1, #1
 8001eac:	487d      	ldr	r0, [pc, #500]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001eae:	f7ff fa93 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001eb2:	e016      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0xf6>
                        case 2: fsm.set_state(FSM::S2_MANUAL_STEP_INPUT); break;
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	487b      	ldr	r0, [pc, #492]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001eb8:	f7ff fa8e 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ebc:	e011      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0xf6>
                        case 3: fsm.set_state(FSM::S3_MANUAL_TARGET); break;
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	4878      	ldr	r0, [pc, #480]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001ec2:	f7ff fa89 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ec6:	e00c      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0xf6>
                        case 4: fsm.set_state(FSM::S4_AUTOMATIC); break;
 8001ec8:	2104      	movs	r1, #4
 8001eca:	4876      	ldr	r0, [pc, #472]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001ecc:	f7ff fa84 	bl	80013d8 <_ZN3FSM9set_stateENS_5stateE>
 8001ed0:	e007      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0xf6>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Mode\r\n", 15, 1000);
 8001ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	4973      	ldr	r1, [pc, #460]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001eda:	4874      	ldr	r0, [pc, #464]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8001edc:	f004 f9ca 	bl	8006274 <HAL_UART_Transmit>
                            break;
 8001ee0:	bf00      	nop
                    }

                    sprintf((char*)tx_buf, "FSM state: %d\r\n", fsm.get_state());
 8001ee2:	4870      	ldr	r0, [pc, #448]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001ee4:	f7ff fa87 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	4970      	ldr	r1, [pc, #448]	@ (80020b0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001eee:	4871      	ldr	r0, [pc, #452]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001ef0:	f005 fa54 	bl	800739c <siprintf>
                    HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8001ef4:	486f      	ldr	r0, [pc, #444]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001ef6:	f7fe f973 	bl	80001e0 <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f02:	496c      	ldr	r1, [pc, #432]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001f04:	4869      	ldr	r0, [pc, #420]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8001f06:	f004 f9b5 	bl	8006274 <HAL_UART_Transmit>
 8001f0a:	e215      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                }

                // === MOTOR COMMAND: M1FF / M2FF ===
                else if (cmd_buffer[0] == 'M')
 8001f0c:	4b63      	ldr	r3, [pc, #396]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b4d      	cmp	r3, #77	@ 0x4d
 8001f12:	f040 8094 	bne.w	800203e <HAL_UART_RxCpltCallback+0x252>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8001f16:	4863      	ldr	r0, [pc, #396]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001f18:	f7ff fa6d 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_UART_RxCpltCallback+0x150>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Motor command not allowed in this state\r\n", 41, 1000);
 8001f2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f30:	2229      	movs	r2, #41	@ 0x29
 8001f32:	4961      	ldr	r1, [pc, #388]	@ (80020b8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001f34:	485d      	ldr	r0, [pc, #372]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8001f36:	f004 f99d 	bl	8006274 <HAL_UART_Transmit>
 8001f3a:	e1fd      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '3') {
 8001f3c:	4b57      	ldr	r3, [pc, #348]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b30      	cmp	r3, #48	@ 0x30
 8001f42:	d903      	bls.n	8001f4c <HAL_UART_RxCpltCallback+0x160>
 8001f44:	4b55      	ldr	r3, [pc, #340]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	2b33      	cmp	r3, #51	@ 0x33
 8001f4a:	d907      	bls.n	8001f5c <HAL_UART_RxCpltCallback+0x170>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Motor Number\r\n", 23, 1000);
 8001f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f50:	2217      	movs	r2, #23
 8001f52:	495a      	ldr	r1, [pc, #360]	@ (80020bc <HAL_UART_RxCpltCallback+0x2d0>)
 8001f54:	4855      	ldr	r0, [pc, #340]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8001f56:	f004 f98d 	bl	8006274 <HAL_UART_Transmit>
 8001f5a:	e1ed      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                    } else {
                        uint8_t motor_num = cmd_buffer[1] - '0';
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	3b30      	subs	r3, #48	@ 0x30
 8001f62:	75fb      	strb	r3, [r7, #23]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2100      	movs	r1, #0
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	460a      	mov	r2, r1
 8001f70:	709a      	strb	r2, [r3, #2]
 8001f72:	4b4a      	ldr	r3, [pc, #296]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001f74:	789b      	ldrb	r3, [r3, #2]
 8001f76:	743b      	strb	r3, [r7, #16]
 8001f78:	4b48      	ldr	r3, [pc, #288]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	747b      	strb	r3, [r7, #17]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	2210      	movs	r2, #16
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f005 f9f4 	bl	8007374 <strtol>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 8001f92:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	dd02      	ble.n	8001fa0 <HAL_UART_RxCpltCallback+0x1b4>
 8001f9a:	2364      	movs	r3, #100	@ 0x64
 8001f9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                        if (duty < -100) duty = -100;
 8001fa0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001fa4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001fa8:	da02      	bge.n	8001fb0 <HAL_UART_RxCpltCallback+0x1c4>
 8001faa:	239c      	movs	r3, #156	@ 0x9c
 8001fac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                        int16_t pulse = (duty * 4799) / 100;
 8001fb0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001fb4:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	4a40      	ldr	r2, [pc, #256]	@ (80020c0 <HAL_UART_RxCpltCallback+0x2d4>)
 8001fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc2:	1152      	asrs	r2, r2, #5
 8001fc4:	17db      	asrs	r3, r3, #31
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
                        if (pulse < 0) pulse = -pulse;
 8001fca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da03      	bge.n	8001fda <HAL_UART_RxCpltCallback+0x1ee>
 8001fd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fd4:	425b      	negs	r3, r3
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	84bb      	strh	r3, [r7, #36]	@ 0x24

                        if (motor_num == 1)
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10c      	bne.n	8001ffa <HAL_UART_RxCpltCallback+0x20e>
                            set_duty(&motor_1, (duty >= 0) ? pulse : 0);
 8001fe0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db02      	blt.n	8001fee <HAL_UART_RxCpltCallback+0x202>
 8001fe8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001fec:	e000      	b.n	8001ff0 <HAL_UART_RxCpltCallback+0x204>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4834      	ldr	r0, [pc, #208]	@ (80020c4 <HAL_UART_RxCpltCallback+0x2d8>)
 8001ff4:	f000 faf1 	bl	80025da <set_duty>
 8001ff8:	e00e      	b.n	8002018 <HAL_UART_RxCpltCallback+0x22c>
                        else if (motor_num == 2)
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d10b      	bne.n	8002018 <HAL_UART_RxCpltCallback+0x22c>
                            set_duty(&motor_2, (duty >= 0) ? pulse : 0);
 8002000:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8002004:	2b00      	cmp	r3, #0
 8002006:	db02      	blt.n	800200e <HAL_UART_RxCpltCallback+0x222>
 8002008:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800200c:	e000      	b.n	8002010 <HAL_UART_RxCpltCallback+0x224>
 800200e:	2300      	movs	r3, #0
 8002010:	4619      	mov	r1, r3
 8002012:	482d      	ldr	r0, [pc, #180]	@ (80020c8 <HAL_UART_RxCpltCallback+0x2dc>)
 8002014:	f000 fae1 	bl	80025da <set_duty>
                        //selse if (motor_num == 3)
                        	//set_duty()

                        sprintf((char*)tx_buf, "Motor %d set to duty %d\r\n", motor_num, duty);
 8002018:	7dfa      	ldrb	r2, [r7, #23]
 800201a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800201e:	492b      	ldr	r1, [pc, #172]	@ (80020cc <HAL_UART_RxCpltCallback+0x2e0>)
 8002020:	4824      	ldr	r0, [pc, #144]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8002022:	f005 f9bb 	bl	800739c <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8002026:	4823      	ldr	r0, [pc, #140]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8002028:	f7fe f8da 	bl	80001e0 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	b29a      	uxth	r2, r3
 8002030:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002034:	491f      	ldr	r1, [pc, #124]	@ (80020b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8002036:	481d      	ldr	r0, [pc, #116]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8002038:	f004 f91c 	bl	8006274 <HAL_UART_Transmit>
 800203c:	e17c      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                    }
                }

                // === SERVO COMMAND: S1XX / S2XX ===
                else if (cmd_buffer[0] == 'S')
 800203e:	4b17      	ldr	r3, [pc, #92]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b53      	cmp	r3, #83	@ 0x53
 8002044:	f040 80b0 	bne.w	80021a8 <HAL_UART_RxCpltCallback+0x3bc>
                {
                    if (fsm.get_state() != FSM::S2_MANUAL_STEP_INPUT) {
 8002048:	4816      	ldr	r0, [pc, #88]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2b8>)
 800204a:	f7ff f9d4 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 800204e:	4603      	mov	r3, r0
 8002050:	2b02      	cmp	r3, #2
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_UART_RxCpltCallback+0x282>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Servo command not allowed in this state\r\n", 41, 1000);
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	2229      	movs	r2, #41	@ 0x29
 8002064:	491a      	ldr	r1, [pc, #104]	@ (80020d0 <HAL_UART_RxCpltCallback+0x2e4>)
 8002066:	4811      	ldr	r0, [pc, #68]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8002068:	f004 f904 	bl	8006274 <HAL_UART_Transmit>
 800206c:	e164      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                    } else if (cmd_buffer[1] < '1' || cmd_buffer[1] > '2') {
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	2b30      	cmp	r3, #48	@ 0x30
 8002074:	d903      	bls.n	800207e <HAL_UART_RxCpltCallback+0x292>
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8002078:	785b      	ldrb	r3, [r3, #1]
 800207a:	2b32      	cmp	r3, #50	@ 0x32
 800207c:	d92c      	bls.n	80020d8 <HAL_UART_RxCpltCallback+0x2ec>
                        HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Servo Number\r\n", 23, 1000);
 800207e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002082:	2217      	movs	r2, #23
 8002084:	4913      	ldr	r1, [pc, #76]	@ (80020d4 <HAL_UART_RxCpltCallback+0x2e8>)
 8002086:	4809      	ldr	r0, [pc, #36]	@ (80020ac <HAL_UART_RxCpltCallback+0x2c0>)
 8002088:	f004 f8f4 	bl	8006274 <HAL_UART_Transmit>
 800208c:	e154      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
 800208e:	bf00      	nop
 8002090:	40011000 	.word	0x40011000
 8002094:	20000368 	.word	0x20000368
 8002098:	20000438 	.word	0x20000438
 800209c:	200003f8 	.word	0x200003f8
 80020a0:	08007d88 	.word	0x08007d88
 80020a4:	200000cc 	.word	0x200000cc
 80020a8:	08007d90 	.word	0x08007d90
 80020ac:	200002e0 	.word	0x200002e0
 80020b0:	08007da0 	.word	0x08007da0
 80020b4:	20000328 	.word	0x20000328
 80020b8:	08007db0 	.word	0x08007db0
 80020bc:	08007ddc 	.word	0x08007ddc
 80020c0:	51eb851f 	.word	0x51eb851f
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000008 	.word	0x20000008
 80020cc:	08007df4 	.word	0x08007df4
 80020d0:	08007e10 	.word	0x08007e10
 80020d4:	08007e3c 	.word	0x08007e3c
                    } else {
                        uint8_t servo_num = cmd_buffer[1] - '0';
 80020d8:	4ba5      	ldr	r3, [pc, #660]	@ (8002370 <HAL_UART_RxCpltCallback+0x584>)
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	3b30      	subs	r3, #48	@ 0x30
 80020de:	76bb      	strb	r3, [r7, #26]
                        char hex_string[3] = { cmd_buffer[2], cmd_buffer[3], '\0' };
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2100      	movs	r1, #0
 80020e6:	460a      	mov	r2, r1
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	460a      	mov	r2, r1
 80020ec:	709a      	strb	r2, [r3, #2]
 80020ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002370 <HAL_UART_RxCpltCallback+0x584>)
 80020f0:	789b      	ldrb	r3, [r3, #2]
 80020f2:	733b      	strb	r3, [r7, #12]
 80020f4:	4b9e      	ldr	r3, [pc, #632]	@ (8002370 <HAL_UART_RxCpltCallback+0x584>)
 80020f6:	78db      	ldrb	r3, [r3, #3]
 80020f8:	737b      	strb	r3, [r7, #13]
                        int8_t duty = (int8_t)strtol(hex_string, NULL, 16);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	2210      	movs	r2, #16
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f005 f936 	bl	8007374 <strtol>
 8002108:	4603      	mov	r3, r0
 800210a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        if (duty > 127) duty -= 256;
                        if (duty > 100) duty = 100;
 800210e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	dd02      	ble.n	800211c <HAL_UART_RxCpltCallback+0x330>
 8002116:	2364      	movs	r3, #100	@ 0x64
 8002118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        if (duty < -100) duty = -100;
 800211c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002120:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002124:	da02      	bge.n	800212c <HAL_UART_RxCpltCallback+0x340>
 8002126:	239c      	movs	r3, #156	@ 0x9c
 8002128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        int16_t pulse = duty * (8275 - 1655) / 100 + 1655;
 800212c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002130:	f641 12dc 	movw	r2, #6620	@ 0x19dc
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	4a8e      	ldr	r2, [pc, #568]	@ (8002374 <HAL_UART_RxCpltCallback+0x588>)
 800213a:	fb82 1203 	smull	r1, r2, r2, r3
 800213e:	1152      	asrs	r2, r2, #5
 8002140:	17db      	asrs	r3, r3, #31
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29b      	uxth	r3, r3
 8002146:	f203 6377 	addw	r3, r3, #1655	@ 0x677
 800214a:	b29b      	uxth	r3, r3
 800214c:	833b      	strh	r3, [r7, #24]
                        if (pulse < 0) {
 800214e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da06      	bge.n	8002164 <HAL_UART_RxCpltCallback+0x378>
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Duty\r\n", 15, 1000);
 8002156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215a:	220f      	movs	r2, #15
 800215c:	4986      	ldr	r1, [pc, #536]	@ (8002378 <HAL_UART_RxCpltCallback+0x58c>)
 800215e:	4887      	ldr	r0, [pc, #540]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 8002160:	f004 f888 	bl	8006274 <HAL_UART_Transmit>
                        }

                        if (servo_num == 1)
 8002164:	7ebb      	ldrb	r3, [r7, #26]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10b      	bne.n	8002182 <HAL_UART_RxCpltCallback+0x396>
                            servo_duty(&servo_1, (duty >= 0) ? pulse : 0);
 800216a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800216e:	2b00      	cmp	r3, #0
 8002170:	db02      	blt.n	8002178 <HAL_UART_RxCpltCallback+0x38c>
 8002172:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002176:	e000      	b.n	800217a <HAL_UART_RxCpltCallback+0x38e>
 8002178:	2300      	movs	r3, #0
 800217a:	4619      	mov	r1, r3
 800217c:	4880      	ldr	r0, [pc, #512]	@ (8002380 <HAL_UART_RxCpltCallback+0x594>)
 800217e:	f000 fce4 	bl	8002b4a <servo_duty>
                        else
                            ; // placeholder for servo_2

                        sprintf((char*)tx_buf, "Servo %d set to duty %d\r\n", servo_num, duty);
 8002182:	7eba      	ldrb	r2, [r7, #26]
 8002184:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002188:	497e      	ldr	r1, [pc, #504]	@ (8002384 <HAL_UART_RxCpltCallback+0x598>)
 800218a:	487f      	ldr	r0, [pc, #508]	@ (8002388 <HAL_UART_RxCpltCallback+0x59c>)
 800218c:	f005 f906 	bl	800739c <siprintf>
                        HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 8002190:	487d      	ldr	r0, [pc, #500]	@ (8002388 <HAL_UART_RxCpltCallback+0x59c>)
 8002192:	f7fe f825 	bl	80001e0 <strlen>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219e:	497a      	ldr	r1, [pc, #488]	@ (8002388 <HAL_UART_RxCpltCallback+0x59c>)
 80021a0:	4876      	ldr	r0, [pc, #472]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 80021a2:	f004 f867 	bl	8006274 <HAL_UART_Transmit>
 80021a6:	e0c7      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                    }
                }

                // === MOVEMENT COMMANDS (W/A/S/D) ===
                else if (fsm.get_state() == FSM::S2_MANUAL_STEP_INPUT)
 80021a8:	4878      	ldr	r0, [pc, #480]	@ (800238c <HAL_UART_RxCpltCallback+0x5a0>)
 80021aa:	f7ff f924 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d060      	beq.n	8002280 <HAL_UART_RxCpltCallback+0x494>
                {
                    char dir = cmd_buffer[0];
 80021be:	4b6c      	ldr	r3, [pc, #432]	@ (8002370 <HAL_UART_RxCpltCallback+0x584>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	76fb      	strb	r3, [r7, #27]
                    switch (dir) {
 80021c4:	7efb      	ldrb	r3, [r7, #27]
 80021c6:	3b41      	subs	r3, #65	@ 0x41
 80021c8:	2b16      	cmp	r3, #22
 80021ca:	d851      	bhi.n	8002270 <HAL_UART_RxCpltCallback+0x484>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <HAL_UART_RxCpltCallback+0x3e8>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	08002241 	.word	0x08002241
 80021d8:	08002271 	.word	0x08002271
 80021dc:	08002271 	.word	0x08002271
 80021e0:	08002261 	.word	0x08002261
 80021e4:	08002271 	.word	0x08002271
 80021e8:	08002271 	.word	0x08002271
 80021ec:	08002271 	.word	0x08002271
 80021f0:	08002271 	.word	0x08002271
 80021f4:	08002271 	.word	0x08002271
 80021f8:	08002271 	.word	0x08002271
 80021fc:	08002271 	.word	0x08002271
 8002200:	08002271 	.word	0x08002271
 8002204:	08002271 	.word	0x08002271
 8002208:	08002271 	.word	0x08002271
 800220c:	08002271 	.word	0x08002271
 8002210:	08002271 	.word	0x08002271
 8002214:	08002271 	.word	0x08002271
 8002218:	08002271 	.word	0x08002271
 800221c:	08002251 	.word	0x08002251
 8002220:	08002271 	.word	0x08002271
 8002224:	08002271 	.word	0x08002271
 8002228:	08002271 	.word	0x08002271
 800222c:	08002231 	.word	0x08002231
                        case 'W': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Up\r\n", 9, 1000); break;
 8002230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002234:	2209      	movs	r2, #9
 8002236:	4956      	ldr	r1, [pc, #344]	@ (8002390 <HAL_UART_RxCpltCallback+0x5a4>)
 8002238:	4850      	ldr	r0, [pc, #320]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 800223a:	f004 f81b 	bl	8006274 <HAL_UART_Transmit>
 800223e:	e07b      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                        case 'A': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Left\r\n", 11, 1000); break;
 8002240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002244:	220b      	movs	r2, #11
 8002246:	4953      	ldr	r1, [pc, #332]	@ (8002394 <HAL_UART_RxCpltCallback+0x5a8>)
 8002248:	484c      	ldr	r0, [pc, #304]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 800224a:	f004 f813 	bl	8006274 <HAL_UART_Transmit>
 800224e:	e073      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                        case 'S': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Down\r\n", 11, 1000); break;
 8002250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002254:	220b      	movs	r2, #11
 8002256:	4950      	ldr	r1, [pc, #320]	@ (8002398 <HAL_UART_RxCpltCallback+0x5ac>)
 8002258:	4848      	ldr	r0, [pc, #288]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 800225a:	f004 f80b 	bl	8006274 <HAL_UART_Transmit>
 800225e:	e06b      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                        case 'D': HAL_UART_Transmit(&huart1, (uint8_t*)"Move Right\r\n", 12, 1000); break;
 8002260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002264:	220c      	movs	r2, #12
 8002266:	494d      	ldr	r1, [pc, #308]	@ (800239c <HAL_UART_RxCpltCallback+0x5b0>)
 8002268:	4844      	ldr	r0, [pc, #272]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 800226a:	f004 f803 	bl	8006274 <HAL_UART_Transmit>
 800226e:	e063      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                        default:
                            HAL_UART_Transmit(&huart1, (uint8_t*)"Unknown Direction\r\n", 20, 1000);
 8002270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002274:	2214      	movs	r2, #20
 8002276:	494a      	ldr	r1, [pc, #296]	@ (80023a0 <HAL_UART_RxCpltCallback+0x5b4>)
 8002278:	4840      	ldr	r0, [pc, #256]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 800227a:	f003 fffb 	bl	8006274 <HAL_UART_Transmit>
                            break;
 800227e:	e05b      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                    }
                }

                // === NEW: FLYWHEEL POSITION COMMAND: FXXXX ===
				else if (cmd_buffer[0] == 'F')
 8002280:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <HAL_UART_RxCpltCallback+0x584>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b46      	cmp	r3, #70	@ 0x46
 8002286:	d148      	bne.n	800231a <HAL_UART_RxCpltCallback+0x52e>
				{
					if (fsm.get_state() == FSM::S3_MANUAL_TARGET) {
 8002288:	4840      	ldr	r0, [pc, #256]	@ (800238c <HAL_UART_RxCpltCallback+0x5a0>)
 800228a:	f7ff f8b4 	bl	80013f6 <_ZNK3FSM9get_stateEv>
 800228e:	4603      	mov	r3, r0
 8002290:	2b03      	cmp	r3, #3
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d035      	beq.n	800230a <HAL_UART_RxCpltCallback+0x51e>


						if (cmd_index >= 5) // Ensure command is at least 'F' + 4 digits
 800229e:	4b41      	ldr	r3, [pc, #260]	@ (80023a4 <HAL_UART_RxCpltCallback+0x5b8>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d929      	bls.n	80022fa <HAL_UART_RxCpltCallback+0x50e>
						{
							char *endptr;
							int32_t pos_val = (int32_t)strtol(&cmd_buffer[1], &endptr, 10); // Parse decimal from index 1
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	220a      	movs	r2, #10
 80022ac:	4619      	mov	r1, r3
 80022ae:	483e      	ldr	r0, [pc, #248]	@ (80023a8 <HAL_UART_RxCpltCallback+0x5bc>)
 80022b0:	f005 f860 	bl	8007374 <strtol>
 80022b4:	61f8      	str	r0, [r7, #28]

							// Check if number was successfully parsed
							if (*endptr == '\0')
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d115      	bne.n	80022ea <HAL_UART_RxCpltCallback+0x4fe>
							{
								// Call set pos function
								motor_d_set_pos(&Pololu_1, &pos_controller_1, pos_val);
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	493a      	ldr	r1, [pc, #232]	@ (80023ac <HAL_UART_RxCpltCallback+0x5c0>)
 80022c2:	483b      	ldr	r0, [pc, #236]	@ (80023b0 <HAL_UART_RxCpltCallback+0x5c4>)
 80022c4:	f000 fc14 	bl	8002af0 <motor_d_set_pos>
								sprintf((char*)tx_buf, "Pololu position set to %ld\r\n", pos_val);
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	493a      	ldr	r1, [pc, #232]	@ (80023b4 <HAL_UART_RxCpltCallback+0x5c8>)
 80022cc:	482e      	ldr	r0, [pc, #184]	@ (8002388 <HAL_UART_RxCpltCallback+0x59c>)
 80022ce:	f005 f865 	bl	800739c <siprintf>
								HAL_UART_Transmit(&huart1, tx_buf, strlen((char*)tx_buf), 1000);
 80022d2:	482d      	ldr	r0, [pc, #180]	@ (8002388 <HAL_UART_RxCpltCallback+0x59c>)
 80022d4:	f7fd ff84 	bl	80001e0 <strlen>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29a      	uxth	r2, r3
 80022dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e0:	4929      	ldr	r1, [pc, #164]	@ (8002388 <HAL_UART_RxCpltCallback+0x59c>)
 80022e2:	4826      	ldr	r0, [pc, #152]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 80022e4:	f003 ffc6 	bl	8006274 <HAL_UART_Transmit>
 80022e8:	e026      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
							} else {
								HAL_UART_Transmit(&huart1, (uint8_t*)"Unsuccessful parse\r\n", 52, 1000);
 80022ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ee:	2234      	movs	r2, #52	@ 0x34
 80022f0:	4931      	ldr	r1, [pc, #196]	@ (80023b8 <HAL_UART_RxCpltCallback+0x5cc>)
 80022f2:	4822      	ldr	r0, [pc, #136]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 80022f4:	f003 ffbe 	bl	8006274 <HAL_UART_Transmit>
 80022f8:	e01e      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
							}
						} else {
							HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command Length (4 digits expected)\r\n", 42, 1000);
 80022fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fe:	222a      	movs	r2, #42	@ 0x2a
 8002300:	492e      	ldr	r1, [pc, #184]	@ (80023bc <HAL_UART_RxCpltCallback+0x5d0>)
 8002302:	481e      	ldr	r0, [pc, #120]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 8002304:	f003 ffb6 	bl	8006274 <HAL_UART_Transmit>
 8002308:	e016      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
						}
					} else {
						HAL_UART_Transmit(&huart1, (uint8_t*)"Position command not allowed in this state \r\n", 41, 1000);
 800230a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230e:	2229      	movs	r2, #41	@ 0x29
 8002310:	492b      	ldr	r1, [pc, #172]	@ (80023c0 <HAL_UART_RxCpltCallback+0x5d4>)
 8002312:	481a      	ldr	r0, [pc, #104]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 8002314:	f003 ffae 	bl	8006274 <HAL_UART_Transmit>
 8002318:	e00e      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
					}
				}
                // === INVALID COMMAND ===
                else {
                    HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 800231a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231e:	2212      	movs	r2, #18
 8002320:	4928      	ldr	r1, [pc, #160]	@ (80023c4 <HAL_UART_RxCpltCallback+0x5d8>)
 8002322:	4816      	ldr	r0, [pc, #88]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 8002324:	f003 ffa6 	bl	8006274 <HAL_UART_Transmit>
 8002328:	e006      	b.n	8002338 <HAL_UART_RxCpltCallback+0x54c>
                }
            }
            else {
                HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid Command\r\n", 18, 1000);
 800232a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232e:	2212      	movs	r2, #18
 8002330:	4924      	ldr	r1, [pc, #144]	@ (80023c4 <HAL_UART_RxCpltCallback+0x5d8>)
 8002332:	4812      	ldr	r0, [pc, #72]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 8002334:	f003 ff9e 	bl	8006274 <HAL_UART_Transmit>
            }

            cmd_index = 0; // reset buffer
 8002338:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_UART_RxCpltCallback+0x5b8>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
        }
 800233e:	e00e      	b.n	800235e <HAL_UART_RxCpltCallback+0x572>
        else
        {
            if (cmd_index < sizeof(cmd_buffer) - 1)
 8002340:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_UART_RxCpltCallback+0x5b8>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b3e      	cmp	r3, #62	@ 0x3e
 8002346:	d80a      	bhi.n	800235e <HAL_UART_RxCpltCallback+0x572>
                cmd_buffer[cmd_index++] = c;
 8002348:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <HAL_UART_RxCpltCallback+0x5b8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	b2d1      	uxtb	r1, r2
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <HAL_UART_RxCpltCallback+0x5b8>)
 8002352:	7011      	strb	r1, [r2, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <HAL_UART_RxCpltCallback+0x584>)
 8002358:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800235c:	5453      	strb	r3, [r2, r1]
        }

        // Enable next UART RX interrupt
        HAL_UART_Receive_IT(&huart1, rx_buf, 1);
 800235e:	2201      	movs	r2, #1
 8002360:	4919      	ldr	r1, [pc, #100]	@ (80023c8 <HAL_UART_RxCpltCallback+0x5dc>)
 8002362:	4806      	ldr	r0, [pc, #24]	@ (800237c <HAL_UART_RxCpltCallback+0x590>)
 8002364:	f004 f811 	bl	800638a <HAL_UART_Receive_IT>
    }
}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	@ 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200003f8 	.word	0x200003f8
 8002374:	51eb851f 	.word	0x51eb851f
 8002378:	08007e54 	.word	0x08007e54
 800237c:	200002e0 	.word	0x200002e0
 8002380:	20000048 	.word	0x20000048
 8002384:	08007e64 	.word	0x08007e64
 8002388:	20000328 	.word	0x20000328
 800238c:	200000cc 	.word	0x200000cc
 8002390:	08007e80 	.word	0x08007e80
 8002394:	08007e8c 	.word	0x08007e8c
 8002398:	08007e98 	.word	0x08007e98
 800239c:	08007ea4 	.word	0x08007ea4
 80023a0:	08007eb4 	.word	0x08007eb4
 80023a4:	20000438 	.word	0x20000438
 80023a8:	200003f9 	.word	0x200003f9
 80023ac:	20000030 	.word	0x20000030
 80023b0:	20000010 	.word	0x20000010
 80023b4:	08007ec8 	.word	0x08007ec8
 80023b8:	08007ee8 	.word	0x08007ee8
 80023bc:	08007f00 	.word	0x08007f00
 80023c0:	08007f30 	.word	0x08007f30
 80023c4:	08007f60 	.word	0x08007f60
 80023c8:	20000368 	.word	0x20000368

080023cc <_ZL14initialize_IMUv>:


void initialize_IMU(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80023d2:	2064      	movs	r0, #100	@ 0x64
 80023d4:	f000 ff80 	bl	80032d8 <HAL_Delay>
	sprintf((char*)log_buf, "INIT IMU \r\n");
 80023d8:	496a      	ldr	r1, [pc, #424]	@ (8002584 <_ZL14initialize_IMUv+0x1b8>)
 80023da:	486b      	ldr	r0, [pc, #428]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80023dc:	f004 ffde 	bl	800739c <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*) log_buf, strlen((char*)log_buf), 1000);
 80023e0:	4869      	ldr	r0, [pc, #420]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80023e2:	f7fd fefd 	bl	80001e0 <strlen>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ee:	4966      	ldr	r1, [pc, #408]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80023f0:	4866      	ldr	r0, [pc, #408]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 80023f2:	f003 ff3f 	bl	8006274 <HAL_UART_Transmit>
	  if(HAL_I2C_IsDeviceReady (&hi2c3, 0x28 << 1, 10, 500) == HAL_OK) {
 80023f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80023fa:	220a      	movs	r2, #10
 80023fc:	2150      	movs	r1, #80	@ 0x50
 80023fe:	4864      	ldr	r0, [pc, #400]	@ (8002590 <_ZL14initialize_IMUv+0x1c4>)
 8002400:	f001 ff40 	bl	8004284 <HAL_I2C_IsDeviceReady>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d114      	bne.n	800243e <_ZL14initialize_IMUv+0x72>

	  } else {
		  const int error = HAL_I2C_GetError(&hi2c3);
 8002414:	485e      	ldr	r0, [pc, #376]	@ (8002590 <_ZL14initialize_IMUv+0x1c4>)
 8002416:	f002 f863 	bl	80044e0 <HAL_I2C_GetError>
 800241a:	4603      	mov	r3, r0
 800241c:	607b      	str	r3, [r7, #4]
		  sprintf((char*)log_buf, "Device status error: %d\r\n", error);
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	495c      	ldr	r1, [pc, #368]	@ (8002594 <_ZL14initialize_IMUv+0x1c8>)
 8002422:	4859      	ldr	r0, [pc, #356]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002424:	f004 ffba 	bl	800739c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8002428:	4857      	ldr	r0, [pc, #348]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800242a:	f7fd fed9 	bl	80001e0 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	b29a      	uxth	r2, r3
 8002432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002436:	4954      	ldr	r1, [pc, #336]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002438:	4854      	ldr	r0, [pc, #336]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 800243a:	f003 ff1b 	bl	8006274 <HAL_UART_Transmit>
	  }


	  if(bno055_get_operation_mode(&op_mode) != 0) {
 800243e:	4856      	ldr	r0, [pc, #344]	@ (8002598 <_ZL14initialize_IMUv+0x1cc>)
 8002440:	f7fe fe08 	bl	8001054 <bno055_get_operation_mode>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00f      	beq.n	8002474 <_ZL14initialize_IMUv+0xa8>
		  sprintf((char*)log_buf, "Failed to read op mode\r\n");
 8002454:	4951      	ldr	r1, [pc, #324]	@ (800259c <_ZL14initialize_IMUv+0x1d0>)
 8002456:	484c      	ldr	r0, [pc, #304]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002458:	f004 ffa0 	bl	800739c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 800245c:	484a      	ldr	r0, [pc, #296]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800245e:	f7fd febf 	bl	80001e0 <strlen>
 8002462:	4603      	mov	r3, r0
 8002464:	b29a      	uxth	r2, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800246a:	4947      	ldr	r1, [pc, #284]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800246c:	4847      	ldr	r0, [pc, #284]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 800246e:	f003 ff01 	bl	8006274 <HAL_UART_Transmit>
 8002472:	e011      	b.n	8002498 <_ZL14initialize_IMUv+0xcc>
	  } else {
		  sprintf((char*)log_buf, "Op mode is: %d \r\n", op_mode);
 8002474:	4b48      	ldr	r3, [pc, #288]	@ (8002598 <_ZL14initialize_IMUv+0x1cc>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4949      	ldr	r1, [pc, #292]	@ (80025a0 <_ZL14initialize_IMUv+0x1d4>)
 800247c:	4842      	ldr	r0, [pc, #264]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800247e:	f004 ff8d 	bl	800739c <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*) log_buf, strlen((char*)log_buf), 1000);
 8002482:	4841      	ldr	r0, [pc, #260]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002484:	f7fd feac 	bl	80001e0 <strlen>
 8002488:	4603      	mov	r3, r0
 800248a:	b29a      	uxth	r2, r3
 800248c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002490:	493d      	ldr	r1, [pc, #244]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002492:	483e      	ldr	r0, [pc, #248]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 8002494:	f003 feee 	bl	8006274 <HAL_UART_Transmit>
	  }


	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG)) {
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fe1d 	bl	80010d8 <bno055_set_operation_mode>
 800249e:	4603      	mov	r3, r0
 80024a0:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 80024a4:	d012      	beq.n	80024cc <_ZL14initialize_IMUv+0x100>
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d11f      	bne.n	80024ec <_ZL14initialize_IMUv+0x120>
	    	  case BNO055_ERROR:
	    		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 80024ac:	493d      	ldr	r1, [pc, #244]	@ (80025a4 <_ZL14initialize_IMUv+0x1d8>)
 80024ae:	4836      	ldr	r0, [pc, #216]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80024b0:	f004 ff74 	bl	800739c <siprintf>
	    		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80024b4:	4834      	ldr	r0, [pc, #208]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80024b6:	f7fd fe93 	bl	80001e0 <strlen>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b29a      	uxth	r2, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c2:	4931      	ldr	r1, [pc, #196]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80024c4:	4831      	ldr	r0, [pc, #196]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 80024c6:	f003 fed5 	bl	8006274 <HAL_UART_Transmit>
	    		  break;
 80024ca:	e010      	b.n	80024ee <_ZL14initialize_IMUv+0x122>
	    	  case BNO055_E_NULL_PTR:
	    		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 80024cc:	4936      	ldr	r1, [pc, #216]	@ (80025a8 <_ZL14initialize_IMUv+0x1dc>)
 80024ce:	482e      	ldr	r0, [pc, #184]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80024d0:	f004 ff64 	bl	800739c <siprintf>
	    		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 80024d4:	482c      	ldr	r0, [pc, #176]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80024d6:	f7fd fe83 	bl	80001e0 <strlen>
 80024da:	4603      	mov	r3, r0
 80024dc:	b29a      	uxth	r2, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e2:	4929      	ldr	r1, [pc, #164]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 80024e4:	4829      	ldr	r0, [pc, #164]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 80024e6:	f003 fec5 	bl	8006274 <HAL_UART_Transmit>
	    		  break;
 80024ea:	e000      	b.n	80024ee <_ZL14initialize_IMUv+0x122>
	    	  default:
	    		  break;
 80024ec:	bf00      	nop
	  }
	  HAL_Delay(100);
 80024ee:	2064      	movs	r0, #100	@ 0x64
 80024f0:	f000 fef2 	bl	80032d8 <HAL_Delay>
	  switch(bno055_set_operation_mode(BNO055_OPERATION_MODE_IMUPLUS)) {
 80024f4:	2008      	movs	r0, #8
 80024f6:	f7fe fdef 	bl	80010d8 <bno055_set_operation_mode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8002500:	d012      	beq.n	8002528 <_ZL14initialize_IMUv+0x15c>
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d11f      	bne.n	8002548 <_ZL14initialize_IMUv+0x17c>
	  	  case BNO055_ERROR:
	  		sprintf((char*)log_buf, "Could not set mode to IMU\r\n");
 8002508:	4926      	ldr	r1, [pc, #152]	@ (80025a4 <_ZL14initialize_IMUv+0x1d8>)
 800250a:	481f      	ldr	r0, [pc, #124]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800250c:	f004 ff46 	bl	800739c <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8002510:	481d      	ldr	r0, [pc, #116]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002512:	f7fd fe65 	bl	80001e0 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251e:	491a      	ldr	r1, [pc, #104]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002520:	481a      	ldr	r0, [pc, #104]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 8002522:	f003 fea7 	bl	8006274 <HAL_UART_Transmit>
	  		  break;
 8002526:	e010      	b.n	800254a <_ZL14initialize_IMUv+0x17e>
	  	  case BNO055_E_NULL_PTR:
	  		sprintf((char*)log_buf, "IMU is a null ptr\r\n");
 8002528:	491f      	ldr	r1, [pc, #124]	@ (80025a8 <_ZL14initialize_IMUv+0x1dc>)
 800252a:	4817      	ldr	r0, [pc, #92]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800252c:	f004 ff36 	bl	800739c <siprintf>
	  		HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 8002530:	4815      	ldr	r0, [pc, #84]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002532:	f7fd fe55 	bl	80001e0 <strlen>
 8002536:	4603      	mov	r3, r0
 8002538:	b29a      	uxth	r2, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800253e:	4912      	ldr	r1, [pc, #72]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002540:	4812      	ldr	r0, [pc, #72]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 8002542:	f003 fe97 	bl	8006274 <HAL_UART_Transmit>
	  		  break;
 8002546:	e000      	b.n	800254a <_ZL14initialize_IMUv+0x17e>
	  	  default:
	  		  break;
 8002548:	bf00      	nop
	}
	  bno055_get_operation_mode(&op_mode);
 800254a:	4813      	ldr	r0, [pc, #76]	@ (8002598 <_ZL14initialize_IMUv+0x1cc>)
 800254c:	f7fe fd82 	bl	8001054 <bno055_get_operation_mode>
	  sprintf((char*)log_buf, "Set Op Mode to: %d \r\n", op_mode);
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <_ZL14initialize_IMUv+0x1cc>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4915      	ldr	r1, [pc, #84]	@ (80025ac <_ZL14initialize_IMUv+0x1e0>)
 8002558:	480b      	ldr	r0, [pc, #44]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800255a:	f004 ff1f 	bl	800739c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)log_buf, strlen((char*)log_buf), 1000);
 800255e:	480a      	ldr	r0, [pc, #40]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 8002560:	f7fd fe3e 	bl	80001e0 <strlen>
 8002564:	4603      	mov	r3, r0
 8002566:	b29a      	uxth	r2, r3
 8002568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256c:	4906      	ldr	r1, [pc, #24]	@ (8002588 <_ZL14initialize_IMUv+0x1bc>)
 800256e:	4807      	ldr	r0, [pc, #28]	@ (800258c <_ZL14initialize_IMUv+0x1c0>)
 8002570:	f003 fe80 	bl	8006274 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8002574:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002578:	f000 feae 	bl	80032d8 <HAL_Delay>



}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	08007f74 	.word	0x08007f74
 8002588:	200003a8 	.word	0x200003a8
 800258c:	200002e0 	.word	0x200002e0
 8002590:	20000124 	.word	0x20000124
 8002594:	08007f80 	.word	0x08007f80
 8002598:	200003f4 	.word	0x200003f4
 800259c:	08007f9c 	.word	0x08007f9c
 80025a0:	08007fb8 	.word	0x08007fb8
 80025a4:	08007fcc 	.word	0x08007fcc
 80025a8:	08007fe8 	.word	0x08007fe8
 80025ac:	08007ffc 	.word	0x08007ffc

080025b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <Error_Handler+0x8>

080025bc <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  FSM fsm;
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <_Z41__static_initialization_and_destruction_0v+0x10>)
 80025c2:	f7fe fecf 	bl	8001364 <_ZN3FSMC1Ev>
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200000cc 	.word	0x200000cc

080025d0 <_GLOBAL__sub_I_fsm>:
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	f7ff fff2 	bl	80025bc <_Z41__static_initialization_and_destruction_0v>
 80025d8:	bd80      	pop	{r7, pc}

080025da <set_duty>:
};




void set_duty(motor_t* motor, uint32_t pulse_1) {
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <set_duty+0x1e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80025f6:	e018      	b.n	800262a <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d105      	bne.n	800260c <set_duty+0x32>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800260a:	e00e      	b.n	800262a <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d105      	bne.n	8002620 <set_duty+0x46>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800261e:	e004      	b.n	800262a <set_duty+0x50>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL_1, pulse_1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <motor_d_update_pos>:
}
//Sets
//@param motor_dual*, a motor with two PWM inputs
//@param PI_Controller*, controller
const int32_t ENCODER_MAX = 65536;
void motor_d_update_pos(motor_dual* motor_d, PI_Controller* ctrl) {
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
    int32_t current_count = __HAL_TIM_GET_COUNTER(motor_d->enc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	617b      	str	r3, [r7, #20]
    int32_t error = ctrl->setpoint - current_count;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	61fb      	str	r3, [r7, #28]



	if (error > ENCODER_MAX / 2) {
 8002656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800265a:	0fda      	lsrs	r2, r3, #31
 800265c:	4413      	add	r3, r2
 800265e:	105b      	asrs	r3, r3, #1
 8002660:	461a      	mov	r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4293      	cmp	r3, r2
 8002666:	dd05      	ble.n	8002674 <motor_d_update_pos+0x3c>
		error -= ENCODER_MAX; // Subtract resolution for positive wrap-around
 8002668:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e00e      	b.n	8002692 <motor_d_update_pos+0x5a>
	} else if (error < -ENCODER_MAX / 2) {
 8002674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002678:	425b      	negs	r3, r3
 800267a:	0fda      	lsrs	r2, r3, #31
 800267c:	4413      	add	r3, r2
 800267e:	105b      	asrs	r3, r3, #1
 8002680:	461a      	mov	r2, r3
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4293      	cmp	r3, r2
 8002686:	da04      	bge.n	8002692 <motor_d_update_pos+0x5a>
		error += ENCODER_MAX; // Add resolution for negative wrap-around
 8002688:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]
	}

    //calculate deltaT
   	uint32_t deltaT = HAL_GetTick() - ctrl->prevTick;
 8002692:	f000 fe15 	bl	80032c0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	613b      	str	r3, [r7, #16]
   	ctrl->prevTick = HAL_GetTick();
 80026a0:	f000 fe0e 	bl	80032c0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	611a      	str	r2, [r3, #16]

    // Update integral
    ctrl->integral += error*deltaT*0.001;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff52 	bl	8000558 <__aeabi_f2d>
 80026b4:	4604      	mov	r4, r0
 80026b6:	460d      	mov	r5, r1
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff27 	bl	8000514 <__aeabi_ui2d>
 80026c6:	a3b1      	add	r3, pc, #708	@ (adr r3, 800298c <motor_d_update_pos+0x354>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fd ff9c 	bl	8000608 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd fde0 	bl	800029c <__adddf3>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe f9a2 	bl	8000a2c <__aeabi_d2f>
 80026e8:	4602      	mov	r2, r0
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]

    // Anti-windup (optional)
    if (ctrl->integral > 10000) ctrl->integral = 10000;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f4:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8002970 <motor_d_update_pos+0x338>
 80026f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	dd02      	ble.n	8002708 <motor_d_update_pos+0xd0>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	4a9b      	ldr	r2, [pc, #620]	@ (8002974 <motor_d_update_pos+0x33c>)
 8002706:	609a      	str	r2, [r3, #8]
    if (ctrl->integral < -10000) ctrl->integral = -10000;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	edd3 7a02 	vldr	s15, [r3, #8]
 800270e:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002978 <motor_d_update_pos+0x340>
 8002712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	d502      	bpl.n	8002722 <motor_d_update_pos+0xea>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4a97      	ldr	r2, [pc, #604]	@ (800297c <motor_d_update_pos+0x344>)
 8002720:	609a      	str	r2, [r3, #8]

    // PI output
    float control = ctrl->Kp * error + ctrl->Ki * ctrl->integral;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	ed93 7a00 	vldr	s14, [r3]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	edd3 6a01 	vldr	s13, [r3, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	edc7 7a03 	vstr	s15, [r7, #12]

    // Convert to PWM pulse
    int16_t pulse = fabs(control);
 800274e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002752:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8002980 <motor_d_update_pos+0x348>
 8002756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	dd02      	ble.n	8002766 <motor_d_update_pos+0x12e>
 8002760:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002764:	e011      	b.n	800278a <motor_d_update_pos+0x152>
 8002766:	edd7 7a03 	vldr	s15, [r7, #12]
 800276a:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002984 <motor_d_update_pos+0x34c>
 800276e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d501      	bpl.n	800277c <motor_d_update_pos+0x144>
 8002778:	4b83      	ldr	r3, [pc, #524]	@ (8002988 <motor_d_update_pos+0x350>)
 800277a:	e006      	b.n	800278a <motor_d_update_pos+0x152>
 800277c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002784:	ee17 3a90 	vmov	r3, s15
 8002788:	b21b      	sxth	r3, r3
 800278a:	837b      	strh	r3, [r7, #26]

    //saturate jump in pulse
	if (pulse - ctrl->prevPulse > 2000) {
 800278c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800279c:	dd07      	ble.n	80027ae <motor_d_update_pos+0x176>
		pulse = ctrl->prevPulse + 2000;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	837b      	strh	r3, [r7, #26]
	}
	if (pulse - ctrl->prevPulse < -2000) {
 80027ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 80027be:	da07      	bge.n	80027d0 <motor_d_update_pos+0x198>
		pulse = ctrl->prevPulse - 2000;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	837b      	strh	r3, [r7, #26]
	}

	const int16_t PULSE_LIMIT = 3200;
 80027d0:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 80027d4:	817b      	strh	r3, [r7, #10]
    //saturate pulse
    if (pulse > PULSE_LIMIT) pulse = PULSE_LIMIT;
 80027d6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80027da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027de:	429a      	cmp	r2, r3
 80027e0:	dd01      	ble.n	80027e6 <motor_d_update_pos+0x1ae>
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	837b      	strh	r3, [r7, #26]
    if (pulse < -PULSE_LIMIT) pulse = -PULSE_LIMIT;
 80027e6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80027ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027ee:	425b      	negs	r3, r3
 80027f0:	429a      	cmp	r2, r3
 80027f2:	da03      	bge.n	80027fc <motor_d_update_pos+0x1c4>
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	425b      	negs	r3, r3
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	837b      	strh	r3, [r7, #26]


    ctrl->prevPulse = pulse;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	8b7a      	ldrh	r2, [r7, #26]
 8002800:	829a      	strh	r2, [r3, #20]

    if (control > 4) {
 8002802:	edd7 7a03 	vldr	s15, [r7, #12]
 8002806:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	dd4a      	ble.n	80028aa <motor_d_update_pos+0x272>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, 0);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <motor_d_update_pos+0x1f0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34
 8002826:	e018      	b.n	800285a <motor_d_update_pos+0x222>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d105      	bne.n	800283c <motor_d_update_pos+0x204>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2300      	movs	r3, #0
 8002838:	6393      	str	r3, [r2, #56]	@ 0x38
 800283a:	e00e      	b.n	800285a <motor_d_update_pos+0x222>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d105      	bne.n	8002850 <motor_d_update_pos+0x218>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2300      	movs	r3, #0
 800284c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800284e:	e004      	b.n	800285a <motor_d_update_pos+0x222>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2300      	movs	r3, #0
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, pulse);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <motor_d_update_pos+0x238>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34
 800286e:	e0e5      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d106      	bne.n	8002886 <motor_d_update_pos+0x24e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002882:	6393      	str	r3, [r2, #56]	@ 0x38
 8002884:	e0da      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d106      	bne.n	800289c <motor_d_update_pos+0x264>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002898:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800289a:	e0cf      	b.n	8002a3c <motor_d_update_pos+0x404>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a8:	e0c8      	b.n	8002a3c <motor_d_update_pos+0x404>
    } else if (control < -4) {
 80028aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ae:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80028b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	d571      	bpl.n	80029a0 <motor_d_update_pos+0x368>
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, abs(pulse));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <motor_d_update_pos+0x2a2>
 80028c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bfb8      	it	lt
 80028cc:	425b      	neglt	r3, r3
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80028d8:	e02a      	b.n	8002930 <motor_d_update_pos+0x2f8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d10b      	bne.n	80028fa <motor_d_update_pos+0x2c2>
 80028e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bfb8      	it	lt
 80028ea:	425b      	neglt	r3, r3
 80028ec:	b299      	uxth	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	460b      	mov	r3, r1
 80028f6:	6393      	str	r3, [r2, #56]	@ 0x38
 80028f8:	e01a      	b.n	8002930 <motor_d_update_pos+0x2f8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d10b      	bne.n	800291a <motor_d_update_pos+0x2e2>
 8002902:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfb8      	it	lt
 800290a:	425b      	neglt	r3, r3
 800290c:	b299      	uxth	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	460b      	mov	r3, r1
 8002916:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002918:	e00a      	b.n	8002930 <motor_d_update_pos+0x2f8>
 800291a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800291e:	2b00      	cmp	r3, #0
 8002920:	bfb8      	it	lt
 8002922:	425b      	neglt	r3, r3
 8002924:	b299      	uxth	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	460b      	mov	r3, r1
 800292e:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 0);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <motor_d_update_pos+0x30c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
 8002942:	e07b      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d105      	bne.n	8002958 <motor_d_update_pos+0x320>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	6393      	str	r3, [r2, #56]	@ 0x38
 8002956:	e071      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d119      	bne.n	8002994 <motor_d_update_pos+0x35c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800296a:	e067      	b.n	8002a3c <motor_d_update_pos+0x404>
 800296c:	f3af 8000 	nop.w
 8002970:	461c4000 	.word	0x461c4000
 8002974:	461c4000 	.word	0x461c4000
 8002978:	c61c4000 	.word	0xc61c4000
 800297c:	c61c4000 	.word	0xc61c4000
 8002980:	457a0000 	.word	0x457a0000
 8002984:	c57a0000 	.word	0xc57a0000
 8002988:	fffff060 	.word	0xfffff060
 800298c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002990:	3f50624d 	.word	0x3f50624d
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	6413      	str	r3, [r2, #64]	@ 0x40
 800299e:	e04d      	b.n	8002a3c <motor_d_update_pos+0x404>
    } else {
        // Stop motor if within small error band
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, 4999);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <motor_d_update_pos+0x37e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f241 3287 	movw	r2, #4999	@ 0x1387
 80029b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80029b4:	e01b      	b.n	80029ee <motor_d_update_pos+0x3b6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d106      	bne.n	80029cc <motor_d_update_pos+0x394>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f241 3387 	movw	r3, #4999	@ 0x1387
 80029c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80029ca:	e010      	b.n	80029ee <motor_d_update_pos+0x3b6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d106      	bne.n	80029e2 <motor_d_update_pos+0x3aa>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f241 3387 	movw	r3, #4999	@ 0x1387
 80029de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80029e0:	e005      	b.n	80029ee <motor_d_update_pos+0x3b6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f241 3387 	movw	r3, #4999	@ 0x1387
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 4999);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <motor_d_update_pos+0x3cc>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a02:	e01b      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d106      	bne.n	8002a1a <motor_d_update_pos+0x3e2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002a16:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a18:	e010      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d106      	bne.n	8002a30 <motor_d_update_pos+0x3f8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002a2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a2e:	e005      	b.n	8002a3c <motor_d_update_pos+0x404>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002a3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }

    if (error < 50 && error > -50) {
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b31      	cmp	r3, #49	@ 0x31
 8002a40:	dc51      	bgt.n	8002ae6 <motor_d_update_pos+0x4ae>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8002a48:	db4d      	blt.n	8002ae6 <motor_d_update_pos+0x4ae>
    	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_1, 4999);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <motor_d_update_pos+0x428>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a5e:	e01b      	b.n	8002a98 <motor_d_update_pos+0x460>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d106      	bne.n	8002a76 <motor_d_update_pos+0x43e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002a72:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a74:	e010      	b.n	8002a98 <motor_d_update_pos+0x460>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d106      	bne.n	8002a8c <motor_d_update_pos+0x454>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002a88:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a8a:	e005      	b.n	8002a98 <motor_d_update_pos+0x460>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002a96:	6413      	str	r3, [r2, #64]	@ 0x40
    	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 4999);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <motor_d_update_pos+0x476>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 8002aac:	e01b      	b.n	8002ae6 <motor_d_update_pos+0x4ae>
    	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 4999);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <motor_d_update_pos+0x48c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002ac0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ac2:	e010      	b.n	8002ae6 <motor_d_update_pos+0x4ae>
    	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 4999);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d106      	bne.n	8002ada <motor_d_update_pos+0x4a2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002ad6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002ad8:	e005      	b.n	8002ae6 <motor_d_update_pos+0x4ae>
    	__HAL_TIM_SET_COMPARE(motor_d->htim, motor_d->PWM_CHANNEL_2, 4999);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002ae6:	bf00      	nop
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bdb0      	pop	{r4, r5, r7, pc}
 8002aee:	bf00      	nop

08002af0 <motor_d_set_pos>:

void motor_d_set_pos(motor_dual* motor_d, PI_Controller* ctrl, int32_t pos) {
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	ctrl->setpoint = pos + ctrl->setpoint;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	441a      	add	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60da      	str	r2, [r3, #12]
	if (ctrl->setpoint > ENCODER_MAX) {
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b10:	4293      	cmp	r3, r2
 8002b12:	dd06      	ble.n	8002b22 <motor_d_set_pos+0x32>
		ctrl->setpoint = ctrl->setpoint - ENCODER_MAX;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b1c:	1a9a      	subs	r2, r3, r2
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	60da      	str	r2, [r3, #12]
	}
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <motor_d_get_pos>:

uint32_t motor_d_get_pos(motor_dual* motor_d) {
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(motor_d->enc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <servo_duty>:
servo_t servo_1 = {
	.PWM_CHANNEL = TIM_CHANNEL_4,
	.htim = &htim1
};

void servo_duty(servo_t* servo, uint32_t pulse_1) {
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <servo_duty+0x1e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b66:	e018      	b.n	8002b9a <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d105      	bne.n	8002b7c <servo_duty+0x32>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b7a:	e00e      	b.n	8002b9a <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d105      	bne.n	8002b90 <servo_duty+0x46>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002b8e:	e004      	b.n	8002b9a <servo_duty+0x50>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->PWM_CHANNEL, pulse_1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf4 <HAL_MspInit+0x4c>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <HAL_MspInit+0x4c>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <HAL_MspInit+0x4c>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_MspInit+0x4c>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	@ 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	@ (8002d44 <HAL_I2C_MspInit+0x14c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d13e      	bne.n	8002c98 <HAL_I2C_MspInit+0xa0>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	4a49      	ldr	r2, [pc, #292]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2a:	4b47      	ldr	r3, [pc, #284]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3c:	2312      	movs	r3, #18
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	483e      	ldr	r0, [pc, #248]	@ (8002d4c <HAL_I2C_MspInit+0x154>)
 8002c54:	f000 fd08 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5e:	2312      	movs	r3, #18
 8002c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002c6a:	2309      	movs	r3, #9
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4619      	mov	r1, r3
 8002c74:	4835      	ldr	r0, [pc, #212]	@ (8002d4c <HAL_I2C_MspInit+0x154>)
 8002c76:	f000 fcf7 	bl	8003668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a31      	ldr	r2, [pc, #196]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c96:	e050      	b.n	8002d3a <HAL_I2C_MspInit+0x142>
  else if(hi2c->Instance==I2C3)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d50 <HAL_I2C_MspInit+0x158>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d14b      	bne.n	8002d3a <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a27      	ldr	r2, [pc, #156]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a20      	ldr	r2, [pc, #128]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce0:	2312      	movs	r3, #18
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cec:	2304      	movs	r3, #4
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4817      	ldr	r0, [pc, #92]	@ (8002d54 <HAL_I2C_MspInit+0x15c>)
 8002cf8:	f000 fcb6 	bl	8003668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d02:	2312      	movs	r3, #18
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002d0e:	2309      	movs	r3, #9
 8002d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 031c 	add.w	r3, r7, #28
 8002d16:	4619      	mov	r1, r3
 8002d18:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <HAL_I2C_MspInit+0x154>)
 8002d1a:	f000 fca5 	bl	8003668 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002d28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_I2C_MspInit+0x150>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
}
 8002d3a:	bf00      	nop
 8002d3c:	3730      	adds	r7, #48	@ 0x30
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40005800 	.word	0x40005800
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40005c00 	.word	0x40005c00
 8002d54:	40020000 	.word	0x40020000

08002d58 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	@ (8002de4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002d86:	e026      	b.n	8002dd6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <HAL_TIM_PWM_MspInit+0x94>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	4a13      	ldr	r2, [pc, #76]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
}
 8002dae:	e012      	b.n	8002dd6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <HAL_TIM_PWM_MspInit+0x98>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_TIM_PWM_MspInit+0x90>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000c00 	.word	0x40000c00

08002df4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	@ 0x30
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e14:	d12c      	bne.n	8002e70 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e26:	4b2d      	ldr	r3, [pc, #180]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	4a28      	ldr	r2, [pc, #160]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e42:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002e4e:	2322      	movs	r3, #34	@ 0x22
 8002e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	481d      	ldr	r0, [pc, #116]	@ (8002ee0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6a:	f000 fbfd 	bl	8003668 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e6e:	e030      	b.n	8002ed2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d12b      	bne.n	8002ed2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b17      	ldr	r3, [pc, #92]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8a:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb2:	23c0      	movs	r3, #192	@ 0xc0
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4806      	ldr	r0, [pc, #24]	@ (8002ee8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002ece:	f000 fbcb 	bl	8003668 <HAL_GPIO_Init>
}
 8002ed2:	bf00      	nop
 8002ed4:	3730      	adds	r7, #48	@ 0x30
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40020400 	.word	0x40020400

08002eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	@ 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a36      	ldr	r2, [pc, #216]	@ (8002fe4 <HAL_TIM_MspPostInit+0xf8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d11f      	bne.n	8002f4e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	4b35      	ldr	r3, [pc, #212]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a34      	ldr	r2, [pc, #208]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b32      	ldr	r3, [pc, #200]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4829      	ldr	r0, [pc, #164]	@ (8002fec <HAL_TIM_MspPostInit+0x100>)
 8002f48:	f000 fb8e 	bl	8003668 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f4c:	e046      	b.n	8002fdc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <HAL_TIM_MspPostInit+0x104>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d11e      	bne.n	8002f96 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	4b22      	ldr	r3, [pc, #136]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f68:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f74:	2333      	movs	r3, #51	@ 0x33
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f84:	2302      	movs	r3, #2
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4819      	ldr	r0, [pc, #100]	@ (8002ff4 <HAL_TIM_MspPostInit+0x108>)
 8002f90:	f000 fb6a 	bl	8003668 <HAL_GPIO_Init>
}
 8002f94:	e022      	b.n	8002fdc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <HAL_TIM_MspPostInit+0x10c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d11d      	bne.n	8002fdc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_TIM_MspPostInit+0xfc>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4805      	ldr	r0, [pc, #20]	@ (8002fec <HAL_TIM_MspPostInit+0x100>)
 8002fd8:	f000 fb46 	bl	8003668 <HAL_GPIO_Init>
}
 8002fdc:	bf00      	nop
 8002fde:	3728      	adds	r7, #40	@ 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40000c00 	.word	0x40000c00

08002ffc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1d      	ldr	r2, [pc, #116]	@ (8003090 <HAL_UART_MspInit+0x94>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d134      	bne.n	8003088 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <HAL_UART_MspInit+0x98>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_UART_MspInit+0x98>)
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6453      	str	r3, [r2, #68]	@ 0x44
 800302e:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_UART_MspInit+0x98>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_UART_MspInit+0x98>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <HAL_UART_MspInit+0x98>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_UART_MspInit+0x98>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8003056:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003068:	2307      	movs	r3, #7
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	4809      	ldr	r0, [pc, #36]	@ (8003098 <HAL_UART_MspInit+0x9c>)
 8003074:	f000 faf8 	bl	8003668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	2025      	movs	r0, #37	@ 0x25
 800307e:	f000 fa2a 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003082:	2025      	movs	r0, #37	@ 0x25
 8003084:	f000 fa43 	bl	800350e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	@ 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40011000 	.word	0x40011000
 8003094:	40023800 	.word	0x40023800
 8003098:	40020000 	.word	0x40020000

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <NMI_Handler+0x4>

080030a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <MemManage_Handler+0x4>

080030b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f2:	f000 f8d1 	bl	8003298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003100:	4802      	ldr	r0, [pc, #8]	@ (800310c <USART1_IRQHandler+0x10>)
 8003102:	f003 f967 	bl	80063d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200002e0 	.word	0x200002e0

08003110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003118:	4a14      	ldr	r2, [pc, #80]	@ (800316c <_sbrk+0x5c>)
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <_sbrk+0x60>)
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003124:	4b13      	ldr	r3, [pc, #76]	@ (8003174 <_sbrk+0x64>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <_sbrk+0x64>)
 800312e:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <_sbrk+0x68>)
 8003130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003132:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <_sbrk+0x64>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d207      	bcs.n	8003150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003140:	f004 f968 	bl	8007414 <__errno>
 8003144:	4603      	mov	r3, r0
 8003146:	220c      	movs	r2, #12
 8003148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e009      	b.n	8003164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003150:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <_sbrk+0x64>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	4a05      	ldr	r2, [pc, #20]	@ (8003174 <_sbrk+0x64>)
 8003160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003162:	68fb      	ldr	r3, [r7, #12]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20020000 	.word	0x20020000
 8003170:	00000400 	.word	0x00000400
 8003174:	2000043c 	.word	0x2000043c
 8003178:	20000590 	.word	0x20000590

0800317c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <SystemInit+0x20>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <SystemInit+0x20>)
 8003188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800318c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031a4:	f7ff ffea 	bl	800317c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a8:	480c      	ldr	r0, [pc, #48]	@ (80031dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031aa:	490d      	ldr	r1, [pc, #52]	@ (80031e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031ac:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031c0:	4c0a      	ldr	r4, [pc, #40]	@ (80031ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ce:	f004 f927 	bl	8007420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d2:	f7fe f91d 	bl	8001410 <main>
  bx  lr    
 80031d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80031e4:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 80031e8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80031ec:	2000058c 	.word	0x2000058c

080031f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC_IRQHandler>
	...

080031f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003234 <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <HAL_Init+0x40>)
 80031fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <HAL_Init+0x40>)
 800320a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800320e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003210:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a07      	ldr	r2, [pc, #28]	@ (8003234 <HAL_Init+0x40>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321c:	2003      	movs	r0, #3
 800321e:	f000 f94f 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003222:	200f      	movs	r0, #15
 8003224:	f000 f808 	bl	8003238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003228:	f7ff fcbe 	bl	8002ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00

08003238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003240:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_InitTick+0x54>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <HAL_InitTick+0x58>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800324e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f967 	bl	800352a <HAL_SYSTICK_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00e      	b.n	8003284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d80a      	bhi.n	8003282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800326c:	2200      	movs	r2, #0
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f000 f92f 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003278:	4a06      	ldr	r2, [pc, #24]	@ (8003294 <HAL_InitTick+0x5c>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000050 	.word	0x20000050
 8003290:	20000058 	.word	0x20000058
 8003294:	20000054 	.word	0x20000054

08003298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_IncTick+0x20>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_IncTick+0x24>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	4a04      	ldr	r2, [pc, #16]	@ (80032bc <HAL_IncTick+0x24>)
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000058 	.word	0x20000058
 80032bc:	20000440 	.word	0x20000440

080032c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return uwTick;
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <HAL_GetTick+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000440 	.word	0x20000440

080032d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7ff ffee 	bl	80032c0 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d005      	beq.n	80032fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_Delay+0x44>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032fe:	bf00      	nop
 8003300:	f7ff ffde 	bl	80032c0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	429a      	cmp	r2, r3
 800330e:	d8f7      	bhi.n	8003300 <HAL_Delay+0x28>
  {
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000058 	.word	0x20000058

08003320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	@ (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	@ (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	@ (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	@ 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff29 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff3e 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff8e 	bl	8003414 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff31 	bl	8003384 <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff feb6 	bl	80032c0 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2280      	movs	r2, #128	@ 0x80
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e052      	b.n	800361a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0216 	bic.w	r2, r2, #22
 8003582:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003592:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <HAL_DMA_Abort+0x62>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0208 	bic.w	r2, r2, #8
 80035b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c4:	e013      	b.n	80035ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c6:	f7ff fe7b 	bl	80032c0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d90c      	bls.n	80035ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e015      	b.n	800361a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e4      	bne.n	80035c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	223f      	movs	r2, #63	@ 0x3f
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	@ 0x80
 800363a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e00c      	b.n	800365a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2205      	movs	r2, #5
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	@ 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e159      	b.n	8003938 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	f040 8148 	bne.w	8003932 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d005      	beq.n	80036ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d130      	bne.n	800371c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 0201 	and.w	r2, r3, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b03      	cmp	r3, #3
 8003726:	d017      	beq.n	8003758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d123      	bne.n	80037ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	08da      	lsrs	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3208      	adds	r2, #8
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a2 	beq.w	8003932 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b57      	ldr	r3, [pc, #348]	@ (8003950 <HAL_GPIO_Init+0x2e8>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	4a56      	ldr	r2, [pc, #344]	@ (8003950 <HAL_GPIO_Init+0x2e8>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037fe:	4b54      	ldr	r3, [pc, #336]	@ (8003950 <HAL_GPIO_Init+0x2e8>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380a:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_GPIO_Init+0x2ec>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a49      	ldr	r2, [pc, #292]	@ (8003958 <HAL_GPIO_Init+0x2f0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d019      	beq.n	800386a <HAL_GPIO_Init+0x202>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a48      	ldr	r2, [pc, #288]	@ (800395c <HAL_GPIO_Init+0x2f4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0x1fe>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a47      	ldr	r2, [pc, #284]	@ (8003960 <HAL_GPIO_Init+0x2f8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00d      	beq.n	8003862 <HAL_GPIO_Init+0x1fa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a46      	ldr	r2, [pc, #280]	@ (8003964 <HAL_GPIO_Init+0x2fc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <HAL_GPIO_Init+0x1f6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a45      	ldr	r2, [pc, #276]	@ (8003968 <HAL_GPIO_Init+0x300>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_GPIO_Init+0x1f2>
 8003856:	2304      	movs	r3, #4
 8003858:	e008      	b.n	800386c <HAL_GPIO_Init+0x204>
 800385a:	2307      	movs	r3, #7
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x204>
 800385e:	2303      	movs	r3, #3
 8003860:	e004      	b.n	800386c <HAL_GPIO_Init+0x204>
 8003862:	2302      	movs	r3, #2
 8003864:	e002      	b.n	800386c <HAL_GPIO_Init+0x204>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x204>
 800386a:	2300      	movs	r3, #0
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	4093      	lsls	r3, r2
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800387c:	4935      	ldr	r1, [pc, #212]	@ (8003954 <HAL_GPIO_Init+0x2ec>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800388a:	4b38      	ldr	r3, [pc, #224]	@ (800396c <HAL_GPIO_Init+0x304>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ae:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <HAL_GPIO_Init+0x304>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b4:	4b2d      	ldr	r3, [pc, #180]	@ (800396c <HAL_GPIO_Init+0x304>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d8:	4a24      	ldr	r2, [pc, #144]	@ (800396c <HAL_GPIO_Init+0x304>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038de:	4b23      	ldr	r3, [pc, #140]	@ (800396c <HAL_GPIO_Init+0x304>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003902:	4a1a      	ldr	r2, [pc, #104]	@ (800396c <HAL_GPIO_Init+0x304>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003908:	4b18      	ldr	r3, [pc, #96]	@ (800396c <HAL_GPIO_Init+0x304>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800392c:	4a0f      	ldr	r2, [pc, #60]	@ (800396c <HAL_GPIO_Init+0x304>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	f67f aea2 	bls.w	8003684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3724      	adds	r7, #36	@ 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	40013800 	.word	0x40013800
 8003958:	40020000 	.word	0x40020000
 800395c:	40020400 	.word	0x40020400
 8003960:	40020800 	.word	0x40020800
 8003964:	40020c00 	.word	0x40020c00
 8003968:	40021000 	.word	0x40021000
 800396c:	40013c00 	.word	0x40013c00

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800398c:	e003      	b.n	8003996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e12b      	b.n	8003c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff f914 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	@ 0x24
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a08:	f001 fd5a 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a81      	ldr	r2, [pc, #516]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d807      	bhi.n	8003a28 <HAL_I2C_Init+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a80      	ldr	r2, [pc, #512]	@ (8003c1c <HAL_I2C_Init+0x278>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf94      	ite	ls
 8003a20:	2301      	movls	r3, #1
 8003a22:	2300      	movhi	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e006      	b.n	8003a36 <HAL_I2C_Init+0x92>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c20 <HAL_I2C_Init+0x27c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf94      	ite	ls
 8003a30:	2301      	movls	r3, #1
 8003a32:	2300      	movhi	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0e7      	b.n	8003c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a78      	ldr	r2, [pc, #480]	@ (8003c24 <HAL_I2C_Init+0x280>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0c9b      	lsrs	r3, r3, #18
 8003a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d802      	bhi.n	8003a78 <HAL_I2C_Init+0xd4>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3301      	adds	r3, #1
 8003a76:	e009      	b.n	8003a8c <HAL_I2C_Init+0xe8>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	4a69      	ldr	r2, [pc, #420]	@ (8003c28 <HAL_I2C_Init+0x284>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	495c      	ldr	r1, [pc, #368]	@ (8003c18 <HAL_I2C_Init+0x274>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d819      	bhi.n	8003ae0 <HAL_I2C_Init+0x13c>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e59      	subs	r1, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aba:	1c59      	adds	r1, r3, #1
 8003abc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_I2C_Init+0x138>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e59      	subs	r1, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ada:	e051      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e04f      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d111      	bne.n	8003b0c <HAL_I2C_Init+0x168>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1e58      	subs	r0, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e012      	b.n	8003b32 <HAL_I2C_Init+0x18e>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e58      	subs	r0, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	0099      	lsls	r1, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Init+0x196>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e022      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10e      	bne.n	8003b60 <HAL_I2C_Init+0x1bc>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e58      	subs	r0, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	440b      	add	r3, r1
 8003b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5e:	e00f      	b.n	8003b80 <HAL_I2C_Init+0x1dc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	0099      	lsls	r1, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	6809      	ldr	r1, [r1, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6911      	ldr	r1, [r2, #16]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	000186a0 	.word	0x000186a0
 8003c1c:	001e847f 	.word	0x001e847f
 8003c20:	003d08ff 	.word	0x003d08ff
 8003c24:	431bde83 	.word	0x431bde83
 8003c28:	10624dd3 	.word	0x10624dd3

08003c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c46:	f7ff fb3b 	bl	80032c0 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	f040 80d9 	bne.w	8003e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2319      	movs	r3, #25
 8003c60:	2201      	movs	r2, #1
 8003c62:	496d      	ldr	r1, [pc, #436]	@ (8003e18 <HAL_I2C_Mem_Write+0x1ec>)
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fdc5 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0cc      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Mem_Write+0x56>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e0c5      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d007      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2221      	movs	r2, #33	@ 0x21
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_I2C_Mem_Write+0x1f0>)
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cea:	88f8      	ldrh	r0, [r7, #6]
 8003cec:	893a      	ldrh	r2, [r7, #8]
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fbfc 	bl	80044f8 <I2C_RequestMemoryWrite>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d052      	beq.n	8003dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e081      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fe8a 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d107      	bne.n	8003d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d11b      	bne.n	8003dac <HAL_I2C_Mem_Write+0x180>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1aa      	bne.n	8003d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fe7d 	bl	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d107      	bne.n	8003ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e016      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	00100002 	.word	0x00100002
 8003e1c:	ffff0000 	.word	0xffff0000

08003e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	@ 0x30
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7ff fa41 	bl	80032c0 <HAL_GetTick>
 8003e3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	f040 8214 	bne.w	8004276 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2319      	movs	r3, #25
 8003e54:	2201      	movs	r2, #1
 8003e56:	497b      	ldr	r1, [pc, #492]	@ (8004044 <HAL_I2C_Mem_Read+0x224>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fccb 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e207      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Mem_Read+0x56>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e200      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d007      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2222      	movs	r2, #34	@ 0x22
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a5b      	ldr	r2, [pc, #364]	@ (8004048 <HAL_I2C_Mem_Read+0x228>)
 8003edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ede:	88f8      	ldrh	r0, [r7, #6]
 8003ee0:	893a      	ldrh	r2, [r7, #8]
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fb98 	bl	8004624 <I2C_RequestMemoryRead>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1bc      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	623b      	str	r3, [r7, #32]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e190      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d11b      	bne.n	8003f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e170      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d11b      	bne.n	8003fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	e150      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fc4:	e144      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	f200 80f1 	bhi.w	80041b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d123      	bne.n	8004020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fdb3 	bl	8004b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e145      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800401e:	e117      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b02      	cmp	r3, #2
 8004026:	d14e      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	2200      	movs	r2, #0
 8004030:	4906      	ldr	r1, [pc, #24]	@ (800404c <HAL_I2C_Mem_Read+0x22c>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fbde 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e11a      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
 8004042:	bf00      	nop
 8004044:	00100002 	.word	0x00100002
 8004048:	ffff0000 	.word	0xffff0000
 800404c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040c4:	e0c4      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	2200      	movs	r2, #0
 80040ce:	496c      	ldr	r1, [pc, #432]	@ (8004280 <HAL_I2C_Mem_Read+0x460>)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fb8f 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cb      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	2200      	movs	r2, #0
 800412a:	4955      	ldr	r1, [pc, #340]	@ (8004280 <HAL_I2C_Mem_Read+0x460>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fb61 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e09d      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041b0:	e04e      	b.n	8004250 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fcc6 	bl	8004b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e058      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d124      	bne.n	8004250 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420a:	2b03      	cmp	r3, #3
 800420c:	d107      	bne.n	800421e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	f47f aeb6 	bne.w	8003fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3728      	adds	r7, #40	@ 0x28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	00010004 	.word	0x00010004

08004284 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	@ 0x28
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	460b      	mov	r3, r1
 8004292:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff f814 	bl	80032c0 <HAL_GetTick>
 8004298:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	f040 8111 	bne.w	80044ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2319      	movs	r3, #25
 80042b2:	2201      	movs	r2, #1
 80042b4:	4988      	ldr	r1, [pc, #544]	@ (80044d8 <HAL_I2C_IsDeviceReady+0x254>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fa9c 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
 80042c4:	e104      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2C_IsDeviceReady+0x50>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e0fd      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d007      	beq.n	80042fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2224      	movs	r2, #36	@ 0x24
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a70      	ldr	r2, [pc, #448]	@ (80044dc <HAL_I2C_IsDeviceReady+0x258>)
 800431c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800432c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa5a 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004354:	d103      	bne.n	800435e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0b6      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004362:	897b      	ldrh	r3, [r7, #10]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004370:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004372:	f7fe ffa5 	bl	80032c0 <HAL_GetTick>
 8004376:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043a6:	e025      	b.n	80043f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043a8:	f7fe ff8a 	bl	80032c0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <HAL_I2C_IsDeviceReady+0x13a>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22a0      	movs	r2, #160	@ 0xa0
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80043fe:	d005      	beq.n	800440c <HAL_I2C_IsDeviceReady+0x188>
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <HAL_I2C_IsDeviceReady+0x188>
 8004406:	7dbb      	ldrb	r3, [r7, #22]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0cd      	beq.n	80043a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d129      	bne.n	8004476 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004430:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2319      	movs	r3, #25
 800444e:	2201      	movs	r2, #1
 8004450:	4921      	ldr	r1, [pc, #132]	@ (80044d8 <HAL_I2C_IsDeviceReady+0x254>)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f9ce 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e036      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e02c      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004484:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800448e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2319      	movs	r3, #25
 8004496:	2201      	movs	r2, #1
 8004498:	490f      	ldr	r1, [pc, #60]	@ (80044d8 <HAL_I2C_IsDeviceReady+0x254>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f9aa 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e012      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	f4ff af32 	bcc.w	800431e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	00100002 	.word	0x00100002
 80044dc:	ffff0000 	.word	0xffff0000

080044e0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	817b      	strh	r3, [r7, #10]
 800450a:	460b      	mov	r3, r1
 800450c:	813b      	strh	r3, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2200      	movs	r2, #0
 800452a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f960 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004548:	d103      	bne.n	8004552 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e05f      	b.n	8004616 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	492d      	ldr	r1, [pc, #180]	@ (8004620 <I2C_RequestMemoryWrite+0x128>)
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f9bb 	bl	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e04c      	b.n	8004616 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fa46 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d107      	bne.n	80045ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02b      	b.n	8004616 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c4:	893b      	ldrh	r3, [r7, #8]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	e021      	b.n	8004614 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e0:	6a39      	ldr	r1, [r7, #32]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa20 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d107      	bne.n	8004606 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e005      	b.n	8004616 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	00010002 	.word	0x00010002

08004624 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	4608      	mov	r0, r1
 800462e:	4611      	mov	r1, r2
 8004630:	461a      	mov	r2, r3
 8004632:	4603      	mov	r3, r0
 8004634:	817b      	strh	r3, [r7, #10]
 8004636:	460b      	mov	r3, r1
 8004638:	813b      	strh	r3, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800464c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800465c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2200      	movs	r2, #0
 8004666:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f8c2 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004684:	d103      	bne.n	800468e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800468c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0aa      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	4952      	ldr	r1, [pc, #328]	@ (80047f0 <I2C_RequestMemoryRead+0x1cc>)
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f91d 	bl	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e097      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d0:	6a39      	ldr	r1, [r7, #32]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f9a8 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d107      	bne.n	80046f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e076      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004700:	893b      	ldrh	r3, [r7, #8]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	611a      	str	r2, [r3, #16]
 800470a:	e021      	b.n	8004750 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800470c:	893b      	ldrh	r3, [r7, #8]
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	b29b      	uxth	r3, r3
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471c:	6a39      	ldr	r1, [r7, #32]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f982 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	2b04      	cmp	r3, #4
 8004730:	d107      	bne.n	8004742 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004740:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e050      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004746:	893b      	ldrh	r3, [r7, #8]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004752:	6a39      	ldr	r1, [r7, #32]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f967 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b04      	cmp	r3, #4
 8004766:	d107      	bne.n	8004778 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004776:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e035      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2200      	movs	r2, #0
 8004794:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f82b 	bl	80047f4 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b2:	d103      	bne.n	80047bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e013      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	4906      	ldr	r1, [pc, #24]	@ (80047f0 <I2C_RequestMemoryRead+0x1cc>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f886 	bl	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004804:	e048      	b.n	8004898 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d044      	beq.n	8004898 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fe fd57 	bl	80032c0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d139      	bne.n	8004898 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10d      	bne.n	800484a <I2C_WaitOnFlagUntilTimeout+0x56>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	e00c      	b.n	8004864 <I2C_WaitOnFlagUntilTimeout+0x70>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	43da      	mvns	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	429a      	cmp	r2, r3
 8004868:	d116      	bne.n	8004898 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e023      	b.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10d      	bne.n	80048be <I2C_WaitOnFlagUntilTimeout+0xca>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	e00c      	b.n	80048d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	43da      	mvns	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4013      	ands	r3, r2
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d093      	beq.n	8004806 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f6:	e071      	b.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004906:	d123      	bne.n	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004916:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e067      	b.n	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d041      	beq.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004958:	f7fe fcb2 	bl	80032c0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d136      	bne.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d10c      	bne.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	43da      	mvns	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e00b      	b.n	80049aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	43da      	mvns	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d016      	beq.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e021      	b.n	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10c      	bne.n	8004a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	43da      	mvns	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e00b      	b.n	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f47f af6d 	bne.w	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a34:	e034      	b.n	8004aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f8e3 	bl	8004c02 <I2C_IsAcknowledgeFailed>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e034      	b.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d028      	beq.n	8004aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fe fc37 	bl	80032c0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11d      	bne.n	8004aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b80      	cmp	r3, #128	@ 0x80
 8004a70:	d016      	beq.n	8004aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e007      	b.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d1c3      	bne.n	8004a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac4:	e034      	b.n	8004b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f89b 	bl	8004c02 <I2C_IsAcknowledgeFailed>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e034      	b.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d028      	beq.n	8004b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7fe fbef 	bl	80032c0 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d11d      	bne.n	8004b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d016      	beq.n	8004b30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e007      	b.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d1c3      	bne.n	8004ac6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b54:	e049      	b.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d119      	bne.n	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e030      	b.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fe fb92 	bl	80032c0 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11d      	bne.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb8:	2b40      	cmp	r3, #64	@ 0x40
 8004bba:	d016      	beq.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e007      	b.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d1ae      	bne.n	8004b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c18:	d11b      	bne.n	8004c52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	f043 0204 	orr.w	r2, r3, #4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e267      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d075      	beq.n	8004d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c7e:	4b88      	ldr	r3, [pc, #544]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d00c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b85      	ldr	r3, [pc, #532]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d112      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c96:	4b82      	ldr	r3, [pc, #520]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d157      	bne.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e242      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x74>
 8004cc6:	4b76      	ldr	r3, [pc, #472]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a75      	ldr	r2, [pc, #468]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xb0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x98>
 8004cde:	4b70      	ldr	r3, [pc, #448]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6f      	ldr	r2, [pc, #444]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6c      	ldr	r2, [pc, #432]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xb0>
 8004cf8:	4b69      	ldr	r3, [pc, #420]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a68      	ldr	r2, [pc, #416]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b66      	ldr	r3, [pc, #408]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a65      	ldr	r2, [pc, #404]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fe fad2 	bl	80032c0 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe face 	bl	80032c0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	@ 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e207      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fe fabe 	bl	80032c0 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fe faba 	bl	80032c0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	@ 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e1f3      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5a:	4b51      	ldr	r3, [pc, #324]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d063      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d82:	4b47      	ldr	r3, [pc, #284]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d11c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8e:	4b44      	ldr	r3, [pc, #272]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d116      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9a:	4b41      	ldr	r3, [pc, #260]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_RCC_OscConfig+0x152>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d001      	beq.n	8004db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e1c7      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4937      	ldr	r1, [pc, #220]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	e03a      	b.n	8004e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd0:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fe fa73 	bl	80032c0 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fe fa6f 	bl	80032c0 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1a8      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b28      	ldr	r3, [pc, #160]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4925      	ldr	r1, [pc, #148]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
 8004e10:	e015      	b.n	8004e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e12:	4b24      	ldr	r3, [pc, #144]	@ (8004ea4 <HAL_RCC_OscConfig+0x244>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fe fa52 	bl	80032c0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fe fa4e 	bl	80032c0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e187      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d036      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_RCC_OscConfig+0x248>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fe fa32 	bl	80032c0 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fe fa2e 	bl	80032c0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e167      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <HAL_RCC_OscConfig+0x240>)
 8004e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x200>
 8004e7e:	e01b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_OscConfig+0x248>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e86:	f7fe fa1b 	bl	80032c0 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e8c:	e00e      	b.n	8004eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8e:	f7fe fa17 	bl	80032c0 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d907      	bls.n	8004eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e150      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	42470000 	.word	0x42470000
 8004ea8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eac:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ea      	bne.n	8004e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8097 	beq.w	8004ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eca:	4b81      	ldr	r3, [pc, #516]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	4b7d      	ldr	r3, [pc, #500]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	4a7c      	ldr	r2, [pc, #496]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef6:	4b77      	ldr	r3, [pc, #476]	@ (80050d4 <HAL_RCC_OscConfig+0x474>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d118      	bne.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f02:	4b74      	ldr	r3, [pc, #464]	@ (80050d4 <HAL_RCC_OscConfig+0x474>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a73      	ldr	r2, [pc, #460]	@ (80050d4 <HAL_RCC_OscConfig+0x474>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0e:	f7fe f9d7 	bl	80032c0 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fe f9d3 	bl	80032c0 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e10c      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f28:	4b6a      	ldr	r3, [pc, #424]	@ (80050d4 <HAL_RCC_OscConfig+0x474>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0x2ea>
 8004f3c:	4b64      	ldr	r3, [pc, #400]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a63      	ldr	r2, [pc, #396]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	e01c      	b.n	8004f84 <HAL_RCC_OscConfig+0x324>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x30c>
 8004f52:	4b5f      	ldr	r3, [pc, #380]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	4a5e      	ldr	r2, [pc, #376]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5e:	4b5c      	ldr	r3, [pc, #368]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	4a5b      	ldr	r2, [pc, #364]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCC_OscConfig+0x324>
 8004f6c:	4b58      	ldr	r3, [pc, #352]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	4a57      	ldr	r2, [pc, #348]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f78:	4b55      	ldr	r3, [pc, #340]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a54      	ldr	r2, [pc, #336]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	f023 0304 	bic.w	r3, r3, #4
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fe f998 	bl	80032c0 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f94:	f7fe f994 	bl	80032c0 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0cb      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004faa:	4b49      	ldr	r3, [pc, #292]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0ee      	beq.n	8004f94 <HAL_RCC_OscConfig+0x334>
 8004fb6:	e014      	b.n	8004fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb8:	f7fe f982 	bl	80032c0 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe f97e 	bl	80032c0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0b5      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ee      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe8:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	4a38      	ldr	r2, [pc, #224]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8004fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80a1 	beq.w	8005140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ffe:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b08      	cmp	r3, #8
 8005008:	d05c      	beq.n	80050c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d141      	bne.n	8005096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005012:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <HAL_RCC_OscConfig+0x478>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fe f952 	bl	80032c0 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fe f94e 	bl	80032c0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e087      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005032:	4b27      	ldr	r3, [pc, #156]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	019b      	lsls	r3, r3, #6
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	3b01      	subs	r3, #1
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	491b      	ldr	r1, [pc, #108]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 8005064:	4313      	orrs	r3, r2
 8005066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005068:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <HAL_RCC_OscConfig+0x478>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506e:	f7fe f927 	bl	80032c0 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005076:	f7fe f923 	bl	80032c0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e05c      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005088:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x416>
 8005094:	e054      	b.n	8005140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <HAL_RCC_OscConfig+0x478>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fe f910 	bl	80032c0 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fe f90c 	bl	80032c0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e045      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x444>
 80050c2:	e03d      	b.n	8005140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e038      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40007000 	.word	0x40007000
 80050d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_RCC_OscConfig+0x4ec>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d028      	beq.n	800513c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d121      	bne.n	800513c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d11a      	bne.n	800513c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800510c:	4013      	ands	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005114:	4293      	cmp	r3, r2
 8005116:	d111      	bne.n	800513c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	3b01      	subs	r3, #1
 8005126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d107      	bne.n	800513c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800

08005150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0cc      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005164:	4b68      	ldr	r3, [pc, #416]	@ (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d90c      	bls.n	800518c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b65      	ldr	r3, [pc, #404]	@ (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b63      	ldr	r3, [pc, #396]	@ (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0b8      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d020      	beq.n	80051da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a4:	4b59      	ldr	r3, [pc, #356]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a58      	ldr	r2, [pc, #352]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051bc:	4b53      	ldr	r3, [pc, #332]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4a52      	ldr	r2, [pc, #328]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c8:	4b50      	ldr	r3, [pc, #320]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	494d      	ldr	r1, [pc, #308]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d044      	beq.n	8005270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d119      	bne.n	800522e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e07f      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d003      	beq.n	800520e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520a:	2b03      	cmp	r3, #3
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	4b3f      	ldr	r3, [pc, #252]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e06f      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	4b3b      	ldr	r3, [pc, #236]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e067      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522e:	4b37      	ldr	r3, [pc, #220]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f023 0203 	bic.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4934      	ldr	r1, [pc, #208]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005240:	f7fe f83e 	bl	80032c0 <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005246:	e00a      	b.n	800525e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005248:	f7fe f83a 	bl	80032c0 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e04f      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 020c 	and.w	r2, r3, #12
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	429a      	cmp	r2, r3
 800526e:	d1eb      	bne.n	8005248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005270:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d20c      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b22      	ldr	r3, [pc, #136]	@ (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b20      	ldr	r3, [pc, #128]	@ (8005308 <HAL_RCC_ClockConfig+0x1b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d001      	beq.n	8005298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e032      	b.n	80052fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a4:	4b19      	ldr	r3, [pc, #100]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4916      	ldr	r1, [pc, #88]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	490e      	ldr	r1, [pc, #56]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052d6:	f000 f821 	bl	800531c <HAL_RCC_GetSysClockFreq>
 80052da:	4602      	mov	r2, r0
 80052dc:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	490a      	ldr	r1, [pc, #40]	@ (8005310 <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	5ccb      	ldrb	r3, [r1, r3]
 80052ea:	fa22 f303 	lsr.w	r3, r2, r3
 80052ee:	4a09      	ldr	r2, [pc, #36]	@ (8005314 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052f2:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <HAL_RCC_ClockConfig+0x1c8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fd ff9e 	bl	8003238 <HAL_InitTick>

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40023c00 	.word	0x40023c00
 800530c:	40023800 	.word	0x40023800
 8005310:	08008064 	.word	0x08008064
 8005314:	20000050 	.word	0x20000050
 8005318:	20000054 	.word	0x20000054

0800531c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800531c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005320:	b090      	sub	sp, #64	@ 0x40
 8005322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005334:	4b59      	ldr	r3, [pc, #356]	@ (800549c <HAL_RCC_GetSysClockFreq+0x180>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d00d      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x40>
 8005340:	2b08      	cmp	r3, #8
 8005342:	f200 80a1 	bhi.w	8005488 <HAL_RCC_GetSysClockFreq+0x16c>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0x34>
 800534a:	2b04      	cmp	r3, #4
 800534c:	d003      	beq.n	8005356 <HAL_RCC_GetSysClockFreq+0x3a>
 800534e:	e09b      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005350:	4b53      	ldr	r3, [pc, #332]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005352:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005354:	e09b      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005356:	4b53      	ldr	r3, [pc, #332]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800535a:	e098      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800535c:	4b4f      	ldr	r3, [pc, #316]	@ (800549c <HAL_RCC_GetSysClockFreq+0x180>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005366:	4b4d      	ldr	r3, [pc, #308]	@ (800549c <HAL_RCC_GetSysClockFreq+0x180>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d028      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005372:	4b4a      	ldr	r3, [pc, #296]	@ (800549c <HAL_RCC_GetSysClockFreq+0x180>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	2200      	movs	r2, #0
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	627a      	str	r2, [r7, #36]	@ 0x24
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005384:	2100      	movs	r1, #0
 8005386:	4b47      	ldr	r3, [pc, #284]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005388:	fb03 f201 	mul.w	r2, r3, r1
 800538c:	2300      	movs	r3, #0
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	4413      	add	r3, r2
 8005394:	4a43      	ldr	r2, [pc, #268]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005396:	fba0 1202 	umull	r1, r2, r0, r2
 800539a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800539c:	460a      	mov	r2, r1
 800539e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a2:	4413      	add	r3, r2
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	2200      	movs	r2, #0
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	61fa      	str	r2, [r7, #28]
 80053ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053b6:	f7fb fb89 	bl	8000acc <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4613      	mov	r3, r2
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c2:	e053      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c4:	4b35      	ldr	r3, [pc, #212]	@ (800549c <HAL_RCC_GetSysClockFreq+0x180>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	2200      	movs	r2, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	617a      	str	r2, [r7, #20]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053d6:	f04f 0b00 	mov.w	fp, #0
 80053da:	4652      	mov	r2, sl
 80053dc:	465b      	mov	r3, fp
 80053de:	f04f 0000 	mov.w	r0, #0
 80053e2:	f04f 0100 	mov.w	r1, #0
 80053e6:	0159      	lsls	r1, r3, #5
 80053e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ec:	0150      	lsls	r0, r2, #5
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	ebb2 080a 	subs.w	r8, r2, sl
 80053f6:	eb63 090b 	sbc.w	r9, r3, fp
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005406:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800540a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800540e:	ebb2 0408 	subs.w	r4, r2, r8
 8005412:	eb63 0509 	sbc.w	r5, r3, r9
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	00eb      	lsls	r3, r5, #3
 8005420:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005424:	00e2      	lsls	r2, r4, #3
 8005426:	4614      	mov	r4, r2
 8005428:	461d      	mov	r5, r3
 800542a:	eb14 030a 	adds.w	r3, r4, sl
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	eb45 030b 	adc.w	r3, r5, fp
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005442:	4629      	mov	r1, r5
 8005444:	028b      	lsls	r3, r1, #10
 8005446:	4621      	mov	r1, r4
 8005448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800544c:	4621      	mov	r1, r4
 800544e:	028a      	lsls	r2, r1, #10
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005456:	2200      	movs	r2, #0
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	60fa      	str	r2, [r7, #12]
 800545c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005460:	f7fb fb34 	bl	8000acc <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4613      	mov	r3, r2
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCC_GetSysClockFreq+0x180>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800547c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005486:	e002      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b05      	ldr	r3, [pc, #20]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800548c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005490:	4618      	mov	r0, r3
 8005492:	3740      	adds	r7, #64	@ 0x40
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549a:	bf00      	nop
 800549c:	40023800 	.word	0x40023800
 80054a0:	00f42400 	.word	0x00f42400
 80054a4:	017d7840 	.word	0x017d7840

080054a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054ac:	4b03      	ldr	r3, [pc, #12]	@ (80054bc <HAL_RCC_GetHCLKFreq+0x14>)
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000050 	.word	0x20000050

080054c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054c4:	f7ff fff0 	bl	80054a8 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0a9b      	lsrs	r3, r3, #10
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4903      	ldr	r1, [pc, #12]	@ (80054e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	08008074 	.word	0x08008074

080054e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054ec:	f7ff ffdc 	bl	80054a8 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	0b5b      	lsrs	r3, r3, #13
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4903      	ldr	r1, [pc, #12]	@ (800550c <HAL_RCC_GetPCLK2Freq+0x24>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40023800 	.word	0x40023800
 800550c:	08008074 	.word	0x08008074

08005510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e041      	b.n	80055a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fd fc0e 	bl	8002d58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f000 fb42 	bl	8005bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_PWM_Start_IT+0x28>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e022      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x6e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d109      	bne.n	80055f2 <HAL_TIM_PWM_Start_IT+0x42>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e015      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x6e>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PWM_Start_IT+0x5c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e008      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x6e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0b3      	b.n	800578e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_TIM_PWM_Start_IT+0x86>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005634:	e013      	b.n	800565e <HAL_TIM_PWM_Start_IT+0xae>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d104      	bne.n	8005646 <HAL_TIM_PWM_Start_IT+0x96>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005644:	e00b      	b.n	800565e <HAL_TIM_PWM_Start_IT+0xae>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d104      	bne.n	8005656 <HAL_TIM_PWM_Start_IT+0xa6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005654:	e003      	b.n	800565e <HAL_TIM_PWM_Start_IT+0xae>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d841      	bhi.n	80056e8 <HAL_TIM_PWM_Start_IT+0x138>
 8005664:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <HAL_TIM_PWM_Start_IT+0xbc>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080056e9 	.word	0x080056e9
 8005674:	080056e9 	.word	0x080056e9
 8005678:	080056e9 	.word	0x080056e9
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056e9 	.word	0x080056e9
 8005684:	080056e9 	.word	0x080056e9
 8005688:	080056e9 	.word	0x080056e9
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056e9 	.word	0x080056e9
 8005698:	080056e9 	.word	0x080056e9
 800569c:	080056d7 	.word	0x080056d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0202 	orr.w	r2, r2, #2
 80056ae:	60da      	str	r2, [r3, #12]
      break;
 80056b0:	e01d      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0204 	orr.w	r2, r2, #4
 80056c0:	60da      	str	r2, [r3, #12]
      break;
 80056c2:	e014      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	60da      	str	r2, [r3, #12]
      break;
 80056d4:	e00b      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0210 	orr.w	r2, r2, #16
 80056e4:	60da      	str	r2, [r3, #12]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d14b      	bne.n	800578c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2201      	movs	r2, #1
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fc83 	bl	8006008 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a24      	ldr	r2, [pc, #144]	@ (8005798 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d107      	bne.n	800571c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800571a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572e:	d013      	beq.n	8005758 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a19      	ldr	r2, [pc, #100]	@ (800579c <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_TIM_PWM_Start_IT+0x1a8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a16      	ldr	r2, [pc, #88]	@ (80057a4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIM_PWM_Start_IT+0x1a8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d111      	bne.n	800577c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b06      	cmp	r3, #6
 8005768:	d010      	beq.n	800578c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	e007      	b.n	800578c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00
 80057a8:	40014000 	.word	0x40014000

080057ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e097      	b.n	80058f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d106      	bne.n	80057da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fd fb0d 	bl	8002df4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057f0:	f023 0307 	bic.w	r3, r3, #7
 80057f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	4610      	mov	r0, r2
 8005802:	f000 f9e9 	bl	8005bd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	4313      	orrs	r3, r2
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800584c:	f023 030c 	bic.w	r3, r3, #12
 8005850:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800585c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	4313      	orrs	r3, r2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	011a      	lsls	r2, r3, #4
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	031b      	lsls	r3, r3, #12
 800587c:	4313      	orrs	r3, r2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	4313      	orrs	r3, r2
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005908:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005910:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005918:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005920:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d110      	bne.n	800594a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d102      	bne.n	8005934 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800592e:	7b7b      	ldrb	r3, [r7, #13]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e089      	b.n	8005a4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005948:	e031      	b.n	80059ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d110      	bne.n	8005972 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d102      	bne.n	800595c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005956:	7b3b      	ldrb	r3, [r7, #12]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e075      	b.n	8005a4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005970:	e01d      	b.n	80059ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d108      	bne.n	800598a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800597e:	7b7b      	ldrb	r3, [r7, #13]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d102      	bne.n	800598a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005984:	7b3b      	ldrb	r3, [r7, #12]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d001      	beq.n	800598e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e05e      	b.n	8005a4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_TIM_Encoder_Start_IT+0xc4>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d010      	beq.n	80059dc <HAL_TIM_Encoder_Start_IT+0xe4>
 80059ba:	e01f      	b.n	80059fc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2201      	movs	r2, #1
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fb1f 	bl	8006008 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0202 	orr.w	r2, r2, #2
 80059d8:	60da      	str	r2, [r3, #12]
      break;
 80059da:	e02e      	b.n	8005a3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	2104      	movs	r1, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fb0f 	bl	8006008 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0204 	orr.w	r2, r2, #4
 80059f8:	60da      	str	r2, [r3, #12]
      break;
 80059fa:	e01e      	b.n	8005a3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2201      	movs	r2, #1
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 faff 	bl	8006008 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	2104      	movs	r1, #4
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 faf8 	bl	8006008 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0202 	orr.w	r2, r2, #2
 8005a26:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0204 	orr.w	r2, r2, #4
 8005a36:	60da      	str	r2, [r3, #12]
      break;
 8005a38:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e0ae      	b.n	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	f200 809f 	bhi.w	8005bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a82:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005bc1 	.word	0x08005bc1
 8005a90:	08005bc1 	.word	0x08005bc1
 8005a94:	08005bc1 	.word	0x08005bc1
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005bc1 	.word	0x08005bc1
 8005aa0:	08005bc1 	.word	0x08005bc1
 8005aa4:	08005bc1 	.word	0x08005bc1
 8005aa8:	08005b3f 	.word	0x08005b3f
 8005aac:	08005bc1 	.word	0x08005bc1
 8005ab0:	08005bc1 	.word	0x08005bc1
 8005ab4:	08005bc1 	.word	0x08005bc1
 8005ab8:	08005b7f 	.word	0x08005b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f914 	bl	8005cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0204 	bic.w	r2, r2, #4
 8005ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6999      	ldr	r1, [r3, #24]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	619a      	str	r2, [r3, #24]
      break;
 8005afa:	e064      	b.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f95a 	bl	8005dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6999      	ldr	r1, [r3, #24]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	619a      	str	r2, [r3, #24]
      break;
 8005b3c:	e043      	b.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f9a5 	bl	8005e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0208 	orr.w	r2, r2, #8
 8005b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0204 	bic.w	r2, r2, #4
 8005b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69d9      	ldr	r1, [r3, #28]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	61da      	str	r2, [r3, #28]
      break;
 8005b7c:	e023      	b.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f9ef 	bl	8005f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69d9      	ldr	r1, [r3, #28]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	021a      	lsls	r2, r3, #8
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	61da      	str	r2, [r3, #28]
      break;
 8005bbe:	e002      	b.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3a      	ldr	r2, [pc, #232]	@ (8005cd4 <TIM_Base_SetConfig+0xfc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a37      	ldr	r2, [pc, #220]	@ (8005cd8 <TIM_Base_SetConfig+0x100>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a36      	ldr	r2, [pc, #216]	@ (8005cdc <TIM_Base_SetConfig+0x104>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a35      	ldr	r2, [pc, #212]	@ (8005ce0 <TIM_Base_SetConfig+0x108>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <TIM_Base_SetConfig+0xfc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01b      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c30:	d017      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a28      	ldr	r2, [pc, #160]	@ (8005cd8 <TIM_Base_SetConfig+0x100>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a27      	ldr	r2, [pc, #156]	@ (8005cdc <TIM_Base_SetConfig+0x104>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a26      	ldr	r2, [pc, #152]	@ (8005ce0 <TIM_Base_SetConfig+0x108>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	@ (8005ce4 <TIM_Base_SetConfig+0x10c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a24      	ldr	r2, [pc, #144]	@ (8005ce8 <TIM_Base_SetConfig+0x110>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	@ (8005cec <TIM_Base_SetConfig+0x114>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd4 <TIM_Base_SetConfig+0xfc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d103      	bne.n	8005ca8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d105      	bne.n	8005cc6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40014400 	.word	0x40014400
 8005cec:	40014800 	.word	0x40014800

08005cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	f023 0201 	bic.w	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 0302 	bic.w	r3, r3, #2
 8005d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	@ (8005db8 <TIM_OC1_SetConfig+0xc8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10c      	bne.n	8005d66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0308 	bic.w	r3, r3, #8
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a13      	ldr	r2, [pc, #76]	@ (8005db8 <TIM_OC1_SetConfig+0xc8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40010000 	.word	0x40010000

08005dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f023 0210 	bic.w	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f023 0320 	bic.w	r3, r3, #32
 8005e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1e      	ldr	r2, [pc, #120]	@ (8005e90 <TIM_OC2_SetConfig+0xd4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10d      	bne.n	8005e38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <TIM_OC2_SetConfig+0xd4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d113      	bne.n	8005e68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1d      	ldr	r2, [pc, #116]	@ (8005f64 <TIM_OC3_SetConfig+0xd0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a14      	ldr	r2, [pc, #80]	@ (8005f64 <TIM_OC3_SetConfig+0xd0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d113      	bne.n	8005f3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40010000 	.word	0x40010000

08005f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a10      	ldr	r2, [pc, #64]	@ (8006004 <TIM_OC4_SetConfig+0x9c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d109      	bne.n	8005fdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	019b      	lsls	r3, r3, #6
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000

08006008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2201      	movs	r2, #1
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1a      	ldr	r2, [r3, #32]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	43db      	mvns	r3, r3
 800602a:	401a      	ands	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	fa01 f303 	lsl.w	r3, r1, r3
 8006040:	431a      	orrs	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006068:	2302      	movs	r3, #2
 800606a:	e050      	b.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1c      	ldr	r2, [pc, #112]	@ (800611c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d018      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b8:	d013      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a16      	ldr	r2, [pc, #88]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a13      	ldr	r2, [pc, #76]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d10c      	bne.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40014000 	.word	0x40014000

08006130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006148:	2302      	movs	r3, #2
 800614a:	e03d      	b.n	80061c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e042      	b.n	800626c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fc fefe 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2224      	movs	r2, #36	@ 0x24
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fdbd 	bl	8006d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800622c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800623c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800624c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	@ 0x28
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b20      	cmp	r3, #32
 8006292:	d175      	bne.n	8006380 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_UART_Transmit+0x2c>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e06e      	b.n	8006382 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2221      	movs	r2, #33	@ 0x21
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b2:	f7fd f805 	bl	80032c0 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	88fa      	ldrh	r2, [r7, #6]
 80062c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062cc:	d108      	bne.n	80062e0 <HAL_UART_Transmit+0x6c>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e003      	b.n	80062e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062e8:	e02e      	b.n	8006348 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	2180      	movs	r1, #128	@ 0x80
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fb1f 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e03a      	b.n	8006382 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10b      	bne.n	800632a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	3302      	adds	r3, #2
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e007      	b.n	800633a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	3301      	adds	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1cb      	bne.n	80062ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2200      	movs	r2, #0
 800635a:	2140      	movs	r1, #64	@ 0x40
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 faeb 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e006      	b.n	8006382 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	e000      	b.n	8006382 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006380:	2302      	movs	r3, #2
  }
}
 8006382:	4618      	mov	r0, r3
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	4613      	mov	r3, r2
 8006396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d112      	bne.n	80063ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_UART_Receive_IT+0x26>
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e00b      	b.n	80063cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	461a      	mov	r2, r3
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fb12 	bl	80069ea <UART_Start_Receive_IT>
 80063c6:	4603      	mov	r3, r0
 80063c8:	e000      	b.n	80063cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
  }
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0ba      	sub	sp, #232	@ 0xe8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10f      	bne.n	800643a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_UART_IRQHandler+0x66>
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fbf2 	bl	8006c1c <UART_Receive_IT>
      return;
 8006438:	e25b      	b.n	80068f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800643a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80de 	beq.w	8006600 <HAL_UART_IRQHandler+0x22c>
 8006444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80d1 	beq.w	8006600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800645e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <HAL_UART_IRQHandler+0xae>
 800646a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800646e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647a:	f043 0201 	orr.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <HAL_UART_IRQHandler+0xd2>
 800648e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	f043 0202 	orr.w	r2, r3, #2
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <HAL_UART_IRQHandler+0xf6>
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	f043 0204 	orr.w	r2, r3, #4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d011      	beq.n	80064fa <HAL_UART_IRQHandler+0x126>
 80064d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d105      	bne.n	80064ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f2:	f043 0208 	orr.w	r2, r3, #8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 81f2 	beq.w	80068e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_UART_IRQHandler+0x14e>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fb7d 	bl	8006c1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <HAL_UART_IRQHandler+0x17a>
 8006546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d04f      	beq.n	80065ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa85 	bl	8006a5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655e:	2b40      	cmp	r3, #64	@ 0x40
 8006560:	d141      	bne.n	80065e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800657c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800658e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800659a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1d9      	bne.n	8006562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d013      	beq.n	80065de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	4a7e      	ldr	r2, [pc, #504]	@ (80067b4 <HAL_UART_IRQHandler+0x3e0>)
 80065bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fd f82d 	bl	8003622 <HAL_DMA_Abort_IT>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	e00e      	b.n	80065fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f994 	bl	800690c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e4:	e00a      	b.n	80065fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f990 	bl	800690c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	e006      	b.n	80065fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f98c 	bl	800690c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065fa:	e175      	b.n	80068e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fc:	bf00      	nop
    return;
 80065fe:	e173      	b.n	80068e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006604:	2b01      	cmp	r3, #1
 8006606:	f040 814f 	bne.w	80068a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8148 	beq.w	80068a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8141 	beq.w	80068a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006626:	2300      	movs	r3, #0
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60bb      	str	r3, [r7, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	f040 80b6 	bne.w	80067b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8145 	beq.w	80068ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800666a:	429a      	cmp	r2, r3
 800666c:	f080 813e 	bcs.w	80068ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006676:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006682:	f000 8088 	beq.w	8006796 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800669c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80066b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1d9      	bne.n	8006686 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e1      	bne.n	80066d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3314      	adds	r3, #20
 8006714:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800671e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006732:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006734:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e3      	bne.n	800670e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006766:	f023 0310 	bic.w	r3, r3, #16
 800676a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	330c      	adds	r3, #12
 8006774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006778:	65ba      	str	r2, [r7, #88]	@ 0x58
 800677a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800677e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e3      	bne.n	8006754 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006790:	4618      	mov	r0, r3
 8006792:	f7fc fed6 	bl	8003542 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8b7 	bl	8006920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067b2:	e09b      	b.n	80068ec <HAL_UART_IRQHandler+0x518>
 80067b4:	08006b25 	.word	0x08006b25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 808e 	beq.w	80068f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8089 	beq.w	80068f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006802:	647a      	str	r2, [r7, #68]	@ 0x44
 8006804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e3      	bne.n	80067de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	623b      	str	r3, [r7, #32]
   return(result);
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800683a:	633a      	str	r2, [r7, #48]	@ 0x30
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	60fb      	str	r3, [r7, #12]
   return(result);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0310 	bic.w	r3, r3, #16
 8006872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006880:	61fa      	str	r2, [r7, #28]
 8006882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	617b      	str	r3, [r7, #20]
   return(result);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e3      	bne.n	800685c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800689a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f83d 	bl	8006920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068a6:	e023      	b.n	80068f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <HAL_UART_IRQHandler+0x4f4>
 80068b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f943 	bl	8006b4c <UART_Transmit_IT>
    return;
 80068c6:	e014      	b.n	80068f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00e      	beq.n	80068f2 <HAL_UART_IRQHandler+0x51e>
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f983 	bl	8006bec <UART_EndTransmit_IT>
    return;
 80068e6:	e004      	b.n	80068f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80068f0:	bf00      	nop
  }
}
 80068f2:	37e8      	adds	r7, #232	@ 0xe8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006948:	e03b      	b.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d037      	beq.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006952:	f7fc fcb5 	bl	80032c0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <UART_WaitOnFlagUntilTimeout+0x30>
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e03a      	b.n	80069e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d023      	beq.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b80      	cmp	r3, #128	@ 0x80
 800697e:	d020      	beq.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b40      	cmp	r3, #64	@ 0x40
 8006984:	d01d      	beq.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b08      	cmp	r3, #8
 8006992:	d116      	bne.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f857 	bl	8006a5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2208      	movs	r2, #8
 80069b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e00f      	b.n	80069e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4013      	ands	r3, r2
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	bf0c      	ite	eq
 80069d2:	2301      	moveq	r3, #1
 80069d4:	2300      	movne	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d0b4      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2222      	movs	r2, #34	@ 0x22
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0220 	orr.w	r2, r2, #32
 8006a4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b095      	sub	sp, #84	@ 0x54
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a86:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d119      	bne.n	8006b0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f023 0310 	bic.w	r3, r3, #16
 8006aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006af6:	61ba      	str	r2, [r7, #24]
 8006af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6979      	ldr	r1, [r7, #20]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	613b      	str	r3, [r7, #16]
   return(result);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b18:	bf00      	nop
 8006b1a:	3754      	adds	r7, #84	@ 0x54
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff fee4 	bl	800690c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b21      	cmp	r3, #33	@ 0x21
 8006b5e:	d13e      	bne.n	8006bde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b68:	d114      	bne.n	8006b94 <UART_Transmit_IT+0x48>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	1c9a      	adds	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	621a      	str	r2, [r3, #32]
 8006b92:	e008      	b.n	8006ba6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	1c59      	adds	r1, r3, #1
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6211      	str	r1, [r2, #32]
 8006b9e:	781a      	ldrb	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10f      	bne.n	8006bda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bde:	2302      	movs	r3, #2
  }
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fe73 	bl	80068f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08c      	sub	sp, #48	@ 0x30
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b22      	cmp	r3, #34	@ 0x22
 8006c2e:	f040 80ae 	bne.w	8006d8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c3a:	d117      	bne.n	8006c6c <UART_Receive_IT+0x50>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d113      	bne.n	8006c6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c6a:	e026      	b.n	8006cba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7e:	d007      	beq.n	8006c90 <UART_Receive_IT+0x74>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <UART_Receive_IT+0x82>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d106      	bne.n	8006c9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	e008      	b.n	8006cb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d15d      	bne.n	8006d8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0220 	bic.w	r2, r2, #32
 8006cdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d135      	bne.n	8006d80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f023 0310 	bic.w	r3, r3, #16
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d3a:	623a      	str	r2, [r7, #32]
 8006d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	69f9      	ldr	r1, [r7, #28]
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e5      	bne.n	8006d1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d10a      	bne.n	8006d72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fdd1 	bl	8006920 <HAL_UARTEx_RxEventCallback>
 8006d7e:	e002      	b.n	8006d86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fb f833 	bl	8001dec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	e002      	b.n	8006d90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e000      	b.n	8006d90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d8e:	2302      	movs	r3, #2
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3730      	adds	r7, #48	@ 0x30
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d9c:	b0c0      	sub	sp, #256	@ 0x100
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	68d9      	ldr	r1, [r3, #12]
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	ea40 0301 	orr.w	r3, r0, r1
 8006dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006df0:	f021 010c 	bic.w	r1, r1, #12
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e12:	6999      	ldr	r1, [r3, #24]
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	ea40 0301 	orr.w	r3, r0, r1
 8006e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	4b8f      	ldr	r3, [pc, #572]	@ (8007064 <UART_SetConfig+0x2cc>)
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d005      	beq.n	8006e38 <UART_SetConfig+0xa0>
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b8d      	ldr	r3, [pc, #564]	@ (8007068 <UART_SetConfig+0x2d0>)
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d104      	bne.n	8006e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e38:	f7fe fb56 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 8006e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e40:	e003      	b.n	8006e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e42:	f7fe fb3d 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8006e46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e54:	f040 810c 	bne.w	8007070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	1891      	adds	r1, r2, r2
 8006e70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e72:	415b      	adcs	r3, r3
 8006e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	eb12 0801 	adds.w	r8, r2, r1
 8006e80:	4629      	mov	r1, r5
 8006e82:	eb43 0901 	adc.w	r9, r3, r1
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e9a:	4690      	mov	r8, r2
 8006e9c:	4699      	mov	r9, r3
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	eb18 0303 	adds.w	r3, r8, r3
 8006ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	eb49 0303 	adc.w	r3, r9, r3
 8006eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	18db      	adds	r3, r3, r3
 8006eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ecc:	4613      	mov	r3, r2
 8006ece:	eb42 0303 	adc.w	r3, r2, r3
 8006ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006edc:	f7f9 fdf6 	bl	8000acc <__aeabi_uldivmod>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4b61      	ldr	r3, [pc, #388]	@ (800706c <UART_SetConfig+0x2d4>)
 8006ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	011c      	lsls	r4, r3, #4
 8006eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	1891      	adds	r1, r2, r2
 8006f06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f08:	415b      	adcs	r3, r3
 8006f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f10:	4641      	mov	r1, r8
 8006f12:	eb12 0a01 	adds.w	sl, r2, r1
 8006f16:	4649      	mov	r1, r9
 8006f18:	eb43 0b01 	adc.w	fp, r3, r1
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f30:	4692      	mov	sl, r2
 8006f32:	469b      	mov	fp, r3
 8006f34:	4643      	mov	r3, r8
 8006f36:	eb1a 0303 	adds.w	r3, sl, r3
 8006f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	eb4b 0303 	adc.w	r3, fp, r3
 8006f44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	18db      	adds	r3, r3, r3
 8006f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f62:	4613      	mov	r3, r2
 8006f64:	eb42 0303 	adc.w	r3, r2, r3
 8006f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f72:	f7f9 fdab 	bl	8000acc <__aeabi_uldivmod>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800706c <UART_SetConfig+0x2d4>)
 8006f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	2264      	movs	r2, #100	@ 0x64
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	1acb      	subs	r3, r1, r3
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f92:	4b36      	ldr	r3, [pc, #216]	@ (800706c <UART_SetConfig+0x2d4>)
 8006f94:	fba3 2302 	umull	r2, r3, r3, r2
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fa0:	441c      	add	r4, r3
 8006fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	1891      	adds	r1, r2, r2
 8006fba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fbc:	415b      	adcs	r3, r3
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	1851      	adds	r1, r2, r1
 8006fc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fca:	4649      	mov	r1, r9
 8006fcc:	414b      	adcs	r3, r1
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fdc:	4659      	mov	r1, fp
 8006fde:	00cb      	lsls	r3, r1, #3
 8006fe0:	4651      	mov	r1, sl
 8006fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	00ca      	lsls	r2, r1, #3
 8006fea:	4610      	mov	r0, r2
 8006fec:	4619      	mov	r1, r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	eb42 0303 	adc.w	r3, r2, r3
 8007000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007010:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007018:	460b      	mov	r3, r1
 800701a:	18db      	adds	r3, r3, r3
 800701c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800701e:	4613      	mov	r3, r2
 8007020:	eb42 0303 	adc.w	r3, r2, r3
 8007024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800702a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800702e:	f7f9 fd4d 	bl	8000acc <__aeabi_uldivmod>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4b0d      	ldr	r3, [pc, #52]	@ (800706c <UART_SetConfig+0x2d4>)
 8007038:	fba3 1302 	umull	r1, r3, r3, r2
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	2164      	movs	r1, #100	@ 0x64
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	3332      	adds	r3, #50	@ 0x32
 800704a:	4a08      	ldr	r2, [pc, #32]	@ (800706c <UART_SetConfig+0x2d4>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	f003 0207 	and.w	r2, r3, #7
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4422      	add	r2, r4
 800705e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007060:	e106      	b.n	8007270 <UART_SetConfig+0x4d8>
 8007062:	bf00      	nop
 8007064:	40011000 	.word	0x40011000
 8007068:	40011400 	.word	0x40011400
 800706c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007074:	2200      	movs	r2, #0
 8007076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800707a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800707e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007082:	4642      	mov	r2, r8
 8007084:	464b      	mov	r3, r9
 8007086:	1891      	adds	r1, r2, r2
 8007088:	6239      	str	r1, [r7, #32]
 800708a:	415b      	adcs	r3, r3
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
 800708e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007092:	4641      	mov	r1, r8
 8007094:	1854      	adds	r4, r2, r1
 8007096:	4649      	mov	r1, r9
 8007098:	eb43 0501 	adc.w	r5, r3, r1
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	00eb      	lsls	r3, r5, #3
 80070a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070aa:	00e2      	lsls	r2, r4, #3
 80070ac:	4614      	mov	r4, r2
 80070ae:	461d      	mov	r5, r3
 80070b0:	4643      	mov	r3, r8
 80070b2:	18e3      	adds	r3, r4, r3
 80070b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070b8:	464b      	mov	r3, r9
 80070ba:	eb45 0303 	adc.w	r3, r5, r3
 80070be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070de:	4629      	mov	r1, r5
 80070e0:	008b      	lsls	r3, r1, #2
 80070e2:	4621      	mov	r1, r4
 80070e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070e8:	4621      	mov	r1, r4
 80070ea:	008a      	lsls	r2, r1, #2
 80070ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070f0:	f7f9 fcec 	bl	8000acc <__aeabi_uldivmod>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4b60      	ldr	r3, [pc, #384]	@ (800727c <UART_SetConfig+0x4e4>)
 80070fa:	fba3 2302 	umull	r2, r3, r3, r2
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	011c      	lsls	r4, r3, #4
 8007102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007106:	2200      	movs	r2, #0
 8007108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800710c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	1891      	adds	r1, r2, r2
 800711a:	61b9      	str	r1, [r7, #24]
 800711c:	415b      	adcs	r3, r3
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007124:	4641      	mov	r1, r8
 8007126:	1851      	adds	r1, r2, r1
 8007128:	6139      	str	r1, [r7, #16]
 800712a:	4649      	mov	r1, r9
 800712c:	414b      	adcs	r3, r1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800713c:	4659      	mov	r1, fp
 800713e:	00cb      	lsls	r3, r1, #3
 8007140:	4651      	mov	r1, sl
 8007142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007146:	4651      	mov	r1, sl
 8007148:	00ca      	lsls	r2, r1, #3
 800714a:	4610      	mov	r0, r2
 800714c:	4619      	mov	r1, r3
 800714e:	4603      	mov	r3, r0
 8007150:	4642      	mov	r2, r8
 8007152:	189b      	adds	r3, r3, r2
 8007154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007158:	464b      	mov	r3, r9
 800715a:	460a      	mov	r2, r1
 800715c:	eb42 0303 	adc.w	r3, r2, r3
 8007160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800716e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800717c:	4649      	mov	r1, r9
 800717e:	008b      	lsls	r3, r1, #2
 8007180:	4641      	mov	r1, r8
 8007182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007186:	4641      	mov	r1, r8
 8007188:	008a      	lsls	r2, r1, #2
 800718a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800718e:	f7f9 fc9d 	bl	8000acc <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4611      	mov	r1, r2
 8007198:	4b38      	ldr	r3, [pc, #224]	@ (800727c <UART_SetConfig+0x4e4>)
 800719a:	fba3 2301 	umull	r2, r3, r3, r1
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2264      	movs	r2, #100	@ 0x64
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	1acb      	subs	r3, r1, r3
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	3332      	adds	r3, #50	@ 0x32
 80071ac:	4a33      	ldr	r2, [pc, #204]	@ (800727c <UART_SetConfig+0x4e4>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071b8:	441c      	add	r4, r3
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80071c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80071c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071c8:	4642      	mov	r2, r8
 80071ca:	464b      	mov	r3, r9
 80071cc:	1891      	adds	r1, r2, r2
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	415b      	adcs	r3, r3
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071d8:	4641      	mov	r1, r8
 80071da:	1851      	adds	r1, r2, r1
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	4649      	mov	r1, r9
 80071e0:	414b      	adcs	r3, r1
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071f0:	4659      	mov	r1, fp
 80071f2:	00cb      	lsls	r3, r1, #3
 80071f4:	4651      	mov	r1, sl
 80071f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fa:	4651      	mov	r1, sl
 80071fc:	00ca      	lsls	r2, r1, #3
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	4603      	mov	r3, r0
 8007204:	4642      	mov	r2, r8
 8007206:	189b      	adds	r3, r3, r2
 8007208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800720a:	464b      	mov	r3, r9
 800720c:	460a      	mov	r2, r1
 800720e:	eb42 0303 	adc.w	r3, r2, r3
 8007212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	663b      	str	r3, [r7, #96]	@ 0x60
 800721e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800722c:	4649      	mov	r1, r9
 800722e:	008b      	lsls	r3, r1, #2
 8007230:	4641      	mov	r1, r8
 8007232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007236:	4641      	mov	r1, r8
 8007238:	008a      	lsls	r2, r1, #2
 800723a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800723e:	f7f9 fc45 	bl	8000acc <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <UART_SetConfig+0x4e4>)
 8007248:	fba3 1302 	umull	r1, r3, r3, r2
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2164      	movs	r1, #100	@ 0x64
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	3332      	adds	r3, #50	@ 0x32
 800725a:	4a08      	ldr	r2, [pc, #32]	@ (800727c <UART_SetConfig+0x4e4>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f003 020f 	and.w	r2, r3, #15
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4422      	add	r2, r4
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007276:	46bd      	mov	sp, r7
 8007278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800727c:	51eb851f 	.word	0x51eb851f

08007280 <_strtol_l.isra.0>:
 8007280:	2b24      	cmp	r3, #36	@ 0x24
 8007282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007286:	4686      	mov	lr, r0
 8007288:	4690      	mov	r8, r2
 800728a:	d801      	bhi.n	8007290 <_strtol_l.isra.0+0x10>
 800728c:	2b01      	cmp	r3, #1
 800728e:	d106      	bne.n	800729e <_strtol_l.isra.0+0x1e>
 8007290:	f000 f8c0 	bl	8007414 <__errno>
 8007294:	2316      	movs	r3, #22
 8007296:	6003      	str	r3, [r0, #0]
 8007298:	2000      	movs	r0, #0
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	4834      	ldr	r0, [pc, #208]	@ (8007370 <_strtol_l.isra.0+0xf0>)
 80072a0:	460d      	mov	r5, r1
 80072a2:	462a      	mov	r2, r5
 80072a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072a8:	5d06      	ldrb	r6, [r0, r4]
 80072aa:	f016 0608 	ands.w	r6, r6, #8
 80072ae:	d1f8      	bne.n	80072a2 <_strtol_l.isra.0+0x22>
 80072b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80072b2:	d110      	bne.n	80072d6 <_strtol_l.isra.0+0x56>
 80072b4:	782c      	ldrb	r4, [r5, #0]
 80072b6:	2601      	movs	r6, #1
 80072b8:	1c95      	adds	r5, r2, #2
 80072ba:	f033 0210 	bics.w	r2, r3, #16
 80072be:	d115      	bne.n	80072ec <_strtol_l.isra.0+0x6c>
 80072c0:	2c30      	cmp	r4, #48	@ 0x30
 80072c2:	d10d      	bne.n	80072e0 <_strtol_l.isra.0+0x60>
 80072c4:	782a      	ldrb	r2, [r5, #0]
 80072c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072ca:	2a58      	cmp	r2, #88	@ 0x58
 80072cc:	d108      	bne.n	80072e0 <_strtol_l.isra.0+0x60>
 80072ce:	786c      	ldrb	r4, [r5, #1]
 80072d0:	3502      	adds	r5, #2
 80072d2:	2310      	movs	r3, #16
 80072d4:	e00a      	b.n	80072ec <_strtol_l.isra.0+0x6c>
 80072d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80072d8:	bf04      	itt	eq
 80072da:	782c      	ldrbeq	r4, [r5, #0]
 80072dc:	1c95      	addeq	r5, r2, #2
 80072de:	e7ec      	b.n	80072ba <_strtol_l.isra.0+0x3a>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f6      	bne.n	80072d2 <_strtol_l.isra.0+0x52>
 80072e4:	2c30      	cmp	r4, #48	@ 0x30
 80072e6:	bf14      	ite	ne
 80072e8:	230a      	movne	r3, #10
 80072ea:	2308      	moveq	r3, #8
 80072ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072f4:	2200      	movs	r2, #0
 80072f6:	fbbc f9f3 	udiv	r9, ip, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007300:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007304:	2f09      	cmp	r7, #9
 8007306:	d80f      	bhi.n	8007328 <_strtol_l.isra.0+0xa8>
 8007308:	463c      	mov	r4, r7
 800730a:	42a3      	cmp	r3, r4
 800730c:	dd1b      	ble.n	8007346 <_strtol_l.isra.0+0xc6>
 800730e:	1c57      	adds	r7, r2, #1
 8007310:	d007      	beq.n	8007322 <_strtol_l.isra.0+0xa2>
 8007312:	4581      	cmp	r9, r0
 8007314:	d314      	bcc.n	8007340 <_strtol_l.isra.0+0xc0>
 8007316:	d101      	bne.n	800731c <_strtol_l.isra.0+0x9c>
 8007318:	45a2      	cmp	sl, r4
 800731a:	db11      	blt.n	8007340 <_strtol_l.isra.0+0xc0>
 800731c:	fb00 4003 	mla	r0, r0, r3, r4
 8007320:	2201      	movs	r2, #1
 8007322:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007326:	e7eb      	b.n	8007300 <_strtol_l.isra.0+0x80>
 8007328:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800732c:	2f19      	cmp	r7, #25
 800732e:	d801      	bhi.n	8007334 <_strtol_l.isra.0+0xb4>
 8007330:	3c37      	subs	r4, #55	@ 0x37
 8007332:	e7ea      	b.n	800730a <_strtol_l.isra.0+0x8a>
 8007334:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007338:	2f19      	cmp	r7, #25
 800733a:	d804      	bhi.n	8007346 <_strtol_l.isra.0+0xc6>
 800733c:	3c57      	subs	r4, #87	@ 0x57
 800733e:	e7e4      	b.n	800730a <_strtol_l.isra.0+0x8a>
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	e7ed      	b.n	8007322 <_strtol_l.isra.0+0xa2>
 8007346:	1c53      	adds	r3, r2, #1
 8007348:	d108      	bne.n	800735c <_strtol_l.isra.0+0xdc>
 800734a:	2322      	movs	r3, #34	@ 0x22
 800734c:	f8ce 3000 	str.w	r3, [lr]
 8007350:	4660      	mov	r0, ip
 8007352:	f1b8 0f00 	cmp.w	r8, #0
 8007356:	d0a0      	beq.n	800729a <_strtol_l.isra.0+0x1a>
 8007358:	1e69      	subs	r1, r5, #1
 800735a:	e006      	b.n	800736a <_strtol_l.isra.0+0xea>
 800735c:	b106      	cbz	r6, 8007360 <_strtol_l.isra.0+0xe0>
 800735e:	4240      	negs	r0, r0
 8007360:	f1b8 0f00 	cmp.w	r8, #0
 8007364:	d099      	beq.n	800729a <_strtol_l.isra.0+0x1a>
 8007366:	2a00      	cmp	r2, #0
 8007368:	d1f6      	bne.n	8007358 <_strtol_l.isra.0+0xd8>
 800736a:	f8c8 1000 	str.w	r1, [r8]
 800736e:	e794      	b.n	800729a <_strtol_l.isra.0+0x1a>
 8007370:	0800807d 	.word	0x0800807d

08007374 <strtol>:
 8007374:	4613      	mov	r3, r2
 8007376:	460a      	mov	r2, r1
 8007378:	4601      	mov	r1, r0
 800737a:	4802      	ldr	r0, [pc, #8]	@ (8007384 <strtol+0x10>)
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f7ff bf7f 	b.w	8007280 <_strtol_l.isra.0>
 8007382:	bf00      	nop
 8007384:	2000005c 	.word	0x2000005c

08007388 <toupper>:
 8007388:	4b03      	ldr	r3, [pc, #12]	@ (8007398 <toupper+0x10>)
 800738a:	5c1b      	ldrb	r3, [r3, r0]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b02      	cmp	r3, #2
 8007392:	bf08      	it	eq
 8007394:	3820      	subeq	r0, #32
 8007396:	4770      	bx	lr
 8007398:	0800807d 	.word	0x0800807d

0800739c <siprintf>:
 800739c:	b40e      	push	{r1, r2, r3}
 800739e:	b510      	push	{r4, lr}
 80073a0:	b09d      	sub	sp, #116	@ 0x74
 80073a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80073a4:	9002      	str	r0, [sp, #8]
 80073a6:	9006      	str	r0, [sp, #24]
 80073a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073ac:	480a      	ldr	r0, [pc, #40]	@ (80073d8 <siprintf+0x3c>)
 80073ae:	9107      	str	r1, [sp, #28]
 80073b0:	9104      	str	r1, [sp, #16]
 80073b2:	490a      	ldr	r1, [pc, #40]	@ (80073dc <siprintf+0x40>)
 80073b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b8:	9105      	str	r1, [sp, #20]
 80073ba:	2400      	movs	r4, #0
 80073bc:	a902      	add	r1, sp, #8
 80073be:	6800      	ldr	r0, [r0, #0]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80073c4:	f000 f9b4 	bl	8007730 <_svfiprintf_r>
 80073c8:	9b02      	ldr	r3, [sp, #8]
 80073ca:	701c      	strb	r4, [r3, #0]
 80073cc:	b01d      	add	sp, #116	@ 0x74
 80073ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d2:	b003      	add	sp, #12
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	2000005c 	.word	0x2000005c
 80073dc:	ffff0208 	.word	0xffff0208

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <strncmp>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	b16a      	cbz	r2, 8007410 <strncmp+0x20>
 80073f4:	3901      	subs	r1, #1
 80073f6:	1884      	adds	r4, r0, r2
 80073f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007400:	429a      	cmp	r2, r3
 8007402:	d103      	bne.n	800740c <strncmp+0x1c>
 8007404:	42a0      	cmp	r0, r4
 8007406:	d001      	beq.n	800740c <strncmp+0x1c>
 8007408:	2a00      	cmp	r2, #0
 800740a:	d1f5      	bne.n	80073f8 <strncmp+0x8>
 800740c:	1ad0      	subs	r0, r2, r3
 800740e:	bd10      	pop	{r4, pc}
 8007410:	4610      	mov	r0, r2
 8007412:	e7fc      	b.n	800740e <strncmp+0x1e>

08007414 <__errno>:
 8007414:	4b01      	ldr	r3, [pc, #4]	@ (800741c <__errno+0x8>)
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	2000005c 	.word	0x2000005c

08007420 <__libc_init_array>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4d0d      	ldr	r5, [pc, #52]	@ (8007458 <__libc_init_array+0x38>)
 8007424:	4c0d      	ldr	r4, [pc, #52]	@ (800745c <__libc_init_array+0x3c>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	2600      	movs	r6, #0
 800742c:	42a6      	cmp	r6, r4
 800742e:	d109      	bne.n	8007444 <__libc_init_array+0x24>
 8007430:	4d0b      	ldr	r5, [pc, #44]	@ (8007460 <__libc_init_array+0x40>)
 8007432:	4c0c      	ldr	r4, [pc, #48]	@ (8007464 <__libc_init_array+0x44>)
 8007434:	f000 fc64 	bl	8007d00 <_init>
 8007438:	1b64      	subs	r4, r4, r5
 800743a:	10a4      	asrs	r4, r4, #2
 800743c:	2600      	movs	r6, #0
 800743e:	42a6      	cmp	r6, r4
 8007440:	d105      	bne.n	800744e <__libc_init_array+0x2e>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	f855 3b04 	ldr.w	r3, [r5], #4
 8007448:	4798      	blx	r3
 800744a:	3601      	adds	r6, #1
 800744c:	e7ee      	b.n	800742c <__libc_init_array+0xc>
 800744e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007452:	4798      	blx	r3
 8007454:	3601      	adds	r6, #1
 8007456:	e7f2      	b.n	800743e <__libc_init_array+0x1e>
 8007458:	080081b8 	.word	0x080081b8
 800745c:	080081b8 	.word	0x080081b8
 8007460:	080081b8 	.word	0x080081b8
 8007464:	080081c0 	.word	0x080081c0

08007468 <__retarget_lock_acquire_recursive>:
 8007468:	4770      	bx	lr

0800746a <__retarget_lock_release_recursive>:
 800746a:	4770      	bx	lr

0800746c <memcpy>:
 800746c:	440a      	add	r2, r1
 800746e:	4291      	cmp	r1, r2
 8007470:	f100 33ff 	add.w	r3, r0, #4294967295
 8007474:	d100      	bne.n	8007478 <memcpy+0xc>
 8007476:	4770      	bx	lr
 8007478:	b510      	push	{r4, lr}
 800747a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800747e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007482:	4291      	cmp	r1, r2
 8007484:	d1f9      	bne.n	800747a <memcpy+0xe>
 8007486:	bd10      	pop	{r4, pc}

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d041      	beq.n	8007514 <_free_r+0x8c>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 f8e0 	bl	8007660 <__malloc_lock>
 80074a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007518 <_free_r+0x90>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	b933      	cbnz	r3, 80074b4 <_free_r+0x2c>
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b0:	f000 b8dc 	b.w	800766c <__malloc_unlock>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d908      	bls.n	80074ca <_free_r+0x42>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf01      	itttt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	e7ed      	b.n	80074a6 <_free_r+0x1e>
 80074ca:	461a      	mov	r2, r3
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b10b      	cbz	r3, 80074d4 <_free_r+0x4c>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x42>
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	1850      	adds	r0, r2, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x6c>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1850      	adds	r0, r2, r1
 80074e2:	4283      	cmp	r3, r0
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	d1e0      	bne.n	80074aa <_free_r+0x22>
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	6053      	str	r3, [r2, #4]
 80074ee:	4408      	add	r0, r1
 80074f0:	6010      	str	r0, [r2, #0]
 80074f2:	e7da      	b.n	80074aa <_free_r+0x22>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x74>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d6      	b.n	80074aa <_free_r+0x22>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf04      	itt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	6063      	str	r3, [r4, #4]
 800750a:	bf04      	itt	eq
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	6054      	str	r4, [r2, #4]
 8007512:	e7ca      	b.n	80074aa <_free_r+0x22>
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	20000588 	.word	0x20000588

0800751c <sbrk_aligned>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4e0f      	ldr	r6, [pc, #60]	@ (800755c <sbrk_aligned+0x40>)
 8007520:	460c      	mov	r4, r1
 8007522:	6831      	ldr	r1, [r6, #0]
 8007524:	4605      	mov	r5, r0
 8007526:	b911      	cbnz	r1, 800752e <sbrk_aligned+0x12>
 8007528:	f000 fba4 	bl	8007c74 <_sbrk_r>
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 fb9f 	bl	8007c74 <_sbrk_r>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d103      	bne.n	8007542 <sbrk_aligned+0x26>
 800753a:	f04f 34ff 	mov.w	r4, #4294967295
 800753e:	4620      	mov	r0, r4
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	1cc4      	adds	r4, r0, #3
 8007544:	f024 0403 	bic.w	r4, r4, #3
 8007548:	42a0      	cmp	r0, r4
 800754a:	d0f8      	beq.n	800753e <sbrk_aligned+0x22>
 800754c:	1a21      	subs	r1, r4, r0
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fb90 	bl	8007c74 <_sbrk_r>
 8007554:	3001      	adds	r0, #1
 8007556:	d1f2      	bne.n	800753e <sbrk_aligned+0x22>
 8007558:	e7ef      	b.n	800753a <sbrk_aligned+0x1e>
 800755a:	bf00      	nop
 800755c:	20000584 	.word	0x20000584

08007560 <_malloc_r>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	1ccd      	adds	r5, r1, #3
 8007566:	f025 0503 	bic.w	r5, r5, #3
 800756a:	3508      	adds	r5, #8
 800756c:	2d0c      	cmp	r5, #12
 800756e:	bf38      	it	cc
 8007570:	250c      	movcc	r5, #12
 8007572:	2d00      	cmp	r5, #0
 8007574:	4606      	mov	r6, r0
 8007576:	db01      	blt.n	800757c <_malloc_r+0x1c>
 8007578:	42a9      	cmp	r1, r5
 800757a:	d904      	bls.n	8007586 <_malloc_r+0x26>
 800757c:	230c      	movs	r3, #12
 800757e:	6033      	str	r3, [r6, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007586:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800765c <_malloc_r+0xfc>
 800758a:	f000 f869 	bl	8007660 <__malloc_lock>
 800758e:	f8d8 3000 	ldr.w	r3, [r8]
 8007592:	461c      	mov	r4, r3
 8007594:	bb44      	cbnz	r4, 80075e8 <_malloc_r+0x88>
 8007596:	4629      	mov	r1, r5
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ffbf 	bl	800751c <sbrk_aligned>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	4604      	mov	r4, r0
 80075a2:	d158      	bne.n	8007656 <_malloc_r+0xf6>
 80075a4:	f8d8 4000 	ldr.w	r4, [r8]
 80075a8:	4627      	mov	r7, r4
 80075aa:	2f00      	cmp	r7, #0
 80075ac:	d143      	bne.n	8007636 <_malloc_r+0xd6>
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	d04b      	beq.n	800764a <_malloc_r+0xea>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	4639      	mov	r1, r7
 80075b6:	4630      	mov	r0, r6
 80075b8:	eb04 0903 	add.w	r9, r4, r3
 80075bc:	f000 fb5a 	bl	8007c74 <_sbrk_r>
 80075c0:	4581      	cmp	r9, r0
 80075c2:	d142      	bne.n	800764a <_malloc_r+0xea>
 80075c4:	6821      	ldr	r1, [r4, #0]
 80075c6:	1a6d      	subs	r5, r5, r1
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ffa6 	bl	800751c <sbrk_aligned>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d03a      	beq.n	800764a <_malloc_r+0xea>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	442b      	add	r3, r5
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	f8d8 3000 	ldr.w	r3, [r8]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	bb62      	cbnz	r2, 800763c <_malloc_r+0xdc>
 80075e2:	f8c8 7000 	str.w	r7, [r8]
 80075e6:	e00f      	b.n	8007608 <_malloc_r+0xa8>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	1b52      	subs	r2, r2, r5
 80075ec:	d420      	bmi.n	8007630 <_malloc_r+0xd0>
 80075ee:	2a0b      	cmp	r2, #11
 80075f0:	d917      	bls.n	8007622 <_malloc_r+0xc2>
 80075f2:	1961      	adds	r1, r4, r5
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	6025      	str	r5, [r4, #0]
 80075f8:	bf18      	it	ne
 80075fa:	6059      	strne	r1, [r3, #4]
 80075fc:	6863      	ldr	r3, [r4, #4]
 80075fe:	bf08      	it	eq
 8007600:	f8c8 1000 	streq.w	r1, [r8]
 8007604:	5162      	str	r2, [r4, r5]
 8007606:	604b      	str	r3, [r1, #4]
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f82f 	bl	800766c <__malloc_unlock>
 800760e:	f104 000b 	add.w	r0, r4, #11
 8007612:	1d23      	adds	r3, r4, #4
 8007614:	f020 0007 	bic.w	r0, r0, #7
 8007618:	1ac2      	subs	r2, r0, r3
 800761a:	bf1c      	itt	ne
 800761c:	1a1b      	subne	r3, r3, r0
 800761e:	50a3      	strne	r3, [r4, r2]
 8007620:	e7af      	b.n	8007582 <_malloc_r+0x22>
 8007622:	6862      	ldr	r2, [r4, #4]
 8007624:	42a3      	cmp	r3, r4
 8007626:	bf0c      	ite	eq
 8007628:	f8c8 2000 	streq.w	r2, [r8]
 800762c:	605a      	strne	r2, [r3, #4]
 800762e:	e7eb      	b.n	8007608 <_malloc_r+0xa8>
 8007630:	4623      	mov	r3, r4
 8007632:	6864      	ldr	r4, [r4, #4]
 8007634:	e7ae      	b.n	8007594 <_malloc_r+0x34>
 8007636:	463c      	mov	r4, r7
 8007638:	687f      	ldr	r7, [r7, #4]
 800763a:	e7b6      	b.n	80075aa <_malloc_r+0x4a>
 800763c:	461a      	mov	r2, r3
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	42a3      	cmp	r3, r4
 8007642:	d1fb      	bne.n	800763c <_malloc_r+0xdc>
 8007644:	2300      	movs	r3, #0
 8007646:	6053      	str	r3, [r2, #4]
 8007648:	e7de      	b.n	8007608 <_malloc_r+0xa8>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	4630      	mov	r0, r6
 8007650:	f000 f80c 	bl	800766c <__malloc_unlock>
 8007654:	e794      	b.n	8007580 <_malloc_r+0x20>
 8007656:	6005      	str	r5, [r0, #0]
 8007658:	e7d6      	b.n	8007608 <_malloc_r+0xa8>
 800765a:	bf00      	nop
 800765c:	20000588 	.word	0x20000588

08007660 <__malloc_lock>:
 8007660:	4801      	ldr	r0, [pc, #4]	@ (8007668 <__malloc_lock+0x8>)
 8007662:	f7ff bf01 	b.w	8007468 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20000580 	.word	0x20000580

0800766c <__malloc_unlock>:
 800766c:	4801      	ldr	r0, [pc, #4]	@ (8007674 <__malloc_unlock+0x8>)
 800766e:	f7ff befc 	b.w	800746a <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20000580 	.word	0x20000580

08007678 <__ssputs_r>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	688e      	ldr	r6, [r1, #8]
 800767e:	461f      	mov	r7, r3
 8007680:	42be      	cmp	r6, r7
 8007682:	680b      	ldr	r3, [r1, #0]
 8007684:	4682      	mov	sl, r0
 8007686:	460c      	mov	r4, r1
 8007688:	4690      	mov	r8, r2
 800768a:	d82d      	bhi.n	80076e8 <__ssputs_r+0x70>
 800768c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007690:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007694:	d026      	beq.n	80076e4 <__ssputs_r+0x6c>
 8007696:	6965      	ldr	r5, [r4, #20]
 8007698:	6909      	ldr	r1, [r1, #16]
 800769a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800769e:	eba3 0901 	sub.w	r9, r3, r1
 80076a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076a6:	1c7b      	adds	r3, r7, #1
 80076a8:	444b      	add	r3, r9
 80076aa:	106d      	asrs	r5, r5, #1
 80076ac:	429d      	cmp	r5, r3
 80076ae:	bf38      	it	cc
 80076b0:	461d      	movcc	r5, r3
 80076b2:	0553      	lsls	r3, r2, #21
 80076b4:	d527      	bpl.n	8007706 <__ssputs_r+0x8e>
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7ff ff52 	bl	8007560 <_malloc_r>
 80076bc:	4606      	mov	r6, r0
 80076be:	b360      	cbz	r0, 800771a <__ssputs_r+0xa2>
 80076c0:	6921      	ldr	r1, [r4, #16]
 80076c2:	464a      	mov	r2, r9
 80076c4:	f7ff fed2 	bl	800746c <memcpy>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	6126      	str	r6, [r4, #16]
 80076d6:	6165      	str	r5, [r4, #20]
 80076d8:	444e      	add	r6, r9
 80076da:	eba5 0509 	sub.w	r5, r5, r9
 80076de:	6026      	str	r6, [r4, #0]
 80076e0:	60a5      	str	r5, [r4, #8]
 80076e2:	463e      	mov	r6, r7
 80076e4:	42be      	cmp	r6, r7
 80076e6:	d900      	bls.n	80076ea <__ssputs_r+0x72>
 80076e8:	463e      	mov	r6, r7
 80076ea:	6820      	ldr	r0, [r4, #0]
 80076ec:	4632      	mov	r2, r6
 80076ee:	4641      	mov	r1, r8
 80076f0:	f000 faa6 	bl	8007c40 <memmove>
 80076f4:	68a3      	ldr	r3, [r4, #8]
 80076f6:	1b9b      	subs	r3, r3, r6
 80076f8:	60a3      	str	r3, [r4, #8]
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	4433      	add	r3, r6
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	2000      	movs	r0, #0
 8007702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007706:	462a      	mov	r2, r5
 8007708:	f000 fac4 	bl	8007c94 <_realloc_r>
 800770c:	4606      	mov	r6, r0
 800770e:	2800      	cmp	r0, #0
 8007710:	d1e0      	bne.n	80076d4 <__ssputs_r+0x5c>
 8007712:	6921      	ldr	r1, [r4, #16]
 8007714:	4650      	mov	r0, sl
 8007716:	f7ff feb7 	bl	8007488 <_free_r>
 800771a:	230c      	movs	r3, #12
 800771c:	f8ca 3000 	str.w	r3, [sl]
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007726:	81a3      	strh	r3, [r4, #12]
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e7e9      	b.n	8007702 <__ssputs_r+0x8a>
	...

08007730 <_svfiprintf_r>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	4698      	mov	r8, r3
 8007736:	898b      	ldrh	r3, [r1, #12]
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	b09d      	sub	sp, #116	@ 0x74
 800773c:	4607      	mov	r7, r0
 800773e:	460d      	mov	r5, r1
 8007740:	4614      	mov	r4, r2
 8007742:	d510      	bpl.n	8007766 <_svfiprintf_r+0x36>
 8007744:	690b      	ldr	r3, [r1, #16]
 8007746:	b973      	cbnz	r3, 8007766 <_svfiprintf_r+0x36>
 8007748:	2140      	movs	r1, #64	@ 0x40
 800774a:	f7ff ff09 	bl	8007560 <_malloc_r>
 800774e:	6028      	str	r0, [r5, #0]
 8007750:	6128      	str	r0, [r5, #16]
 8007752:	b930      	cbnz	r0, 8007762 <_svfiprintf_r+0x32>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	b01d      	add	sp, #116	@ 0x74
 800775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007762:	2340      	movs	r3, #64	@ 0x40
 8007764:	616b      	str	r3, [r5, #20]
 8007766:	2300      	movs	r3, #0
 8007768:	9309      	str	r3, [sp, #36]	@ 0x24
 800776a:	2320      	movs	r3, #32
 800776c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007770:	f8cd 800c 	str.w	r8, [sp, #12]
 8007774:	2330      	movs	r3, #48	@ 0x30
 8007776:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007914 <_svfiprintf_r+0x1e4>
 800777a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800777e:	f04f 0901 	mov.w	r9, #1
 8007782:	4623      	mov	r3, r4
 8007784:	469a      	mov	sl, r3
 8007786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778a:	b10a      	cbz	r2, 8007790 <_svfiprintf_r+0x60>
 800778c:	2a25      	cmp	r2, #37	@ 0x25
 800778e:	d1f9      	bne.n	8007784 <_svfiprintf_r+0x54>
 8007790:	ebba 0b04 	subs.w	fp, sl, r4
 8007794:	d00b      	beq.n	80077ae <_svfiprintf_r+0x7e>
 8007796:	465b      	mov	r3, fp
 8007798:	4622      	mov	r2, r4
 800779a:	4629      	mov	r1, r5
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff ff6b 	bl	8007678 <__ssputs_r>
 80077a2:	3001      	adds	r0, #1
 80077a4:	f000 80a7 	beq.w	80078f6 <_svfiprintf_r+0x1c6>
 80077a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077aa:	445a      	add	r2, fp
 80077ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80077ae:	f89a 3000 	ldrb.w	r3, [sl]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 809f 	beq.w	80078f6 <_svfiprintf_r+0x1c6>
 80077b8:	2300      	movs	r3, #0
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295
 80077be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c2:	f10a 0a01 	add.w	sl, sl, #1
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80077d0:	4654      	mov	r4, sl
 80077d2:	2205      	movs	r2, #5
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	484e      	ldr	r0, [pc, #312]	@ (8007914 <_svfiprintf_r+0x1e4>)
 80077da:	f7f8 fd09 	bl	80001f0 <memchr>
 80077de:	9a04      	ldr	r2, [sp, #16]
 80077e0:	b9d8      	cbnz	r0, 800781a <_svfiprintf_r+0xea>
 80077e2:	06d0      	lsls	r0, r2, #27
 80077e4:	bf44      	itt	mi
 80077e6:	2320      	movmi	r3, #32
 80077e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ec:	0711      	lsls	r1, r2, #28
 80077ee:	bf44      	itt	mi
 80077f0:	232b      	movmi	r3, #43	@ 0x2b
 80077f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077f6:	f89a 3000 	ldrb.w	r3, [sl]
 80077fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fc:	d015      	beq.n	800782a <_svfiprintf_r+0xfa>
 80077fe:	9a07      	ldr	r2, [sp, #28]
 8007800:	4654      	mov	r4, sl
 8007802:	2000      	movs	r0, #0
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	4621      	mov	r1, r4
 800780a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800780e:	3b30      	subs	r3, #48	@ 0x30
 8007810:	2b09      	cmp	r3, #9
 8007812:	d94b      	bls.n	80078ac <_svfiprintf_r+0x17c>
 8007814:	b1b0      	cbz	r0, 8007844 <_svfiprintf_r+0x114>
 8007816:	9207      	str	r2, [sp, #28]
 8007818:	e014      	b.n	8007844 <_svfiprintf_r+0x114>
 800781a:	eba0 0308 	sub.w	r3, r0, r8
 800781e:	fa09 f303 	lsl.w	r3, r9, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	46a2      	mov	sl, r4
 8007828:	e7d2      	b.n	80077d0 <_svfiprintf_r+0xa0>
 800782a:	9b03      	ldr	r3, [sp, #12]
 800782c:	1d19      	adds	r1, r3, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	9103      	str	r1, [sp, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfbb      	ittet	lt
 8007836:	425b      	neglt	r3, r3
 8007838:	f042 0202 	orrlt.w	r2, r2, #2
 800783c:	9307      	strge	r3, [sp, #28]
 800783e:	9307      	strlt	r3, [sp, #28]
 8007840:	bfb8      	it	lt
 8007842:	9204      	strlt	r2, [sp, #16]
 8007844:	7823      	ldrb	r3, [r4, #0]
 8007846:	2b2e      	cmp	r3, #46	@ 0x2e
 8007848:	d10a      	bne.n	8007860 <_svfiprintf_r+0x130>
 800784a:	7863      	ldrb	r3, [r4, #1]
 800784c:	2b2a      	cmp	r3, #42	@ 0x2a
 800784e:	d132      	bne.n	80078b6 <_svfiprintf_r+0x186>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	1d1a      	adds	r2, r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	9203      	str	r2, [sp, #12]
 8007858:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800785c:	3402      	adds	r4, #2
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007924 <_svfiprintf_r+0x1f4>
 8007864:	7821      	ldrb	r1, [r4, #0]
 8007866:	2203      	movs	r2, #3
 8007868:	4650      	mov	r0, sl
 800786a:	f7f8 fcc1 	bl	80001f0 <memchr>
 800786e:	b138      	cbz	r0, 8007880 <_svfiprintf_r+0x150>
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	eba0 000a 	sub.w	r0, r0, sl
 8007876:	2240      	movs	r2, #64	@ 0x40
 8007878:	4082      	lsls	r2, r0
 800787a:	4313      	orrs	r3, r2
 800787c:	3401      	adds	r4, #1
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007884:	4824      	ldr	r0, [pc, #144]	@ (8007918 <_svfiprintf_r+0x1e8>)
 8007886:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800788a:	2206      	movs	r2, #6
 800788c:	f7f8 fcb0 	bl	80001f0 <memchr>
 8007890:	2800      	cmp	r0, #0
 8007892:	d036      	beq.n	8007902 <_svfiprintf_r+0x1d2>
 8007894:	4b21      	ldr	r3, [pc, #132]	@ (800791c <_svfiprintf_r+0x1ec>)
 8007896:	bb1b      	cbnz	r3, 80078e0 <_svfiprintf_r+0x1b0>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	3307      	adds	r3, #7
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	3308      	adds	r3, #8
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a6:	4433      	add	r3, r6
 80078a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078aa:	e76a      	b.n	8007782 <_svfiprintf_r+0x52>
 80078ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b0:	460c      	mov	r4, r1
 80078b2:	2001      	movs	r0, #1
 80078b4:	e7a8      	b.n	8007808 <_svfiprintf_r+0xd8>
 80078b6:	2300      	movs	r3, #0
 80078b8:	3401      	adds	r4, #1
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	4619      	mov	r1, r3
 80078be:	f04f 0c0a 	mov.w	ip, #10
 80078c2:	4620      	mov	r0, r4
 80078c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c8:	3a30      	subs	r2, #48	@ 0x30
 80078ca:	2a09      	cmp	r2, #9
 80078cc:	d903      	bls.n	80078d6 <_svfiprintf_r+0x1a6>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c6      	beq.n	8007860 <_svfiprintf_r+0x130>
 80078d2:	9105      	str	r1, [sp, #20]
 80078d4:	e7c4      	b.n	8007860 <_svfiprintf_r+0x130>
 80078d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078da:	4604      	mov	r4, r0
 80078dc:	2301      	movs	r3, #1
 80078de:	e7f0      	b.n	80078c2 <_svfiprintf_r+0x192>
 80078e0:	ab03      	add	r3, sp, #12
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	462a      	mov	r2, r5
 80078e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007920 <_svfiprintf_r+0x1f0>)
 80078e8:	a904      	add	r1, sp, #16
 80078ea:	4638      	mov	r0, r7
 80078ec:	f3af 8000 	nop.w
 80078f0:	1c42      	adds	r2, r0, #1
 80078f2:	4606      	mov	r6, r0
 80078f4:	d1d6      	bne.n	80078a4 <_svfiprintf_r+0x174>
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	065b      	lsls	r3, r3, #25
 80078fa:	f53f af2d 	bmi.w	8007758 <_svfiprintf_r+0x28>
 80078fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007900:	e72c      	b.n	800775c <_svfiprintf_r+0x2c>
 8007902:	ab03      	add	r3, sp, #12
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	462a      	mov	r2, r5
 8007908:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <_svfiprintf_r+0x1f0>)
 800790a:	a904      	add	r1, sp, #16
 800790c:	4638      	mov	r0, r7
 800790e:	f000 f879 	bl	8007a04 <_printf_i>
 8007912:	e7ed      	b.n	80078f0 <_svfiprintf_r+0x1c0>
 8007914:	0800817d 	.word	0x0800817d
 8007918:	08008187 	.word	0x08008187
 800791c:	00000000 	.word	0x00000000
 8007920:	08007679 	.word	0x08007679
 8007924:	08008183 	.word	0x08008183

08007928 <_printf_common>:
 8007928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800792c:	4616      	mov	r6, r2
 800792e:	4698      	mov	r8, r3
 8007930:	688a      	ldr	r2, [r1, #8]
 8007932:	690b      	ldr	r3, [r1, #16]
 8007934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007938:	4293      	cmp	r3, r2
 800793a:	bfb8      	it	lt
 800793c:	4613      	movlt	r3, r2
 800793e:	6033      	str	r3, [r6, #0]
 8007940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007944:	4607      	mov	r7, r0
 8007946:	460c      	mov	r4, r1
 8007948:	b10a      	cbz	r2, 800794e <_printf_common+0x26>
 800794a:	3301      	adds	r3, #1
 800794c:	6033      	str	r3, [r6, #0]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	0699      	lsls	r1, r3, #26
 8007952:	bf42      	ittt	mi
 8007954:	6833      	ldrmi	r3, [r6, #0]
 8007956:	3302      	addmi	r3, #2
 8007958:	6033      	strmi	r3, [r6, #0]
 800795a:	6825      	ldr	r5, [r4, #0]
 800795c:	f015 0506 	ands.w	r5, r5, #6
 8007960:	d106      	bne.n	8007970 <_printf_common+0x48>
 8007962:	f104 0a19 	add.w	sl, r4, #25
 8007966:	68e3      	ldr	r3, [r4, #12]
 8007968:	6832      	ldr	r2, [r6, #0]
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	42ab      	cmp	r3, r5
 800796e:	dc26      	bgt.n	80079be <_printf_common+0x96>
 8007970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	3b00      	subs	r3, #0
 8007978:	bf18      	it	ne
 800797a:	2301      	movne	r3, #1
 800797c:	0692      	lsls	r2, r2, #26
 800797e:	d42b      	bmi.n	80079d8 <_printf_common+0xb0>
 8007980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007984:	4641      	mov	r1, r8
 8007986:	4638      	mov	r0, r7
 8007988:	47c8      	blx	r9
 800798a:	3001      	adds	r0, #1
 800798c:	d01e      	beq.n	80079cc <_printf_common+0xa4>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	6922      	ldr	r2, [r4, #16]
 8007992:	f003 0306 	and.w	r3, r3, #6
 8007996:	2b04      	cmp	r3, #4
 8007998:	bf02      	ittt	eq
 800799a:	68e5      	ldreq	r5, [r4, #12]
 800799c:	6833      	ldreq	r3, [r6, #0]
 800799e:	1aed      	subeq	r5, r5, r3
 80079a0:	68a3      	ldr	r3, [r4, #8]
 80079a2:	bf0c      	ite	eq
 80079a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a8:	2500      	movne	r5, #0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	bfc4      	itt	gt
 80079ae:	1a9b      	subgt	r3, r3, r2
 80079b0:	18ed      	addgt	r5, r5, r3
 80079b2:	2600      	movs	r6, #0
 80079b4:	341a      	adds	r4, #26
 80079b6:	42b5      	cmp	r5, r6
 80079b8:	d11a      	bne.n	80079f0 <_printf_common+0xc8>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e008      	b.n	80079d0 <_printf_common+0xa8>
 80079be:	2301      	movs	r3, #1
 80079c0:	4652      	mov	r2, sl
 80079c2:	4641      	mov	r1, r8
 80079c4:	4638      	mov	r0, r7
 80079c6:	47c8      	blx	r9
 80079c8:	3001      	adds	r0, #1
 80079ca:	d103      	bne.n	80079d4 <_printf_common+0xac>
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	3501      	adds	r5, #1
 80079d6:	e7c6      	b.n	8007966 <_printf_common+0x3e>
 80079d8:	18e1      	adds	r1, r4, r3
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	2030      	movs	r0, #48	@ 0x30
 80079de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079e2:	4422      	add	r2, r4
 80079e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079ec:	3302      	adds	r3, #2
 80079ee:	e7c7      	b.n	8007980 <_printf_common+0x58>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4622      	mov	r2, r4
 80079f4:	4641      	mov	r1, r8
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c8      	blx	r9
 80079fa:	3001      	adds	r0, #1
 80079fc:	d0e6      	beq.n	80079cc <_printf_common+0xa4>
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7d9      	b.n	80079b6 <_printf_common+0x8e>
	...

08007a04 <_printf_i>:
 8007a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	7e0f      	ldrb	r7, [r1, #24]
 8007a0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a0c:	2f78      	cmp	r7, #120	@ 0x78
 8007a0e:	4691      	mov	r9, r2
 8007a10:	4680      	mov	r8, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	469a      	mov	sl, r3
 8007a16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a1a:	d807      	bhi.n	8007a2c <_printf_i+0x28>
 8007a1c:	2f62      	cmp	r7, #98	@ 0x62
 8007a1e:	d80a      	bhi.n	8007a36 <_printf_i+0x32>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	f000 80d1 	beq.w	8007bc8 <_printf_i+0x1c4>
 8007a26:	2f58      	cmp	r7, #88	@ 0x58
 8007a28:	f000 80b8 	beq.w	8007b9c <_printf_i+0x198>
 8007a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a34:	e03a      	b.n	8007aac <_printf_i+0xa8>
 8007a36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a3a:	2b15      	cmp	r3, #21
 8007a3c:	d8f6      	bhi.n	8007a2c <_printf_i+0x28>
 8007a3e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a44 <_printf_i+0x40>)
 8007a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007a2d 	.word	0x08007a2d
 8007a50:	08007a2d 	.word	0x08007a2d
 8007a54:	08007a2d 	.word	0x08007a2d
 8007a58:	08007a2d 	.word	0x08007a2d
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007a2d 	.word	0x08007a2d
 8007a64:	08007a2d 	.word	0x08007a2d
 8007a68:	08007a2d 	.word	0x08007a2d
 8007a6c:	08007a2d 	.word	0x08007a2d
 8007a70:	08007baf 	.word	0x08007baf
 8007a74:	08007adb 	.word	0x08007adb
 8007a78:	08007b69 	.word	0x08007b69
 8007a7c:	08007a2d 	.word	0x08007a2d
 8007a80:	08007a2d 	.word	0x08007a2d
 8007a84:	08007bd1 	.word	0x08007bd1
 8007a88:	08007a2d 	.word	0x08007a2d
 8007a8c:	08007adb 	.word	0x08007adb
 8007a90:	08007a2d 	.word	0x08007a2d
 8007a94:	08007a2d 	.word	0x08007a2d
 8007a98:	08007b71 	.word	0x08007b71
 8007a9c:	6833      	ldr	r3, [r6, #0]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6032      	str	r2, [r6, #0]
 8007aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007aac:	2301      	movs	r3, #1
 8007aae:	e09c      	b.n	8007bea <_printf_i+0x1e6>
 8007ab0:	6833      	ldr	r3, [r6, #0]
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	6031      	str	r1, [r6, #0]
 8007ab8:	0606      	lsls	r6, r0, #24
 8007aba:	d501      	bpl.n	8007ac0 <_printf_i+0xbc>
 8007abc:	681d      	ldr	r5, [r3, #0]
 8007abe:	e003      	b.n	8007ac8 <_printf_i+0xc4>
 8007ac0:	0645      	lsls	r5, r0, #25
 8007ac2:	d5fb      	bpl.n	8007abc <_printf_i+0xb8>
 8007ac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	da03      	bge.n	8007ad4 <_printf_i+0xd0>
 8007acc:	232d      	movs	r3, #45	@ 0x2d
 8007ace:	426d      	negs	r5, r5
 8007ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad4:	4858      	ldr	r0, [pc, #352]	@ (8007c38 <_printf_i+0x234>)
 8007ad6:	230a      	movs	r3, #10
 8007ad8:	e011      	b.n	8007afe <_printf_i+0xfa>
 8007ada:	6821      	ldr	r1, [r4, #0]
 8007adc:	6833      	ldr	r3, [r6, #0]
 8007ade:	0608      	lsls	r0, r1, #24
 8007ae0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ae4:	d402      	bmi.n	8007aec <_printf_i+0xe8>
 8007ae6:	0649      	lsls	r1, r1, #25
 8007ae8:	bf48      	it	mi
 8007aea:	b2ad      	uxthmi	r5, r5
 8007aec:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aee:	4852      	ldr	r0, [pc, #328]	@ (8007c38 <_printf_i+0x234>)
 8007af0:	6033      	str	r3, [r6, #0]
 8007af2:	bf14      	ite	ne
 8007af4:	230a      	movne	r3, #10
 8007af6:	2308      	moveq	r3, #8
 8007af8:	2100      	movs	r1, #0
 8007afa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007afe:	6866      	ldr	r6, [r4, #4]
 8007b00:	60a6      	str	r6, [r4, #8]
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	db05      	blt.n	8007b12 <_printf_i+0x10e>
 8007b06:	6821      	ldr	r1, [r4, #0]
 8007b08:	432e      	orrs	r6, r5
 8007b0a:	f021 0104 	bic.w	r1, r1, #4
 8007b0e:	6021      	str	r1, [r4, #0]
 8007b10:	d04b      	beq.n	8007baa <_printf_i+0x1a6>
 8007b12:	4616      	mov	r6, r2
 8007b14:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b18:	fb03 5711 	mls	r7, r3, r1, r5
 8007b1c:	5dc7      	ldrb	r7, [r0, r7]
 8007b1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b22:	462f      	mov	r7, r5
 8007b24:	42bb      	cmp	r3, r7
 8007b26:	460d      	mov	r5, r1
 8007b28:	d9f4      	bls.n	8007b14 <_printf_i+0x110>
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d10b      	bne.n	8007b46 <_printf_i+0x142>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	07df      	lsls	r7, r3, #31
 8007b32:	d508      	bpl.n	8007b46 <_printf_i+0x142>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	6861      	ldr	r1, [r4, #4]
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	bfde      	ittt	le
 8007b3c:	2330      	movle	r3, #48	@ 0x30
 8007b3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b46:	1b92      	subs	r2, r2, r6
 8007b48:	6122      	str	r2, [r4, #16]
 8007b4a:	f8cd a000 	str.w	sl, [sp]
 8007b4e:	464b      	mov	r3, r9
 8007b50:	aa03      	add	r2, sp, #12
 8007b52:	4621      	mov	r1, r4
 8007b54:	4640      	mov	r0, r8
 8007b56:	f7ff fee7 	bl	8007928 <_printf_common>
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d14a      	bne.n	8007bf4 <_printf_i+0x1f0>
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b62:	b004      	add	sp, #16
 8007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	f043 0320 	orr.w	r3, r3, #32
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	4832      	ldr	r0, [pc, #200]	@ (8007c3c <_printf_i+0x238>)
 8007b72:	2778      	movs	r7, #120	@ 0x78
 8007b74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	6831      	ldr	r1, [r6, #0]
 8007b7c:	061f      	lsls	r7, r3, #24
 8007b7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b82:	d402      	bmi.n	8007b8a <_printf_i+0x186>
 8007b84:	065f      	lsls	r7, r3, #25
 8007b86:	bf48      	it	mi
 8007b88:	b2ad      	uxthmi	r5, r5
 8007b8a:	6031      	str	r1, [r6, #0]
 8007b8c:	07d9      	lsls	r1, r3, #31
 8007b8e:	bf44      	itt	mi
 8007b90:	f043 0320 	orrmi.w	r3, r3, #32
 8007b94:	6023      	strmi	r3, [r4, #0]
 8007b96:	b11d      	cbz	r5, 8007ba0 <_printf_i+0x19c>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	e7ad      	b.n	8007af8 <_printf_i+0xf4>
 8007b9c:	4826      	ldr	r0, [pc, #152]	@ (8007c38 <_printf_i+0x234>)
 8007b9e:	e7e9      	b.n	8007b74 <_printf_i+0x170>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	f023 0320 	bic.w	r3, r3, #32
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	e7f6      	b.n	8007b98 <_printf_i+0x194>
 8007baa:	4616      	mov	r6, r2
 8007bac:	e7bd      	b.n	8007b2a <_printf_i+0x126>
 8007bae:	6833      	ldr	r3, [r6, #0]
 8007bb0:	6825      	ldr	r5, [r4, #0]
 8007bb2:	6961      	ldr	r1, [r4, #20]
 8007bb4:	1d18      	adds	r0, r3, #4
 8007bb6:	6030      	str	r0, [r6, #0]
 8007bb8:	062e      	lsls	r6, r5, #24
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	d501      	bpl.n	8007bc2 <_printf_i+0x1be>
 8007bbe:	6019      	str	r1, [r3, #0]
 8007bc0:	e002      	b.n	8007bc8 <_printf_i+0x1c4>
 8007bc2:	0668      	lsls	r0, r5, #25
 8007bc4:	d5fb      	bpl.n	8007bbe <_printf_i+0x1ba>
 8007bc6:	8019      	strh	r1, [r3, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	4616      	mov	r6, r2
 8007bce:	e7bc      	b.n	8007b4a <_printf_i+0x146>
 8007bd0:	6833      	ldr	r3, [r6, #0]
 8007bd2:	1d1a      	adds	r2, r3, #4
 8007bd4:	6032      	str	r2, [r6, #0]
 8007bd6:	681e      	ldr	r6, [r3, #0]
 8007bd8:	6862      	ldr	r2, [r4, #4]
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7f8 fb07 	bl	80001f0 <memchr>
 8007be2:	b108      	cbz	r0, 8007be8 <_printf_i+0x1e4>
 8007be4:	1b80      	subs	r0, r0, r6
 8007be6:	6060      	str	r0, [r4, #4]
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	2300      	movs	r3, #0
 8007bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf2:	e7aa      	b.n	8007b4a <_printf_i+0x146>
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	47d0      	blx	sl
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d0ad      	beq.n	8007b5e <_printf_i+0x15a>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	079b      	lsls	r3, r3, #30
 8007c06:	d413      	bmi.n	8007c30 <_printf_i+0x22c>
 8007c08:	68e0      	ldr	r0, [r4, #12]
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	4298      	cmp	r0, r3
 8007c0e:	bfb8      	it	lt
 8007c10:	4618      	movlt	r0, r3
 8007c12:	e7a6      	b.n	8007b62 <_printf_i+0x15e>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4632      	mov	r2, r6
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	47d0      	blx	sl
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d09d      	beq.n	8007b5e <_printf_i+0x15a>
 8007c22:	3501      	adds	r5, #1
 8007c24:	68e3      	ldr	r3, [r4, #12]
 8007c26:	9903      	ldr	r1, [sp, #12]
 8007c28:	1a5b      	subs	r3, r3, r1
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	dcf2      	bgt.n	8007c14 <_printf_i+0x210>
 8007c2e:	e7eb      	b.n	8007c08 <_printf_i+0x204>
 8007c30:	2500      	movs	r5, #0
 8007c32:	f104 0619 	add.w	r6, r4, #25
 8007c36:	e7f5      	b.n	8007c24 <_printf_i+0x220>
 8007c38:	0800818e 	.word	0x0800818e
 8007c3c:	0800819f 	.word	0x0800819f

08007c40 <memmove>:
 8007c40:	4288      	cmp	r0, r1
 8007c42:	b510      	push	{r4, lr}
 8007c44:	eb01 0402 	add.w	r4, r1, r2
 8007c48:	d902      	bls.n	8007c50 <memmove+0x10>
 8007c4a:	4284      	cmp	r4, r0
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	d807      	bhi.n	8007c60 <memmove+0x20>
 8007c50:	1e43      	subs	r3, r0, #1
 8007c52:	42a1      	cmp	r1, r4
 8007c54:	d008      	beq.n	8007c68 <memmove+0x28>
 8007c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c5e:	e7f8      	b.n	8007c52 <memmove+0x12>
 8007c60:	4402      	add	r2, r0
 8007c62:	4601      	mov	r1, r0
 8007c64:	428a      	cmp	r2, r1
 8007c66:	d100      	bne.n	8007c6a <memmove+0x2a>
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c72:	e7f7      	b.n	8007c64 <memmove+0x24>

08007c74 <_sbrk_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d06      	ldr	r5, [pc, #24]	@ (8007c90 <_sbrk_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	f7fb fa46 	bl	8003110 <_sbrk>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_sbrk_r+0x1a>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_sbrk_r+0x1a>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	2000057c 	.word	0x2000057c

08007c94 <_realloc_r>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	4607      	mov	r7, r0
 8007c9a:	4614      	mov	r4, r2
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	b921      	cbnz	r1, 8007caa <_realloc_r+0x16>
 8007ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	f7ff bc5b 	b.w	8007560 <_malloc_r>
 8007caa:	b92a      	cbnz	r2, 8007cb8 <_realloc_r+0x24>
 8007cac:	f7ff fbec 	bl	8007488 <_free_r>
 8007cb0:	4625      	mov	r5, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	f000 f81a 	bl	8007cf0 <_malloc_usable_size_r>
 8007cbc:	4284      	cmp	r4, r0
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	d802      	bhi.n	8007cc8 <_realloc_r+0x34>
 8007cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cc6:	d8f4      	bhi.n	8007cb2 <_realloc_r+0x1e>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f7ff fc48 	bl	8007560 <_malloc_r>
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	b908      	cbnz	r0, 8007cd8 <_realloc_r+0x44>
 8007cd4:	4645      	mov	r5, r8
 8007cd6:	e7ec      	b.n	8007cb2 <_realloc_r+0x1e>
 8007cd8:	42b4      	cmp	r4, r6
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	bf28      	it	cs
 8007ce0:	4632      	movcs	r2, r6
 8007ce2:	f7ff fbc3 	bl	800746c <memcpy>
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7ff fbcd 	bl	8007488 <_free_r>
 8007cee:	e7f1      	b.n	8007cd4 <_realloc_r+0x40>

08007cf0 <_malloc_usable_size_r>:
 8007cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf4:	1f18      	subs	r0, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfbc      	itt	lt
 8007cfa:	580b      	ldrlt	r3, [r1, r0]
 8007cfc:	18c0      	addlt	r0, r0, r3
 8007cfe:	4770      	bx	lr

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
